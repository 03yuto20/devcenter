{
    "docs": [
        {
            "location": "/", 
            "text": "In short Bitrise is a \nContinuous Integration\n\nand \nDelivery\n (CI/CD) Platform as a Service (PaaS)\nwith a main focus on mobile app development (\niOS\n, \nAndroid\n, \nXamarin\n, ...).\n\n\nAutomate the testing and deployment of your apps with just a few clicks.\n\n\nWhen you trigger a build a Virtual Machine is assigned to host\nyour build and your defined Workflow (series of build Steps) will be executed, step by step.\n\n\nA \nWorkflow\n consists of one or more build \nSteps\n (open source git repositories\nwhich can be executed with the \nopen source Bitrise CLI\n).\n\nYou can create and share your own build Steps too\n.\nYou are able to define more workflows for the very same app,\nand define \ntriggers\n to specify which workflow should be selected for\nwhich trigger.\n\n\nThe steps can do anything that can be implemented a command line scripts / programs:\nsend emails, \ntext messages\n,\npass values to each other, \ncreate Xcode archives\n,\ngather system information about the Virtual Machine\nrunning the build, notify other users (e.g. on Slack)\nor even \npublish to iTunes Connect\n, and many more.\nYou can read more at \nBuilds and Workflows\n.\n\n\nAfter a build is finished the Virtual Machine is destroyed and you can browse\nthe logs of every step that ran during the workflow.\nYou can read more at \nCode Security\n.\n\n\nOffline CLI\n\u2693\n\n\nTo run a Bitrise build on your machine, you can install our \nopen source runner\n\nand use the \nbitrise\n command to execute your workflows locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nFeel free to edit any page of this DevCenter and to send us a Pull Request!!\n\u2693\n\n\n\n\nEdit on GitHub / in your browser directly!\n\n\nYou can edit the pages on GitHub directly,\nyou don't even have to \ngit clone\n the repository.\nJust select the file on \nGitHub\n\nand click the \npencil/edit\n icon,\nwhich will open the GitHub editor for the file.\n\nExample for this page\n.\n\n\n\n\nIf you don't want to edit the page on GitHub,\nfeel free to \ncontact us\n,\nand we'll do the change for you!", 
            "title": "Bitrise DevCenter - What is Bitrise?"
        }, 
        {
            "location": "/#offline-cli", 
            "text": "To run a Bitrise build on your machine, you can install our  open source runner \nand use the  bitrise  command to execute your workflows locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for  any kind of automation  on your machine.", 
            "title": "Offline CLI"
        }, 
        {
            "location": "/#feel-free-to-edit-any-page-of-this-devcenter-and-to-send-us-a-pull-request", 
            "text": "Edit on GitHub / in your browser directly!  You can edit the pages on GitHub directly,\nyou don't even have to  git clone  the repository.\nJust select the file on  GitHub \nand click the  pencil/edit  icon,\nwhich will open the GitHub editor for the file. Example for this page .   If you don't want to edit the page on GitHub,\nfeel free to  contact us ,\nand we'll do the change for you!", 
            "title": "Feel free to edit any page of this DevCenter and to send us a Pull Request!!"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/", 
            "text": "Builds \n Workflows\n\u2693\n\n\nA \nbuild\n is the process specified by the app's \nworkflow\n, which is a collection of \nsteps\n.\nEvery step is an \nopen source\n repository which you can inspect, modify,\nand run with the \nopen source Bitrise CLI\n.\n\n\nThe app's build configuration can be specified as a \nyaml\n (\nbitrise.yml\n) config,\nwhich you can modify in \nbitrise.io\n's Workflow editor (on your app's Bitrise.io page click the \nWorkflows\n tab),\nor \nyaml editor\n directly.\n\n\nOn the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how workflows and steps are implemented on our \nengineering blog\n.\n\n\nWhen a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.\n\n\nThe build process\n\u2693\n\n\nThere are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of \ntriggers\n,\nthrough different stacks and preparation types to environment variables.\n\n\n\n\n\n\nTrigger builds by:\n\n\n\n\nclicking the \nBuild\n button on the application's page (manual build trigger)\n\n\nscheduling with a selected branch and frequency (runs when scheduled - you can find this option in the \nBuild\n popup)\n\n\nwebhook\n - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)\n\n\nour \nBuild Trigger API\n\n\n\n\n\n\n\n\nEnvironment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available \nStacks\n on your app's \nSettings\n tab,\n   in the \nStack Selector\n section.\n\n\n\n\n\n\nConcurrency:\n   Builds over your subscription plan's concurrency count will be marked as \non hold\n.\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always \npurchase additional concurrencies\n with the Pro plan\n   to increase the concurrent builds you can run at the same time.\n\n\n\n\n\n\nWorkflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.\n\n\n\n\n\n\nCleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and \nthe virtual machine gets destroyed\n,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "Builds & Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#builds-workflows", 
            "text": "A  build  is the process specified by the app's  workflow , which is a collection of  steps .\nEvery step is an  open source  repository which you can inspect, modify,\nand run with the  open source Bitrise CLI .  The app's build configuration can be specified as a  yaml  ( bitrise.yml ) config,\nwhich you can modify in  bitrise.io 's Workflow editor (on your app's Bitrise.io page click the  Workflows  tab),\nor  yaml editor  directly.  On the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how workflows and steps are implemented on our  engineering blog .  When a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.", 
            "title": "Builds &amp; Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#the-build-process", 
            "text": "There are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of  triggers ,\nthrough different stacks and preparation types to environment variables.    Trigger builds by:   clicking the  Build  button on the application's page (manual build trigger)  scheduling with a selected branch and frequency (runs when scheduled - you can find this option in the  Build  popup)  webhook  - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)  our  Build Trigger API     Environment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available  Stacks  on your app's  Settings  tab,\n   in the  Stack Selector  section.    Concurrency:\n   Builds over your subscription plan's concurrency count will be marked as  on hold .\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always  purchase additional concurrencies  with the Pro plan\n   to increase the concurrent builds you can run at the same time.    Workflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.    Cleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and  the virtual machine gets destroyed ,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "The build process"
        }, 
        {
            "location": "/getting-started/code-security/", 
            "text": "To guarantee the security of your builds we use \nvirtual machines\n for builds.\nEvery build runs in its own, clean virtual machine and we discard the whole virtual machine after the build finishes,\nerasing every file your build uses and every change you make during your build.\n\n\nThis is also true for the Linux/Android stacks, which use Docker containers to run the build.\nThe build itself still gets a full virtual machine where no other Docker container is started,\nonly the one used as the environment of the build. In short we only use Docker containers\nto manage the environment, not for build environment isolation - that's ensured by using\nfull virtual machines for every build.\n\n\nThis way your builds are always protected by changes made by others and from your previous builds,\nno one else can access your code and you can use a stable environment to define your build workflow (no state persists between builds).\n\n\nSource code\n\u2693\n\n\nWe don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.\n\n\nCode signing and other files\n\u2693\n\n\nThe files you upload in the Workflow Editor (\nCode Signing \n Files\n section of the editor)\nare stored on \nAmazon S3\n in a way that it's only accessible for the web servers.\n\n\nThe required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using \nAmazon S3 presigned URLs\n.\n\n\nPasswords\n\u2693\n\n\nPasswords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with \nbcrypt algorithm\n, using multiple stretches.", 
            "title": "Code Security"
        }, 
        {
            "location": "/getting-started/code-security/#source-code", 
            "text": "We don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.", 
            "title": "Source code"
        }, 
        {
            "location": "/getting-started/code-security/#code-signing-and-other-files", 
            "text": "The files you upload in the Workflow Editor ( Code Signing   Files  section of the editor)\nare stored on  Amazon S3  in a way that it's only accessible for the web servers.  The required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using  Amazon S3 presigned URLs .", 
            "title": "Code signing and other files"
        }, 
        {
            "location": "/getting-started/code-security/#passwords", 
            "text": "Passwords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with  bcrypt algorithm , using multiple stretches.", 
            "title": "Passwords"
        }, 
        {
            "location": "/infrastructure/virtual-machines/", 
            "text": "On Bitrise, we have \nOS X\n and \nLinux\n virtual machines hosted for your builds. You can select multiple stacks that holds different versions of these virtual machines. Read more about available stacks and stack prepare types in the \nAvailable Stacks docs\n.\n\n\nSecurity\n\u2693\n\n\nEvery build runs in its own virtual machine and the virtual machine is rolled back to a saved state, the base box state, after the build is finished. This way \nyour builds are always protected\n by changes made by others and by your previous builds and you can use a \nstable environment\n to define your build workflow, since \nno state persists between builds\n.\n\n\n\n\nPasswordless sudo\n\n\nThe user which is used for the builds is configured with \npasswordless sudo\n enabled, this way you are able to install all the extra things you need for your builds and for other automation.\n\n\n\n\nCustomization\n\u2693\n\n\nYou can find the \nOS X\n base box setup guide and automation scripts we use for building our OS X virtual machine base box in our \nOS X Box Bootstrap repository\n. This way you are able to build your own virtual machine based on the ones used on Bitrise to match ours.\n\n\nFor our \nLinux\n machines, check out the \nBitrise Base Docker Image's repository\n.\n\n\n\n\nSystem reports\n\n\nYou can always check our current configurations in the \nsystem reports folder of our main repository\n.\n\n\nThese reports have been generated by the scripts indicated in the first lines of the report itself.\n\n\n\n\nOpen Source Stacks\n\u2693\n\n\nThe repositories for our virtual machines are also the place for pull requests. If you'd like to have a tool pre-installed in our machines, feel free to add your changes and they will be included in the next release after merge.\n\n\nVirtual machine updates\n\u2693\n\n\nUpdates are always announced on our \nNews Blog\n and can be seen on \nyour Bitrise Dashboard\n. We will also send you a \nPlatform Updates\n email about significant changes, unless you disable this feature under your \naccount settings page\n.\n\n\nMinor updates\n\u2693\n\n\nAdditional patches might be applied during the week in case we detect an issue with the current virtual machine environments. These patches do not change any pre-installed tool's version, unless it's really necessary.\n\n\nXcode version support guideline\n\u2693\n\n\nWe have several setups available with different Xcode versions. The Xcode you have pre-installed in your dedicated VM is always the one specified in your app's Settings under the Stack selector menu. You are able to switch between Xcode versions with changing this setting. Read more about available stacks and stack prepare types in the \nAvailable Stacks docs\n.\n\n\nWhen a new major version of Xcode gets released we keep supporting the previous major version until the first significant patch version of Xcode is released.\n\n\nAs an example in case of Xcode major version 6: Xcode 6 is the major version and the first significant patch is Xcode 6.1. We kept the latest Xcode 5 installed on the Virtual Machines until Xcode 6.1 was released.\n\n\niOS Simulator version \n SDK support\n\u2693\n\n\nAll the iOS Simulator versions which can be installed through \nXcode -\n Preferences -\n Downloads\n are installed and available.\n\n\nxctool support\n\u2693\n\n\nxctool\n is pre-installed on the OS X VMs, through \nhomebrew\n. If you need to update it to be sure you have the latest version you can add a \nScript Step\n with the following content:\n\n\n#!/bin/bash\nbrew update \n brew upgrade xctool\n\n\n\n\nIf you need the latest \nxctool\n version compiled from source you can do it by adding a \nScript Step\n to your workflow, right before your first Xcode build, Analyze, Unit test or Archive step, with the following content:\n\n\n#!/bin/bash\nbrew update \n brew uninstall xctool \n brew install xctool --build-from-source", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#security", 
            "text": "Every build runs in its own virtual machine and the virtual machine is rolled back to a saved state, the base box state, after the build is finished. This way  your builds are always protected  by changes made by others and by your previous builds and you can use a  stable environment  to define your build workflow, since  no state persists between builds .   Passwordless sudo  The user which is used for the builds is configured with  passwordless sudo  enabled, this way you are able to install all the extra things you need for your builds and for other automation.", 
            "title": "Security"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#customization", 
            "text": "You can find the  OS X  base box setup guide and automation scripts we use for building our OS X virtual machine base box in our  OS X Box Bootstrap repository . This way you are able to build your own virtual machine based on the ones used on Bitrise to match ours.  For our  Linux  machines, check out the  Bitrise Base Docker Image's repository .   System reports  You can always check our current configurations in the  system reports folder of our main repository .  These reports have been generated by the scripts indicated in the first lines of the report itself.", 
            "title": "Customization"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#open-source-stacks", 
            "text": "The repositories for our virtual machines are also the place for pull requests. If you'd like to have a tool pre-installed in our machines, feel free to add your changes and they will be included in the next release after merge.", 
            "title": "Open Source Stacks"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#virtual-machine-updates", 
            "text": "Updates are always announced on our  News Blog  and can be seen on  your Bitrise Dashboard . We will also send you a  Platform Updates  email about significant changes, unless you disable this feature under your  account settings page .", 
            "title": "Virtual machine updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#minor-updates", 
            "text": "Additional patches might be applied during the week in case we detect an issue with the current virtual machine environments. These patches do not change any pre-installed tool's version, unless it's really necessary.", 
            "title": "Minor updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#xcode-version-support-guideline", 
            "text": "We have several setups available with different Xcode versions. The Xcode you have pre-installed in your dedicated VM is always the one specified in your app's Settings under the Stack selector menu. You are able to switch between Xcode versions with changing this setting. Read more about available stacks and stack prepare types in the  Available Stacks docs .  When a new major version of Xcode gets released we keep supporting the previous major version until the first significant patch version of Xcode is released.  As an example in case of Xcode major version 6: Xcode 6 is the major version and the first significant patch is Xcode 6.1. We kept the latest Xcode 5 installed on the Virtual Machines until Xcode 6.1 was released.", 
            "title": "Xcode version support guideline"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#ios-simulator-version-sdk-support", 
            "text": "All the iOS Simulator versions which can be installed through  Xcode -  Preferences -  Downloads  are installed and available.", 
            "title": "iOS Simulator version &amp; SDK support"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#xctool-support", 
            "text": "xctool  is pre-installed on the OS X VMs, through  homebrew . If you need to update it to be sure you have the latest version you can add a  Script Step  with the following content:  #!/bin/bash\nbrew update   brew upgrade xctool  If you need the latest  xctool  version compiled from source you can do it by adding a  Script Step  to your workflow, right before your first Xcode build, Analyze, Unit test or Archive step, with the following content:  #!/bin/bash\nbrew update   brew uninstall xctool   brew install xctool --build-from-source", 
            "title": "xctool support"
        }, 
        {
            "location": "/infrastructure/available-stacks/", 
            "text": "The Stack indicates the virtual machine version that we will use to run your build. After adding your application to Bitrise we will detect the best image, but you can simply change it to a different one on the \nSettings\n tab of your app.\n\n\n\n\nStack status types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExperimental\n\n\nInternal, expected to change, and eventually moved to \nPreview\n.\n\n\n\n\n\n\nPreview\n\n\nPublic, users with a related beta flag can access it. Might change or moved to \nBeta\n.\n\n\n\n\n\n\nBeta\n\n\nPublic beta, might change if there's a regression, otherwise will become \nStable\n\n\n\n\n\n\nStable\n\n\nGenerally available and expected to be supported for the foreseeable future.\n\n\n\n\n\n\nLTS\n\n\nSame as Stable, except it has a specific remove date and no changes will be made to the stack until the removal date (except only really crucial changes, which affect security for example).\n\n\n\n\n\n\n\n\nStack prepare types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPre-Booted\n\n\nIf a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an \nOn-Demand\n configuration.\n\n\n\n\n\n\nOn-Demand\n\n\nIf a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration when your build starts. This means that your build will be in \npreparing environment\n state while the related Virtual Machine is created \n booted. For an OS X configuration the boot process usually takes about 1-2 minutes - we're working on improving this. \nThe prepare time (of course) is not counted into the build time, it won't affect how long your build can run.\n\n\n\n\n\n\n\n\nWhat's preinstalled\n\u2693\n\n\nEvery time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself,\nor you want to add another tool / system check, feel free to send us a pull request!\n\n\nYou can find every available stack's System Report on GitHub: \nhttps://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "Available Stacks"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-status-types", 
            "text": "Type  Description      Experimental  Internal, expected to change, and eventually moved to  Preview .    Preview  Public, users with a related beta flag can access it. Might change or moved to  Beta .    Beta  Public beta, might change if there's a regression, otherwise will become  Stable    Stable  Generally available and expected to be supported for the foreseeable future.    LTS  Same as Stable, except it has a specific remove date and no changes will be made to the stack until the removal date (except only really crucial changes, which affect security for example).", 
            "title": "Stack status types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-prepare-types", 
            "text": "Type  Description      Pre-Booted  If a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an  On-Demand  configuration.    On-Demand  If a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration when your build starts. This means that your build will be in  preparing environment  state while the related Virtual Machine is created   booted. For an OS X configuration the boot process usually takes about 1-2 minutes - we're working on improving this.  The prepare time (of course) is not counted into the build time, it won't affect how long your build can run.", 
            "title": "Stack prepare types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#whats-preinstalled", 
            "text": "Every time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself,\nor you want to add another tool / system check, feel free to send us a pull request!  You can find every available stack's System Report on GitHub:  https://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "What's preinstalled"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/", 
            "text": "You are able to authenticate yourself with your GitHub user against Bitrise. It means some practical benefits, like logging in with one click and of course you won't have to authorize your GitHub account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsign up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page with pressing \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nGitHub\n for authenticating yourself with one of these services.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nAuthorize application\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with GitHub"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#sign-up", 
            "text": "Go to the Sign up page with pressing  Sign up!  on the landing page of  bitrise.io .   Select  GitHub  for authenticating yourself with one of these services.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.   If you press the  Authorize application  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/", 
            "text": "You are able to authenticate yourself with your Bitbucket user against Bitrise. It means some practical benefits, like logging in with one click and of course you won't have to authorize your Bitbucket account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsign up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page with pressing \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nBitbucket\n for authenticating yourself with one of these services.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nGrant access\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with Bitbucket"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#sign-up", 
            "text": "Go to the Sign up page with pressing  Sign up!  on the landing page of  bitrise.io .   Select  Bitbucket  for authenticating yourself with one of these services.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.   If you press the  Grant access  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/", 
            "text": "You can sign up to Bitrise in one step with your email address. You just have to pick a username and a password in addition.\n\n\n\n\nNote\n\n\nIf you would like to use your GitHub / Bitbucket account, please check out the following devcenter articles:\n\n\n\n\nSigning up with GitHub\n\n\nSigning up with Bitbucket\n\n\n\n\n\n\nSign up\n\u2693\n\n\n\n\nAfter you provided your credentials, press \nSign up\n.\n\n\nAfter successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!", 
            "title": "Signing up with email"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/#sign-up", 
            "text": "After you provided your credentials, press  Sign up .  After successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/trial-after-signing-up/", 
            "text": "After you created your user on Bitrise your account will start with a \n2 weeks of trial\n of our \nPro plan\n. This means that you can setup your application and start building it with all the benefits of the paying plan.\n\n\n\n\nTip\n\n\nRead more about \noptimizing your build times\n to help you fit into the 10 minute limit for free accounts.", 
            "title": "Trial after signing up"
        }, 
        {
            "location": "/adding-a-new-app/", 
            "text": "When adding your app to Bitrise, we will clone your repository to make sure we can access it. Besides cloning your repository we will run our \nproject scanner\n that detects all the supported apps and instantly configure your workflow with all the necessary steps to build and deploy your app.\n\n\n\n\nCurrently we are supporting the following projects out of the box\n\n\n\n\niOS\n\n\nAndroid\n\n\nXamarin\n\n\nFastlane\n\n\n\n\n\n\nTo add a new app to Bitrise go to your \ndashboard\n and press the \nAdd new app\n button.\n\n\n\n\nIn case this is the first application the dashboard will show you the quickstart guide instead of a list of you apps. There you can select to try out our sample to check how Bitrise works, without connecting any of your apps to the system. Or you can choose to add your own app right away.\n\n\nLet's check out how you can \nconnect a repository\n!", 
            "title": "Adding a new app"
        }, 
        {
            "location": "/adding-a-new-app/connecting-a-repository/", 
            "text": "After you've selected adding a new app, you will find yourself on the \nCreate app\n page. Check the \nadd a new app\n tutorial for instructions about getting to this page.\n\n\nBitrise will give you options to connect any kind of git repository to it. \nGitHub\n and \nBitbucket\n are supported out of the box. If you've already authorized Bitrise with your GitHub for example, you will see Bitrise automatically listing all your repositories, so you can just click on the one you'd like to connect.\n\n\n\n\nConnect any git repository to Bitrise\n\n\nYou can connect any private or public git repository to Bitrise. We will automatically create an SSH key that you can use to setup the connection with your provider.\n\n\n\n\n\n\nIf you haven't authorized Bitrise against the provider hosting your repository, it will ask for permission.\n\n\n\n\nIt will then list your repositories as above. If you'd like to connect git repository hosted by other than GitHub or Bitbucket, select the \nOther / Manual\n tab.\n\n\n\n\nYou will have to add the git url of the repository you would like to connect.\n\n\n\n\nUse SSH URLs for private repositories\n\n\nPlease note, that if you are connecting a private repository, Bitrise will try to clone it through SSH, so it's necessary to provide an SSH URL to your repository here.\n\n\n\n\nBitrise will add an SSH key to your repository at a later step. Read more about how to add SSH keys automatically, or manually at \nSSH keys\n.", 
            "title": "Connecting a repository"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/", 
            "text": "SSH keys serve the role of secure transfer between services. In the case of Bitrise, it will ask for your permission to be authorized at your git source provider, e.g. GitHub. Read more about how to \nauthorize Bitrise\n.\n\n\nThe reason behind the need for being authorized, is that Bitrise has to have a working SSH connection to your repository to be able to clone it. There are several ways to make it work. Automatically, by adding it manually, or by using your own key.\n\n\n\n\nUse SSH URLs everywhere\n\n\nMost services support SSH key based authentication \nonly\n for SSH URLs (ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs (ex: \nhttps://github.com/bitrise-io/bitrise.git\n)! This means, that \nevery private repository you want to use have to be addressed with the SSH URL\n. If you have direct private git repo references in your \nPodfile\n you'll have to use the SSH URL there as well! Same applies for \nsubmodules\n and every other private git repository URL you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\n\nAutomatic setup\n\u2693\n\n\nIn case of \nGitHub\n and \nBitbucket\n repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.\n\n\n\n\nAs the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.\n\n\nThe auto-add option will add the generated key as a read-only \ndeploy key\n to your repository, it's the best for your security.\n\n\nManual setup\n\u2693\n\n\nIf you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.\n\n\n\n\nA bot user\n\n\nThere's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories. \nAdd the SSH key you would like to use to the user and add the user to the projects\n. You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.\n\n\n\n\n\n\nWarning\n\n\nDo not\n add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.\n\n\n\n\nGitHub\n\u2693\n\n\n\n\nBitbucket\n\u2693\n\n\n\n\nGitLab\n\u2693\n\n\n\n\nUse your own key\n\u2693\n\n\nThis option can be used if you also have the private key of the given user. You just have to paste the private key and \nBitrise\n will be able to access the repositories.", 
            "title": "Setting up SSH keys"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#automatic-setup", 
            "text": "In case of  GitHub  and  Bitbucket  repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.   As the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.  The auto-add option will add the generated key as a read-only  deploy key  to your repository, it's the best for your security.", 
            "title": "Automatic setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#manual-setup", 
            "text": "If you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.   A bot user  There's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories.  Add the SSH key you would like to use to the user and add the user to the projects . You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.    Warning  Do not  add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.", 
            "title": "Manual setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#github", 
            "text": "", 
            "title": "GitHub"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#bitbucket", 
            "text": "", 
            "title": "Bitbucket"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#gitlab", 
            "text": "", 
            "title": "GitLab"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#use-your-own-key", 
            "text": "This option can be used if you also have the private key of the given user. You just have to paste the private key and  Bitrise  will be able to access the repositories.", 
            "title": "Use your own key"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/", 
            "text": "After \nSetting up the SSH key\n for\nyour project, Bitrise will download your code to make sure it can access the repository\nand will run an automatic repository scanner script to find the best initial configuration for your project.\nCurrently Bitrise will detect \niOS\n, \nAndroid\n, \nXamarin\n and \nfastlane\n projects out of the box.\n\n\nYou can configure other types of projects too, but that will require manual\nconfiguration.\n\n\nProject configuration with automatic repository scanner\n\u2693\n\n\nTo validate and automatically scan your project you only need to tell Bitrise\nthe default branch of your repository.\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the \nSSH key\n you set up.\n\n\nAfter successful validation Bitrise will scan your repository and give you a default workflow\n\n\nSkipping the scanner - full manual configuration\n\u2693\n\n\nIf for some reason you want to skip the scanner, you can choose\nthe \nConfigure manually without project scanning\n option,\nin the \nValidation setup\n section.\n\n\n\n\nBy choosing this option \nbitrise.io\n will only\nvalidate the access to the repository, but it won't run the scanner.\nInstead, it'll present you the manual configuration options\nin the \nProject build configuration\n section.", 
            "title": "Setting up configuration"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#project-configuration-with-automatic-repository-scanner", 
            "text": "To validate and automatically scan your project you only need to tell Bitrise\nthe default branch of your repository.\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the  SSH key  you set up.  After successful validation Bitrise will scan your repository and give you a default workflow", 
            "title": "Project configuration with automatic repository scanner"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#skipping-the-scanner-full-manual-configuration", 
            "text": "If for some reason you want to skip the scanner, you can choose\nthe  Configure manually without project scanning  option,\nin the  Validation setup  section.   By choosing this option  bitrise.io  will only\nvalidate the access to the repository, but it won't run the scanner.\nInstead, it'll present you the manual configuration options\nin the  Project build configuration  section.", 
            "title": "Skipping the scanner - full manual configuration"
        }, 
        {
            "location": "/tutorials/community-created/", 
            "text": "If you write a tutorial or blog post about Bitrise feel free to\n\nadd it to this list yourself\n\nor \ncontact us\n and we'll add it for you!\n\n\nEnglish\n\u2693\n\n\niOS\n\u2693\n\n\n\n\nLet's automate Swift builds with Bitrise\n\n\nThe Road to Bitrise\n - \nswitching from Jenkins\n\n\nBitrise and Carthage - a simple guide about how to use Carthage on Bitrise\n\n\n\n\nAndroid\n\u2693\n\n\n\n\nHow to automate Android build process on Bitrise CI (part 1)\n\n\nHow to automate Android build process on Bitrise CI (part 2)\n\n\n\n\nXamarin\n\u2693\n\n\n\n\njfarrell.net\n tutorial series\n\n\nWelcome to Bitrise\n\n\nGetting Started with Bitrise\n\n\nUnderstanding Workflows\n\n\n\n\n\n\nXamarin project setup on Bitrise.io\n - \nyoutube video\n\n\nXamarin Continuous Integration with Bitrise.io\n - \nXamarin project setup guide with Code Signing notes\n\n\n(Xamarin) Continuous Integration and Deployment with Bitrise\n - \ngetting started guide\n\n\nMotz Codes Live: Continuous Integration \n Deployment for Xamarin with Bitrise\n - \nyoutube video, detailed guide\n\n\n\n\nReact Native\n\u2693\n\n\n\n\nContinuous Integration for React Native Apps With Fastlane and Bitrise (iOS)\n\n\nSnowflake: React Native app Continuous Integration with Bitrise.io\n - \ndetailed setup guide with youtube videos\n\n\n\n\nCordova\n\u2693\n\n\n\n\nHow to build Cordova-based Android project on bitrise.io\n\n\n\n\nmacOS app\n\u2693\n\n\n\n\nContinuous happiness for Mac\n - \nbuild your Mac projects on Bitrise\n\n\n\n\nOther\n\u2693\n\n\n\n\nMobile Continuous Delivery With Bitrise | Benoit Pasquier\n - \nintro\n\n\nI was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.\n\n\nThe Trials of Mobile Automation at InVision\n - \nChatOps with Slack and Bitrise\n\n\nHow to send commit changes by email once CI build passes?\n\n\nContinuous integration made easy with Bitrise\n - \nintro to Step development\n\n\n\n\nJapanese\n\u2693\n\n\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nDetailed introduction guide\n\n\niOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy iOS apps to Deploygate\n\n\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy Android apps to Deploygate\n\n\nBITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n - \nSlideShare\n\n\nCircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f\n - \nMigrating a CircleCI configuration to Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2\n - \nNotes about using Bitrise for iOS Continuous Integration\n\n\n\u4ffa\u7684Bitrise\u6d3b\u7528\u8853\n\n\niOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nSlideShare\n\n\nBitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b\n - \nBitrise + fastlane, automate testing \n deployment (to Crashlytics) of iOS apps\n\n\n\n\nPersian\n\u2693\n\n\n\n\n\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise\n - \nVideo tutorial about CI/CD with Bitrise", 
            "title": "Community Created"
        }, 
        {
            "location": "/tutorials/community-created/#english", 
            "text": "", 
            "title": "English"
        }, 
        {
            "location": "/tutorials/community-created/#ios", 
            "text": "Let's automate Swift builds with Bitrise  The Road to Bitrise  -  switching from Jenkins  Bitrise and Carthage - a simple guide about how to use Carthage on Bitrise", 
            "title": "iOS"
        }, 
        {
            "location": "/tutorials/community-created/#android", 
            "text": "How to automate Android build process on Bitrise CI (part 1)  How to automate Android build process on Bitrise CI (part 2)", 
            "title": "Android"
        }, 
        {
            "location": "/tutorials/community-created/#xamarin", 
            "text": "jfarrell.net  tutorial series  Welcome to Bitrise  Getting Started with Bitrise  Understanding Workflows    Xamarin project setup on Bitrise.io  -  youtube video  Xamarin Continuous Integration with Bitrise.io  -  Xamarin project setup guide with Code Signing notes  (Xamarin) Continuous Integration and Deployment with Bitrise  -  getting started guide  Motz Codes Live: Continuous Integration   Deployment for Xamarin with Bitrise  -  youtube video, detailed guide", 
            "title": "Xamarin"
        }, 
        {
            "location": "/tutorials/community-created/#react-native", 
            "text": "Continuous Integration for React Native Apps With Fastlane and Bitrise (iOS)  Snowflake: React Native app Continuous Integration with Bitrise.io  -  detailed setup guide with youtube videos", 
            "title": "React Native"
        }, 
        {
            "location": "/tutorials/community-created/#cordova", 
            "text": "How to build Cordova-based Android project on bitrise.io", 
            "title": "Cordova"
        }, 
        {
            "location": "/tutorials/community-created/#macos-app", 
            "text": "Continuous happiness for Mac  -  build your Mac projects on Bitrise", 
            "title": "macOS app"
        }, 
        {
            "location": "/tutorials/community-created/#other", 
            "text": "Mobile Continuous Delivery With Bitrise | Benoit Pasquier  -  intro  I was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.  The Trials of Mobile Automation at InVision  -  ChatOps with Slack and Bitrise  How to send commit changes by email once CI build passes?  Continuous integration made easy with Bitrise  -  intro to Step development", 
            "title": "Other"
        }, 
        {
            "location": "/tutorials/community-created/#japanese", 
            "text": "iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f  -  Detailed introduction guide  iOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy iOS apps to Deploygate  Android\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy Android apps to Deploygate  BITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059  -  SlideShare  CircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f  -  Migrating a CircleCI configuration to Bitrise  iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2  -  Notes about using Bitrise for iOS Continuous Integration  \u4ffa\u7684Bitrise\u6d3b\u7528\u8853  iOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f  -  SlideShare  Bitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b  -  Bitrise + fastlane, automate testing   deployment (to Crashlytics) of iOS apps", 
            "title": "Japanese"
        }, 
        {
            "location": "/tutorials/community-created/#persian", 
            "text": "\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise  -  Video tutorial about CI/CD with Bitrise", 
            "title": "Persian"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/", 
            "text": "In general there are two options to create a signed apk with bitrise:\n\n\n\n\nThe first option is: \nspecify code sign configuration in your Gradle configuration\n\n\nThe second option is: let \nsign-apk step\n to sign/resign your unsigned/debug signed apk\n\n\n\n\n1. Specify code sign configuration in your project\n\u2693\n\n\nIn case of android project you can specify signing configs in Android Studio, or in your Gradle configuration\n:\n\n\n\n\n\n\nin project navigator select your project and \nOpen Module Settings\n\n\nfrom \nModules\n select your module to sign  \n\n\non \nSigning\n tab fill out the signing informations\n\n\n\n\nSigning config is stored in you app's \nbuild.gradle\n file and looks something like this:\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(\n/path/to/my/keystore.jks\n)\n            storePassword '***'\n        }\n    }\n...\n\n\n\n\nIn case of Xamarin android project with Xamarin Studio\n:\n\n\n\n\n\n\ndouble click on your android project to open the \nProject Options\n\n\nselect \nAndroid Package Signing\n in \nBuild\n group\n\n\nselect the \nConfiguration - Platform\n you want to use to create signed apk and check the \nSign the .APK file using the following keystore details.\n\n\nfill out the signing information\n\n\n\n\nHow to use the same keystore path locally and on bitrise?\n\u2693\n\n\nIn case of android project :\n \n\n\n\n\nYou can eliminate this problem by using \nenvironment variables\n in keystore path (\nstoreFile\n), and in the password and other configuration values. Let's say your keystore path is: \n$HOME/keystores/my_keystore.jks\n, then your \nbuild.gradle\n file would look something like this:\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n            storePassword '***'\n        }\n    }\n...\n\n\n\n\n\n\nYou can use System.getenv(\"ENV_KEY\") to access environment variables anywhere in the gradle config file.\n\n\n\n\nUsing environment variable as keyPassword and storePassword, your build.gradle file may looks like (\nthis examples uses the env vars you get when you upload your keystore to \nbitrise.io\n in the Workflow Editor, under the Code signing \n Files section\n):\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n)\n            keyPassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n)\n            storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n            storePassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n)\n        }\n    }\n...\n\n\n\n\nIn this case do not forget to define these environments on bitrise too. \n\n\nWorking with Xamarin Studio :\n \n\n\n\n\nYou \ncan NOT use environment variables\n in keystore path, the path has to be relative to the android project's folder or \nyou can use an\n absolute path. To use the same path on your local machine and bitrise, it might be a good idea to put your keystore into your repository \nbut don't forget to .gitignore it!\n\n\nUpload your keystore to bitrise:\n\u2693\n\n\n\n\nOpen your app on \nbitrise.io\n\n\nGo to \nWorkflow\n tab\n\n\nClick the \nMANAGE WORKFLOWS\n button\n\n\nOn the left side of Workflow editor, select \nCode signing \n Files\n\n\nScroll down to \nGeneric File Storage\n section and click on \n+ Add another File\n\n\nSelect file type\n: Android Keystore\n\n\nUpload your file and fill the required data\n\n\n\n\nBitrise will upload your file and assign an environment variable (\nBITRISEIO_ANDROID_KEYSTORE_URL\n) to the file's download url. A time limited, read only download URL will be set as the value of this Environment Variable for every build. You can use this URL to download the file during a build.\n\n\nDownload your keystore from Generic File Storage:\n\u2693\n\n\nThe easiest way to download your keystore (\nor any file you uploaded to generic file storage\n) is to use a \nfile-downloader\n step:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n    - destination: \n$HOME/keystores/my_keystore.jks\n #native android\n#    - destination: \n$BITRISE_SOURCE_DIR/keystores/my_keystore.jks\n #Xamarin android\n...\n\n\n\n\nAfter this step \nmy_keystore.jks\n will be available at \n$HOME/keystores/my_keystore.jks\n or \n$BITRISE_SOURCE_DIR/keystores/my_keystore.jks\n.\n\n\n2. Let sign-apk step to sign/resign your unsigned/debug signed apk\n\u2693\n\n\nAdvantage of this solution is that you \ndon't have to set code signing in your project\n.  \n\n\nDuring the archive no signing/only debug signing will be performed.\n\nYou should place the \nsign-apk\n step \nafter\n the step which generates your APK.\n\n\nTo use this step, you have to upload your keystore to bitrise (see: \nUpload your keystore to bitrise\n), but you do not have to download it (\nsign-apk\n step can work with remote file paths (URLs) too)\n\n\nWhen you upload your keystore to bitrise's Generic File Storage, it will export:\n\n\n\n\nthe Download URL in \nBITRISEIO_ANDROID_KEYSTORE_URL\n\n\nthe Keystore password in \nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n\n\nthe Keystore alias in \nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n\n\nthe Private key password in \nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n\n\n\n\nFortunately these environment variables are the default input values to \nsign-apk step\n, so you just have to add the step, no further configuration is required (in most cases).\n\nIf you want to configure the sign command, check the \njarsigner_options\n input's description.", 
            "title": "Create signed APK on bitrise.io"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/#1-specify-code-sign-configuration-in-your-project", 
            "text": "In case of android project you can specify signing configs in Android Studio, or in your Gradle configuration :    in project navigator select your project and  Open Module Settings  from  Modules  select your module to sign    on  Signing  tab fill out the signing informations   Signing config is stored in you app's  build.gradle  file and looks something like this:  android {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file( /path/to/my/keystore.jks )\n            storePassword '***'\n        }\n    }\n...  In case of Xamarin android project with Xamarin Studio :    double click on your android project to open the  Project Options  select  Android Package Signing  in  Build  group  select the  Configuration - Platform  you want to use to create signed apk and check the  Sign the .APK file using the following keystore details.  fill out the signing information", 
            "title": "1. Specify code sign configuration in your project"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/#how-to-use-the-same-keystore-path-locally-and-on-bitrise", 
            "text": "In case of android project :     You can eliminate this problem by using  environment variables  in keystore path ( storeFile ), and in the password and other configuration values. Let's say your keystore path is:  $HOME/keystores/my_keystore.jks , then your  build.gradle  file would look something like this:  android {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n            storePassword '***'\n        }\n    }\n...   You can use System.getenv(\"ENV_KEY\") to access environment variables anywhere in the gradle config file.   Using environment variable as keyPassword and storePassword, your build.gradle file may looks like ( this examples uses the env vars you get when you upload your keystore to  bitrise.io  in the Workflow Editor, under the Code signing   Files section ):  android {\n    signingConfigs {\n        release {\n            keyAlias System.getenv( BITRISEIO_ANDROID_KEYSTORE_ALIAS )\n            keyPassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD )\n            storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n            storePassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PASSWORD )\n        }\n    }\n...  In this case do not forget to define these environments on bitrise too.   Working with Xamarin Studio :     You  can NOT use environment variables  in keystore path, the path has to be relative to the android project's folder or  you can use an  absolute path. To use the same path on your local machine and bitrise, it might be a good idea to put your keystore into your repository  but don't forget to .gitignore it!", 
            "title": "How to use the same keystore path locally and on bitrise?"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/#upload-your-keystore-to-bitrise", 
            "text": "Open your app on  bitrise.io  Go to  Workflow  tab  Click the  MANAGE WORKFLOWS  button  On the left side of Workflow editor, select  Code signing   Files  Scroll down to  Generic File Storage  section and click on  + Add another File  Select file type : Android Keystore  Upload your file and fill the required data   Bitrise will upload your file and assign an environment variable ( BITRISEIO_ANDROID_KEYSTORE_URL ) to the file's download url. A time limited, read only download URL will be set as the value of this Environment Variable for every build. You can use this URL to download the file during a build.", 
            "title": "Upload your keystore to bitrise:"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/#download-your-keystore-from-generic-file-storage", 
            "text": "The easiest way to download your keystore ( or any file you uploaded to generic file storage ) is to use a  file-downloader  step:  ...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n    - destination:  $HOME/keystores/my_keystore.jks  #native android\n#    - destination:  $BITRISE_SOURCE_DIR/keystores/my_keystore.jks  #Xamarin android\n...  After this step  my_keystore.jks  will be available at  $HOME/keystores/my_keystore.jks  or  $BITRISE_SOURCE_DIR/keystores/my_keystore.jks .", 
            "title": "Download your keystore from Generic File Storage:"
        }, 
        {
            "location": "/tutorials/create-signed-apk-on-bitrise/#2-let-sign-apk-step-to-signresign-your-unsigneddebug-signed-apk", 
            "text": "Advantage of this solution is that you  don't have to set code signing in your project .    During the archive no signing/only debug signing will be performed. \nYou should place the  sign-apk  step  after  the step which generates your APK.  To use this step, you have to upload your keystore to bitrise (see:  Upload your keystore to bitrise ), but you do not have to download it ( sign-apk  step can work with remote file paths (URLs) too)  When you upload your keystore to bitrise's Generic File Storage, it will export:   the Download URL in  BITRISEIO_ANDROID_KEYSTORE_URL  the Keystore password in  BITRISEIO_ANDROID_KEYSTORE_PASSWORD  the Keystore alias in  BITRISEIO_ANDROID_KEYSTORE_ALIAS  the Private key password in  BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD   Fortunately these environment variables are the default input values to  sign-apk step , so you just have to add the step, no further configuration is required (in most cases). \nIf you want to configure the sign command, check the  jarsigner_options  input's description.", 
            "title": "2. Let sign-apk step to sign/resign your unsigned/debug signed apk"
        }, 
        {
            "location": "/tutorials/vpn-configuration/", 
            "text": "Do you require a VPN connection for your build, to be able to connect to your server,\neither to \ngit clone\n your repository or to access a private API?\nIf yes, then this tutorial is for you!\n\n\nTechnical infos\n\u2693\n\n\nConnecting to a VPN, in short, works like this:\n\n\n\n\nthe build starts\n\n\nyou install \n configure the VPN components you need\n\n\nyou start the VPN\n\n\nyou proceed with the build\n\n\n\n\nObviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN \nbefore\n the \nGit Clone\n step, but in general\nyou can configure \n connect to the VPN anywhere in your Workflow, \nbefore\n you'd use the\nconnection.\n\n\nYou can choose other VPN tools, not just the one shown here (\nstrongswan\n),\nthis is just one example setup which works on \nbitrise.io\n.\n\n\nOne important note\n: when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to \nnot to restart / abort\n existing SSH sessions!\nThe \nbitrise.io\n workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!\n\n\nExample\n\u2693\n\n\nThis is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a \nScript Step\n in your \nbitrise\n\nconfiguration (\nbitrise.yml\n / Workflow).\n\n\n#!/usr/bin/env bash\nset -e\n\necho \nWAN IP\n\n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase \n$OSTYPE\n in\n  linux*)\n    echo \nConfiguring for Linux\n\n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo \nInstalling Strongswan...\n\n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo \nConfiguring for Mac OS\n\n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo \nInstalling OpenSSL...\n\n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo \nInstalling Strongswan...\n\n    brew install strongswan\n\n    ;;\n  *)\n    echo \nUnknown operative system: $OSTYPE, exiting\n\n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval \necho \\\n$(cat $1)\\\n\n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, se examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho \nDownloading ipsec.conf...\n\nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho \nDownloading ipsec.secrets...\n\nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho \nDownloading server.crt...\n\nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho \nRendering config templates\n\nrender_template $temp_dir/ipsec.conf.template \n $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template \n $temp_dir/ipsec.secrets\n\necho \nInstalling configuration\n\n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho \nStarting ipsec\n\nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho \nStatus ipsec\n\nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho \nInitiating VPN connection\n\nsudo ipsec up myconnection\n\nsleep 1\n\ncase \n$OSTYPE\n in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo \nRestarting ipsec\n\n    sudo ipsec restart\n\n    sleep 1\n\n    echo \nInitiating VPN connection\n\n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo \nDisabling IPv6 and forcing DNS settings\n\n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off \n$main_interface\n\n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers \n$main_interface\n 10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Configure and connect to your VPN"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#technical-infos", 
            "text": "Connecting to a VPN, in short, works like this:   the build starts  you install   configure the VPN components you need  you start the VPN  you proceed with the build   Obviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN  before  the  Git Clone  step, but in general\nyou can configure   connect to the VPN anywhere in your Workflow,  before  you'd use the\nconnection.  You can choose other VPN tools, not just the one shown here ( strongswan ),\nthis is just one example setup which works on  bitrise.io .  One important note : when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to  not to restart / abort  existing SSH sessions!\nThe  bitrise.io  workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!", 
            "title": "Technical infos"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#example", 
            "text": "This is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a  Script Step  in your  bitrise \nconfiguration ( bitrise.yml  / Workflow).  #!/usr/bin/env bash\nset -e\n\necho  WAN IP \n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase  $OSTYPE  in\n  linux*)\n    echo  Configuring for Linux \n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo  Installing Strongswan... \n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo  Configuring for Mac OS \n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo  Installing OpenSSL... \n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo  Installing Strongswan... \n    brew install strongswan\n\n    ;;\n  *)\n    echo  Unknown operative system: $OSTYPE, exiting \n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval  echo \\ $(cat $1)\\ \n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, se examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho  Downloading ipsec.conf... \nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho  Downloading ipsec.secrets... \nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho  Downloading server.crt... \nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho  Rendering config templates \nrender_template $temp_dir/ipsec.conf.template   $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template   $temp_dir/ipsec.secrets\n\necho  Installing configuration \n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho  Starting ipsec \nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho  Status ipsec \nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho  Initiating VPN connection \nsudo ipsec up myconnection\n\nsleep 1\n\ncase  $OSTYPE  in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo  Restarting ipsec \n    sudo ipsec restart\n\n    sleep 1\n\n    echo  Initiating VPN connection \n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo  Disabling IPv6 and forcing DNS settings \n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off  $main_interface \n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers  $main_interface  10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Example"
        }, 
        {
            "location": "/team-management/", 
            "text": "Now that you have set up your app on Bitrise we can start inviting team members! You can select multiple roles for the new members, like: \nadmin\n, \ndeveloper\n, and \nqa/tester\n.\nDifferent roles have different permissions that you can read more about below.\n\n\nTo invite a team member head to the \nTeam tab\n on your application's page. You can invite any user by their username or by their email address. If they are not registered on Bitrise we will send out an invitation email for them.\n\n\n\n\nInviting team members\n\n\nYou need to be the app's \nowner\n or an \nadmin\n to be able to add new team members to your app.\n\n\n\n\n\n\nCheck out the different roles and permissions below:\n\n\nAdmin\n\u2693\n\n\n\n\nDeveloper\n\u2693\n\n\n\n\nTester / QA\n\u2693", 
            "title": "Adding a new team member"
        }, 
        {
            "location": "/team-management/#admin", 
            "text": "", 
            "title": "Admin"
        }, 
        {
            "location": "/team-management/#developer", 
            "text": "", 
            "title": "Developer"
        }, 
        {
            "location": "/team-management/#tester-qa", 
            "text": "", 
            "title": "Tester / QA"
        }, 
        {
            "location": "/team-management/changing-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an application on \nBitrise\n to another user. This can be done in a few seconds by following these quick steps:\n\n\n\n\nLogin with the \ncurrent owner\n of the app\n\n\nOpen the app's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the app is in the team or add her/him if you need to\n\n\nClick the \nTransfer ownership\n button next to the current owner's username\n\n\n\n\nFor transferring the ownership, select the new user to transfer the app to:\n\n\n\n\nYou can use the toggle to stay the connected service user. This is important if you are the admin of the given repository on \nGitHub\n, or \nBitbucket\n and the app needs your credentials to work on Bitrise.", 
            "title": "Changing the owner of an app"
        }, 
        {
            "location": "/webhooks/", 
            "text": "Most source code hosting service provides a feature to register webhooks. A webhook is basically an URL which will be called on specified events.\n\n\nTo have Bitrise automatically start a build every time you push code into your repository you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nSetting up webhooks automatically\n\u2693\n\n\nIf you select \nGitHub\n or \nBitbucket\n as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.\n\n\nSetting up webhooks by hand\n\u2693\n\n\nYou can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's \nCode\n tab.\n\n\n\n\n\n\nCustom webhook support\n\n\nOur webhook processor is Open Sourced\n. If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.\n\n\nYou can also run your own webhook provider behind your own firewall if required.\n\n\n\n\nYou can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:\n\n\n\n\nAdding a GitHub webhook\n\n\nAdding a Bitbucket webhook\n\n\nAdding webhooks for Gitlab\n\n\nAdding webhooks for Visual Studio Online / Visual Studio Team Services\n\n\nAdding webhooks for Slack\n\n\nAdding webhooks for Gogs\n\n\n\n\nTroubleshooting\n\u2693\n\n\nFirst of all, if you registered your app on \nbitrise.io\n a while ago (especially\nif before 2016 Sept.) you should check the webhook URL registered on the git hosting service you use (GitHub, Bitbucket, ...).\n\n\nNew trigger feature\n (like \nskip ci\n or tag based triggering)\n\nare only available if you use the new \nhooks.bitrise.io\n webhook URL!\n\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint for webhooks,\nbut every new project registered should now get the new \nhooks.bitrise.io\n webhook URL automatically.\n\n\nIf your webhook would still be a \nbitrise.io/hooks\n URL, please replace it with the new \nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nDebugging - what happens with webhooks related to un-mapped branches\n\n\nYou can't limit Webhooks by branch in most of the source code hosting services,\nso \nbitrise.io\n will still receive a webhook call for every code push of other branches,\nbut it won't start a build unless it finds a matching filter in the \ntrigger_map\n,\nwhich specifies a \nworkflow\n to be selected for the build.\n\nThis is also true if you use the \nBuild Trigger API\n directly.\n\n\nYou can see all the ignored calls on your \nActivity page on bitrise.io\n.\nThis means that if you think a given event should have started a build but it did not,\nyou should check your \nActivity\n page (or your source code hosting service's Webhook history - more info a bit below)\nto find out why it did not trigger a build.\n\n\nAn ignored build call entry in the Activity list looks like:\n\n\nBuild trigger failed: trigger-pattern (push_branch:) (pr_source_branch:prtest/t1) (pr_target_branch:develop) did not match any defined workflow in trigger_map\nPROJECT-NAME - Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n\n\n\n\nBitrise also returns the reason to the source code hosting service\n (the service which sent the webhook, e.g. GitHub) too,\nso if your service has a webhook history (e.g. GitHub, Bitbucket, ...)\nyou can see the reason why a given webhook did not trigger a build there too!\n\n\nSimply open the webhook history on your source code hosting service,\nand check the response Bitrise returned. It will be something like:\n\n\n{\nsuccess_responses\n:[],\nfailed_responses\n:[{\nstatus\n:\nerror\n,\nmessage\n:\ntrigger pattern did not match any defined mapping: Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n,\nservice\n:\nbitrise\n,\nslug\n:\n...\n,\nbuild_slug\n:\n,\nbuild_number\n:0,\nbuild_url\n:\n,\ntriggered_workflow\n:\n}]}\n\n\n\n\nThese detailed responses are only generated if you use\nthe new \nhooks.bitrise.io\n webhook URL!\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint\nfor webhooks, but every new project registered should now get the new\n\nhooks.bitrise.io\n webhook URL automatically. If your webhook\nwould still be a \nbitrise.io/hook\n URL, please replace it with the new\n\nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nLocal debugging\n\u2693\n\n\nYou can also test which workflow will be selected for a trigger\nusing our \nopen source, Bitrise CLI\n.\n\n\nTo simulate a code push, you can run:\n\n\nbitrise trigger-check --push-branch master\n\n\n\n\nTo simulate a Pull Request, you can run:\n\n\nbitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master\n\n\n\n\nTo simulate a tag push, you can run:\n\n\nbitrise trigger-check --tag 1.0.0\n\n\n\n\nFor more information and options run:\n\n\nbitrise trigger-check --help", 
            "title": "Adding webhooks"
        }, 
        {
            "location": "/webhooks/#setting-up-webhooks-automatically", 
            "text": "If you select  GitHub  or  Bitbucket  as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.", 
            "title": "Setting up webhooks automatically"
        }, 
        {
            "location": "/webhooks/#setting-up-webhooks-by-hand", 
            "text": "You can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's  Code  tab.    Custom webhook support  Our webhook processor is Open Sourced . If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.  You can also run your own webhook provider behind your own firewall if required.   You can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:   Adding a GitHub webhook  Adding a Bitbucket webhook  Adding webhooks for Gitlab  Adding webhooks for Visual Studio Online / Visual Studio Team Services  Adding webhooks for Slack  Adding webhooks for Gogs", 
            "title": "Setting up webhooks by hand"
        }, 
        {
            "location": "/webhooks/#troubleshooting", 
            "text": "First of all, if you registered your app on  bitrise.io  a while ago (especially\nif before 2016 Sept.) you should check the webhook URL registered on the git hosting service you use (GitHub, Bitbucket, ...).  New trigger feature  (like  skip ci  or tag based triggering) are only available if you use the new  hooks.bitrise.io  webhook URL!  Initially we had a non open source  bitrise.io/hooks  endpoint for webhooks,\nbut every new project registered should now get the new  hooks.bitrise.io  webhook URL automatically.  If your webhook would still be a  bitrise.io/hooks  URL, please replace it with the new  hooks.bitrise.io/  URL - you can find this on the  Code  tab of your app!  Debugging - what happens with webhooks related to un-mapped branches  You can't limit Webhooks by branch in most of the source code hosting services,\nso  bitrise.io  will still receive a webhook call for every code push of other branches,\nbut it won't start a build unless it finds a matching filter in the  trigger_map ,\nwhich specifies a  workflow  to be selected for the build. This is also true if you use the  Build Trigger API  directly.  You can see all the ignored calls on your  Activity page on bitrise.io .\nThis means that if you think a given event should have started a build but it did not,\nyou should check your  Activity  page (or your source code hosting service's Webhook history - more info a bit below)\nto find out why it did not trigger a build.  An ignored build call entry in the Activity list looks like:  Build trigger failed: trigger-pattern (push_branch:) (pr_source_branch:prtest/t1) (pr_target_branch:develop) did not match any defined workflow in trigger_map\nPROJECT-NAME - Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found  Bitrise also returns the reason to the source code hosting service  (the service which sent the webhook, e.g. GitHub) too,\nso if your service has a webhook history (e.g. GitHub, Bitbucket, ...)\nyou can see the reason why a given webhook did not trigger a build there too!  Simply open the webhook history on your source code hosting service,\nand check the response Bitrise returned. It will be something like:  { success_responses :[], failed_responses :[{ status : error , message : trigger pattern did not match any defined mapping: Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found , service : bitrise , slug : ... , build_slug : , build_number :0, build_url : , triggered_workflow : }]}  These detailed responses are only generated if you use\nthe new  hooks.bitrise.io  webhook URL! \nInitially we had a non open source  bitrise.io/hooks  endpoint\nfor webhooks, but every new project registered should now get the new hooks.bitrise.io  webhook URL automatically. If your webhook\nwould still be a  bitrise.io/hook  URL, please replace it with the new hooks.bitrise.io/  URL - you can find this on the  Code  tab of your app!", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/webhooks/#local-debugging", 
            "text": "You can also test which workflow will be selected for a trigger\nusing our  open source, Bitrise CLI .  To simulate a code push, you can run:  bitrise trigger-check --push-branch master  To simulate a Pull Request, you can run:  bitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master  To simulate a tag push, you can run:  bitrise trigger-check --tag 1.0.0  For more information and options run:  bitrise trigger-check --help", 
            "title": "Local debugging"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nGet the webhook URL for GitHub\n\u2693\n\n\nNavigate to the \nCode\n tab of your app's page and select \nGitHub\n from the dropdown at the webhooks section.\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\nSetup webhook on GitHub\n\u2693\n\n\nNavigate to your GitHub repository and select \nSettings\n.\n\n\n\n\nSelect \nAdd webhook\n under Webhooks \n Services.\n\n\n\n\nPaste the GitHub Webhook URL from Bitrise to the Payload URL.\n\n\n\n\nSelect \nLet me select individual events\n.\n\n\n\n\nSelect \nPull request\n and \nPush\n. After you are ready press the \nAdd webhook\n button and you are ready to roll!", 
            "title": "Adding a GitHub webhook"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#get-the-webhook-url-for-github", 
            "text": "Navigate to the  Code  tab of your app's page and select  GitHub  from the dropdown at the webhooks section.   Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#setup-webhook-on-github", 
            "text": "Navigate to your GitHub repository and select  Settings .   Select  Add webhook  under Webhooks   Services.   Paste the GitHub Webhook URL from Bitrise to the Payload URL.   Select  Let me select individual events .   Select  Pull request  and  Push . After you are ready press the  Add webhook  button and you are ready to roll!", 
            "title": "Setup webhook on GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you\ncan set up a webhook at your code hosting service which will automatically\ntrigger a build on Bitrise with the code you push to your repository.\n\n\n\n\nIf you have a Bitbucket webhook already set up for your app ...\n\n\nIf you have a Bitbucket webhook already set up for your app,\nsimply skip to the \ntriggers\n section\nand edit your current one according to the screenshot there.\n\n\n\n\nGet the webhook URL for Bitbucket\n\u2693\n\n\nNavigate to the \nCode\n tab of your app's page and select \nBitbucket\n from the dropdown at the webhooks section.\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\nSetup webhook on Bitbucket\n\u2693\n\n\nNavigate to your Bitbucket repository and select \nSettings\n.\n\n\n\n\nSelect \nWebhooks\n from the left.\n\n\n\n\nSelect \nAdd Webhook\n\n\n\n\nPaste the Bitbucket Webhook URL from Bitrise to the \nURL\n and add a \nTitle\n.\n\n\n\n\nChoose from triggers\n\u2693\n\n\nSelect \nChoose from a full list of triggers\n.\n\n\n\n\nSelect Repository \nPush\n and Pull Request \nCreated\n and \nUpdated\n triggers. After you are ready press the \nSave\n button and you are ready to roll!", 
            "title": "Adding a Bitbucket webhook"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#get-the-webhook-url-for-bitbucket", 
            "text": "Navigate to the  Code  tab of your app's page and select  Bitbucket  from the dropdown at the webhooks section.   Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#setup-webhook-on-bitbucket", 
            "text": "Navigate to your Bitbucket repository and select  Settings .   Select  Webhooks  from the left.   Select  Add Webhook   Paste the Bitbucket Webhook URL from Bitrise to the  URL  and add a  Title .", 
            "title": "Setup webhook on Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#choose-from-triggers", 
            "text": "Select  Choose from a full list of triggers .   Select Repository  Push  and Pull Request  Created  and  Updated  triggers. After you are ready press the  Save  button and you are ready to roll!", 
            "title": "Choose from triggers"
        }, 
        {
            "location": "/webhooks/trigger-map/", 
            "text": "Now that you have a \nwebhook registered\n,\nthe next step is to define when to build what.\n\n\nWhen you register a webhook for an event or for multiple events (e.g. for \nCode Push\n and\nfor \nPull Request\n events), your source code hosting service will call the webhook\nevery time the related event happens.\n\n\nOn \nbitrise.io\n these webhooks calls are called \"triggers\",\nand can be mapped to different \nWorkflows\n, or not mapped at all.\nIf you don't map a trigger to any workflow, then \nbitrise.io\n won't\nstart a build. If you map it to a workflow, then a build will be started\nwith the selected workflow.\n\n\nIn the following examples we'll use a very simple Bitrise configuration (\nbitrise.yml\n),\nwhich does nothing else just prints the selected workflow's ID:\n\n\n---\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  pull_request_source_branch: \n*\n\n  workflow: primary\n- tag: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - script:\n        inputs:\n        - content: |-\n            #!/bin/bash\n            echo \n$BITRISE_TRIGGERED_WORKFLOW_ID\n\n\n\n\n\n\nWhat is bitrise.yml?\n\n\nbitrise.yml\n is the representation of your app's configuration.\nIn the workflow editor you can edit it in a visual way through the web UI,\nbut you can always switch to \nbitrise.yml\n mode (left side of the workflow editor)\nto see the configuration in a YAML format, as well as you can edit the configuration\nin YAML format too. It's up to you which solution you prefer, the visual web UI\nor the YAML (\nbitrise.yml\n) representation, and you can switch between the two\nany time (the changes you do in the web UI will be reflected in the \nbitrise.yml\n,\nand vice versa).\n\n\n\n\nThe above example \nbitrise.yml\n will select the \nprimary\n branch for every Code Push (\npush_branch: \"*\"\n), Tag Push (\ntag: \"*\"\n)\nand for every Pull Request (\npull_request_target_branch: \"*\"\n \n \npull_request_source_branch: \"*\"\n).\n\n\nIf you remove the pull request item\n from the \ntrigger_map\n list, then\nno pull request will trigger a build anymore. Example:\n\n\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis configuration will start a build with the \nprimary\n workflow\nfor every code push, but for nothing else (e.g. not for pull requests).\n\n\n\"Components\" of the \ntrigger_map\n\u2693\n\n\nA \ntrigger_map\n is a \nlist of filters\n, and the \nworkflow\n the given\nfilters should select in case of a matching trigger.\n\n\nEvery filter item has to include at least one condition!\n\n\nThis means that you can't have an item which only specifies the \nworkflow\n,\nat least one filter (\npush_branch\n / \npull_request_source_branch\n / \npull_request_target_branch\n / \ntag\n)\nhas to be specified!\n\n\nThe available filters:\n\u2693\n\n\n\n\npush_branch\n : A filter which is matched against Code Push events' \"branch\" parameter\n\n\npull_request_source_branch\n : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)\n\n\npull_request_target_branch\n : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be \nmerged into\n\n\ntag\n : A filter which is matched against Tag Push events' \"tag\" (name) parameter\n\n\npattern\n : \nDEPRECATED\n - this filter was used for both code push and pull request events,\n  in combination with \nis_pull_request_allowed\n. This filter is now deprecated,\n  as the new filters allow better control over event mapping.\n\n\n\n\nIf you define multiple filters in a single item then \nall filters have to match\n\nin order to select that item's workflow.\nFor example:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\n\nwill only select the \nprimary\n workflow if the pull request's source branch is \ndevelop\n \nAND\n\nthe target branch is \nmaster\n.\n\n\nIf you want to specify filters which should be treated separately, e.g. to\nselect \nprimary\n for pull requests where the source is \ndevelop\n, as well as select\nfor the ones which target \nmaster\n:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  workflow: primary\n- pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\n\nOne last note, which is hopefully not surprising after the previous example:\nyou can't mix and match \npush_branch\n, \ntag\n and the \npull_request_..\n filters \nin the same item\n.\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event \nat the same time\n.\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events.\n\nA single webhook event will never be Code Push, Tag Push and Pull Request at the same time\n,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).\n\n\nHow to build only a single branch\n\u2693\n\n\nIf you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a \ntrigger_map\n which does not map anything else\nto any workflow, only the branch you want to build.\n\n\nE.g. if you only want to build the \nmaster\n branch on code push:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n\n\n\n\nOr if you only want to build \nfeature/\n branches:\n\n\ntrigger_map:\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nOr the two together:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nThis configuration will start a build for every code push which happens on\neither \nmaster\n or on a \nfeature/\n branch, and will use the same workflow for\nboth (\nprimary\n).\n\n\nIf you want to use a different workflow for your \nmaster\n branch, then\nall you have to do is to change the \nworkflow:\n for that trigger map item:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nThis configuration will use the workflow \ndeploy\n for every code push on \nmaster\n,\nand the workflow \nprimary\n for every code push on \nfeature/\n branches,\nand \nwill not start a build for anything else\n.\n\n\nA very simple, two-workflow CI/CD setup\n\u2693\n\n\nA base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.\n\n\nIf you have a workflow \nprimary\n for doing the integration tests,\nand \ndeploy\n to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the \nmaster\n branch, which should instead use the \ndeploy\n workflow:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\n\n\nOrder of the items matter!\n\n\nWhen \nbitrise\n receives a webhook event (any kind) it'll match it against\nthe app's \ntrigger_map\n. \nThe first item it matches will select the workflow for the build!\n\n\n\n\nThis means that if you'd specify the \npush_branch: master\n \nafter\n the\n\npush_branch: \"*\"\n item, \nmaster\n would never be selected as every code push\nevent would match \npush_branch: \"*\"\n first!\n\n\nDon't start two builds for pull requests from the same repository\n\u2693\n\n\nWhen you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository),\n\nthe source code hosting service will send two webhooks\n,\none for the code push and one for the pull request!\n\n\nAn important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code \nafter\n you merged the pull request.\n\n\nWhether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with \nbitrise\n\nyou can decide whether you want it or not.\n\n\n\n\nPull Request merge is actually a Code Push!\n\n\nSource code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from \nfeature/a\n into \nmaster\n,\nwhen you merge the PR it will generate a code push to \nmaster\n.\n\n\n\n\nAn example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying \nmaster\n:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nor if you don't want to start a build for pull requests, only for code push events:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n\n\n\n\nThree workflows: test, deploy to staging and deploy to production\n\u2693\n\n\nAnother common CI/CD pattern is to have three workflows:\n\n\n\n\nA Test workflow, which will run for every pull request, every code push on \nfeature/\n branches etc.,\n  to test whether the test can be integrated into a release (branch)\n\n\nA Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:\n\n\nIn case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.\n\n\nIn case of an Android app this can be a deploy to Google Play to a \"beta\" track.\n\n\nIn case of a server code this can be a deploy to e.g. a staging Heroku server.\n\n\n\n\n\n\nA Production deployment workflow, to deploy the app/code into production. Examples:\n\n\nIn case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".\n\n\nIn case of an Android app this can be a deploy to Google Play as a public update of the app.\n\n\nIn case of a server code this can be a deploy to e.g. the production Heroku server.\n\n\n\n\n\n\n\n\nSo, we have three workflows (\nprimary\n (test), \ndeploy-to-staging\n and \ndeploy-to-production\n)\nand we'll specify three triggers, to select the right workflow for the right trigger.\n\n\nThere are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:\n\n\nUsing Tags to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a new tag (with the format \nv*.*.*\n, e.g. \nv1.0.0\n) is pushed\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \nmaster\n branch (e.g. a pull request is merged into the \nmaster\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nUsing a Branch to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a code push happens on the \nmaster\n branch (e.g. a git flow release branch merged into \nmaster\n)\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \ndevelop\n branch (e.g. a pull request is merged into the \ndevelop\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nHow to build only pull requests\n\u2693\n\n\nIf all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:\n\n\ntrigger_map:\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis will select the \nprimary\n workflow for every and any pull request,\nand will not start a build for anything else.\n\n\nIf you'd only want to build pull requests which are targeted to\nbe merged into \nmaster\n, the configuration would look like this:\n\n\ntrigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "Control what to build when, with the Trigger Map"
        }, 
        {
            "location": "/webhooks/trigger-map/#components-of-the-trigger_map", 
            "text": "A  trigger_map  is a  list of filters , and the  workflow  the given\nfilters should select in case of a matching trigger.  Every filter item has to include at least one condition!  This means that you can't have an item which only specifies the  workflow ,\nat least one filter ( push_branch  /  pull_request_source_branch  /  pull_request_target_branch  /  tag )\nhas to be specified!", 
            "title": "\"Components\" of the trigger_map"
        }, 
        {
            "location": "/webhooks/trigger-map/#the-available-filters", 
            "text": "push_branch  : A filter which is matched against Code Push events' \"branch\" parameter  pull_request_source_branch  : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)  pull_request_target_branch  : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be  merged into  tag  : A filter which is matched against Tag Push events' \"tag\" (name) parameter  pattern  :  DEPRECATED  - this filter was used for both code push and pull request events,\n  in combination with  is_pull_request_allowed . This filter is now deprecated,\n  as the new filters allow better control over event mapping.   If you define multiple filters in a single item then  all filters have to match \nin order to select that item's workflow.\nFor example:  trigger_map:\n- pull_request_target_branch:  master \n  pull_request_source_branch:  develop \n  workflow: primary  will only select the  primary  workflow if the pull request's source branch is  develop   AND \nthe target branch is  master .  If you want to specify filters which should be treated separately, e.g. to\nselect  primary  for pull requests where the source is  develop , as well as select\nfor the ones which target  master :  trigger_map:\n- pull_request_target_branch:  master \n  workflow: primary\n- pull_request_source_branch:  develop \n  workflow: primary  One last note, which is hopefully not surprising after the previous example:\nyou can't mix and match  push_branch ,  tag  and the  pull_request_..  filters  in the same item .\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event  at the same time .\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events. A single webhook event will never be Code Push, Tag Push and Pull Request at the same time ,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).", 
            "title": "The available filters:"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-a-single-branch", 
            "text": "If you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a  trigger_map  which does not map anything else\nto any workflow, only the branch you want to build.  E.g. if you only want to build the  master  branch on code push:  trigger_map:\n- push_branch: master\n  workflow: primary  Or if you only want to build  feature/  branches:  trigger_map:\n- push_branch: feature/*\n  workflow: primary  Or the two together:  trigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary  This configuration will start a build for every code push which happens on\neither  master  or on a  feature/  branch, and will use the same workflow for\nboth ( primary ).  If you want to use a different workflow for your  master  branch, then\nall you have to do is to change the  workflow:  for that trigger map item:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary  This configuration will use the workflow  deploy  for every code push on  master ,\nand the workflow  primary  for every code push on  feature/  branches,\nand  will not start a build for anything else .", 
            "title": "How to build only a single branch"
        }, 
        {
            "location": "/webhooks/trigger-map/#a-very-simple-two-workflow-cicd-setup", 
            "text": "A base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.  If you have a workflow  primary  for doing the integration tests,\nand  deploy  to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the  master  branch, which should instead use the  deploy  workflow:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary   Order of the items matter!  When  bitrise  receives a webhook event (any kind) it'll match it against\nthe app's  trigger_map .  The first item it matches will select the workflow for the build!   This means that if you'd specify the  push_branch: master   after  the push_branch: \"*\"  item,  master  would never be selected as every code push\nevent would match  push_branch: \"*\"  first!", 
            "title": "A very simple, two-workflow CI/CD setup"
        }, 
        {
            "location": "/webhooks/trigger-map/#dont-start-two-builds-for-pull-requests-from-the-same-repository", 
            "text": "When you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository), the source code hosting service will send two webhooks ,\none for the code push and one for the pull request!  An important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code  after  you merged the pull request.  Whether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with  bitrise \nyou can decide whether you want it or not.   Pull Request merge is actually a Code Push!  Source code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from  feature/a  into  master ,\nwhen you merge the PR it will generate a code push to  master .   An example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying  master :  trigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch:  * \n  workflow: primary  or if you don't want to start a build for pull requests, only for code push events:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary", 
            "title": "Don't start two builds for pull requests from the same repository"
        }, 
        {
            "location": "/webhooks/trigger-map/#three-workflows-test-deploy-to-staging-and-deploy-to-production", 
            "text": "Another common CI/CD pattern is to have three workflows:   A Test workflow, which will run for every pull request, every code push on  feature/  branches etc.,\n  to test whether the test can be integrated into a release (branch)  A Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:  In case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.  In case of an Android app this can be a deploy to Google Play to a \"beta\" track.  In case of a server code this can be a deploy to e.g. a staging Heroku server.    A Production deployment workflow, to deploy the app/code into production. Examples:  In case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".  In case of an Android app this can be a deploy to Google Play as a public update of the app.  In case of a server code this can be a deploy to e.g. the production Heroku server.     So, we have three workflows ( primary  (test),  deploy-to-staging  and  deploy-to-production )\nand we'll specify three triggers, to select the right workflow for the right trigger.  There are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:", 
            "title": "Three workflows: test, deploy to staging and deploy to production"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-tags-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a new tag (with the format  v*.*.* , e.g.  v1.0.0 ) is pushed  with the  deploy-to-staging  workflow if a code push happens on the  master  branch (e.g. a pull request is merged into the  master  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using Tags to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-a-branch-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a code push happens on the  master  branch (e.g. a git flow release branch merged into  master )  with the  deploy-to-staging  workflow if a code push happens on the  develop  branch (e.g. a pull request is merged into the  develop  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using a Branch to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-pull-requests", 
            "text": "If all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:  trigger_map:\n- pull_request_target_branch:  * \n  workflow: primary  This will select the  primary  workflow for every and any pull request,\nand will not start a build for anything else.  If you'd only want to build pull requests which are targeted to\nbe merged into  master , the configuration would look like this:  trigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "How to build only pull requests"
        }, 
        {
            "location": "/caching/about-caching/", 
            "text": "The caching will tar all the cached directories and dependencies and store them securely in Amazon S3.\nNote that if you store files which are downloaded from a CDN / cloud storage you might not see any improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as downloading\nit from its canonical CDN / cloud storage location.\nHowever Bitrise Caching still might help if you have reliability issues with the resource's, or dependency's canonical download location.\n\n\n\n\nCache Expiring\n\n\nThe Build Cache related to a \nspecific branch\n expires / is auto-deleted after 7 days,\n\nif there's no new build on that branch in the meantime\n.\n\n\nThis means that \nif you do builds on a specific branch every day\n (more frequently than a week),\n\nit'll never expire / will never be deleted automatically\n,\nbut if you don't start a build on that specific branch for more than 7 days then the related cache\nwill be removed, and your next build will run like the first time, when there was no cache for that branch yet.\n\n\n\n\nSetup\n\u2693\n\n\nAll you need to get started is adding two Steps to your Workflow:\n\n\n\n\nOne for downloading the previous cache (if any): \nCache:Pull\n\n\nOne for checking the state of the cache and uploading it if required: \nCache:Push\n\n\n\n\nYou should add the \nCache:Pull\n (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the \nGit Clone\n and the \nCocoaPods\n install steps.\nIf you intend to cache your \n./Pods\n directory you should not pull the cache before the \nGit Clone\n,\nbecause \nGit Clone\n will create the base directory for \n./Pods\n.\nBefore the \nGit Clone\n step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.\n\n\nThe \nCache:Push\n step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of \nCocoaPods\n you should put the \nCache:Push\n step anywhere after the \nCocoaPods\n install,\nbecause that's the step which generates, or updates the directory (\n./Pods\n) which is cached.\n\n\nDownloading and deleting caches\n\u2693\n\n\nYou can download and delete caches, for every branch which generated a cache,\non the \nSettings\n tab of the app, under the \nManage Build Caches\n section.\n\n\n\n\nNote\n\n\nYou can see the size of the caches and the last time a given cache was used in the popup.\n\n\n\n\nTechnical notes\n\u2693\n\n\nThe Build Cache feature is split into two parts, the \nBuild Cache API\n and the \nSteps\n.\n\n\nThe \nBuild Cache API\n is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.\n\n\nThe \nSteps\n are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.\n\n\n\n\nAdvanced notes\n\n\n\n\nYou can create your own Cache steps\n\n\nYou can create and use your own Build Cache server and API\n\n\n\n\n\n\nThe cache might or might not be available\n\u2693\n\n\nYou should write your code in a way that it won't fail if the cache can't be accessed.\n\n\nThe cache is downloaded over the internet\n\u2693\n\n\nWhich means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.\n\n\nOne important note: storing a dependency in Bitrise Build Cache might help if you have \nreliability\n\nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited (\nexample: PhantomJS\n).\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but \nit definitely can improve the reliability\n.\n\n\nThe cache is stored as one archive file\n\u2693\n\n\nSo if you have multiple paths you want to cache and any\nof the paths gets updated \nit'll update the whole cache archive\n,\nincluding all the paths you cache.\n\n\nIf a build runs on a new branch the first time it'll get the main/default Branch's cache.\n\u2693\n\n\nThe first build on a non primary/default branch, to speed up things,\ncan access (read-only) the primary branch's cache.\n\n\nIf it pushes back to the cache that won't modify the main/default Branch's cache\n,\nthat will be stored for the new branch directly,\nand the next time a build runs on this branch it'll use that cache.", 
            "title": "About caching"
        }, 
        {
            "location": "/caching/about-caching/#setup", 
            "text": "All you need to get started is adding two Steps to your Workflow:   One for downloading the previous cache (if any):  Cache:Pull  One for checking the state of the cache and uploading it if required:  Cache:Push   You should add the  Cache:Pull  (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the  Git Clone  and the  CocoaPods  install steps.\nIf you intend to cache your  ./Pods  directory you should not pull the cache before the  Git Clone ,\nbecause  Git Clone  will create the base directory for  ./Pods .\nBefore the  Git Clone  step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.  The  Cache:Push  step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of  CocoaPods  you should put the  Cache:Push  step anywhere after the  CocoaPods  install,\nbecause that's the step which generates, or updates the directory ( ./Pods ) which is cached.", 
            "title": "Setup"
        }, 
        {
            "location": "/caching/about-caching/#downloading-and-deleting-caches", 
            "text": "You can download and delete caches, for every branch which generated a cache,\non the  Settings  tab of the app, under the  Manage Build Caches  section.   Note  You can see the size of the caches and the last time a given cache was used in the popup.", 
            "title": "Downloading and deleting caches"
        }, 
        {
            "location": "/caching/about-caching/#technical-notes", 
            "text": "The Build Cache feature is split into two parts, the  Build Cache API  and the  Steps .  The  Build Cache API  is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.  The  Steps  are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.   Advanced notes   You can create your own Cache steps  You can create and use your own Build Cache server and API", 
            "title": "Technical notes"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-might-or-might-not-be-available", 
            "text": "You should write your code in a way that it won't fail if the cache can't be accessed.", 
            "title": "The cache might or might not be available"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-downloaded-over-the-internet", 
            "text": "Which means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.  One important note: storing a dependency in Bitrise Build Cache might help if you have  reliability \nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited ( example: PhantomJS ).\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but  it definitely can improve the reliability .", 
            "title": "The cache is downloaded over the internet"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-stored-as-one-archive-file", 
            "text": "So if you have multiple paths you want to cache and any\nof the paths gets updated  it'll update the whole cache archive ,\nincluding all the paths you cache.", 
            "title": "The cache is stored as one archive file"
        }, 
        {
            "location": "/caching/about-caching/#if-a-build-runs-on-a-new-branch-the-first-time-itll-get-the-maindefault-branchs-cache", 
            "text": "The first build on a non primary/default branch, to speed up things,\ncan access (read-only) the primary branch's cache.  If it pushes back to the cache that won't modify the main/default Branch's cache ,\nthat will be stored for the new branch directly,\nand the next time a build runs on this branch it'll use that cache.", 
            "title": "If a build runs on a new branch the first time it'll get the main/default Branch's cache."
        }, 
        {
            "location": "/caching/caching-cocoapods/", 
            "text": "Put the \nCache:Pull\n step after the \nGit Clone\n, and before the \nCocoaPods Install\n step\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and specify the following paths for caching (Cache Paths inputs):\n   \n./Pods -\n ./Podfile.lock\n\n\n\n\n\n\nNote\n\n\nIf your Podfile and Pods directory is not in the root of your repository then you should specify the\npath relative to the repository root, e.g. \n./subdir/Pods -\n ./subdir/Podfile.lock\n\n\n\n\nThat's all. This specification (using the \n-\n separator) means that the \n./Pods\n directory\nshould be cached, and that the cache should be updated/uploaded only if the \n./Podfile.lock\n file changes.\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - cocoapods-install:\n  - certificate-and-profile-installer: {}\n  - xcode-archive:\n  - cache-push:\n      inputs:\n      - cache_paths: \n./Pods -\n ./Podfile.lock", 
            "title": "Caching Cocoapods"
        }, 
        {
            "location": "/caching/caching-cocoapods/#example-workflow", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - cocoapods-install:\n  - certificate-and-profile-installer: {}\n  - xcode-archive:\n  - cache-push:\n      inputs:\n      - cache_paths:  ./Pods -  ./Podfile.lock", 
            "title": "Example workflow"
        }, 
        {
            "location": "/caching/caching-gradle/", 
            "text": "Put the \nCache:Pull\n step after the Git Clone\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and specify the following paths for caching (Cache Paths input):\n   \n$HOME/.gradle\n./.gradle\n\n\nSelect the \nCache:Push\n step and specify the following paths for update-check ignore (Ignore Paths from change check input):\n   \n$HOME/.gradle/caches/\n.lock\n./.gradle/\n.lock\n./.gradle/*.bin\n\n\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file: \n$BITRISE_PROJECT_PATH\n\n      - gradle_task: \n$GRADLE_TASK\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Caching Gradle"
        }, 
        {
            "location": "/caching/caching-gradle/#example-workflow", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file:  $BITRISE_PROJECT_PATH \n      - gradle_task:  $GRADLE_TASK \n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Example workflow"
        }, 
        {
            "location": "/caching/caching-maven/", 
            "text": "Your build process may use \nApache Maven\n repositories to fetch dependencies at runtime.\nFor example \nRoboelectric\n testing framework uses \nSonatype\n\nto fetch target platforms and shadow-classes during a test run (unless explicitly \nconfigured\n).\nResolved dependencies are cached in a local Maven repository at \n$HOME/.m2\n\n\nTo cache it follow these steps:   \n\n\n\n\nPut the \nCache:Pull\n step after the Git Clone\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and add the following paths for caching (Cache Paths input):\n   \n$HOME/.m2\n\n\n\n\nExample workflow (gradle and maven caches)\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file: \n$BITRISE_PROJECT_PATH\n\n      - gradle_task: \n$GRADLE_TASK\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n          $HOME/.m2\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Caching Maven"
        }, 
        {
            "location": "/caching/caching-maven/#example-workflow-gradle-and-maven-caches", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file:  $BITRISE_PROJECT_PATH \n      - gradle_task:  $GRADLE_TASK \n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n          $HOME/.m2\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Example workflow (gradle and maven caches)"
        }, 
        {
            "location": "/caching/caching-ruby-gems/", 
            "text": "Technical note\n\u2693\n\n\nRuby GEMs are installed into a single directory by default. You can get the location of this directory\nwith \ngem environment gemdir\n. If you want to change this directory you can set the \n$GEM_HOME\n environment variable,\nthis will be picked up by \ngem install\n and it'll install the GEMs to the location specified by \n$GEM_HOME\n.\n\n\nNow that you know where the Ruby GEMs are stored you can easily cache the directory. As in any other previous case you need two steps:\n\n\n\n\nput the \nCache:Pull\n step after the \nGit Clone\n\n\nput the \nCache:Push\n step to the very end of the Workflow\n\n\nYou can now just select the \nCache:Push\n step and add the Ruby GEM home directory to the Cache Paths input.\n\n\n\n\n\n\nWarning\n\n\nYou can't just add \ngem environment gemdir\n to the input as you can only reference\nEnvironment Variables in the inputs directly,\nand \n$GEM_HOME\n is not set by default on the Bitrise.io VMs.\n\n\n\n\nThere are two simple solutions for this issue:\n\n\n\n\nSet \nGEM_HOME\n as an App Env Var to, let's say, \n$HOME/.gem\n.\n\n\nAdd a \nScript step\n to your workflow and set the \n$GEM_HOME\n environment variable there\n\n\n\n\nThe second option is usually more error proof as you don't change the location of gem home,\nyou just set the environment variable to the path where it's located.\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - script:\n      title: GEM_HOME\n      inputs:\n      - content: |-\n          #!/bin/bash\n          set -ev\n\n          envman add --key GEM_HOME --value \n$(gem environment gemdir)\n\n  - git-clone: {}\n  - cache-pull: {}\n\n  # ... Add your steps here.\n  # You can `gem install` Ruby gems with Script steps here too,\n  # just make sure it's between the `cache-pull` and `cache-push` steps.\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $GEM_HOME", 
            "title": "Caching Ruby GEMs"
        }, 
        {
            "location": "/caching/caching-ruby-gems/#technical-note", 
            "text": "Ruby GEMs are installed into a single directory by default. You can get the location of this directory\nwith  gem environment gemdir . If you want to change this directory you can set the  $GEM_HOME  environment variable,\nthis will be picked up by  gem install  and it'll install the GEMs to the location specified by  $GEM_HOME .  Now that you know where the Ruby GEMs are stored you can easily cache the directory. As in any other previous case you need two steps:   put the  Cache:Pull  step after the  Git Clone  put the  Cache:Push  step to the very end of the Workflow  You can now just select the  Cache:Push  step and add the Ruby GEM home directory to the Cache Paths input.    Warning  You can't just add  gem environment gemdir  to the input as you can only reference\nEnvironment Variables in the inputs directly,\nand  $GEM_HOME  is not set by default on the Bitrise.io VMs.   There are two simple solutions for this issue:   Set  GEM_HOME  as an App Env Var to, let's say,  $HOME/.gem .  Add a  Script step  to your workflow and set the  $GEM_HOME  environment variable there   The second option is usually more error proof as you don't change the location of gem home,\nyou just set the environment variable to the path where it's located.", 
            "title": "Technical note"
        }, 
        {
            "location": "/caching/caching-ruby-gems/#example-workflow", 
            "text": "example:\n  steps:\n  - script:\n      title: GEM_HOME\n      inputs:\n      - content: |-\n          #!/bin/bash\n          set -ev\n\n          envman add --key GEM_HOME --value  $(gem environment gemdir) \n  - git-clone: {}\n  - cache-pull: {}\n\n  # ... Add your steps here.\n  # You can `gem install` Ruby gems with Script steps here too,\n  # just make sure it's between the `cache-pull` and `cache-push` steps.\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $GEM_HOME", 
            "title": "Example workflow"
        }, 
        {
            "location": "/ios/code-signing/", 
            "text": "How iOS code signing works - if you use Xcode 8 automatic code signing\n\u2693\n\n\nIf you're interested in all of the details, you should check this year's\n\nWWDC video which covers the code signing changes\n.\nWe'll focus more on the basics and issue resolution here.\n\n\nIn short, Xcode 8's automatic code signing works this way:\n\n\n\n\nWhen you do an Archive in Xcode, either in Xcode.app or on a CI server / through Xcode's command line tool (\nxcodebuild\n)\n   it first creates an archive \nsigned with development code signing\n.\n\n\nThen, when you specify the distribution method (export method) it \nresigns the archive with distribution signing\n.\n\n\n\n\n\n\nThis means that if you want to create for example an App Store signed IPA,\non the Mac (e.g. on the \nbitrise.io\n virtual machine)\nyou have to have \nboth a Wildcard, Team / Development AND the App Store\ndistribution certificates and provisioning profiles\n!\n\n\n\n\nCollecting all of these might take quite a bit of time\n\n\nbut fortunately our updated \ncodesigndoc\n\ncan now collect all of these files for you, \nautomatically\n!\n\n\n\n\nSo, \nis this automatic code signing worth all of this trouble\n?\nShould you instead opt to use manual code signing in Xcode 8?\n\n\nIn general using Automatic code signing is a good idea, and you should\nmigrate to it (as Apple suggests this is the new way, how you should do\ncode signing in the future) if you can.\n\n\nIs it worth the trouble?\n Well, \nthe good thing about Automatic code signing\n\nis that once you collected all the code signing files\n\nit's incredibly easy to use these files / to select the right file(s) during your build!\n\n\nAll you need to do is specifying the \"export method\" (\napp-store\n, \nad-hoc\n, etc.)\nin the \nXcode Archive\n step, and that's all! \nXcode will select the right certificate\nand provisioning profiles automatically\n, based on your project's\nTeam and Bundle ID (if the signing files are available in the system of course ;) )!\n\n\nCompare this with the previous solution\n, where you had to either create multiple Schemes\nin Xcode to be able to control where to use which code signing settings,\nor you had to specify \"Force Identity / Provisioning Profile\" options,\nwhich could lead to even more trouble when not configured properly.\nIn Xcode 8 automatic code signing you don't have to (actually, you can't)\nmess with these configurations, initial code signing is always performed\nwith Development code signing, and Xcode resignes the IPA during export\nbased on the \"export method\".\n\n\nAnd, \nit works the same way on \nbitrise.io\n too\n!\nOnce you've uploaded all the required signing files (e.g. with \ncodesigndoc\n),\nall you have to do is to set the \nexport method\n option\nof the \nXcode Archive\n step to the option you want to use.\n\nThat's all!\n\n\nThis is the same as what you do when you create/export an iOS app archive\nfrom Xcode.app - \nthe \nXcode Archive\n step just runs Xcode's command line tool\n.\nThere's no \"magic\" here, \nXcode Archive\n just passes the export options\nto Xcode, and Xcode creates the archive and IPA the same way it does on your Mac!\n\n\nMigrating your Bitrise configuration to Automatic code signing\n\u2693\n\n\nFirst of all, you should upgrade your steps in your Workflow\nto the latest versions - especially the \nCertificate and profile installer\n\nand the \nXcode Archive\n steps - as there are a couple of features\nonly available in the latest versions.\n\n\nThe second step is to \nremove every previous, now incompatible code signing input\nfrom the \nXcode Archive\n step\n.\nIn general you should try to \nreset every code signing related input option of the \nXcode Archive\n step\n,\ne.g. \"Force code signing with Identity\" and \"Force code signing with Provisioning Profile Specifier\".\n\n\nNote: it might be easier to see which input options you defined a value for in \nbitrise.yml\n mode\nof the Workflow Editor. Just click on \nbitrise.yml\n on the left side of the Workflow Editor\nand search for the \nxcode-archive\n step. In \nbitrise.yml\n only those inputs are listed which\nyou specified a value for / which are not set to their default value, so it should be pretty\nquick to check the list there, easier than on the Web UI.\n\n\nYou're almost ready\n, really! All you have to do is:\n\n\n\n\nMake sure that you've uploaded all the required code signing files, \nincluding a Wildcard Team Development\n\n   certificate and provisioning profile, as noted in the \nDescription of how Xcode 8's new Automatic code signing feature works\n section.\n   You might want to use \ncodesigndoc\n for this,\n   as it can export all the required files automatically from your Mac.\n\n\nSet the \nSelect method for export\n input option of the \nXcode Archive\n step to the\n   method you want to use (e.g. \napp-store\n or \nad-hoc\n)\n\n\n\n\nAnd that's all!\n\n\nYou can use multiple \nXcode Archive\n steps to create multiple IPAs signed with different\ncode signing methods in the same build, just by adding a second \nXcode Archive\n step\nand setting the \nSelect method for export\n option to the other method.\nAlternatively you can also use the \nRe-sign IPA\n step, to resign the IPA\nof a previous \nXcode Archive\n step.\n\n\nOne note: if you'd have to use a distribution provisioning profile \n certificate\nwhich is related to a different Team, not the one set in your Xcode project's\nsettings, then you have to specify the \nThe Developer Portal team to use for this export\n\ninput option too, or else Xcode will search for code signing files with the same Team ID\nyou have in your Xcode project's settings. Again, this is the same what you do in\nXcode.app when you create an Archive and export it with a distribution signing - if you're\npart of more than one Apple Dev Portal team you'll be prompted to select one.\n\n\nAnother note, especially if your project includes Extension project(s),\nfor some reason, Xcode 8.0 might not accept just any Wildcard Development Provisioning Profile\nfor the initial signing. It seems that in case of e.g. a Today Widget Extension\nXcode 8.0 requires the Wildcard \nTeam\n Provisioning Profile,\nor a specific development one which includes the Extension's \nfull\n bundle ID.\nThis might be just an Xcode 8.0 issue which will be fixed in an upcoming Xcode 8 update,\nbut for now it's best to use the \nTeam\n Provisioning Profile, which you can\nexport from Xcode Preferences (Xcode -\n Preferences -\n select your Apple ID on the left side -\n\nselect your Team on the right side -\n click \"View Details\" -\n search for\n\niOS Team Provisioning Profile: *\n -\n right click \"Show in Finder\").\n\ncodesigndoc\n can help to\nexport the proper one in this case too!\n\n\nHow iOS code signing works (Xcode 7 \n Xcode 8 manual code signing mode)\n\u2693\n\n\niOS apps require code signing for every action/output which generates an app (\n.ipa\n) meant to\nrun on a physical iOS device.\n\n\nWhen you create and export an Archive (\n.ipa\n) of your app Xcode will sign it automatically,\nbased on the \nCode Signing\n settings you have in your Xcode project. There are, however,\na couple of things you have to know about how Xcode selects the code signing\nfiles (unless you set a specific Identity and/or Provisioning Profile).\n\n\nIf you have a Code Signing configuration in your Xcode project like this one:\n\n\n\n\nwhere you don't set a specific Identity and Provisioning Profile, Xcode will\nselect the ones which match the following points:\n\n\n\n\nFor the \nRelease\n configuration it'll search for a Distribution Identity/Certificate\n\n\nFor the \nDebug\n configuration it'll search for a Development Identity/Certificate\n\n\nThe Provisioning Profile has to match with the \nteam ID\n and with the \nbundle ID\n you set\n  in your Xcode project settings.\n\n\n\n\nThis means that even if you have a Distribution Identity/Certificate available in the system,\nif Xcode can't find a related Provisioning Profile which matches the \nteam ID\n \nand\n the \nbundle ID\n\nyou'll get an error like this when you try to archive the project:\n\n\nCode Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u2018...\u2019 were found.\n\n\n\n\nThis means that to be able to Archive your project you have to provide both a Certificate (\n.p12\n Identity file)\nand a Provisioning Profile which matches:\n\n\n\n\nthe type of the configuration you set in your Xcode project settings under the \nCode Signing\n section (Distribution or Development)\n\n\nthe Provisioning Profile has to match both the \nbundle ID\n \nand\n the \nteam ID\n set in the Xcode project settings\n\n\nand \nthe two files have to be compatible with each other\n (you\ncan check this on the \nApple Developer Portal\n - select a Provisioning Profile,\nclick \nEdit\n, there you can see the Certificates which are allowed to use that specific Provisioning Profile)\n\n\n\n\nThere can be multiple Certificates/Identities and Provisioning Profiles installed on the system,\nthe only thing what matters for Xcode when it tries to sign the app is to find a Certificate/Identity and\nProvisioning Profile pair which fulfills all the requirements listed above.\n\n\n\n\nHow to export your iOS Code Signing files\n\n\nIf you need help with exporting your iOS Code Signing files, you can find\na step-by-step guide with screenshots \non our old DevCenter\n.\n\n\n\n\nHow to make the process easier, more manageable? (Xcode 7 \n Xcode 8 manual code signing mode)\n\u2693\n\n\nUsing Export Options (available for Xcode 7+ and Xcode Archive step v1.9.1+)\n\u2693\n\n\nSince the \n1.9.1\n version of the \nXcode Archive\n step you can set Xcode \"export options\"\ndirectly through the step!\n\n\nThe thing you have to know about Xcode's Export Options or how archiving works\nwhen you do it from \nXcode.app\n on your Mac:\n\n\n\n\nWhen you click \"Archive\" in Xcode first it creates an Xcode \"archive\" file (directory),\n   and \nit signs the archive with the code signing files set in your Xcode project settings\n!\n\n\nThen, when the Xcode \"Organizer\" window appears and you click \"Export...\" and\n   select an \"export method\" (App Store, Ad Hoc, Enterprise or Development Deployment)\n   \nXcode does re-sign\n the archive with the final code signing files appropriate for the\n   export method you selected.\n\n\n\n\nThis means that if you want to do the same on any Mac (e.g. on \nbitrise.io\n virtual machines)\n\nyou'll need the code signing files for the final app/IPA\n (e.g. App Store or Ad Hoc distribution certificate and provisioning profile)\n\nand additionally the code signing files used for the initial signing\n (usually Development certificate and provisioning profile)!\n\n\nTo do the same on \nbitrise.io\n all you have to do is:\n\n\n\n\nUpload all the certificates and provisioning profiles, including the ones required for the initial\n   code signing (usually your Development certificate and provisioning profile for the project).\n\n\nOpen the Workflow Editor on \nbitrise.io\n, select the \nXcode Archive\n step,\n   and make sure its version is at least \n1.9.1\n\n\nGo to the step's \nSelect method for export\n input, and set it to the \"export method\" you want to use,\n   just like you would in Xcode's Organizer.\n   \nNote: you can add more than one \nXcode Archive\n step to your workflow, if you want to create\n   e.g. both an Ad Hoc and an App Store signed app/IPA in the same build/workflow!\n\n\nClick \nSave\n in the Workflow Editor\n\n\n\n\nThat's all. Run a new build and you're done ;)\n\n\nFull manual / full control\n\u2693\n\n\nThere's an important \"trick\" which can make your code signing process much easier\n(if you don't or can't use the Xcode 7+ Export Options - as described in the previous section):\nXcode (Xcode's Command Line Tool, \nxcodebuild\n) has a command line parameter to\noverride the Identity and Provisioning Profile configurations set in Xcode project settings!\n\n\nThe \nCODE_SIGN_IDENTITY\n parameter can be used to override the \nCode Signing Identity\n,\nwhile the \nPROVISIONING_PROFILE\n parameter can be used to override the \nProvisioning Profile\n configuration\nfor any \nxcodebuild\n command (e.g. Archive).\n\n\nBoth our \nXcode Archive\n and \nXcode Analyze\n steps include two related inputs,\n\nForce code signing with Identity\n and \nForce code signing with Provisioning Profile\n.\nThe value you provide for these inputs will be passed to \nxcodebuild\n\nas \nCODE_SIGN_IDENTITY\n and \nPROVISIONING_PROFILE\n.\n\n\nNow, the important bit, that can make your life much easier\n (especially if you generate an iOS app with\nmultiple, different code signing configuration (e.g. if you want to generate both an Ad-Hoc and\nan App Store signed \nipa\n)):\n\n\n\n\nSetting a specific Identity will make Xcode ignore other search parameters!\n\n\nIf you set the Identity to \niPhone Distribution\n Xcode will search for a matching Provisioning\nProfile which fulfills all the other criteria (team ID and bundle ID),\nwhile \nif you provide the full ID of the Identity\n like \niPhone Distribution: My Company\n\nXcode will \nignore\n everything else and will use that specific Identity (if it can\nfind it in the system)!\n\n\n\n\nThis means that even if the Provisioning Profile has a different \nteam ID\n set, just by\nspecifying the Identity's full ID, Xcode will pick the Provisioning Profile\nwhich is compatible with the Identity, it won't check the \nteam ID\n parameter!\n\n\nThis makes iOS code signing (in most cases) much easier, as all you have to do is:\n\n\n\n\nMake sure that you set the Provisioning Profile configuration \nin your Xcode project settings\n to \"Automatic\",\n  or else you'll have to override this configuration too (to be able to use different Provisioning Profiles)\n\n\nYou should set the Identity configuration \nin your Xcode project settings\n to a generic category like\n  \"iPhone Developer\" or \"iPhone Distribution\" (this is more like a best practice, to make the life of\n  developers easier, \nnot a requirement if you override the configuration\n)\n\n\nAnd the last piece is\n: set the \nForce code signing with Identity\n input of Xcode Archive and\n  Xcode Analyze to the \nfull ID of the Identity\n (something like: \niPhone Distribution: My Company\n)\n\n\n\n\nWith this setup you don't have to change your code signing configuration in your Xcode project\n,\nyou only have to specify the configuration in your Bitrise workflow, and you can specify\ndifferent code signing configuration for every Xcode step if you want to!\n\n\n\n\nWhere to get these IDs?\n\n\nIf you use our \nCertificate and profile installer\n step then you can find the IDs in the step's\nlog. It prints the ID of every identity and provisioning profile it downloads\nand installs successfully. You can copy-paste that ID directly into the\n\nForce code signing with Identity\n (ID looks like: \niPhone Distribution: My Company (Xyz)\n),\nand if you need it, into the \nForce code signing with Provisioning Profile\n\n(ID looks like: \nxyz045x4-6143-4e5a-a94a-3fe3aec96eb3\n) input fields.\n\n\n\n\nUsually it's enough to specify only the Identity ID\n for the build, the compatible Provisioning Profile\nwill be selected by Xcode automatically. Not setting the Provisioning Profile has the advantage\nthat if you have to update the Provisioning Profile you won't have to update your\nBitrise configuration with the new profile's ID, as long as the Provisioning Profile is\ncompatible with the Identity you set. But if you'd need to control exactly\nwhich Provisioning Profile should be used for a given step, you can use\nthe \nForce code signing with Provisioning Profile\n input of the steps.\n\nThis can be useful if you want to use multiple Distribution Provisioning Profiles\nin a single build, \ne.g. to create both an Ad-Hoc and an App Store signed app.", 
            "title": "Code Signing"
        }, 
        {
            "location": "/ios/code-signing/#how-ios-code-signing-works-if-you-use-xcode-8-automatic-code-signing", 
            "text": "If you're interested in all of the details, you should check this year's WWDC video which covers the code signing changes .\nWe'll focus more on the basics and issue resolution here.  In short, Xcode 8's automatic code signing works this way:   When you do an Archive in Xcode, either in Xcode.app or on a CI server / through Xcode's command line tool ( xcodebuild )\n   it first creates an archive  signed with development code signing .  Then, when you specify the distribution method (export method) it  resigns the archive with distribution signing .    This means that if you want to create for example an App Store signed IPA,\non the Mac (e.g. on the  bitrise.io  virtual machine)\nyou have to have  both a Wildcard, Team / Development AND the App Store\ndistribution certificates and provisioning profiles !   Collecting all of these might take quite a bit of time  but fortunately our updated  codesigndoc \ncan now collect all of these files for you,  automatically !   So,  is this automatic code signing worth all of this trouble ?\nShould you instead opt to use manual code signing in Xcode 8?  In general using Automatic code signing is a good idea, and you should\nmigrate to it (as Apple suggests this is the new way, how you should do\ncode signing in the future) if you can.  Is it worth the trouble?  Well,  the good thing about Automatic code signing \nis that once you collected all the code signing files it's incredibly easy to use these files / to select the right file(s) during your build!  All you need to do is specifying the \"export method\" ( app-store ,  ad-hoc , etc.)\nin the  Xcode Archive  step, and that's all!  Xcode will select the right certificate\nand provisioning profiles automatically , based on your project's\nTeam and Bundle ID (if the signing files are available in the system of course ;) )!  Compare this with the previous solution , where you had to either create multiple Schemes\nin Xcode to be able to control where to use which code signing settings,\nor you had to specify \"Force Identity / Provisioning Profile\" options,\nwhich could lead to even more trouble when not configured properly.\nIn Xcode 8 automatic code signing you don't have to (actually, you can't)\nmess with these configurations, initial code signing is always performed\nwith Development code signing, and Xcode resignes the IPA during export\nbased on the \"export method\".  And,  it works the same way on  bitrise.io  too !\nOnce you've uploaded all the required signing files (e.g. with  codesigndoc ),\nall you have to do is to set the  export method  option\nof the  Xcode Archive  step to the option you want to use. That's all!  This is the same as what you do when you create/export an iOS app archive\nfrom Xcode.app -  the  Xcode Archive  step just runs Xcode's command line tool .\nThere's no \"magic\" here,  Xcode Archive  just passes the export options\nto Xcode, and Xcode creates the archive and IPA the same way it does on your Mac!", 
            "title": "How iOS code signing works - if you use Xcode 8 automatic code signing"
        }, 
        {
            "location": "/ios/code-signing/#migrating-your-bitrise-configuration-to-automatic-code-signing", 
            "text": "First of all, you should upgrade your steps in your Workflow\nto the latest versions - especially the  Certificate and profile installer \nand the  Xcode Archive  steps - as there are a couple of features\nonly available in the latest versions.  The second step is to  remove every previous, now incompatible code signing input\nfrom the  Xcode Archive  step .\nIn general you should try to  reset every code signing related input option of the  Xcode Archive  step ,\ne.g. \"Force code signing with Identity\" and \"Force code signing with Provisioning Profile Specifier\".  Note: it might be easier to see which input options you defined a value for in  bitrise.yml  mode\nof the Workflow Editor. Just click on  bitrise.yml  on the left side of the Workflow Editor\nand search for the  xcode-archive  step. In  bitrise.yml  only those inputs are listed which\nyou specified a value for / which are not set to their default value, so it should be pretty\nquick to check the list there, easier than on the Web UI.  You're almost ready , really! All you have to do is:   Make sure that you've uploaded all the required code signing files,  including a Wildcard Team Development \n   certificate and provisioning profile, as noted in the  Description of how Xcode 8's new Automatic code signing feature works  section.\n   You might want to use  codesigndoc  for this,\n   as it can export all the required files automatically from your Mac.  Set the  Select method for export  input option of the  Xcode Archive  step to the\n   method you want to use (e.g.  app-store  or  ad-hoc )   And that's all!  You can use multiple  Xcode Archive  steps to create multiple IPAs signed with different\ncode signing methods in the same build, just by adding a second  Xcode Archive  step\nand setting the  Select method for export  option to the other method.\nAlternatively you can also use the  Re-sign IPA  step, to resign the IPA\nof a previous  Xcode Archive  step.  One note: if you'd have to use a distribution provisioning profile   certificate\nwhich is related to a different Team, not the one set in your Xcode project's\nsettings, then you have to specify the  The Developer Portal team to use for this export \ninput option too, or else Xcode will search for code signing files with the same Team ID\nyou have in your Xcode project's settings. Again, this is the same what you do in\nXcode.app when you create an Archive and export it with a distribution signing - if you're\npart of more than one Apple Dev Portal team you'll be prompted to select one.  Another note, especially if your project includes Extension project(s),\nfor some reason, Xcode 8.0 might not accept just any Wildcard Development Provisioning Profile\nfor the initial signing. It seems that in case of e.g. a Today Widget Extension\nXcode 8.0 requires the Wildcard  Team  Provisioning Profile,\nor a specific development one which includes the Extension's  full  bundle ID.\nThis might be just an Xcode 8.0 issue which will be fixed in an upcoming Xcode 8 update,\nbut for now it's best to use the  Team  Provisioning Profile, which you can\nexport from Xcode Preferences (Xcode -  Preferences -  select your Apple ID on the left side - \nselect your Team on the right side -  click \"View Details\" -  search for iOS Team Provisioning Profile: *  -  right click \"Show in Finder\"). codesigndoc  can help to\nexport the proper one in this case too!", 
            "title": "Migrating your Bitrise configuration to Automatic code signing"
        }, 
        {
            "location": "/ios/code-signing/#how-ios-code-signing-works-xcode-7-xcode-8-manual-code-signing-mode", 
            "text": "iOS apps require code signing for every action/output which generates an app ( .ipa ) meant to\nrun on a physical iOS device.  When you create and export an Archive ( .ipa ) of your app Xcode will sign it automatically,\nbased on the  Code Signing  settings you have in your Xcode project. There are, however,\na couple of things you have to know about how Xcode selects the code signing\nfiles (unless you set a specific Identity and/or Provisioning Profile).  If you have a Code Signing configuration in your Xcode project like this one:   where you don't set a specific Identity and Provisioning Profile, Xcode will\nselect the ones which match the following points:   For the  Release  configuration it'll search for a Distribution Identity/Certificate  For the  Debug  configuration it'll search for a Development Identity/Certificate  The Provisioning Profile has to match with the  team ID  and with the  bundle ID  you set\n  in your Xcode project settings.   This means that even if you have a Distribution Identity/Certificate available in the system,\nif Xcode can't find a related Provisioning Profile which matches the  team ID   and  the  bundle ID \nyou'll get an error like this when you try to archive the project:  Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u2018...\u2019 were found.  This means that to be able to Archive your project you have to provide both a Certificate ( .p12  Identity file)\nand a Provisioning Profile which matches:   the type of the configuration you set in your Xcode project settings under the  Code Signing  section (Distribution or Development)  the Provisioning Profile has to match both the  bundle ID   and  the  team ID  set in the Xcode project settings  and  the two files have to be compatible with each other  (you\ncan check this on the  Apple Developer Portal  - select a Provisioning Profile,\nclick  Edit , there you can see the Certificates which are allowed to use that specific Provisioning Profile)   There can be multiple Certificates/Identities and Provisioning Profiles installed on the system,\nthe only thing what matters for Xcode when it tries to sign the app is to find a Certificate/Identity and\nProvisioning Profile pair which fulfills all the requirements listed above.   How to export your iOS Code Signing files  If you need help with exporting your iOS Code Signing files, you can find\na step-by-step guide with screenshots  on our old DevCenter .", 
            "title": "How iOS code signing works (Xcode 7 &amp; Xcode 8 manual code signing mode)"
        }, 
        {
            "location": "/ios/code-signing/#how-to-make-the-process-easier-more-manageable-xcode-7-xcode-8-manual-code-signing-mode", 
            "text": "", 
            "title": "How to make the process easier, more manageable? (Xcode 7 &amp; Xcode 8 manual code signing mode)"
        }, 
        {
            "location": "/ios/code-signing/#using-export-options-available-for-xcode-7-and-xcode-archive-step-v191", 
            "text": "Since the  1.9.1  version of the  Xcode Archive  step you can set Xcode \"export options\"\ndirectly through the step!  The thing you have to know about Xcode's Export Options or how archiving works\nwhen you do it from  Xcode.app  on your Mac:   When you click \"Archive\" in Xcode first it creates an Xcode \"archive\" file (directory),\n   and  it signs the archive with the code signing files set in your Xcode project settings !  Then, when the Xcode \"Organizer\" window appears and you click \"Export...\" and\n   select an \"export method\" (App Store, Ad Hoc, Enterprise or Development Deployment)\n    Xcode does re-sign  the archive with the final code signing files appropriate for the\n   export method you selected.   This means that if you want to do the same on any Mac (e.g. on  bitrise.io  virtual machines) you'll need the code signing files for the final app/IPA  (e.g. App Store or Ad Hoc distribution certificate and provisioning profile) and additionally the code signing files used for the initial signing  (usually Development certificate and provisioning profile)!  To do the same on  bitrise.io  all you have to do is:   Upload all the certificates and provisioning profiles, including the ones required for the initial\n   code signing (usually your Development certificate and provisioning profile for the project).  Open the Workflow Editor on  bitrise.io , select the  Xcode Archive  step,\n   and make sure its version is at least  1.9.1  Go to the step's  Select method for export  input, and set it to the \"export method\" you want to use,\n   just like you would in Xcode's Organizer.\n    Note: you can add more than one  Xcode Archive  step to your workflow, if you want to create\n   e.g. both an Ad Hoc and an App Store signed app/IPA in the same build/workflow!  Click  Save  in the Workflow Editor   That's all. Run a new build and you're done ;)", 
            "title": "Using Export Options (available for Xcode 7+ and Xcode Archive step v1.9.1+)"
        }, 
        {
            "location": "/ios/code-signing/#full-manual-full-control", 
            "text": "There's an important \"trick\" which can make your code signing process much easier\n(if you don't or can't use the Xcode 7+ Export Options - as described in the previous section):\nXcode (Xcode's Command Line Tool,  xcodebuild ) has a command line parameter to\noverride the Identity and Provisioning Profile configurations set in Xcode project settings!  The  CODE_SIGN_IDENTITY  parameter can be used to override the  Code Signing Identity ,\nwhile the  PROVISIONING_PROFILE  parameter can be used to override the  Provisioning Profile  configuration\nfor any  xcodebuild  command (e.g. Archive).  Both our  Xcode Archive  and  Xcode Analyze  steps include two related inputs, Force code signing with Identity  and  Force code signing with Provisioning Profile .\nThe value you provide for these inputs will be passed to  xcodebuild \nas  CODE_SIGN_IDENTITY  and  PROVISIONING_PROFILE .  Now, the important bit, that can make your life much easier  (especially if you generate an iOS app with\nmultiple, different code signing configuration (e.g. if you want to generate both an Ad-Hoc and\nan App Store signed  ipa )):   Setting a specific Identity will make Xcode ignore other search parameters!  If you set the Identity to  iPhone Distribution  Xcode will search for a matching Provisioning\nProfile which fulfills all the other criteria (team ID and bundle ID),\nwhile  if you provide the full ID of the Identity  like  iPhone Distribution: My Company \nXcode will  ignore  everything else and will use that specific Identity (if it can\nfind it in the system)!   This means that even if the Provisioning Profile has a different  team ID  set, just by\nspecifying the Identity's full ID, Xcode will pick the Provisioning Profile\nwhich is compatible with the Identity, it won't check the  team ID  parameter!  This makes iOS code signing (in most cases) much easier, as all you have to do is:   Make sure that you set the Provisioning Profile configuration  in your Xcode project settings  to \"Automatic\",\n  or else you'll have to override this configuration too (to be able to use different Provisioning Profiles)  You should set the Identity configuration  in your Xcode project settings  to a generic category like\n  \"iPhone Developer\" or \"iPhone Distribution\" (this is more like a best practice, to make the life of\n  developers easier,  not a requirement if you override the configuration )  And the last piece is : set the  Force code signing with Identity  input of Xcode Archive and\n  Xcode Analyze to the  full ID of the Identity  (something like:  iPhone Distribution: My Company )   With this setup you don't have to change your code signing configuration in your Xcode project ,\nyou only have to specify the configuration in your Bitrise workflow, and you can specify\ndifferent code signing configuration for every Xcode step if you want to!   Where to get these IDs?  If you use our  Certificate and profile installer  step then you can find the IDs in the step's\nlog. It prints the ID of every identity and provisioning profile it downloads\nand installs successfully. You can copy-paste that ID directly into the Force code signing with Identity  (ID looks like:  iPhone Distribution: My Company (Xyz) ),\nand if you need it, into the  Force code signing with Provisioning Profile \n(ID looks like:  xyz045x4-6143-4e5a-a94a-3fe3aec96eb3 ) input fields.   Usually it's enough to specify only the Identity ID  for the build, the compatible Provisioning Profile\nwill be selected by Xcode automatically. Not setting the Provisioning Profile has the advantage\nthat if you have to update the Provisioning Profile you won't have to update your\nBitrise configuration with the new profile's ID, as long as the Provisioning Profile is\ncompatible with the Identity you set. But if you'd need to control exactly\nwhich Provisioning Profile should be used for a given step, you can use\nthe  Force code signing with Provisioning Profile  input of the steps. This can be useful if you want to use multiple Distribution Provisioning Profiles\nin a single build,  e.g. to create both an Ad-Hoc and an App Store signed app.", 
            "title": "Full manual / full control"
        }, 
        {
            "location": "/ios/uploading-certificates/", 
            "text": "Easiest way to export code signing identities\n\u2693\n\n\nYou can easily locate the needed certificates and provisioning profiles for your project with our \ncodesigndoc\n tool.\n\n\nSimply open your \nTerminal.app\n on your Mac and run the following command:\n\n\nbash -l -c \n$(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap.sh)\n.\n\n\n\n\nAfter that open your \nFinder.app\n and drag-and-drop your project's \n.xcodeproj\n or \n.xcworkspace\n file into the command line in your terminal.\n\n\nOnce it's done you'll have all the required files exported, ready for upload.\n\n\nUploading the exported code signing files to Bitrise\n\u2693\n\n\nOnce you have all the needed files, head to your dashboard on \nbitrise.io\n and select your app.\n\n\nGo to \nWorkflow\n \n \nManage Workflows\n \n and select the \nCode Signing \n Files\n tab on the left. Upload your code signing certificate (p12) and provisioning profiles and you are ready to go! \ud83d\ude80", 
            "title": "Uploading certificates"
        }, 
        {
            "location": "/ios/uploading-certificates/#easiest-way-to-export-code-signing-identities", 
            "text": "You can easily locate the needed certificates and provisioning profiles for your project with our  codesigndoc  tool.  Simply open your  Terminal.app  on your Mac and run the following command:  bash -l -c  $(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap.sh) .  After that open your  Finder.app  and drag-and-drop your project's  .xcodeproj  or  .xcworkspace  file into the command line in your terminal. \nOnce it's done you'll have all the required files exported, ready for upload.", 
            "title": "Easiest way to export code signing identities"
        }, 
        {
            "location": "/ios/uploading-certificates/#uploading-the-exported-code-signing-files-to-bitrise", 
            "text": "Once you have all the needed files, head to your dashboard on  bitrise.io  and select your app.  Go to  Workflow     Manage Workflows    and select the  Code Signing   Files  tab on the left. Upload your code signing certificate (p12) and provisioning profiles and you are ready to go! \ud83d\ude80", 
            "title": "Uploading the exported code signing files to Bitrise"
        }, 
        {
            "location": "/ios/resigning-an-ipa/", 
            "text": "During the development of your iOS app you will need at least two types of distribution. One for internal testing and deployment for your QA team, and one for deploying your app to the App Store.\n\n\nTo achieve this, \nfirst you have to upload multiple certificates\n ( development and distribution ) and the associated provisioning profiles. When it's all set up you can create multiple workflows for your app on Bitrise:\n\n\nHow it was before\n\u2693\n\n\nLet's say you setup two workflows, one with a \nmaster\n trigger to kick of your \nAppStore\n workflow. This will sign your apps with the distribution profile and a trigger with \n*\n to kick of your normal \nPrimary\n workflow that builds and deploys your app to the testers. On both workflows you can setup an \nXcode Archive step\n, update the needed signing and you are ready to go.\n\n\nThis will create the required IPA's for you, but there is an easier way!\n\n\nSetting up automatic resigning\n\u2693\n\n\nInstead of running multiple \nXcode Archive steps\n, setup your project to sign your apps with \nAutomatic \n iOS Developer\n and upload a \nwildcard provisioning profile\n. ( You can even use our own preinstalled certificate and provisioning profile for that if you don't set the team id. )\n\n\n\n\nWhen you want to deploy your app to the QA team or to App Store, add the \niOS Re-sign step\n to your workflow and set your iTunes team ID with the required distribution. It will simply re-sign your IPA and your are ready to go, without the need of manually handling different versions of settings in your project, or burning build minutes.\n\n\nHere you can find a sample bitrise.yml that will resign your app and deploy it to iTunes Connect if you are deploying to the \nmaster branch\n\n\n---\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- pattern: \nmaster\n\n  is_pull_request_allowed: false\n  workflow: appstore\n- pattern: \n*\n\n  is_pull_request_allowed: true\n  workflow: primary\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: $BITRISE_PROJECT_PATH\n  - BITRISE_SCHEME: $BITRISE_SCHEME\n  - INFO_PLIST_PATH: $INFO_PLIST_PATH\n  - ITUNES_CONNECT_USER: $ITUNES_CONNECT_USER           # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_PASSWORD: $ITUNES_CONNECT_PASSWORD   # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_TEAM_ID: $ITUNES_CONNECT_TEAM_ID     # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_APP_ID: $ITUNES_CONNECT_APP_ID       # Store it in .bitrise.secrets.yml\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.3.2: {}\n    - certificate-and-profile-installer@1.6.0: {}\n    - set-xcode-build-number@1.0.4:\n        inputs:\n        - plist_path: $INFO_PLIST_PATH\n    - xcode-archive@1.8.5: {}\n    - deploy-to-bitrise-io@1.2.4: {}\n\n  appstore:\n    before_run:\n    - primary\n    steps:\n    - resign-ipa@1.0.0:\n        inputs:\n        - distribution_type: AppStore\n        - itunes_connect_team_id: $ITUNES_CONNECT_TEAM_ID\n    - deploy-to-itunesconnect-deliver@2.6.1:\n        inputs:\n        - ipa_path: $BITRISE_RESIGNED_IPA_PATH\n        - itunescon_user: $ITUNES_CONNECT_USER\n        - password: $ITUNES_CONNECT_PASSWORD\n        - app_id: $ITUNES_CONNECT_APP_ID", 
            "title": "Resigning an IPA"
        }, 
        {
            "location": "/ios/resigning-an-ipa/#how-it-was-before", 
            "text": "Let's say you setup two workflows, one with a  master  trigger to kick of your  AppStore  workflow. This will sign your apps with the distribution profile and a trigger with  *  to kick of your normal  Primary  workflow that builds and deploys your app to the testers. On both workflows you can setup an  Xcode Archive step , update the needed signing and you are ready to go.  This will create the required IPA's for you, but there is an easier way!", 
            "title": "How it was before"
        }, 
        {
            "location": "/ios/resigning-an-ipa/#setting-up-automatic-resigning", 
            "text": "Instead of running multiple  Xcode Archive steps , setup your project to sign your apps with  Automatic   iOS Developer  and upload a  wildcard provisioning profile . ( You can even use our own preinstalled certificate and provisioning profile for that if you don't set the team id. )   When you want to deploy your app to the QA team or to App Store, add the  iOS Re-sign step  to your workflow and set your iTunes team ID with the required distribution. It will simply re-sign your IPA and your are ready to go, without the need of manually handling different versions of settings in your project, or burning build minutes.  Here you can find a sample bitrise.yml that will resign your app and deploy it to iTunes Connect if you are deploying to the  master branch  ---\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- pattern:  master \n  is_pull_request_allowed: false\n  workflow: appstore\n- pattern:  * \n  is_pull_request_allowed: true\n  workflow: primary\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: $BITRISE_PROJECT_PATH\n  - BITRISE_SCHEME: $BITRISE_SCHEME\n  - INFO_PLIST_PATH: $INFO_PLIST_PATH\n  - ITUNES_CONNECT_USER: $ITUNES_CONNECT_USER           # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_PASSWORD: $ITUNES_CONNECT_PASSWORD   # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_TEAM_ID: $ITUNES_CONNECT_TEAM_ID     # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_APP_ID: $ITUNES_CONNECT_APP_ID       # Store it in .bitrise.secrets.yml\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.3.2: {}\n    - certificate-and-profile-installer@1.6.0: {}\n    - set-xcode-build-number@1.0.4:\n        inputs:\n        - plist_path: $INFO_PLIST_PATH\n    - xcode-archive@1.8.5: {}\n    - deploy-to-bitrise-io@1.2.4: {}\n\n  appstore:\n    before_run:\n    - primary\n    steps:\n    - resign-ipa@1.0.0:\n        inputs:\n        - distribution_type: AppStore\n        - itunes_connect_team_id: $ITUNES_CONNECT_TEAM_ID\n    - deploy-to-itunesconnect-deliver@2.6.1:\n        inputs:\n        - ipa_path: $BITRISE_RESIGNED_IPA_PATH\n        - itunescon_user: $ITUNES_CONNECT_USER\n        - password: $ITUNES_CONNECT_PASSWORD\n        - app_id: $ITUNES_CONNECT_APP_ID", 
            "title": "Setting up automatic resigning"
        }, 
        {
            "location": "/ios/frequent-ios-issues/", 
            "text": "Searching for errors and issues in Xcode generated output\n\u2693\n\n\nThis applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the \nOutput Tool\n option\nof the Xcode ... step to \nxcodebuild\n (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool (\nxcodebuild\n). All of the official Bitrise Xcode steps\nhave an \nOutput Tool\n input with a \nxcodebuild\n option.\n\n\nYou should search for \nerror:\n in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.\n\n\nIf that doesn't work you should also search for \nwarning:\n, in rare cases Xcode doesn't print an \nerror:\n even if it fails.\n\n\nIf you have the logs on your own machine then you can run something like this in your Terminal:\n\n\ngrep --color 'error:' my.log\ngrep --color 'warning:' my.log\n\n\n\n\nXcode Scheme not found\n\u2693\n\n\nThe first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a \nThe project named \"Foo\" does not contain a scheme named \"Bar\"\n error during build,\nis your Xcode project settings.\n\n\n\n\nCheck if the desired Scheme is shared\n\n\nWhen you share your scheme the Xcode project changes. Don't forget to \ncommit\n and to \npush\n your changes!\n\n\nIf the related validation is still running on Bitrise abort it and try to run it again.\n\n\n\n\n\n\nDon't forget to commit \n push the changes\n if you just enabled the Shared option!\nThis change should be reflected in your \ngit\n repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder):\n\n*.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme\n.\n\n\nIf you still can't see the desired Scheme,\ntry to look into your \n.gitignore\n file and check if you are ignoring the config files of your Xcode project.\n\n\nCocoaPods (missing) dependency issue\n\u2693\n\n\nError:\n\u2693\n\n\nld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nOR:\n\n\nno such module '...'\n\n\n\n\nSolution:\n\u2693\n\n\nMost likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace (\n.xcworkspace\n) file. Go to your App's \nWorkflow tab\n on Bitrise,\nclick \nManage Workflows\n, click \nApp Environments\n and change the \nBITRISE_PROJECT_PATH\n item.\nThis will change the default Project Path configuration for every workflow.\n\n\nIf it worked before\n and the \nBITRISE_PROJECT_PATH\n did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.\n\n\nFastlane Export Issue\n\u2693\n\n\nThis section was contributed by \n@kwoylie\n,\nand applies if you have a \nGemfile\n in your repository and you use\nthe \nfastlane\n step which uses the \nGemfile\n automatically if present.\n\n\nGemfile\n content was:\n\n\ngem \nfastlane\n, \n1.104.0\n\ngem \ngym\n, \n1.10.0\n\ngem \nbadge\n, \n0.5.0\n\ngem \nCFPropertyList\n,\n2.3.3\n\ngem \nsqlite3\n, \n1.3.11\n\n\n\n\nI have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.\n\n\nI had disabled xcpretty on Fastlane and got the following error from gym:\n\n\n$/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed: \nIDEDistributionThinningStep: 0x7f868c80f810\n: Error Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with \nIDEDistributionContext: 0x7f868c51ed70; archive(resolved)='\nIDEArchive: 0x7f868c4af8d0\n', distributionTask(resolved)='2', distributionMethod(resolved)='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID(resolved)='(null)'\n\n    Chain (2, self inclusive):\n    \nIDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID='(null)'\n\n    \nIDEDistributionContext: 0x7f868c4b0e70; archive = '\nIDEArchive: 0x7f868c4af8d0\n', distributionMethod='(null)', teamID='(null)'\n\n\n/IDEDistributionContext: 0x7f868c51ed70\n\n\n\n\nThis error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:\n\n\n2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in `\ntop (required)\n'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)\n\n\n\n\nSo after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.\n\n\nSolution:\n\u2693\n\n\nTo fix this issue, you just have to add a \nScript\n step to run the following:\n\n\nsudo /usr/bin/gem install bundler\n\n\n\n\nThis will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies\n\n\nWorks in local but not on Bitrise.io\n\u2693\n\n\nAn example error: \nld: file not found ...\n\n\nFirst of all restart your Xcode and try a new build.\n\n\nIf it doesn't help try a \nclean build\n in Xcode.\n\n\nIf no error was displayed, try resetting your simulator(s).\n\n\nAnother problem could be your CocoaPods version.\nTry updating your CocoaPods with the \n[sudo] gem install cocoapods\n command.\nAlso make sure that your \nPodfile.lock\n is \ncommitted into your repository\n,\nas that's the file which describes the exact Pod versions you use.\n\nWithout this Bitrise might download newer versions of Pods than the ones you use.\n\n\nIf there's still no error try deleting the \nPods\n folder in your project and run the \npod install\n command again.\n\n\nFinally, if none of the above helped, or you get an error with \nld: file not found\n on Bitrise,\nand the path contains \nDerivedData\n, with no other error message, like this:\n\n\nld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nTry deleting the Xcode local cache. After that the error should be reproducible on your local machine.\n\n\nYou can delete the local Xcode cache using your Terminal:\n\n\nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n\n\n\nStep hangs (times out after a period without any logs)\n\u2693\n\n\nCheck whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.\n\n\nMost frequent sources of this issue:\n\n\n\n\nXcode\n (command line tools) might hang if you try to build a Scheme which is not marked as \nshared\n.\n  Usually it hangs right after you start any \nxcodebuild\n command (e.g. \nxcodebuild -list\n or \nxcodebuild .. archive\n).\n\n\nSolution\n: Please make sure that you marked the Scheme as \nshared\n,\n  and that you actually committed \n pushed it into your repository.\n  For more information please follow this guide: \nXcode scheme not found\n.\n\n\n\n\n\n\nYour script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)\n\n\nYou try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an \nosascript\n). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using \nhttps://github.com/jacobsalmela/tccutil\n.\n\n\nFor example to add \nosascript\n to the allowed OS X Accessibility list you can call \ntccutil\n from\n  your script (don't forget to include it in your repository or download on-the-fly): \nsudo python tccutil.py -i /usr/bin/osascript\n\n\nYou can download the script from GitHub directly, for example: \nwget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py\n.\n\n\n\n\n\n\nIt can also be \nsomething in your app's code\n.\n  An example: one of our user had a simple \npopup in the app, presented only at the first start of the app\n.\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit \n\"Reset Content and Settings\"\n in the iOS Simulator's menu.\n\n\nSolution\n: try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.\n\n\n\n\n\n\n\n\nIt might also be that the build does not hang, \nit just doesn't generate any log output\n.\nThis can happen for various reasons;\nyou can find an example in case of an \niOS library project\n.\n\n\nCocoaPods frameworks signing issue\n\u2693\n\n\nWhen you get an error something like this:\n\n\n=== CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'\n\n\n\n\nThis error is related to how CocoaPods expects code signing configurations for \nframeworks\n.\n\n\nSolution 1: make sure that you upload/include/install a wildcard development provisioning profile\n\u2693\n\n\nUsually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.\n\n\nOn your Mac you most likely have your own Development certificate and\n\nWildcard\n team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.\n\n\nSo, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team \nwildcard\n provisioning profile) to \nbitrise.io\n,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.\n\n\nSolution 2: modifying code signing settings through \nPodfile\n\u2693\n\n\nOne of our beloved user sent us the following fix for this problem.\nYou should add the following script as a \nPost script\n to your \nPodfile\n:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = \n\n      config.build_settings['CODE_SIGNING_REQUIRED'] = \nNO\n\n      config.build_settings['CODE_SIGNING_ALLOWED'] = \nNO\n\n    end\n  end\nend\n\n\n\n\nYou can find a related CocoaPods issue and discussion at:\n\nhttps://github.com/CocoaPods/CocoaPods/issues/4331\n\n\nYou can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one: \nhttps://github.com/CocoaPods/CocoaPods/issues/3063\n.\n\n\nInstalling an Enterprise app: \nUntrusted Enterprise Developer\n\u2693\n\n\nIf you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title \nUntrusted Enterprise Developer\n.\n\n\n\n\nStarting with iOS 9 there's no option to \"Trust\" the developer right from the popup.\n\n\nYou can Trust the developer and enable the app to run in iOS Settings:\n\n\n\n\nOpen the Settings app on your iPhone or iPad\n\n\nSelect the \nGeneral\n category\n\n\nSelect the \nProfile\n option\n\n\nstarting with iOS 9.2 the option was renamed to \nDevice Management\n instead of \nProfile\n\n\n\n\n\n\nTap on the Enterprise App option related to the app (the one mentioned in the popup)\n\n\nTap the \nTrust \"The Developer's Name\"\n button\n\n\nA popup will appear, tap on \nTrust\n again\n\n\n\n\nYou should now be able to run the app, and any other Enterprise app from the same developer.\n\n\nNo dSYM found\n\u2693\n\n\nA couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.\n\n\nSolution:\n\u2693\n\n\nTo generate debug symbols (dSYM) go to your \nXcode Project's Settings -\n Build Settings -\n Debug Information Format\n and set it to \nDWARF with dSYM File\n.\n\n\nInvalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary\n\u2693\n\n\nSolution:\n Generate a new Certificate on the Apple Developer portal, \nnot\n in Xcode.\n\n\nAnother solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.\n\n\nNo identity found\n\u2693\n\n\nYou uploaded the correct \nProvisioning Profile\n and \nCertificate\n pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:\n\n\n22...D11: no identity found\n\n\n\n\nSolution:\n\n\nYou probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like \n--keychain /../../xxx.keychain\n code signing flag\nand a \nCODE_SIGN_KEYCHAIN\n variable set in the \n.pbxproj\n.\n\n\nThis might happen if you migrate your Xcode Bot based setup into Bitrise.\n\n\nTo fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.\n\n\nNo mobileprovision_path found / No embedded.mobileprovision found in ...\n\u2693\n\n\nError: \nNo embedded.mobileprovision found in ...\n\n\nOr: \nNo mobileprovision_path found\n\n\nPossible solution 1: \nSkip Install\n Xcode Settings\n\u2693\n\n\nIf you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the \nSkip Install\n option set to \nYES\n.\n\n\nThis should only be used for iOS frameworks, \nfor iOS apps this should be set to \nNO\n.\n\n\nYou can find the official documentation at:\n\nhttps://developer.apple.com/library/ios/technotes/tn2215/_index.html\n\n- under the \nXcode successfully archived my application, but the Archives Organizer does not list my archive\n section.\n\n\nPossible solution 2: \nInstallation Directory\n Xcode Settings\n\u2693\n\n\nAnother cause of the issue can be\n if you (or a tool you use) modifies\nthe \nBuild Setting -\n Deployment -\n Installation Directory\n settings in your Xcode Project.\nThis can result in an \n.xcarchive\n where your app is not generated\ninto the canonical \nProducts/Applications\n folder, but instead into a \nProducts/Users/USERNAME/...\n folder,\nincluding the full absolute path of an intermediate build.\n\n\nSolution:\n Please make sure that the \nInstallation Directory\n option is set to \n$(LOCAL_APPS_DIR)\n\n(the default value when you generate a new iOS Xcode Project) or \n/Applications\n\n(which is the default value of \n$(LOCAL_APPS_DIR)\n) in your Xcode Project settings,\nand that no build tool you use modifies this option.\n\n\nHuge thanks to \nAntje\n, who reported this solution!\n\n\nDuplicated Schemes\n\u2693\n\n\nThis is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the \nexact same name\n,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations,\n\nrandomly\n. This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this:\n\nxcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action\n when it fails.\n\n\nThis might also happen if you use CocoaPods and one of your Pods have the same name as your project.\n\n\nIn any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run: \nxcodebuild -workspace ./path/to/workspace/file -list\n - or if you use a project file\ninstead of a workspace file: \nxcodebuild -project ./path/to/project/file -list\n.\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.\n\n\nSystem dialog blocks the tests to run\n\u2693\n\n\n(huge thanks to \n@AronI\n who reported this issue and the solution)\n\n\nError:\n\n\n2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}\n\n\n\n\nSolution:\n\n\n\n\nSo to put it simply my problem was my UI Tests were failing.\n\n\n\n\nThe steps leading to the failure were the following:\n\n\n\n\nUnit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.\n\n\nWhen a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).\n\n\nWhen the UITests start the permissions dialog is still visible and overlaying the screen.\n\n\nThe application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails\n\n\n\n\nI resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:\n\n\nlet unitTestMode = NSProcessInfo.processInfo().environment[\nXCTestConfigurationFilePath\n] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}\n\n\n\n\n\n\nThis is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "Frequent iOS issues"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#searching-for-errors-and-issues-in-xcode-generated-output", 
            "text": "This applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the  Output Tool  option\nof the Xcode ... step to  xcodebuild  (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool ( xcodebuild ). All of the official Bitrise Xcode steps\nhave an  Output Tool  input with a  xcodebuild  option.  You should search for  error:  in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.  If that doesn't work you should also search for  warning: , in rare cases Xcode doesn't print an  error:  even if it fails.  If you have the logs on your own machine then you can run something like this in your Terminal:  grep --color 'error:' my.log\ngrep --color 'warning:' my.log", 
            "title": "Searching for errors and issues in Xcode generated output"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#xcode-scheme-not-found", 
            "text": "The first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a  The project named \"Foo\" does not contain a scheme named \"Bar\"  error during build,\nis your Xcode project settings.   Check if the desired Scheme is shared  When you share your scheme the Xcode project changes. Don't forget to  commit  and to  push  your changes!  If the related validation is still running on Bitrise abort it and try to run it again.    Don't forget to commit   push the changes  if you just enabled the Shared option!\nThis change should be reflected in your  git  repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder): *.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme .  If you still can't see the desired Scheme,\ntry to look into your  .gitignore  file and check if you are ignoring the config files of your Xcode project.", 
            "title": "Xcode Scheme not found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#cocoapods-missing-dependency-issue", 
            "text": "", 
            "title": "CocoaPods (missing) dependency issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#error", 
            "text": "ld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  OR:  no such module '...'", 
            "title": "Error:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution", 
            "text": "Most likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace ( .xcworkspace ) file. Go to your App's  Workflow tab  on Bitrise,\nclick  Manage Workflows , click  App Environments  and change the  BITRISE_PROJECT_PATH  item.\nThis will change the default Project Path configuration for every workflow.  If it worked before  and the  BITRISE_PROJECT_PATH  did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#fastlane-export-issue", 
            "text": "This section was contributed by  @kwoylie ,\nand applies if you have a  Gemfile  in your repository and you use\nthe  fastlane  step which uses the  Gemfile  automatically if present.  Gemfile  content was:  gem  fastlane ,  1.104.0 \ngem  gym ,  1.10.0 \ngem  badge ,  0.5.0 \ngem  CFPropertyList , 2.3.3 \ngem  sqlite3 ,  1.3.11  I have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.  I had disabled xcpretty on Fastlane and got the following error from gym:  $/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed:  IDEDistributionThinningStep: 0x7f868c80f810 : Error Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with  IDEDistributionContext: 0x7f868c51ed70; archive(resolved)=' IDEArchive: 0x7f868c4af8d0 ', distributionTask(resolved)='2', distributionMethod(resolved)=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID(resolved)='(null)' \n    Chain (2, self inclusive):\n     IDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID='(null)' \n     IDEDistributionContext: 0x7f868c4b0e70; archive = ' IDEArchive: 0x7f868c4af8d0 ', distributionMethod='(null)', teamID='(null)'  /IDEDistributionContext: 0x7f868c51ed70  This error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:  2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in ` top (required) '\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)  So after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.", 
            "title": "Fastlane Export Issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution_1", 
            "text": "To fix this issue, you just have to add a  Script  step to run the following:  sudo /usr/bin/gem install bundler  This will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#works-in-local-but-not-on-bitriseio", 
            "text": "An example error:  ld: file not found ...  First of all restart your Xcode and try a new build.  If it doesn't help try a  clean build  in Xcode.  If no error was displayed, try resetting your simulator(s).  Another problem could be your CocoaPods version.\nTry updating your CocoaPods with the  [sudo] gem install cocoapods  command.\nAlso make sure that your  Podfile.lock  is  committed into your repository ,\nas that's the file which describes the exact Pod versions you use. Without this Bitrise might download newer versions of Pods than the ones you use.  If there's still no error try deleting the  Pods  folder in your project and run the  pod install  command again.  Finally, if none of the above helped, or you get an error with  ld: file not found  on Bitrise,\nand the path contains  DerivedData , with no other error message, like this:  ld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  Try deleting the Xcode local cache. After that the error should be reproducible on your local machine.  You can delete the local Xcode cache using your Terminal:  rm -rf ~/Library/Developer/Xcode/DerivedData", 
            "title": "Works in local but not on Bitrise.io"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#step-hangs-times-out-after-a-period-without-any-logs", 
            "text": "Check whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.  Most frequent sources of this issue:   Xcode  (command line tools) might hang if you try to build a Scheme which is not marked as  shared .\n  Usually it hangs right after you start any  xcodebuild  command (e.g.  xcodebuild -list  or  xcodebuild .. archive ).  Solution : Please make sure that you marked the Scheme as  shared ,\n  and that you actually committed   pushed it into your repository.\n  For more information please follow this guide:  Xcode scheme not found .    Your script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)  You try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an  osascript ). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using  https://github.com/jacobsalmela/tccutil .  For example to add  osascript  to the allowed OS X Accessibility list you can call  tccutil  from\n  your script (don't forget to include it in your repository or download on-the-fly):  sudo python tccutil.py -i /usr/bin/osascript  You can download the script from GitHub directly, for example:  wget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py .    It can also be  something in your app's code .\n  An example: one of our user had a simple  popup in the app, presented only at the first start of the app .\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit  \"Reset Content and Settings\"  in the iOS Simulator's menu.  Solution : try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.     It might also be that the build does not hang,  it just doesn't generate any log output .\nThis can happen for various reasons;\nyou can find an example in case of an  iOS library project .", 
            "title": "Step hangs (times out after a period without any logs)"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#cocoapods-frameworks-signing-issue", 
            "text": "When you get an error something like this:  === CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'  This error is related to how CocoaPods expects code signing configurations for  frameworks .", 
            "title": "CocoaPods frameworks signing issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution-1-make-sure-that-you-uploadincludeinstall-a-wildcard-development-provisioning-profile", 
            "text": "Usually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.  On your Mac you most likely have your own Development certificate and Wildcard  team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.  So, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team  wildcard  provisioning profile) to  bitrise.io ,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.", 
            "title": "Solution 1: make sure that you upload/include/install a wildcard development provisioning profile"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution-2-modifying-code-signing-settings-through-podfile", 
            "text": "One of our beloved user sent us the following fix for this problem.\nYou should add the following script as a  Post script  to your  Podfile :  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] =  \n      config.build_settings['CODE_SIGNING_REQUIRED'] =  NO \n      config.build_settings['CODE_SIGNING_ALLOWED'] =  NO \n    end\n  end\nend  You can find a related CocoaPods issue and discussion at: https://github.com/CocoaPods/CocoaPods/issues/4331  You can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one:  https://github.com/CocoaPods/CocoaPods/issues/3063 .", 
            "title": "Solution 2: modifying code signing settings through Podfile"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#installing-an-enterprise-app-untrusted-enterprise-developer", 
            "text": "If you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title  Untrusted Enterprise Developer .   Starting with iOS 9 there's no option to \"Trust\" the developer right from the popup.  You can Trust the developer and enable the app to run in iOS Settings:   Open the Settings app on your iPhone or iPad  Select the  General  category  Select the  Profile  option  starting with iOS 9.2 the option was renamed to  Device Management  instead of  Profile    Tap on the Enterprise App option related to the app (the one mentioned in the popup)  Tap the  Trust \"The Developer's Name\"  button  A popup will appear, tap on  Trust  again   You should now be able to run the app, and any other Enterprise app from the same developer.", 
            "title": "Installing an Enterprise app: Untrusted Enterprise Developer"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-dsym-found", 
            "text": "A couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.", 
            "title": "No dSYM found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution_2", 
            "text": "To generate debug symbols (dSYM) go to your  Xcode Project's Settings -  Build Settings -  Debug Information Format  and set it to  DWARF with dSYM File .", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#invalid-ipa-get-task-allow-values-in-the-embedded-mobileprovision-dont-match-your-binary", 
            "text": "Solution:  Generate a new Certificate on the Apple Developer portal,  not  in Xcode.  Another solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.", 
            "title": "Invalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-identity-found", 
            "text": "You uploaded the correct  Provisioning Profile  and  Certificate  pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:  22...D11: no identity found  Solution:  You probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like  --keychain /../../xxx.keychain  code signing flag\nand a  CODE_SIGN_KEYCHAIN  variable set in the  .pbxproj .  This might happen if you migrate your Xcode Bot based setup into Bitrise.  To fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.", 
            "title": "No identity found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-mobileprovision_path-found-no-embeddedmobileprovision-found-in", 
            "text": "Error:  No embedded.mobileprovision found in ...  Or:  No mobileprovision_path found", 
            "title": "No mobileprovision_path found / No embedded.mobileprovision found in ..."
        }, 
        {
            "location": "/ios/frequent-ios-issues/#possible-solution-1-skip-install-xcode-settings", 
            "text": "If you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the  Skip Install  option set to  YES .  This should only be used for iOS frameworks,  for iOS apps this should be set to  NO .  You can find the official documentation at: https://developer.apple.com/library/ios/technotes/tn2215/_index.html \n- under the  Xcode successfully archived my application, but the Archives Organizer does not list my archive  section.", 
            "title": "Possible solution 1: Skip Install Xcode Settings"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#possible-solution-2-installation-directory-xcode-settings", 
            "text": "Another cause of the issue can be  if you (or a tool you use) modifies\nthe  Build Setting -  Deployment -  Installation Directory  settings in your Xcode Project.\nThis can result in an  .xcarchive  where your app is not generated\ninto the canonical  Products/Applications  folder, but instead into a  Products/Users/USERNAME/...  folder,\nincluding the full absolute path of an intermediate build.  Solution:  Please make sure that the  Installation Directory  option is set to  $(LOCAL_APPS_DIR) \n(the default value when you generate a new iOS Xcode Project) or  /Applications \n(which is the default value of  $(LOCAL_APPS_DIR) ) in your Xcode Project settings,\nand that no build tool you use modifies this option.  Huge thanks to  Antje , who reported this solution!", 
            "title": "Possible solution 2: Installation Directory Xcode Settings"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#duplicated-schemes", 
            "text": "This is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the  exact same name ,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations, randomly . This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this: xcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action  when it fails.  This might also happen if you use CocoaPods and one of your Pods have the same name as your project.  In any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run:  xcodebuild -workspace ./path/to/workspace/file -list  - or if you use a project file\ninstead of a workspace file:  xcodebuild -project ./path/to/project/file -list .\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.", 
            "title": "Duplicated Schemes"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#system-dialog-blocks-the-tests-to-run", 
            "text": "(huge thanks to  @AronI  who reported this issue and the solution)  Error:  2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}  Solution:   So to put it simply my problem was my UI Tests were failing.   The steps leading to the failure were the following:   Unit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.  When a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).  When the UITests start the permissions dialog is still visible and overlaying the screen.  The application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails   I resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:  let unitTestMode = NSProcessInfo.processInfo().environment[ XCTestConfigurationFilePath ] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}   This is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "System dialog blocks the tests to run"
        }, 
        {
            "location": "/ios/known-xcode-issues/", 
            "text": "Feel free to add your comments to this list.\n\n\nYou can do it directly on GitHub, by clicking this link\n,\njust don't forget to send it as a Pull Request ;)\n\n\nPerformance related\n\u2693\n\n\nNote: mainly affects UI tests.\n\n\nThe root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on \nbitrise.io\n),\nMacBook Airs, Mac Minis with HDD storage, ...\n\n\nIt can happen even if you use\n\nApple's Xcode Bots CI server\n on \nnon SSD\n\nMac Mini.\n\n\nExamples:\n\n\n\n\nUI Tests fail to start\n\n\nOne or more UI Test case hangs\n\n\n\n\nRelated links \n reports:\n\n\n\n\nXCode bot error: Early unexpected exit, operation never finished bootstrapping\n\n\nUI Testing Failure - Failed to launch within 2.5s, Interrupting test\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for ...\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s\n\n\nUI Testing Failure - Failed to perform AX action for monitoring the event loop\n\n\nUI Testing Failure due to failed AX Action\n\n\n\n\nPossible solutions\n\u2693\n\n\n\n\nAs reported \nin this StackOverflow answer\n \n\n  \nin this Apple dev forum discussion\n\n  a possible workaround can be to \nnot to store \nXCUIApplication()\n in a variable\n, instead\n  reference / use it directly. E.g. instead of: \nlet app = XCUIApplication() ; ... ; app.launch()\n\n  do: \nXCUIApplication().launch()\n\n\nOthers reported that if you add a delay after \napp.launch()\n it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels.\n\n\nTry another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")\n\n\nUse the Async testing APIs\n\n\nSome users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.\n\n\nA great article about splitting tests into multiple Schemes:\n  \nhttp://artsy.github.io/blog/2016/04/06/Testing-Schemes\n\n\n\n\n\n\nSometimes it's related to a code which makes Xcode to misbehave\n\n\nTry another Xcode version.\n\n\n\n\nFlaky UI tests, UI test cases failing randomly\n\u2693\n\n\nThis can happen with a really simple project too. Even something as\nsimple as:\n\n\nfunc testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[\nMaster\n]\n        masterNavigationBar.buttons[\nAdd\n].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier(\nDetail\n).buttons[\nMaster\n].tap()\n        masterNavigationBar.buttons[\nEdit\n].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[\nDelete\n].tap()\n\n        masterNavigationBar.buttons[\nDone\n].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }\n\n\n\n\ncan trigger this issue.\n\n\nPossible solutions\n\u2693\n\n\nWe could reproduce this issue with the code above, using \nXcode 7.3\n.\nThe exact same code worked perfectly with \nXcode 7.2.1\n while it randomly\nfailed with \n7.3\n. The solution was to use a different iOS Simulator device.\nThe test failed \n2 out of 3\n on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.\n\n\nChanging the simulator device to \"iPhone 6s Plus\" solved the issue with \nXcode 7.3\n.\n\n\nXcode Unit Test fails without any error, with exit code 65\n\u2693\n\n\nThis can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.\n\n\nYou can find a long discussion, with possible reasons \n solutions \nhere\n.\n\n\nA quick summary:\n\n\n\n\nFirst of all, if you use \nxcpretty\n to format the output try a build without it\n  (if you use the Xcode Test step you can set \nxcodebuild\n as the \"Output Tool\" option/input\n  to not to format the log produced by \nxcodebuild\n). The cause is: \nxcpretty\n sometimes\n  omits the error message in it's output. \nRelated GitHub issue\n.\n\n\nIf you don't use our \nXcode Test\n step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.\n\n\nIf you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.\n\n\nTry \nanother Xcode version\n,\n  there are issues which are present in one Xcode version but not in another one.\n\n\nMake sure your desired \nXcode scheme is shared\n. Don't forget to commit and push the changes if you just enabled it.\n\n\nIt might also be a \nproject configuration issue in your Xcode project\n,\n  or a \ncode issue in your tests\n,\n  or a \nmulti threading issue in your code\n.\n\n\nWe received reports that this might also be caused by Code Coverage report generation,\n  you can disable the \nGenerate code coverage files?\n option of the Xcode Test step\n  to not to generate Code Coverage files.\n\n\nIf the previous steps did not help, you should check the whole discussion and suggested solutions at: \nhttps://github.com/bitrise-io/bitrise.io/issues/5\n\n\n\n\nSegmentation fault\n\u2693\n\n\nThe error is:\n\n\nclang: error: unable to execute command: Segmentation fault: 11\n\n\n\n\nThis is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on \nbitrise.io\n. Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.\n\n\nThe solution is simple, just make sure that you use the same Xcode version everywhere.\n\n\nIssues which occur with the Xcode Command Line Tools (\nxcodebuild\n), but not with Xcode.app\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\n\nNote: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9\n\n\nXcode 8 - \nxcodebuild .. test\n hangs at the very end of the tests\n\u2693\n\n\nxcodebuild .. test\n hangs at the end of the tests (after it printed the summary of the tests)\nif the output of \nxcodebuild ..\n is piped / redirected in any way.\nThis means that \nxcodebuild .. test .. | xcpretty\n or even \ntee\n can be used to reproduce this issue.\n\n\n\n\nAffected Xcode versions\n: so far it seems to be an \nXcode 8 beta\n only issue, and it was fixed in \nXcode 8 beta 4\n.\n\n\nRelated \nradar\n and \nxcpretty\n issues.\n\n\nWorkaround: use a \nScript\n step instead of the Xcode Test step,\n  and copy paste the \nxcodebuild\n command from the hanging Xcode Test step's log, without \n| xcpretty\n etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base \nxcodebuild\n command should be able to run, if the output\n  is not redirected / piped.\n\n\n\n\nEvery/Any Xcode command hangs\n\u2693\n\n\nThis is a rare issue, caused by running a \nnon shared Scheme\n.\n\n\nxcodebuild\n can only work with \nshared Schemes\n and user schemes (auto created by Xcode.app).\n\nxcodebuild\n, unlike Xcode.app, \ndoes not\n auto create user schemes, it can only work with\n\nshared schemes\n and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app \non the specific Mac machine the first time\n, for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in \nxcodebuild\n hanging, instead\nof an error message.\n\n\nIf this is the case then any \nxcodebuild\n command will hang, even something\nas simple as \nxcodebuild -list\n.\n\n\nSolution\n\u2693\n\n\nMake sure that you marked the Scheme as shared, and that you actually committed \n pushed it into your repository\n.\n\n\nBuild hangs\n\u2693\n\n\nSimulator reset\n\u2693\n\n\nAs reported \nhere\n,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script \nxcrun simctl erase all\n, it can cause Xcode / the Simulator to hang.\n\n\nOther\n\u2693\n\n\nIt might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).\n\n\nYou can find pointers to identify and solve these kind\nof issues \non our old DevCenter\n.", 
            "title": "List of known Xcode issues"
        }, 
        {
            "location": "/ios/known-xcode-issues/#performance-related", 
            "text": "Note: mainly affects UI tests.  The root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on  bitrise.io ),\nMacBook Airs, Mac Minis with HDD storage, ...  It can happen even if you use Apple's Xcode Bots CI server  on  non SSD \nMac Mini.  Examples:   UI Tests fail to start  One or more UI Test case hangs   Related links   reports:   XCode bot error: Early unexpected exit, operation never finished bootstrapping  UI Testing Failure - Failed to launch within 2.5s, Interrupting test  Assertion Failure: UI Testing Failure - Failed to receive completion for ...  Assertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s  UI Testing Failure - Failed to perform AX action for monitoring the event loop  UI Testing Failure due to failed AX Action", 
            "title": "Performance related"
        }, 
        {
            "location": "/ios/known-xcode-issues/#possible-solutions", 
            "text": "As reported  in this StackOverflow answer   \n   in this Apple dev forum discussion \n  a possible workaround can be to  not to store  XCUIApplication()  in a variable , instead\n  reference / use it directly. E.g. instead of:  let app = XCUIApplication() ; ... ; app.launch() \n  do:  XCUIApplication().launch()  Others reported that if you add a delay after  app.launch()  it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels.  Try another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")  Use the Async testing APIs  Some users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.  A great article about splitting tests into multiple Schemes:\n   http://artsy.github.io/blog/2016/04/06/Testing-Schemes    Sometimes it's related to a code which makes Xcode to misbehave  Try another Xcode version.", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/ios/known-xcode-issues/#flaky-ui-tests-ui-test-cases-failing-randomly", 
            "text": "This can happen with a really simple project too. Even something as\nsimple as:  func testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[ Master ]\n        masterNavigationBar.buttons[ Add ].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier( Detail ).buttons[ Master ].tap()\n        masterNavigationBar.buttons[ Edit ].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[ Delete ].tap()\n\n        masterNavigationBar.buttons[ Done ].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }  can trigger this issue.", 
            "title": "Flaky UI tests, UI test cases failing randomly"
        }, 
        {
            "location": "/ios/known-xcode-issues/#possible-solutions_1", 
            "text": "We could reproduce this issue with the code above, using  Xcode 7.3 .\nThe exact same code worked perfectly with  Xcode 7.2.1  while it randomly\nfailed with  7.3 . The solution was to use a different iOS Simulator device.\nThe test failed  2 out of 3  on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.  Changing the simulator device to \"iPhone 6s Plus\" solved the issue with  Xcode 7.3 .", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcode-unit-test-fails-without-any-error-with-exit-code-65", 
            "text": "This can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.  You can find a long discussion, with possible reasons   solutions  here .  A quick summary:   First of all, if you use  xcpretty  to format the output try a build without it\n  (if you use the Xcode Test step you can set  xcodebuild  as the \"Output Tool\" option/input\n  to not to format the log produced by  xcodebuild ). The cause is:  xcpretty  sometimes\n  omits the error message in it's output.  Related GitHub issue .  If you don't use our  Xcode Test  step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.  If you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.  Try  another Xcode version ,\n  there are issues which are present in one Xcode version but not in another one.  Make sure your desired  Xcode scheme is shared . Don't forget to commit and push the changes if you just enabled it.  It might also be a  project configuration issue in your Xcode project ,\n  or a  code issue in your tests ,\n  or a  multi threading issue in your code .  We received reports that this might also be caused by Code Coverage report generation,\n  you can disable the  Generate code coverage files?  option of the Xcode Test step\n  to not to generate Code Coverage files.  If the previous steps did not help, you should check the whole discussion and suggested solutions at:  https://github.com/bitrise-io/bitrise.io/issues/5", 
            "title": "Xcode Unit Test fails without any error, with exit code 65"
        }, 
        {
            "location": "/ios/known-xcode-issues/#segmentation-fault", 
            "text": "The error is:  clang: error: unable to execute command: Segmentation fault: 11  This is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on  bitrise.io . Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.  The solution is simple, just make sure that you use the same Xcode version everywhere.", 
            "title": "Segmentation fault"
        }, 
        {
            "location": "/ios/known-xcode-issues/#issues-which-occur-with-the-xcode-command-line-tools-xcodebuild-but-not-with-xcodeapp", 
            "text": "", 
            "title": "Issues which occur with the Xcode Command Line Tools (xcodebuild), but not with Xcode.app"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcodebuild-hangs-when-a-test-causes-exc_bad_access-kernel-exception", 
            "text": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception  Note: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9", 
            "title": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcode-8-xcodebuild-test-hangs-at-the-very-end-of-the-tests", 
            "text": "xcodebuild .. test  hangs at the end of the tests (after it printed the summary of the tests)\nif the output of  xcodebuild ..  is piped / redirected in any way.\nThis means that  xcodebuild .. test .. | xcpretty  or even  tee  can be used to reproduce this issue.   Affected Xcode versions : so far it seems to be an  Xcode 8 beta  only issue, and it was fixed in  Xcode 8 beta 4 .  Related  radar  and  xcpretty  issues.  Workaround: use a  Script  step instead of the Xcode Test step,\n  and copy paste the  xcodebuild  command from the hanging Xcode Test step's log, without  | xcpretty  etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base  xcodebuild  command should be able to run, if the output\n  is not redirected / piped.", 
            "title": "Xcode 8 - xcodebuild .. test hangs at the very end of the tests"
        }, 
        {
            "location": "/ios/known-xcode-issues/#everyany-xcode-command-hangs", 
            "text": "This is a rare issue, caused by running a  non shared Scheme .  xcodebuild  can only work with  shared Schemes  and user schemes (auto created by Xcode.app). xcodebuild , unlike Xcode.app,  does not  auto create user schemes, it can only work with shared schemes  and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app  on the specific Mac machine the first time , for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in  xcodebuild  hanging, instead\nof an error message.  If this is the case then any  xcodebuild  command will hang, even something\nas simple as  xcodebuild -list .", 
            "title": "Every/Any Xcode command hangs"
        }, 
        {
            "location": "/ios/known-xcode-issues/#solution", 
            "text": "Make sure that you marked the Scheme as shared, and that you actually committed   pushed it into your repository .", 
            "title": "Solution"
        }, 
        {
            "location": "/ios/known-xcode-issues/#build-hangs", 
            "text": "", 
            "title": "Build hangs"
        }, 
        {
            "location": "/ios/known-xcode-issues/#simulator-reset", 
            "text": "As reported  here ,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script  xcrun simctl erase all , it can cause Xcode / the Simulator to hang.", 
            "title": "Simulator reset"
        }, 
        {
            "location": "/ios/known-xcode-issues/#other", 
            "text": "It might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).  You can find pointers to identify and solve these kind\nof issues  on our old DevCenter .", 
            "title": "Other"
        }, 
        {
            "location": "/android/frequent-android-issues/", 
            "text": "Could not find an android package or you have not accepted the license agreements\n\u2693\n\n\nError\n\u2693\n\n\n A problem occurred configuring project ':lib'.\n   \n You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nor\n\n\nCould not find com.android.support:appcompat-v7:24.2.0.\n\n\n\n\nSolution\n\u2693\n\n\nThe error means that your build requires an Android package which is either not (yet) preinstalled\n(\nyou can see which packages are preinstalled \nhere, on GitHub\n -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package!\n),\n\nor outdated\n.\n\n\nThe solution is quite simple, you just have to install/update the related package(s).\nTo do that add a \nScript\n step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'\n\n\n\n\nIn most cases you don't need all three packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.\n\n\n\n\nWe update the preinstalled Android packages on every weekend\n\n\nso if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.\n\n\n\n\nAlternative solution for the license error\n\u2693\n\n\nAn alternative solution for the \nYou have not accepted the license agreements of the following SDK components\n\nerror, as printed in the log:\n\n\nBefore building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nYou can find more info at the link printed in the log (\nhttp://d.android.com/r/studio-ui/export-licenses.html\n),\nbut in short this can be done by:\n\n\nLocate the licenses on your Mac/PC\n:\n\n\n\n\nIf you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at \nandroid sdk home path\n/licenses\n) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.\n\n\n\n\nCreate an \nandroid-licenses\n directory in the root directory of your git repository,\nand copy the license files into this directory\n,\nthen in your Workflow copy the licenses to the right location using a \nScript\n step.\n\n\nAdd the \nScript\n step right after the \nGit Clone\n step\n (that's when your code is available\non the build virtual machine), with the content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/ \n$ANDROID_HOME/licenses/\n\n\n\n\nThat's all, this script copies the licenses from the \nandroid-licenses\n (from your repository)\ninto the system's Android SDK Home path under \nlicenses\n directory.\n\n\nInstall an additional Android package\n\u2693\n\n\nAn Android package (e.g. a build tool version) is not preinstalled or missing?\nNo problem at all, the solution is quite simple!\n\n\nJust add a \nScript\n step to your Workflow (can be the very first step)\nand run \nandroid sdk update ..\n with the package you want to install.\n\n\nAn example \nScript\n step content which installs \nbuild-tools-24.0.3\n:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter build-tools-24.0.3 | grep 'package installed'\n\n\n\n\nThis should work for any other Android package - you can\nget the full available Android package list by running this on your Mac/PC:\n\n\nandroid list sdk --no-ui --all --extended\n\n\n\n\n\n\nRequest a package to be pre-installed\n\n\nIf we missed an Android package which should be pre-installed,\nfeel free to create a Pull Request here: \nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile", 
            "title": "Frequent Android issues"
        }, 
        {
            "location": "/android/frequent-android-issues/#could-not-find-an-android-package-or-you-have-not-accepted-the-license-agreements", 
            "text": "", 
            "title": "Could not find an android package or you have not accepted the license agreements"
        }, 
        {
            "location": "/android/frequent-android-issues/#error", 
            "text": "A problem occurred configuring project ':lib'.\n     You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  or  Could not find com.android.support:appcompat-v7:24.2.0.", 
            "title": "Error"
        }, 
        {
            "location": "/android/frequent-android-issues/#solution", 
            "text": "The error means that your build requires an Android package which is either not (yet) preinstalled\n( you can see which packages are preinstalled  here, on GitHub  -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package! ), or outdated .  The solution is quite simple, you just have to install/update the related package(s).\nTo do that add a  Script  step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'  In most cases you don't need all three packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.   We update the preinstalled Android packages on every weekend  so if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.", 
            "title": "Solution"
        }, 
        {
            "location": "/android/frequent-android-issues/#alternative-solution-for-the-license-error", 
            "text": "An alternative solution for the  You have not accepted the license agreements of the following SDK components \nerror, as printed in the log:  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  You can find more info at the link printed in the log ( http://d.android.com/r/studio-ui/export-licenses.html ),\nbut in short this can be done by:  Locate the licenses on your Mac/PC :   If you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at  android sdk home path /licenses ) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.   Create an  android-licenses  directory in the root directory of your git repository,\nand copy the license files into this directory ,\nthen in your Workflow copy the licenses to the right location using a  Script  step.  Add the  Script  step right after the  Git Clone  step  (that's when your code is available\non the build virtual machine), with the content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/  $ANDROID_HOME/licenses/  That's all, this script copies the licenses from the  android-licenses  (from your repository)\ninto the system's Android SDK Home path under  licenses  directory.", 
            "title": "Alternative solution for the license error"
        }, 
        {
            "location": "/android/frequent-android-issues/#install-an-additional-android-package", 
            "text": "An Android package (e.g. a build tool version) is not preinstalled or missing?\nNo problem at all, the solution is quite simple!  Just add a  Script  step to your Workflow (can be the very first step)\nand run  android sdk update ..  with the package you want to install.  An example  Script  step content which installs  build-tools-24.0.3 :  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter build-tools-24.0.3 | grep 'package installed'  This should work for any other Android package - you can\nget the full available Android package list by running this on your Mac/PC:  android list sdk --no-ui --all --extended   Request a package to be pre-installed  If we missed an Android package which should be pre-installed,\nfeel free to create a Pull Request here:  https://github.com/bitrise-docker/android/blob/master/Dockerfile", 
            "title": "Install an additional Android package"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/", 
            "text": "To be able to run your Linux stack builds locally you'll need \ndocker\n.\n\n\nFor Linux just follow the \nofficial install instructions\n.\n\n\nFor Mac you can use \nDocker for Mac\n,\nwhich is probably the easiest way to get started.\n\n\nFor this example we'll use \nthis Bitrise Android sample project\n.\n\n\n\n\nLarge images ahead\n\n\nThe official Bitrise Docker images are quite large, due to the fact that it includes\na wide variety of preinstalled tools. You'll need at \nleast\n 20-25 GB free disk space!\n\n\n\n\nIf you're not familiar with the \nBitrise CLI\n\nyou should try that first. You don't have to master the CLI,\nif you know what \nbitrise run WORKFLOW\n does, that should be enough for this tutorial.\n\n\nTL;DR;\n\u2693\n\n\nIf you're familiar with \ndocker\n and the \nbitrise\n CLI:\n\n\n\n\nInstall \ndocker\n\n\nMake sure you have your \nbitrise.yml\n in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)\n\n\ncd\n into your repository's directory on your Mac/Linux\n\n\ndocker pull bitriseio/docker-android:latest\n\n\ndocker run --env CI=false --volume \"$(pwd):/bitrise/src\" --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\nKeep reading if you want to read more details and notes about the process and commands!\n\n\nGetting started\n\u2693\n\n\nOpen your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the\n\nbitriseio/docker-android\n docker image.\nYou can find other official Bitrise docker images \non our Docker Hub page\n.\nFor this example we'll use the \nbitriseio/docker-android\n one.\n\n\nDownloading docker images from the \nDocker Hub\n is quite easy:\n\n\ndocker pull bitriseio/docker-android:latest\n\n\n\n\nBe prepared, this can take quite a bit of time, as this image is over 10 GB.\n\nIf the download would fail or hang, you can restart it any time by running\nthe same command again.\n\n\nOnce the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration (\nbitrise.yml\n).\n\n\n\n\nbitrise.yml\n\n\nYou can download your project's \nbitrise.yml\n from the \nWorkflow Editor\n\non \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\n\n\nIn your Terminal / Command Line go to (\ncd\n) the root directory\nof \nyour repository\n, and make sure your \nbitrise.yml\n is at this location.\n\n\nRun your builds\n\u2693\n\n\nThe only thing left to do is to actually run a build:\n\n\ndocker run --env CI=false --volume \n$(pwd):/bitrise/src\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\nDon't forget to replace \nWORKFLOW\n with the actual ID of your workflow in your \nbitrise.yml\n,\nwith something like \nprimary\n!\n\n\nThis command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available \ninside\n the\ncontainer at the path \n/bitrise/src\n.\n\n\nThe \n--env CI=false\n flag sets the environment variable \nCI\n to \nfalse\n - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the \nGit Clone\n step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a \n--volume\n).\n\n\nThe \n--rm\n flag tells docker to discard the container after the \ndocker run\n\ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the \ndocker run ..\n commands are the files stored at the shared \n--volume\n\n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the \n--rm\n flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container - \nNote: simply running the command again \nwill not\n use the same container,\nbut \nwill create a new one\n!", 
            "title": "How to run your build locally in Docker"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#tldr", 
            "text": "If you're familiar with  docker  and the  bitrise  CLI:   Install  docker  Make sure you have your  bitrise.yml  in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)  cd  into your repository's directory on your Mac/Linux  docker pull bitriseio/docker-android:latest  docker run --env CI=false --volume \"$(pwd):/bitrise/src\" --rm bitriseio/docker-android:latest bitrise run WORKFLOW   Keep reading if you want to read more details and notes about the process and commands!", 
            "title": "TL;DR;"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#getting-started", 
            "text": "Open your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the bitriseio/docker-android  docker image.\nYou can find other official Bitrise docker images  on our Docker Hub page .\nFor this example we'll use the  bitriseio/docker-android  one.  Downloading docker images from the  Docker Hub  is quite easy:  docker pull bitriseio/docker-android:latest  Be prepared, this can take quite a bit of time, as this image is over 10 GB. If the download would fail or hang, you can restart it any time by running\nthe same command again.  Once the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration ( bitrise.yml ).   bitrise.yml  You can download your project's  bitrise.yml  from the  Workflow Editor \non  bitrise.io , under the  bitrise.yml  section.   In your Terminal / Command Line go to ( cd ) the root directory\nof  your repository , and make sure your  bitrise.yml  is at this location.", 
            "title": "Getting started"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#run-your-builds", 
            "text": "The only thing left to do is to actually run a build:  docker run --env CI=false --volume  $(pwd):/bitrise/src  --rm bitriseio/docker-android:latest bitrise run WORKFLOW  Don't forget to replace  WORKFLOW  with the actual ID of your workflow in your  bitrise.yml ,\nwith something like  primary !  This command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available  inside  the\ncontainer at the path  /bitrise/src .  The  --env CI=false  flag sets the environment variable  CI  to  false  - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the  Git Clone  step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a  --volume ).  The  --rm  flag tells docker to discard the container after the  docker run \ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the  docker run ..  commands are the files stored at the shared  --volume \n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the  --rm  flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container -  Note: simply running the command again  will not  use the same container,\nbut  will create a new one !", 
            "title": "Run your builds"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/", 
            "text": "If you want to skip a specific commit, to not to start a build,\nall you have to do is to include either \n[skip ci]\n or \n[ci skip]\n\nin the commit message.\n\n\nFor example, the commit message:\n\n\nThis is not important, please [skip ci]\n\n\n\n\nwon't start a build, nor will:\n\n\nI just changed the README\n\n[ci skip]\n\n\n\n\n\n\nOnly the head/last commit message is checked!\n\n\nIf you push more than one commit\n, only the last (\"head\") commit's\nmessage will be checked for the skip ci pattern!\n\n\n\n\nIf you'd decide that you still want to start a build you'll have to\neither rebase that commit (e.g. just change its commit message), or push another commit.\n\n\n\n\nYou can push an empty commit\n\n\nGit allows to create and push empty commits, so if you'd decide that you\nstill want to build a skipped build you can do \ngit commit --allow-empty -m \"I decided to run this\"\n\non the related branch and push the commit.\n\n\n\n\nPull Requests\n\u2693\n\n\nSkip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.\n\n\nIn short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can \nfetch\n through \ngit\n (if you add the related \nrefs/\n to your git \nfetch\n config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through \ngit\n directly.\n\n\n\n\nWhat's the commit message of a Pull Request?\n\n\nIn any case this means that \nthe Pull Request itself\n is treated as a (virtual) commit,\nwhere \nthe commit message is the title + description of the Pull Request\n and\nnot the commit(s) of the pull request!\n\n\n\n\nThis means that, \nif you want to skip a pull request\n, you have to include the Skip CI\npattern \nin the Pull Request's title or description\n, and not in the commit's message!\n\n\nOnce you decide to not to skip the Pull Request / more commits in the pull request\n\nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Skip a Build (skip ci)"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/#pull-requests", 
            "text": "Skip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.  In short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can  fetch  through  git  (if you add the related  refs/  to your git  fetch  config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through  git  directly.   What's the commit message of a Pull Request?  In any case this means that  the Pull Request itself  is treated as a (virtual) commit,\nwhere  the commit message is the title + description of the Pull Request  and\nnot the commit(s) of the pull request!   This means that,  if you want to skip a pull request , you have to include the Skip CI\npattern  in the Pull Request's title or description , and not in the commit's message!  Once you decide to not to skip the Pull Request / more commits in the pull request \nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/", 
            "text": "For this example we'll attach the OS X \nsystem.log\n to the Build as an Artifact,\nbut this works for any file, even for ones that you generate during the build,\nyou just have to replace the example path we use (\n/var/log/system.log\n) with the path you want to deploy.\nYou can of course use Environment Variables in the path too, like \n$HOME/\n.\n\n\nDeployed Artifacts appear on the Build's page, in the Artifacts \n Apps section,\nand anyone who has access to the Build page can download it from there.\n\n\nTo do this:\n\n\n\n\nAdd a new \nDeploy to Bitrise.io\n step to your workflow, to any point you want to (can be the very last step in the workflow, but of course if you want to deploy a file which is generated during the build you should add the step \nafter\n the file is generated and available).\n\n\nChange the \nDeploy directory or file path\n input of the Step to: \n/var/log/system.log\n\n\n\n\nA YAML configuration example of the step \n input:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: \n/var/log/system.log\n\n\n\n\nThat's all, your next build will attach the OS X system log file\nto your build - you'll see it at the top of the Build's page.\n\n\n\n\nBy default the \nDeploy to Bitrise.io\n will always run\n\n\nBy default the \nDeploy to Bitrise.io\n will always run,\neven if a previous step fails, \nso you can deploy failed step/tool logs too.\n\n\n\n\nDeploy a directory\n\u2693\n\n\nThe \nDeploy to Bitrise.io\n step accepts both file and directory path as its input,\nbut by default \nit does not deploy files recursively\n, from sub directories\nif you specify a directory as it's \ndeploy_path\n input.\n\n\nIf you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.\n\n\nIn this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.\n\n\nAn example configuration:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'\n\n\n\n\nNote: as every input's, \nis_compress\n's value have to be a \nstring\n, that's why \ntrue\n is surrounded with quotes.\n\n\n\n\nUsing more than one \nDeploy to Bitrise.io\n step\n\n\nYou can use as many \nDeploy to Bitrise.io\n steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Attach any file as an Artifact to the Build"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/#deploy-a-directory", 
            "text": "The  Deploy to Bitrise.io  step accepts both file and directory path as its input,\nbut by default  it does not deploy files recursively , from sub directories\nif you specify a directory as it's  deploy_path  input.  If you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.  In this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.  An example configuration:      - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'  Note: as every input's,  is_compress 's value have to be a  string , that's why  true  is surrounded with quotes.   Using more than one  Deploy to Bitrise.io  step  You can use as many  Deploy to Bitrise.io  steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Deploy a directory"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/", 
            "text": "You can expose Environment Variables from one Step,\nto make it available for every other Step performed after the Step during the build.\nAn example might be that you want to generate a\nrelease note which you want to use in a message or deploy step.\nExposing environment variables is really easy,\nyou just have to use \nenvman\n if you want to make it available for every other Step.\n\n\nA very simple example might be:\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\n\nYou can call \nenvman\n in any Step, including a script step,\nor even in your own script (stored in your repository) if you call it from a \nbitrise\n build.\n\n\nEnvman can be used in a couple of ways.\nYou can specify the value as the \n--value\n parameter (you can see this in the previous example),\npipe the value:\n\n\necho 'hi' | envman add --key MY_RELEASE_NOTE\n\n\n\n\nor read the value from a file:\n\n\nenvman add --key MY_RELEASE_NOTE --valuefile ./some/file/path\n\n\n\n\nYou can read more about how \nenvman\n can\nbe used on it's \nGitHub page\n.\n\n\n\n\nEnv Var value size limit\n\n\nEnvironment Variable values set through \nenvman\n are limited to 10KB by default.\nThis is done in order to prevent issues with common tools.\nDifferent tools have different environment size constraints,\ne.g. \nBash\n will start to fail on OS X once the environments set\nexceed ~120KB (\nin total, not a single variable!\n).\n\n\nFor larger data you should use files or other solutions,\nand use environment variables to point to the file / to the\nID or location of where the data is stored.\n\n\n\n\nOnce the environment variable is exposed you can use it like\nany other environment variable. In \nbash\n you can reference\nthe previous example environment as: \n$MY_RELEASE_NOTE\n.\n\n\nYou can of course use these exposed environment variables in the inputs of other Steps.\nFor example the \nHockeyApp Deploy\n step has a \nnotes\n input,\nyou can reference the previous example variable by inserting \n$MY_RELEASE_NOTE\n into the input,\nlike: \nThe Release Note: $MY_RELEASE_NOTE\n,\nwhich will be resolved as \nThe Release Note: This is the release note\n (if you used\nthe first example to set the value of \nMY_RELEASE_NOTE\n).\n\n\nA simple example, exposing the release note and then using it in another \nScript step\n,\nand in a \nSlack step\n:\n\n\nformat_version: 1.1.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  example:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            envman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nMy Release Note: $MY_RELEASE_NOTE\n\n    - slack:\n        inputs:\n        - channel: ...\n        - webhook_url: ...\n        - message: \nRelease Notes: $MY_RELEASE_NOTE", 
            "title": "Expose an Environment Variable and use it in another Step"
        }, 
        {
            "location": "/tips-and-tricks/dont-mark-build-failed-if-step-fails/", 
            "text": "To do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\nAll you have to do is: add an \nis_skippable: true\n flag to the Step.\n\n\nAn example \nscript\n step which, although fails, it won't \"break\" the build:\n\n\n- script:\n    is_skippable: true\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nFailing Step.\n\n        exit 1\n        # exit 1 would mark this step as Failed, but it won't break the Build\n        #  because of the is_skippable: true flag / propery\n\n\n\n\nYou can find more examples on \nGitHub\n.", 
            "title": "Don't mark the Build as failed if a given step would fail (ignore the error of the Step)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/", 
            "text": "Disable a Step\n\u2693\n\n\nIf you don't want to remove the Step from your Workflow and you don't want to duplicate the Workflow either (which is the preferred way if you want to experiment with new things; you can just create a \"backup\" clone of your original Workflow) then you can simply disable a Step by specifying \nrun_if: false\n .\n\n\nExample:\n\n\n- script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nThis will never run, because of run_if:false\n\n\n\n\nRun a Step only if the Build failed\n\u2693\n\n\nTo do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\nYou have to add two properties to the Step you \nonly\n want to run when the Build failed (at that point, when the Step would run):\n\n\n\n\nis_always_run: true\n (this enables the Step to be considered to run even if a previous Step failed)\n\n\nrun_if: .IsBuildFailed\n (you can find more examples of the \nrun_if\n template at: \nhttps://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml\n).\n\n\n\n\nAn example \nscript\n step, which will only run if the Build failed:\n\n\n- script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nBuild Failed!\n\n\n\n\n\n\nA \nrun_if\n can be any valid \nGo\n template\n\n\nA \nrun_if\n can be any valid \nGo template\n, as long as it evaluates to \ntrue\n or \nfalse\n (or any of the String representation, e.g. \n\"True\"\n, \n\"t\"\n, \n\"yes\"\n or \n\"y\"\n are all considered to be \ntrue\n). If the template evaluates to \ntrue\n the Step will run, otherwise it won't.\n\n\n\n\nAn example \nrun_if\n to check a \ncustom environment variable\n (you\ncan expose environment variables from your scripts too,\nusing \nenvman\n):\n\n\nrun_if: |-\n  {{enveq \nCUSTOM_ENV_VAR_KEY\n \ntest value to test against\n}}\n\n\n\n\nThis \nrun_if\n will skip the step in every case when the value of \nCUSTOM_ENV_VAR_KEY\n\nis not \ntest value to test against\n.", 
            "title": "Enable/Disable a step (optionally, based on a condition)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#disable-a-step", 
            "text": "If you don't want to remove the Step from your Workflow and you don't want to duplicate the Workflow either (which is the preferred way if you want to experiment with new things; you can just create a \"backup\" clone of your original Workflow) then you can simply disable a Step by specifying  run_if: false  .  Example:  - script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  This will never run, because of run_if:false", 
            "title": "Disable a Step"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#run-a-step-only-if-the-build-failed", 
            "text": "To do this you have to switch to  bitrise.yml  mode (open the Workflow Editor on bitrise.io -  left side: click on  bitrise.yml  to switch to the interactive  bitrise.yml  editor).  You have to add two properties to the Step you  only  want to run when the Build failed (at that point, when the Step would run):   is_always_run: true  (this enables the Step to be considered to run even if a previous Step failed)  run_if: .IsBuildFailed  (you can find more examples of the  run_if  template at:  https://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml ).   An example  script  step, which will only run if the Build failed:  - script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  Build Failed!   A  run_if  can be any valid  Go  template  A  run_if  can be any valid  Go template , as long as it evaluates to  true  or  false  (or any of the String representation, e.g.  \"True\" ,  \"t\" ,  \"yes\"  or  \"y\"  are all considered to be  true ). If the template evaluates to  true  the Step will run, otherwise it won't.   An example  run_if  to check a  custom environment variable  (you\ncan expose environment variables from your scripts too,\nusing  envman ):  run_if: |-\n  {{enveq  CUSTOM_ENV_VAR_KEY   test value to test against }}  This  run_if  will skip the step in every case when the value of  CUSTOM_ENV_VAR_KEY \nis not  test value to test against .", 
            "title": "Run a Step only if the Build failed"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/", 
            "text": "If you create a new iOS app on \nbitrise.io\n\nthe generated default workflow wil include our \nXcode Archive\n step.\nThis step can manage to archive and export your iOS app.\n\n\nA bit of history and technical info\n\u2693\n\n\nIf the step is used with \nXcode 6\n it'll generate the following (legacy) command to export\nthe \nipa\n of your app (you can see it in the step's log):\n\n\nxcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/Users/vagrant/deploy/ios-simple-objc.ipa\n \\\n    -exportProvisioningProfile \nXyz\n\n\n\n\nBack in the days of Xcode 6 this was everything you had to do; just specify the format to be \nipa\n\nand set the required paths and the Provisioning Profile to be used for code signing the \nipa\n.\n\n\nXcode 7\n instroduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as \ndeprecated\n, and you'd get\nthe following warning if you'd use the old parameters instead of the new \n-exportOptionsPlist\n parameter: \n\n\nxcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated\n\n\n\n\nThe export command's \nnew version\n expects a Plist file (\n-exportOptionsPlist\n),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:\n\n\nxcodebuild -exportArchive \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi\n \\\n    -exportOptionsPlist \n/Users/vagrant/deploy/export_options.plist\n\n\n\n\nBy default the \nXcode Archive\n step generates the minimal sufficient Plist file,\nwith only the export \nmethod\n defined in it (unless you specify the \nexport_options_path\n input,\nwe'll get back to this a bit later):\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\ndevelopment\n/string\n\n\n/dict\n\n\n/plist\n\n\n\n\nAbout the Xcode Archive step generated export options\n\u2693\n\n\nThe default \ngenerated\n export options Plist file only specifies\nthe \nexport method\n (\napp-store\n, \nad-hoc\n, \nenterprise\n or \ndevelopment\n)\nbased on the provisioning profile embedded in the \n.xcarchive\n (which is generated by the \nxcodebuild archive\n\ncommand, also performed by the \nXcode Archive\n step, right before the \nxcodebuild -exportArchive\n command).\n\n\nThe embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith \nXcode Archive\n step's \nforce_code_sign_identity\n and \nforce_provisioning_profile\n inputs.\nYou can find more information about these options in the \niOS Code Signing\n article.\n\n\nEvery other export option which can be defined in the Plist is optional.\n\n\nUse your own export options\n\u2693\n\n\nIn case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use. \n\n\n\n\nAvailable export options\n\n\nYou can get a list of all available options by calling \nxcodebuild -h\n -\ncheck the \nAvailable keys for -exportOptionsPlist:\n section of the printed help.\n\n\n\n\nThese are the options you can select in Xcode when you export the ipa manually.\n\n\nThe \nrecommanded\n way is to \nput this generated plist file in your project's repository\n.\nThen you can set \nXcode Archive\n step's \nexport_options_path\n input\nto the path of your plist file (e.g. \n./path/to/export-options.plist\n).\n\n\nDisable bitcode in ipa\n\u2693\n\n\nBy default uploadBitcode export options is set to YES\n, unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.\n\n\nYour export options plist should look like:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\napp-store\n/string\n\n    \nkey\nuploadBitcode\n/key\n\n    \nfalse/\n\n\n/dict\n\n\n/plist\n\n\n\n\n\n\nCode Signing note\n\n\nOf course, if you set the \nmethod\n to \napp-store\n then you have to upload / use\nan App Store code signing Identity \n Provisioning Profile (it have to be\navailable in the system).\n\n\n\n\nRelated issues:\n\u2693\n\n\nERROR ITMS-90635: Invalid Mach-O Format\n\u2693\n\n\nTransporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...\n\n\n\n\nThis error occurs if you have different \nENABLE_BITCODE\n settings\nin your (sub)projects, including the projects generated by CocoaPods for example.\n\n\nIf you use CocoaPods you can \noverride the \nENABLE_BITCODE\n in the pod projects\n by adding\nthe following section to your \nPodfile\n:\n\n\nFor CocoaPods 1.0+:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend\n\n\n\n\nFor CocoaPods 0.39 and below:\n\n\npost_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "Xcode Archive: export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#a-bit-of-history-and-technical-info", 
            "text": "If the step is used with  Xcode 6  it'll generate the following (legacy) command to export\nthe  ipa  of your app (you can see it in the step's log):  xcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive  \\\n    -exportPath  /Users/vagrant/deploy/ios-simple-objc.ipa  \\\n    -exportProvisioningProfile  Xyz  Back in the days of Xcode 6 this was everything you had to do; just specify the format to be  ipa \nand set the required paths and the Provisioning Profile to be used for code signing the  ipa .  Xcode 7  instroduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as  deprecated , and you'd get\nthe following warning if you'd use the old parameters instead of the new  -exportOptionsPlist  parameter:   xcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated  The export command's  new version  expects a Plist file ( -exportOptionsPlist ),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:  xcodebuild -exportArchive \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive  \\\n    -exportPath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi  \\\n    -exportOptionsPlist  /Users/vagrant/deploy/export_options.plist  By default the  Xcode Archive  step generates the minimal sufficient Plist file,\nwith only the export  method  defined in it (unless you specify the  export_options_path  input,\nwe'll get back to this a bit later):  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string development /string  /dict  /plist", 
            "title": "A bit of history and technical info"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#about-the-xcode-archive-step-generated-export-options", 
            "text": "The default  generated  export options Plist file only specifies\nthe  export method  ( app-store ,  ad-hoc ,  enterprise  or  development )\nbased on the provisioning profile embedded in the  .xcarchive  (which is generated by the  xcodebuild archive \ncommand, also performed by the  Xcode Archive  step, right before the  xcodebuild -exportArchive  command).  The embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith  Xcode Archive  step's  force_code_sign_identity  and  force_provisioning_profile  inputs.\nYou can find more information about these options in the  iOS Code Signing  article.  Every other export option which can be defined in the Plist is optional.", 
            "title": "About the Xcode Archive step generated export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#use-your-own-export-options", 
            "text": "In case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use.    Available export options  You can get a list of all available options by calling  xcodebuild -h  -\ncheck the  Available keys for -exportOptionsPlist:  section of the printed help.   These are the options you can select in Xcode when you export the ipa manually.  The  recommanded  way is to  put this generated plist file in your project's repository .\nThen you can set  Xcode Archive  step's  export_options_path  input\nto the path of your plist file (e.g.  ./path/to/export-options.plist ).", 
            "title": "Use your own export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#disable-bitcode-in-ipa", 
            "text": "By default uploadBitcode export options is set to YES , unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.  Your export options plist should look like:  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string app-store /string \n     key uploadBitcode /key \n     false/  /dict  /plist   Code Signing note  Of course, if you set the  method  to  app-store  then you have to upload / use\nan App Store code signing Identity   Provisioning Profile (it have to be\navailable in the system).", 
            "title": "Disable bitcode in ipa"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#related-issues", 
            "text": "", 
            "title": "Related issues:"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#error-itms-90635-invalid-mach-o-format", 
            "text": "Transporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...  This error occurs if you have different  ENABLE_BITCODE  settings\nin your (sub)projects, including the projects generated by CocoaPods for example.  If you use CocoaPods you can  override the  ENABLE_BITCODE  in the pod projects  by adding\nthe following section to your  Podfile :  For CocoaPods 1.0+:  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend  For CocoaPods 0.39 and below:  post_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "ERROR ITMS-90635: Invalid Mach-O Format"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/", 
            "text": "If you need something you can't find a Step for, you can always install \n use tools with scripts or Script steps.\n\n\nJust add a \nScript\n step to your Workflow, and either write your script there, or run a script from your repository.\n\n\nPasswordless \nsudo\n is enabled on all of our build virtual machines, so you can freely use \nsudo\n if you need it.\n\n\nOnce you have a working script, \nyou can also transform it into a Step\n and optionally share it with others (through our StepLib).\nYou can find a template and more information about how you can create your own Step at: \nhttps://github.com/bitrise-steplib/step-template\n\n\nStep by step setup\n\u2693\n\n\n\n\nOpen your app on Bitrise.io\n\n\nOpen the app's Workflow Editor (on the \nWorkflow\n tab -\n click \nManage Workflows\n)\n\n\nSelect a Workflow\n\n\nClick on the \n+\n sign (you can see this between every step), where you want to insert your Script step\n\n\nIn the step list search for \"script\", and click the \nAdd to Workflow\n button on the \"Script\" step item.\n\n\nNow that you have the Script step in your workflow, you just have to select it and write your script into the \nScript content\n input (on the right side of the Workflow Editor).\n\n\n\n\nNote: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.\n\n\nIf you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at \npath/to/script.sh\n you can run it with this \nScript content\n:\n\n\nbash ./path/to/script.sh\n\n\n\n\nOr, in a more robust form (which is better if you want to extend the content in the future):\n\n\n#!/bin/bash\nset -ex\nbash ./path/to/script.sh\n\n\n\n\nThe \nset -ex\n line is recommended for every multi-line Bash script, to make your scripts easier to debug.\n\n\nYou can of course run non Bash scripts too, e.g. a Ruby script:\n\n\n#!/bin/bash\nset -ex\nruby ./path/to/script.rb\n\n\n\n\nExamples\n\u2693\n\n\nAt this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!\n\n\nbrew\n on macOS\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on macOS, using \nbrew\n:\n\n\n#!/bin/bash\nset -ex\nbrew install cmake\n\n\n\n\nActually, the whole Script content could be as short as:\n\n\nbrew install cmake\n\n\n\n\nWhich is exactly how you would use \nbrew\n on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.\n\n\napt-get\n on Linux\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on Linux, using \napt-get\n:\n\n\n#!/bin/bash\nset -ex\nsudo apt-get install -y cmake\n\n\n\n\n\n\nDon't forget the \n-y\n flag for \napt-get\n!\n\n\nIf you don't add the \n-y\n (\"yes\") flag to the \napt-get\n command, \napt-get\n will\npresent a prompt which you have to accept or deny \nmanually\n.\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for \napt-get\n. To prevent this issue,\nand to auto accept the prompt, just use the \n-y\n flag, as shown in the example.\n\n\n\n\nAdvanced option: use \ndeps\n in \nbitrise.yml\n\u2693\n\n\nInstead of installing your tool inside the Script step, you can use the \ndeps\n option\nof the \nbitrise.yml\n. If you declare \ndeps\n \nfor a given Step\n,\nthe \nBitrise CLI\n\nwill check if that tool is installed, and will install it for you if required.\n\n\n\n\nAvailable dependency managers\n\n\nThis method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above. \n\n\n\n\nAn example, installing \ncmake\n with either \napt-get\n (where \napt-get\n is available),\nor with \nbrew\n (on macOS):\n\n\ndeps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake\n\n\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake\n\n\n\n\nAn advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated \nbinary name\n. If that matches the package name (like in case of \ncmake\n) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with \nbin_name\n. An example is AWS CLI, where the package name in both\npackage managers is \nawscli\n, but the binary itself is \naws\n.\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws\n\n\n\n\nConditional execution\n\u2693\n\n\nAdditionally, you can use Environment Variables in your scripts too. As an example, using the base \nAvailable Environment Variables\n \nPR\n (but you can use any Environment Variable, like the ones exposed by previous steps in the Workflow), to run different scripts in case of a Pull Request and a non Pull Request build:\n\n\n#!/bin/bash\nset -ex\n\nif [[ \n$PR\n == \ntrue\n ]] ; then\n  echo \n=\n Pull Request mode/build!\n\n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo \n=\n Not Pull Request mode/build!\n\n  bash ./path/to/not-pull-request.sh\nfi\n\n\n\n\nNote: if you \ndon't\n want to run any part of the Step/script based on a variable (like \n$PR\n),\nyou don't have to implement the check in the script. You can use the \nrun_if\n expression in\nthe \nbitrise.yml\n directly to declare in which case(s) the Step should run. Additionally,\n\nrun_if\n can be added to any step, not just to Script steps.\nYou can find more information about \nrun_if\n expressions\nin \nthis guide\n.", 
            "title": "Install Any Additional Tool"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#step-by-step-setup", 
            "text": "Open your app on Bitrise.io  Open the app's Workflow Editor (on the  Workflow  tab -  click  Manage Workflows )  Select a Workflow  Click on the  +  sign (you can see this between every step), where you want to insert your Script step  In the step list search for \"script\", and click the  Add to Workflow  button on the \"Script\" step item.  Now that you have the Script step in your workflow, you just have to select it and write your script into the  Script content  input (on the right side of the Workflow Editor).   Note: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.  If you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at  path/to/script.sh  you can run it with this  Script content :  bash ./path/to/script.sh  Or, in a more robust form (which is better if you want to extend the content in the future):  #!/bin/bash\nset -ex\nbash ./path/to/script.sh  The  set -ex  line is recommended for every multi-line Bash script, to make your scripts easier to debug.  You can of course run non Bash scripts too, e.g. a Ruby script:  #!/bin/bash\nset -ex\nruby ./path/to/script.rb", 
            "title": "Step by step setup"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#examples", 
            "text": "At this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!", 
            "title": "Examples"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#brew-on-macos", 
            "text": "E.g. to install  cmake  with a script step, on macOS, using  brew :  #!/bin/bash\nset -ex\nbrew install cmake  Actually, the whole Script content could be as short as:  brew install cmake  Which is exactly how you would use  brew  on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.", 
            "title": "brew on macOS"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#apt-get-on-linux", 
            "text": "E.g. to install  cmake  with a script step, on Linux, using  apt-get :  #!/bin/bash\nset -ex\nsudo apt-get install -y cmake   Don't forget the  -y  flag for  apt-get !  If you don't add the  -y  (\"yes\") flag to the  apt-get  command,  apt-get  will\npresent a prompt which you have to accept or deny  manually .\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for  apt-get . To prevent this issue,\nand to auto accept the prompt, just use the  -y  flag, as shown in the example.", 
            "title": "apt-get on Linux"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#advanced-option-use-deps-in-bitriseyml", 
            "text": "Instead of installing your tool inside the Script step, you can use the  deps  option\nof the  bitrise.yml . If you declare  deps   for a given Step ,\nthe  Bitrise CLI \nwill check if that tool is installed, and will install it for you if required.   Available dependency managers  This method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.    An example, installing  cmake  with either  apt-get  (where  apt-get  is available),\nor with  brew  (on macOS):  deps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake  A minimal  bitrise.yml  for demonstration:  format_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake  An advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated  binary name . If that matches the package name (like in case of  cmake ) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with  bin_name . An example is AWS CLI, where the package name in both\npackage managers is  awscli , but the binary itself is  aws .  A minimal  bitrise.yml  for demonstration:  format_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws", 
            "title": "Advanced option: use deps in bitrise.yml"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#conditional-execution", 
            "text": "Additionally, you can use Environment Variables in your scripts too. As an example, using the base  Available Environment Variables   PR  (but you can use any Environment Variable, like the ones exposed by previous steps in the Workflow), to run different scripts in case of a Pull Request and a non Pull Request build:  #!/bin/bash\nset -ex\n\nif [[  $PR  ==  true  ]] ; then\n  echo  =  Pull Request mode/build! \n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo  =  Not Pull Request mode/build! \n  bash ./path/to/not-pull-request.sh\nfi  Note: if you  don't  want to run any part of the Step/script based on a variable (like  $PR ),\nyou don't have to implement the check in the script. You can use the  run_if  expression in\nthe  bitrise.yml  directly to declare in which case(s) the Step should run. Additionally, run_if  can be added to any step, not just to Script steps.\nYou can find more information about  run_if  expressions\nin  this guide .", 
            "title": "Conditional execution"
        }, 
        {
            "location": "/tips-and-tricks/how-to-configure-fastlane-match-for-bitrise/", 
            "text": "If you want to use \nfastlane match\n\nin your \nbitrise.io\n build you only have to do three things:\n\n\n\n\nMake sure that a single SSH key can be used to \ngit clone\n both your main repository (the one\n   you register on \nbitrise.io\n) and the \nmatch\n repository.\n   You can find more info \nin this guide\n.\n\n\nAdd an environment variable \nMATCH_PASSWORD\n, as\n   \ndescribed in \nmatch\n's docs\n,\n   to specify the \nEncryption password\n you used for \nmatch\n.\n   On \nbitrise.io\n you should add this as a \nSecret Environment Variable\n,\n   in the \nWorkflow Editor\n.\n   \nMake sure to \ndisable\n the \nReplace variables in input?\n option of the environment\n   variable, to not to cause issues when the value includes the \n$\n (dollar) sign, which is used\n   for environment variable expansion.\n\n   \n\n\nMake sure to use \nmatch\n's \nreadonly\n mode, or else \nmatch\n will try to connect\n   to the Apple Developer Portal, which requires further authorization (providing additional\n   username and password for Apple Dev Portal login)!\n\n\nIf you use \nmatch\n in your \nFastfile\n or \nfastlane\n config: \nmatch(app_identifier: \"my.domain\", type: \"appstore\", readonly: true)\n\n\nIf you use it as a command line tool: \nmatch development --readonly\n\n\nMore info in \nmatch\n's \nofficial readme / docs\n\n\n\n\n\n\n\n\nThat's all, you can now enjoy the utility of \nmatch\n, automated with \nbitrise.io\n \ud83d\ude80", 
            "title": "How to configure fastlane match for Bitrise"
        }, 
        {
            "location": "/faq/android-x86-emulator/", 
            "text": "A frequent question is whether it's possible to run the Android x86 emulator,\ninstead of the ARM emulators.\n\n\nUnfortunately, as far as we know, none of the public cloud environments expose the required\nhardware virtualization bit required for running the Android x86 emulator.\n\n\nIf you know about any solution, \nplease contact us\n!\n\n\nFor now, the best workaround seems to be \nOracle's Ravello\n ( \na related blog post\n )\nif you need a full emulator (with UI),\nor \nrobolectric\n for unit tests.\n\n\nAnother alternative might be to use a service like \nAWS Device Farm\n,\nwhere you can run the tests on real devices instead of in an emulator.\n\n\nIf you know about any other, \nfeel free to contact us\n!", 
            "title": "Android x86 Emulator"
        }, 
        {
            "location": "/faq/how-to-generate-ssh-keypair/", 
            "text": "If you want to do manual SSH key configuration on \nbitrise.io\n\nyou can generate an appropriate SSH keypair with a simple Command Line / Terminal command:\n\n\nssh-keygen -t rsa -b 4096 -P '' -f ./bitrise-ssh\n\n\n\n\nThis will generate two files in the current directory (the directory where\nyou run the command):\n\n\n\n\nbitrise-ssh\n (private key)\n\n\nbitrise-ssh.pub\n (public key)\n\n\n\n\nYou should copy paste the \npublic key\n to your Git hosting service (GitHub, Bitbucket, etc.),\nand when you register your app on \nbitrise.io\n\nyou'll have to provide the \nprivate key\n.", 
            "title": "How to generate an SSH key pair"
        }, 
        {
            "location": "/tools/bitrise-tools/", 
            "text": "List of Open Source tools maintained by the Bitrise team.\n\n\n\n\nWhere can I find the repositories?\n\n\nFor historical reasons the core Bitrise CLI tools live in \ngithub.com/bitrise-io\n,\nbut most of our tools, and every new tool we create lives in\nthe \ngithub.com/bitrise-tools\n,\nand the CLI core components (plugins, etc.)\nin the \ngithub.com/bitrise-core\n GitHub organization.\n\n\n\n\nCore, Bitrise CLI tools\n\u2693\n\n\n\n\nbitrise\n -\n  the Bitrise CLI, which is used on \nbitrise.io\n\n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!\n\n\nstepman\n -\n  used for managing the Step Library, including\n  downloading and sharing steps.\n\n\nenvman\n -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.\n\n\n\n\nBitrise CLI plugins\n\u2693\n\n\n\n\nAnalytics plugin\n\n\n\n\nInfrastructure\n\u2693\n\n\n\n\nbitrise-machine\n -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.\n\n\nbitrise-bridge\n -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.\n\n\ncmd-bridge\n -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start \ncmd-bridge\n's server in the environment, and then\n  you can use \ncmd-bridge\n through SSH or another way to send commands to the running\n  \ncmd-bridge\n server, which will perform the commands in its context / the environment\n  it is running in.\n\n\ngarden\n -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).\n\n\n\n\niOS\n\u2693\n\n\n\n\ncodesigndoc\n -\n  Your friendly iOS Code Signing Doctor.\n\n\n\n\nGeneric\n\u2693\n\n\n\n\ndepman\n -\n  Super Simple Dependency Manager\n\n\nreleaseman\n -\n  Your friendly Release Manager\n\n\n\n\nGo\n\u2693\n\n\nGo / golang related tools.\n\n\n\n\ngows\n -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.\n\n\ngoinst\n -\n  Go Install command line tools in an isolated environment.\n\n\n\n\nServer / service\n\u2693\n\n\n\n\nbitrise webhooks\n -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to \nbitrise.io\n's Build Trigger API format, and calls it to start a build.\n\n\nDATapi\n -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.\n\n\nDATapi Ruby Client", 
            "title": "Bitrise Tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#core-bitrise-cli-tools", 
            "text": "bitrise  -\n  the Bitrise CLI, which is used on  bitrise.io \n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!  stepman  -\n  used for managing the Step Library, including\n  downloading and sharing steps.  envman  -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.", 
            "title": "Core, Bitrise CLI tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#bitrise-cli-plugins", 
            "text": "Analytics plugin", 
            "title": "Bitrise CLI plugins"
        }, 
        {
            "location": "/tools/bitrise-tools/#infrastructure", 
            "text": "bitrise-machine  -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.  bitrise-bridge  -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.  cmd-bridge  -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start  cmd-bridge 's server in the environment, and then\n  you can use  cmd-bridge  through SSH or another way to send commands to the running\n   cmd-bridge  server, which will perform the commands in its context / the environment\n  it is running in.  garden  -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).", 
            "title": "Infrastructure"
        }, 
        {
            "location": "/tools/bitrise-tools/#ios", 
            "text": "codesigndoc  -\n  Your friendly iOS Code Signing Doctor.", 
            "title": "iOS"
        }, 
        {
            "location": "/tools/bitrise-tools/#generic", 
            "text": "depman  -\n  Super Simple Dependency Manager  releaseman  -\n  Your friendly Release Manager", 
            "title": "Generic"
        }, 
        {
            "location": "/tools/bitrise-tools/#go", 
            "text": "Go / golang related tools.   gows  -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.  goinst  -\n  Go Install command line tools in an isolated environment.", 
            "title": "Go"
        }, 
        {
            "location": "/tools/bitrise-tools/#server-service", 
            "text": "bitrise webhooks  -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to  bitrise.io 's Build Trigger API format, and calls it to start a build.  DATapi  -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.  DATapi Ruby Client", 
            "title": "Server / service"
        }
    ]
}