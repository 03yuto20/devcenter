{
    "docs": [
        {
            "location": "/", 
            "text": "In short \nBitrise\n is a \nContinuous Integration\n\nand \nDelivery\n (CI/CD) Platform as a Service (PaaS)\nwith a main focus on mobile app development (\niOS\n, \nAndroid\n, \nXamarin\n, ...).\n\n\nAutomate the testing and deployment of your apps with just a few clicks.\n\n\nWhen you trigger a build a Virtual Machine is assigned to host\nyour build and your defined Workflow (series of build Steps) will be executed, step by step.\n\n\nA \nWorkflow\n consists of one or more build \nSteps\n (open source git repositories\nwhich can be executed with the \nopen source Bitrise CLI\n).\n\nYou can create and share your own build Steps too\n.\nYou are able to define more workflows for the very same app,\nand define \ntriggers\n to specify which workflow should be selected for\nwhich trigger.\n\n\nThe steps can do anything that can be implemented a command line scripts / programs:\nsend emails, \ntext messages\n,\npass values to each other, \ncreate Xcode archives\n,\ngather system information about the Virtual Machine\nrunning the build, notify other users (e.g. on Slack)\nor even \npublish to iTunes Connect\n, and many more.\nYou can read more at \nBuilds and Workflows\n.\n\n\nAfter a build is finished the Virtual Machine is destroyed and you can browse\nthe logs of every step that ran during the workflow.\nYou can read more at \nCode Security\n.\n\n\nBitrise CLI - the open source, offline, automation runner\n\u2693\n\n\nTo run a \nbitrise\n build on your machine, you can install our \nopen source runner\n\nand use the \nbitrise\n command to execute your workflows locally.\n\nNo \nbitrise.io\n account required to use the Bitrise CLI.\n\n\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nYou can find more information about the offline runner\nin the \nBitrise CLI and bitrise.yml\n section of the DevCenter.", 
            "title": "Bitrise DevCenter - What is Bitrise?"
        }, 
        {
            "location": "/#bitrise-cli-the-open-source-offline-automation-runner", 
            "text": "To run a  bitrise  build on your machine, you can install our  open source runner \nand use the  bitrise  command to execute your workflows locally. No  bitrise.io  account required to use the Bitrise CLI.  It's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for  any kind of automation  on your machine.  You can find more information about the offline runner\nin the  Bitrise CLI and bitrise.yml  section of the DevCenter.", 
            "title": "Bitrise CLI - the open source, offline, automation runner"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/", 
            "text": "Builds \n Workflows\n\u2693\n\n\nA \nbuild\n is the process specified by the app's \nworkflow\n, which is a collection of \nsteps\n.\nEvery step is an \nopen source\n repository which you can inspect, modify,\nand run with the \nopen source Bitrise CLI\n.\n\n\nThe app's build configuration can be specified as a \nyaml\n (\nbitrise.yml\n) config,\nwhich you can modify in \nbitrise.io\n's\ngraphical Workflow Editor UI (on your app's Bitrise.io page click the \nWorkflows\n tab),\nor \nyaml editor\n directly.\n\n\nOn the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how workflows and steps are implemented on our \nengineering blog\n.\n\n\nWhen a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.\n\n\nThe build process\n\u2693\n\n\nThere are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of \ntriggers\n,\nthrough different stacks and preparation types to environment variables.\n\n\n\n\n\n\nTrigger builds by:\n\n\n\n\nclicking the \nBuild\n button on the application's page (manual build trigger)\n\n\nscheduling with a selected branch and frequency (runs when scheduled - you can find this option in the \nBuild\n popup)\n\n\nwebhook\n - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)\n\n\nour \nBuild Trigger API\n\n\n\n\n\n\n\n\nEnvironment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available \nStacks\n on your app's \nSettings\n tab,\n   in the \nStack Selector\n section.\n\n\n\n\n\n\nConcurrency:\n   Builds over your subscription plan's concurrency count will be marked as \non hold\n.\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always \npurchase additional concurrencies\n with the Pro plan\n   to increase the concurrent builds you can run at the same time.\n\n\n\n\n\n\nWorkflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.\n\n\n\n\n\n\nCleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and \nthe virtual machine gets destroyed\n,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "Builds & Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#builds-workflows", 
            "text": "A  build  is the process specified by the app's  workflow , which is a collection of  steps .\nEvery step is an  open source  repository which you can inspect, modify,\nand run with the  open source Bitrise CLI .  The app's build configuration can be specified as a  yaml  ( bitrise.yml ) config,\nwhich you can modify in  bitrise.io 's\ngraphical Workflow Editor UI (on your app's Bitrise.io page click the  Workflows  tab),\nor  yaml editor  directly.  On the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how workflows and steps are implemented on our  engineering blog .  When a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.", 
            "title": "Builds &amp; Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#the-build-process", 
            "text": "There are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of  triggers ,\nthrough different stacks and preparation types to environment variables.    Trigger builds by:   clicking the  Build  button on the application's page (manual build trigger)  scheduling with a selected branch and frequency (runs when scheduled - you can find this option in the  Build  popup)  webhook  - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)  our  Build Trigger API     Environment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available  Stacks  on your app's  Settings  tab,\n   in the  Stack Selector  section.    Concurrency:\n   Builds over your subscription plan's concurrency count will be marked as  on hold .\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always  purchase additional concurrencies  with the Pro plan\n   to increase the concurrent builds you can run at the same time.    Workflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.    Cleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and  the virtual machine gets destroyed ,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "The build process"
        }, 
        {
            "location": "/getting-started/code-security/", 
            "text": "To guarantee the security of your builds we use \nvirtual machines\n for builds.\nEvery build runs in its own, clean virtual machine and we discard the whole virtual machine after the build finishes,\nerasing every file your build uses and every change you make during your build.\n\n\nThis is also true for the Linux/Android stacks, which use Docker containers to run the build.\nThe build itself still gets a full virtual machine where no other Docker container is started,\nonly the one used as the environment of the build. In short we only use Docker containers\nto manage the environment, not for build environment isolation - that's ensured by using\nfull virtual machines for every build.\n\n\nThis way your builds are always protected by changes made by others and from your previous builds,\nno one else can access your code and you can use a stable environment to define your build workflow (no state persists between builds).\n\n\nSource code\n\u2693\n\n\nWe don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.\n\n\nCode signing and other files\n\u2693\n\n\nThe files you upload in the Workflow Editor (\nCode Signing \n Files\n section of the editor)\nare stored on \nAmazon S3\n in a way that it's only accessible for the web servers.\n\n\nThe required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using \nAmazon S3 presigned URLs\n.\n\n\nPasswords\n\u2693\n\n\nPasswords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with \nbcrypt algorithm\n, using multiple stretches.", 
            "title": "Code Security"
        }, 
        {
            "location": "/getting-started/code-security/#source-code", 
            "text": "We don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.", 
            "title": "Source code"
        }, 
        {
            "location": "/getting-started/code-security/#code-signing-and-other-files", 
            "text": "The files you upload in the Workflow Editor ( Code Signing   Files  section of the editor)\nare stored on  Amazon S3  in a way that it's only accessible for the web servers.  The required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using  Amazon S3 presigned URLs .", 
            "title": "Code signing and other files"
        }, 
        {
            "location": "/getting-started/code-security/#passwords", 
            "text": "Passwords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with  bcrypt algorithm , using multiple stretches.", 
            "title": "Passwords"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/", 
            "text": "We are always refining our UI and UX, to achieve the best and smoothest experience possible,\nbut at the same time give you enough room for experimentation and customization.\n\n\nBecause of the very reason of us believing that you should be able to do everything you want with Bitrise,\nit can seem a bit complex in a few parts.\n\n\nThis guide will help you get your first app up and running on Bitrise. Let's dive in!\n\n\nFirst of all you have to open the \nAdd New App page\n,\neither by clicking the \nAdd\n button on the \nDashboard\n,\nor selecting the \nAdd new App\n option in the Account drop down menu (top right corner).\n\n\n1. Code repository setup\n\u2693\n\n\nThe first step of adding an app is to specify where its code is stored.\n\n\nYou have two main options here:\n\n\n\n\nYou store your code on \nGitHub.com\n, \nBitbucket.org\n or \nGitLab.com\n\n\nYou store your code somewhere else\n\n\n\n\nGitHub / Bitbucket / GitLab\n\u2693\n\n\nThis is fairly easy. Just click on the tab where you have the repo you want to add to Bitrise.\nIf you haven't connected your GitHub, Bitbucket or GitLab account, click on the green button to do so.\nAfter that you'll see all your repos listed with an option to filter them.\nYour personal repos are separated from the ones that belong to an organization or other user.\nIf you hover on the repository names, you can get a glimpse of its description, too.\nSelect the repository from the list to proceed to the next step.\n\n\n\n\nWhy does Bitrise need write permissions on Github/Bitbucket/GitLab?\n\n\nThere are two things that Bitrise couldn't do without write permissions:\n\n\n\n\nAdding an SSH key to the selected repository\n\n\nRegistering a Webhook for the repository\n\n\n\n\nPlease note, that \nif you want to avoid giving Bitrise write permissions,\nyou can select the \nOther / Manual\n option\n, and do the setup yourself.\n\n\n\n\nOther / Manual setup option\n\u2693\n\n\nOn this tab, you just have to paste your HTTPS git clone URL where Bitrise can access your code.\nPaste the URL and click on \nNext\n to proceed.\n\n\n2. Setup repository access\n\u2693\n\n\nAuto-add the SSH key Bitrise generated for you\n\u2693\n\n\nThis option is available for GitHub, Bitbucket and GitLab.com repositories,\nif you have your account connected to your Bitrise account.\n\n\nThis is the easieast, fastest way. You can just click on \nAuto add\n\n\nif you have admin rights to the repo\n you selected.\n\n\nCopy the public key Bitrise generated\n\u2693\n\n\nCopy the \npublic key\n to your provider's account (\nnot\n as a deployment key).\nYou can use this option if you don't have admin rights to the repo,\nor if the repository is not hosted on GitHub, Bitbucket or GitLab.com.\n\n\nChoose this option also if you use submodules and want to use the same SSH key for multiple repositories.\nIf you use submodules or private Cocoapods,\nuse this guide: \nAdding projects with submodules\n\n\nUse your own keypair\n\u2693\n\n\nYou can paste your existing SSH \nprivate key\n to the text area on the bottom of this section.\n\nMake sure it is an RSA private key without a passphrase,\n\notherwise you won't be able to use it on Bitrise.\n\n\nYou can find a guide \nhere\n about\nhow you can generate an SSH key like this.\n\n\nIf you use submodules, private Cocoapods,\nor have to access more than one private repository\nduring the build, you should check this guide: \nAdding projects with submodules\n\n\n3. Validation setup\n\u2693\n\n\nIn this section you have to specify a branch, which will be used in the next step:\nyour repository will be cloned, the specified branch will be checked out,\nand our \nopen source project scanner\n\nwill scan through the repository, and will construct base configuration(s)\nappropriate for your project.\n\n\nYou can choose to configure your project manually.\nThis is only recommended if you can't use the automatic\nproject scanner to generate a good base configuration for you.\nChoose this option only if you really know what you're doing,\nor if you can't use the automatic scanner!\n\n\n4. Validating repository\n\u2693\n\n\nYou don't have to do anything in this section. A validation\nis started automatically after you finished in the previous section.\nYou can check the progress and the logs of the validation while it runs,\nand the errors and warnings in case the scanner would generate any.\n\n\n5. Project build configuration\n\u2693\n\n\nPlatform selection: We try to detect on validation whether you added an Android, iOS, or Xamarin project,\nor any other project type the \nscanner\n supports.\nIf we succeed, only the one, corresponding tab will be active.\nIf we fail to detect it, you have to select one and configure it manually.\n\n\nWe will also try to detect your build configuration automatically, based on your project settings / project\nfiles in the repository.\n\n\n6. Webhook setup\n\u2693\n\n\nIf we have support for adding webhooks automatically to the source code hosting\nservice you use, you can add the webhook in this section with a single click.\n\n\n\n\nError: Webhook registration failed\n\n\nIf you see a message like this, that means that you don't have admin rights to the repo,\nso no webhook could be created. Contact the administrator, register the webhook manually as described below\nor skip this step if you're OK with starting builds manually (not advised).\n\n\n\n\nOtherwise you'll see information about how you can do this manually in this section.\n\n\nYou can find the webhook setup guide \nhere\n,\nif you'd have to do this manually.\n\n\n7. Finishing\n\u2693\n\n\nAfter you finish in the \"webhook\" section, a build is triggered automatically\nfor your app, with the base configuration detected and generated by\nthe \"Repository validator / scanner\". At this point you should have\na base working configuration, which you'll be able to improve and change\nto fit your project's development process.", 
            "title": "Create your first App on Bitrise.io"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#1-code-repository-setup", 
            "text": "The first step of adding an app is to specify where its code is stored.  You have two main options here:   You store your code on  GitHub.com ,  Bitbucket.org  or  GitLab.com  You store your code somewhere else", 
            "title": "1. Code repository setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#github-bitbucket-gitlab", 
            "text": "This is fairly easy. Just click on the tab where you have the repo you want to add to Bitrise.\nIf you haven't connected your GitHub, Bitbucket or GitLab account, click on the green button to do so.\nAfter that you'll see all your repos listed with an option to filter them.\nYour personal repos are separated from the ones that belong to an organization or other user.\nIf you hover on the repository names, you can get a glimpse of its description, too.\nSelect the repository from the list to proceed to the next step.   Why does Bitrise need write permissions on Github/Bitbucket/GitLab?  There are two things that Bitrise couldn't do without write permissions:   Adding an SSH key to the selected repository  Registering a Webhook for the repository   Please note, that  if you want to avoid giving Bitrise write permissions,\nyou can select the  Other / Manual  option , and do the setup yourself.", 
            "title": "GitHub / Bitbucket / GitLab"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#other-manual-setup-option", 
            "text": "On this tab, you just have to paste your HTTPS git clone URL where Bitrise can access your code.\nPaste the URL and click on  Next  to proceed.", 
            "title": "Other / Manual setup option"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#2-setup-repository-access", 
            "text": "", 
            "title": "2. Setup repository access"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#auto-add-the-ssh-key-bitrise-generated-for-you", 
            "text": "This option is available for GitHub, Bitbucket and GitLab.com repositories,\nif you have your account connected to your Bitrise account.  This is the easieast, fastest way. You can just click on  Auto add  if you have admin rights to the repo  you selected.", 
            "title": "Auto-add the SSH key Bitrise generated for you"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#copy-the-public-key-bitrise-generated", 
            "text": "Copy the  public key  to your provider's account ( not  as a deployment key).\nYou can use this option if you don't have admin rights to the repo,\nor if the repository is not hosted on GitHub, Bitbucket or GitLab.com.  Choose this option also if you use submodules and want to use the same SSH key for multiple repositories.\nIf you use submodules or private Cocoapods,\nuse this guide:  Adding projects with submodules", 
            "title": "Copy the public key Bitrise generated"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#use-your-own-keypair", 
            "text": "You can paste your existing SSH  private key  to the text area on the bottom of this section. Make sure it is an RSA private key without a passphrase, \notherwise you won't be able to use it on Bitrise.  You can find a guide  here  about\nhow you can generate an SSH key like this.  If you use submodules, private Cocoapods,\nor have to access more than one private repository\nduring the build, you should check this guide:  Adding projects with submodules", 
            "title": "Use your own keypair"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#3-validation-setup", 
            "text": "In this section you have to specify a branch, which will be used in the next step:\nyour repository will be cloned, the specified branch will be checked out,\nand our  open source project scanner \nwill scan through the repository, and will construct base configuration(s)\nappropriate for your project.  You can choose to configure your project manually.\nThis is only recommended if you can't use the automatic\nproject scanner to generate a good base configuration for you.\nChoose this option only if you really know what you're doing,\nor if you can't use the automatic scanner!", 
            "title": "3. Validation setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#4-validating-repository", 
            "text": "You don't have to do anything in this section. A validation\nis started automatically after you finished in the previous section.\nYou can check the progress and the logs of the validation while it runs,\nand the errors and warnings in case the scanner would generate any.", 
            "title": "4. Validating repository"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#5-project-build-configuration", 
            "text": "Platform selection: We try to detect on validation whether you added an Android, iOS, or Xamarin project,\nor any other project type the  scanner  supports.\nIf we succeed, only the one, corresponding tab will be active.\nIf we fail to detect it, you have to select one and configure it manually.  We will also try to detect your build configuration automatically, based on your project settings / project\nfiles in the repository.", 
            "title": "5. Project build configuration"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#6-webhook-setup", 
            "text": "If we have support for adding webhooks automatically to the source code hosting\nservice you use, you can add the webhook in this section with a single click.   Error: Webhook registration failed  If you see a message like this, that means that you don't have admin rights to the repo,\nso no webhook could be created. Contact the administrator, register the webhook manually as described below\nor skip this step if you're OK with starting builds manually (not advised).   Otherwise you'll see information about how you can do this manually in this section.  You can find the webhook setup guide  here ,\nif you'd have to do this manually.", 
            "title": "6. Webhook setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#7-finishing", 
            "text": "After you finish in the \"webhook\" section, a build is triggered automatically\nfor your app, with the base configuration detected and generated by\nthe \"Repository validator / scanner\". At this point you should have\na base working configuration, which you'll be able to improve and change\nto fit your project's development process.", 
            "title": "7. Finishing"
        }, 
        {
            "location": "/getting-started/add-your-first-step-to-your-workflow/", 
            "text": "Once you register an app you can start to modify it's Workflow,\nto customize how a build should work.\n\n\nTo edit your App's Workflow you should open the \nWorkflow Editor\n:\n\n\n\n\nSelect your App on \nbitrise.io\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\nOnce you're in the Workflow Editor you can see the list of Steps which are already in your Workflow.\n\n\nAdd a new Step to the Workflow\n\u2693\n\n\nIf you want to \nadd a new Step\n to the Workflow,\njust click the \n+\n sign button between the Steps.\n\n\n\n\nThis will show you a list of available Steps in our \nStep Library\n.\nYou can search and filter these steps if you want to, or just browse through the collection.\n\n\nAdding a Step is as easy as clicking the \nAdd to Workflow\n button\nin this Step Library popup.\n\n\nYou can \nDrag and Drop\n to reorder your list of Steps. During a build,\nsteps will be executed one by one, in top-to-bottom order.\n\n\nOnce you're happy with your Workflow you should click the \nSave\n button on the left side.\nThat's all, your next build will automatically use the current, \nsaved\n Workflow!\n\n\n\n\nMultiple Workflows\n\n\nYou can create as many workflows as you like, and then\nspecify which one to use for which build trigger event in the \nTriggers\n section\nof the Workflow Editor.\nYou can read more about Triggers and workflow selection in the\n\nControl what to build when, with the Trigger Map\n guide.", 
            "title": "Add your first Step to your Workflow"
        }, 
        {
            "location": "/getting-started/add-your-first-step-to-your-workflow/#add-a-new-step-to-the-workflow", 
            "text": "If you want to  add a new Step  to the Workflow,\njust click the  +  sign button between the Steps.   This will show you a list of available Steps in our  Step Library .\nYou can search and filter these steps if you want to, or just browse through the collection.  Adding a Step is as easy as clicking the  Add to Workflow  button\nin this Step Library popup.  You can  Drag and Drop  to reorder your list of Steps. During a build,\nsteps will be executed one by one, in top-to-bottom order.  Once you're happy with your Workflow you should click the  Save  button on the left side.\nThat's all, your next build will automatically use the current,  saved  Workflow!   Multiple Workflows  You can create as many workflows as you like, and then\nspecify which one to use for which build trigger event in the  Triggers  section\nof the Workflow Editor.\nYou can read more about Triggers and workflow selection in the Control what to build when, with the Trigger Map  guide.", 
            "title": "Add a new Step to the Workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/", 
            "text": "To start editing your workflow you first have to open it\nin the \nWorkflow Editor\n on Bitrise.io:\n\n\n\n\nOpen your App's page on \nBitrise.io\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\nThis is your app's \nWorkflow Editor\n. You can change, delete and add steps here.\n\n\nChange a step\n\u2693\n\n\nSelect the step here (in the Workflow Editor), on the left side.\nYou can change the selected Step's inputs and other configs on the right side.\n\n\n\n\nNote\n\n\nSteps are executed top-to-bottom, you can reorder them with \nDrag and Drop\n.\n\n\n\n\nUpgrade a Step to the latest version\n\u2693\n\n\nWhen a new version is available for a Step in your Workflow,\nyou can update the Step to the new version by selecting the Step in the Workflow Editor and\n\n\n\n\nClick the orange \"update indicator\" icon, to upgrade the Step to the latest available version\n\n\nOr select the new version manually, on the right side, where you can see the step's details (\nVersion\n section).\n\n\n\n\nYour settings / provided input values for the Step will be kept for the new version, and you can\nalso discard the change, by clicking the \nDiscard\n button on the left side.\n\n\nRemove a step\n\u2693\n\n\nSelect the step on the left side and click on the \ntrash can\n button on the right side.\n\n\nAdd a new step\n\u2693\n\n\nClick on the \n+\n sign at the left side to add or insert a new step.\n\n\nOnce you clicked the \n+\n sign you'll see a list of available steps on the right side.\nYou can select a filter (ex: \ndeploy\n) to show only a group of the available steps.\n\n\nOnce you selected the step you want to add, just click on the \nAdd to Workflow\n button.\nThe new step will be selected automatically,\nand all you have to do is fill in its required inputs\n(on the right side you'll see which inputs are required - marked with an orange border).\n\n\nCreate a new Workflow\n\u2693\n\n\nTo create a new Workflow just click on the \n+\n sign \nat the top, where your workflows are listed.\n\n\n\n\nYou can create as many workflows for an app as you like.\n\n\nUsing multiple workflows can be beneficial in case you want to do different\nthings based on which \nbranch\n you push new code.\nTo see how you can control what event should \ntrigger\n\nwhich \nworkflow\n, see: \nControl what to build when, with the Trigger Map\n\n\n\n\nNew workflows are created as a copy of the active workflow when you click the \n+\n button.\n\n\nYou can delete the current active workflow\n with the orange \nDelete\n button\nat the top right corner of the workflow area.\n\n\nStep inputs\n\u2693\n\n\nInserting Environment Variables into Step inputs\n\u2693\n\n\nClick into any input field of a Step and a green \nInsert Variable\n button will appear.\nClick this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\nEnvironment Variable replace mode\n\u2693\n\n\nUnder every Step input field you can see one of these two indicators:\n\n\n\n\nEnvironment Variables will be replaced in input\n\n\nor \nEnvironment Variables won't be replaced in input\n\n\n\n\nIt's the status of the \nis_expand\n option of the input.\n\nYou can change this only through in YAML mode (\nbitrise.yml\n mode of the editor - left side).\n\n\nWhat does this option do?\n\n\n\n\nIf \nenabled\n it'll replace Environment Variables (e.g. \n$HOME\n or \n${HOME}\n)\n  inside the input text with the Environment Variable's value \nbefore\n it would be passed to the Step.\n\n\nIf \ndisabled\n it won't replace anything in the input text, the whole text will be passed to the Step \"as-it-is\".\n\n\n\n\nWhat does this mean?\n For example, if you have \n$HOME\n in the input text\nand you enable this option, it'll replace every occurrence of \n$HOME\n in that input\nwith the value of the \nHOME\n environment variable\n(in this case, the home folder's path, e.g. \n/Users/[user]\n or \n/home/[user]\n).\nIf it's disabled then it won't be replaced,\nthe value you specify for the input will be passed as the text \n$HOME\n,\nand \nthe Step itself might or might not expand\n the value.\n\n\nUsually you should leave this option on the default value, the one defined by the Step for the input\n.\n\n\nIn general you should \nnot\n change this option, but if you have to,\nyou can do that in YML mode, by adding \nis_expand: true\n or \nis_expand: false\n to the input's \nopts\n list. Example:\n\n\n- some_input: My Value\n  opts:\n    is_expand: false\n\n\n\n\nA practical example / guideline\n\u2693\n\n\nAs a general guideline, this option should almost always be \nenabled\n,\nunless you have a specific reason to disable it.\n\n\nWhat can be a reason to disable it?\n There's pretty much only a single reason:\nif your input includes the \n$\n character (in a password for example),\nand you want to keep the \n$\n character in the input, instead of\nreplacing it with an environment variable.\n\n\nIf you have this expand option enabled and you have a password like \npas$word\n\nit'll most likely result in \npas\n after the value expansion,\nbecause there's no \n$word\n environment variable available (unless you defined it somewhere).\nThere might be other cases when you explicitly want to include the \n$\n character in the input,\nin these cases you should disable the expand option.\n\n\nNote\n: if you want to reference another environment variable,\neven if that one's value includes the \n$\n character, you have to \nenable\n this option,\nor else your reference won't work.\n\nIn a case like this you should disable this option where you specify the value\n with \n$\n in it,\nand enable the option everywhere else, where you reference that environment variable.", 
            "title": "Manage your Bitrise workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#change-a-step", 
            "text": "Select the step here (in the Workflow Editor), on the left side.\nYou can change the selected Step's inputs and other configs on the right side.   Note  Steps are executed top-to-bottom, you can reorder them with  Drag and Drop .", 
            "title": "Change a step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#upgrade-a-step-to-the-latest-version", 
            "text": "When a new version is available for a Step in your Workflow,\nyou can update the Step to the new version by selecting the Step in the Workflow Editor and   Click the orange \"update indicator\" icon, to upgrade the Step to the latest available version  Or select the new version manually, on the right side, where you can see the step's details ( Version  section).   Your settings / provided input values for the Step will be kept for the new version, and you can\nalso discard the change, by clicking the  Discard  button on the left side.", 
            "title": "Upgrade a Step to the latest version"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#remove-a-step", 
            "text": "Select the step on the left side and click on the  trash can  button on the right side.", 
            "title": "Remove a step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#add-a-new-step", 
            "text": "Click on the  +  sign at the left side to add or insert a new step.  Once you clicked the  +  sign you'll see a list of available steps on the right side.\nYou can select a filter (ex:  deploy ) to show only a group of the available steps.  Once you selected the step you want to add, just click on the  Add to Workflow  button.\nThe new step will be selected automatically,\nand all you have to do is fill in its required inputs\n(on the right side you'll see which inputs are required - marked with an orange border).", 
            "title": "Add a new step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#create-a-new-workflow", 
            "text": "To create a new Workflow just click on the  +  sign  at the top, where your workflows are listed.   You can create as many workflows for an app as you like.  Using multiple workflows can be beneficial in case you want to do different\nthings based on which  branch  you push new code.\nTo see how you can control what event should  trigger \nwhich  workflow , see:  Control what to build when, with the Trigger Map   New workflows are created as a copy of the active workflow when you click the  +  button.  You can delete the current active workflow  with the orange  Delete  button\nat the top right corner of the workflow area.", 
            "title": "Create a new Workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#step-inputs", 
            "text": "", 
            "title": "Step inputs"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#inserting-environment-variables-into-step-inputs", 
            "text": "Click into any input field of a Step and a green  Insert Variable  button will appear.\nClick this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.", 
            "title": "Inserting Environment Variables into Step inputs"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#environment-variable-replace-mode", 
            "text": "Under every Step input field you can see one of these two indicators:   Environment Variables will be replaced in input  or  Environment Variables won't be replaced in input   It's the status of the  is_expand  option of the input. You can change this only through in YAML mode ( bitrise.yml  mode of the editor - left side).  What does this option do?   If  enabled  it'll replace Environment Variables (e.g.  $HOME  or  ${HOME} )\n  inside the input text with the Environment Variable's value  before  it would be passed to the Step.  If  disabled  it won't replace anything in the input text, the whole text will be passed to the Step \"as-it-is\".   What does this mean?  For example, if you have  $HOME  in the input text\nand you enable this option, it'll replace every occurrence of  $HOME  in that input\nwith the value of the  HOME  environment variable\n(in this case, the home folder's path, e.g.  /Users/[user]  or  /home/[user] ).\nIf it's disabled then it won't be replaced,\nthe value you specify for the input will be passed as the text  $HOME ,\nand  the Step itself might or might not expand  the value.  Usually you should leave this option on the default value, the one defined by the Step for the input .  In general you should  not  change this option, but if you have to,\nyou can do that in YML mode, by adding  is_expand: true  or  is_expand: false  to the input's  opts  list. Example:  - some_input: My Value\n  opts:\n    is_expand: false", 
            "title": "Environment Variable replace mode"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#a-practical-example-guideline", 
            "text": "As a general guideline, this option should almost always be  enabled ,\nunless you have a specific reason to disable it.  What can be a reason to disable it?  There's pretty much only a single reason:\nif your input includes the  $  character (in a password for example),\nand you want to keep the  $  character in the input, instead of\nreplacing it with an environment variable.  If you have this expand option enabled and you have a password like  pas$word \nit'll most likely result in  pas  after the value expansion,\nbecause there's no  $word  environment variable available (unless you defined it somewhere).\nThere might be other cases when you explicitly want to include the  $  character in the input,\nin these cases you should disable the expand option.  Note : if you want to reference another environment variable,\neven if that one's value includes the  $  character, you have to  enable  this option,\nor else your reference won't work. In a case like this you should disable this option where you specify the value  with  $  in it,\nand enable the option everywhere else, where you reference that environment variable.", 
            "title": "A practical example / guideline"
        }, 
        {
            "location": "/infrastructure/available-stacks/", 
            "text": "The Stack indicates the virtual machine version that we will use to run your build.\nAfter adding your application to Bitrise we will select an appropriate Stack for it,\nbut you can simply change it to a different one on the \nSettings\n tab of your app.\n\n\n\n\nAfter selecting the Stack you want to use you'll see a short description of the stack,\nwith an additional link to learn more about that specific Stack (e.g. to see what\ntools are preinstalled, and which versions, on the selected Stack).\n\n\n\n\nThe Stack won't be used until you click the \nSave\n button!\n\n\nYou can see what tools are preinstalled on the Stacks by\nselecting the stack(s) in the selector, and following the\n\nMore information about this Stack\n link. The Stack\nwon't be activated for the app until you click the \nSave\n button.\n\n\n\n\nStack status types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStable\n\n\nGenerally available and expected to be supported for the foreseeable future. \nUpdated when an update for the Stack's primary tool is available.\n Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). In case of \nXamarin\n stacks, the Xamarin updates are applied weekly, during the weekends.\n\n\n\n\n\n\nLTS (Long Term Support)\n\n\nNo changes (updates) will be made to the stack, except only really crucial changes, which affect security for example, and Bitrise CLI tool updates. Preinstalled tool versions will remain the same, until the Stack is removed from our collection.\n\n\n\n\n\n\n\n\nStack prepare types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPre-Booted\n\n\nIf a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an \nOn-Demand\n configuration.\n\n\n\n\n\n\nOn-Demand\n\n\nIf a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration \nwhen your build starts\n. This means that your build will be in \npreparing environment\n state while the related Virtual Machine is created \n booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes. \nThe prepare time (of course) is not counted into the build time, it won't affect how long your build can run.\n\n\n\n\n\n\n\n\nWhat's preinstalled\n\u2693\n\n\nEvery time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself,\nor you want to add another tool / system check, feel free to send us a pull request!\n\n\nYou can find every available stack's System Report on GitHub: \nhttps://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "Available Stacks"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-status-types", 
            "text": "Type  Description      Stable  Generally available and expected to be supported for the foreseeable future.  Updated when an update for the Stack's primary tool is available.  Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). In case of  Xamarin  stacks, the Xamarin updates are applied weekly, during the weekends.    LTS (Long Term Support)  No changes (updates) will be made to the stack, except only really crucial changes, which affect security for example, and Bitrise CLI tool updates. Preinstalled tool versions will remain the same, until the Stack is removed from our collection.", 
            "title": "Stack status types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-prepare-types", 
            "text": "Type  Description      Pre-Booted  If a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an  On-Demand  configuration.    On-Demand  If a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration  when your build starts . This means that your build will be in  preparing environment  state while the related Virtual Machine is created   booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes.  The prepare time (of course) is not counted into the build time, it won't affect how long your build can run.", 
            "title": "Stack prepare types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#whats-preinstalled", 
            "text": "Every time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself,\nor you want to add another tool / system check, feel free to send us a pull request!  You can find every available stack's System Report on GitHub:  https://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "What's preinstalled"
        }, 
        {
            "location": "/infrastructure/virtual-machines/", 
            "text": "On \nbitrise.io\n, we have \nmacOS\n and \nLinux\n virtual machines hosted for your builds.\nYou can select from multiple stacks, each with its own list of preinstalled tool versions.\nRead more about available stacks and stack prepare types in the \nAvailable Stacks docs\n.\n\n\n\n\nPasswordless sudo\n\n\nThe user which is used for the builds is configured with \npasswordless sudo\n enabled,\nthis way you are able to install all the extra things you need for your builds and for other automation.\nIf a tool is not preinstalled on your Stack of choice,\nyou can install it yourself - see the \nInstall Any Additional Tool\n guide.\n\n\n\n\nSecurity\n\u2693\n\n\nEvery build runs in its own virtual machine and the virtual machine is rolled back to a saved state,\nthe \"base box\" state, after the build is finished.\nThis way \nyour builds are always protected\n by changes made by others\nand by your previous builds and you can use a \nstable environment\n to define your build workflow,\nsince \nno state persists between builds\n.\n\n\nFor more information about Build/Code Security, see the \nCode Security\n guide.\n\n\nCustomization\n\u2693\n\n\nYou can find the \nmacOS\n base box setup guide and automation scripts we use for building our\nmacOS virtual machine base boxes in our \nOS X Box Bootstrap repository\n.\nThe repository includes every script we use for preparing these base virtual machine images.\n\n\nFor our \nLinux\n machines, check out the \nBitrise Base Docker Image's repository\n.\n\n\n\n\nSystem reports\n\n\nYou can always check our current configurations in the\n\nsystem reports folder of our main repository\n,\nto see what tools and which versions are preinstalled.\n\n\nThese reports have been generated by the scripts, linked in the first lines of the report.\n\n\n\n\nThe repositories used for our virtual machine preparation are open source,\nand pull requests are welcome.\nIf you'd like to have a tool pre-installed in our machines,\nfeel free to add your changes and they will be included in the related Stack(s)\nat the next time the Stack is updated.\n\n\nVirtual machine updates\n\u2693\n\n\nUpdates are always announced on our \nNews Blog\n\nand can be seen on \nyour Bitrise Dashboard\n.\nWe will also send you a \nPlatform Updates\n email about significant changes,\nunless you disable this feature under your \naccount settings page\n.\n\n\nStack updates\n\u2693\n\n\nIn general we do stack updates once a week, during the weekends.\n\n\nMinor patches might be applied during the week in case we detect an issue\nwith the current virtual machine environment.\nThese patches do not change any pre-installed tool version, unless it's really necessary.\n\n\nWe try to test every stack change as much as we can, before it would be\nreleased, to avoid any change / update during the week.\n\n\niOS Simulator version \n SDK support\n\u2693\n\n\nAll the iOS Simulator versions which can be installed\nthrough \nXcode -\n Preferences -\n Downloads\n are installed and available.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#security", 
            "text": "Every build runs in its own virtual machine and the virtual machine is rolled back to a saved state,\nthe \"base box\" state, after the build is finished.\nThis way  your builds are always protected  by changes made by others\nand by your previous builds and you can use a  stable environment  to define your build workflow,\nsince  no state persists between builds .  For more information about Build/Code Security, see the  Code Security  guide.", 
            "title": "Security"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#customization", 
            "text": "You can find the  macOS  base box setup guide and automation scripts we use for building our\nmacOS virtual machine base boxes in our  OS X Box Bootstrap repository .\nThe repository includes every script we use for preparing these base virtual machine images.  For our  Linux  machines, check out the  Bitrise Base Docker Image's repository .   System reports  You can always check our current configurations in the system reports folder of our main repository ,\nto see what tools and which versions are preinstalled.  These reports have been generated by the scripts, linked in the first lines of the report.   The repositories used for our virtual machine preparation are open source,\nand pull requests are welcome.\nIf you'd like to have a tool pre-installed in our machines,\nfeel free to add your changes and they will be included in the related Stack(s)\nat the next time the Stack is updated.", 
            "title": "Customization"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#virtual-machine-updates", 
            "text": "Updates are always announced on our  News Blog \nand can be seen on  your Bitrise Dashboard .\nWe will also send you a  Platform Updates  email about significant changes,\nunless you disable this feature under your  account settings page .", 
            "title": "Virtual machine updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#stack-updates", 
            "text": "In general we do stack updates once a week, during the weekends.  Minor patches might be applied during the week in case we detect an issue\nwith the current virtual machine environment.\nThese patches do not change any pre-installed tool version, unless it's really necessary.  We try to test every stack change as much as we can, before it would be\nreleased, to avoid any change / update during the week.", 
            "title": "Stack updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#ios-simulator-version-sdk-support", 
            "text": "All the iOS Simulator versions which can be installed\nthrough  Xcode -  Preferences -  Downloads  are installed and available.", 
            "title": "iOS Simulator version &amp; SDK support"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/", 
            "text": "You are able to authenticate yourself with your GitHub user against \nBitrise\n. It means some practical benefits, like logging in with one click and of course you won't have to authorize your GitHub account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsign up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page with pressing \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nGitHub\n for authenticating yourself with one of these services.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nAuthorize application\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with GitHub"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#sign-up", 
            "text": "Go to the Sign up page with pressing  Sign up!  on the landing page of  bitrise.io .   Select  GitHub  for authenticating yourself with one of these services.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.   If you press the  Authorize application  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/", 
            "text": "You are able to authenticate yourself with your Bitbucket user against \nBitrise\n. It means some practical benefits, like logging in with one click and of course you won't have to authorize your Bitbucket account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsign up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page with pressing \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nBitbucket\n for authenticating yourself with one of these services.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nGrant access\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with Bitbucket"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#sign-up", 
            "text": "Go to the Sign up page with pressing  Sign up!  on the landing page of  bitrise.io .   Select  Bitbucket  for authenticating yourself with one of these services.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.   If you press the  Grant access  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/", 
            "text": "You can sign up to Bitrise in one step with your email address. You just have to pick a username and a password in addition.\n\n\n\n\nNote\n\n\nIf you would like to use your GitHub / Bitbucket account, please check out the following devcenter articles:\n\n\n\n\nSigning up with GitHub\n\n\nSigning up with Bitbucket\n\n\n\n\n\n\nSign up\n\u2693\n\n\n\n\nAfter you provided your credentials, press \nSign up\n.\n\n\nAfter successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!", 
            "title": "Signing up with email"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/#sign-up", 
            "text": "After you provided your credentials, press  Sign up .  After successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/trial-after-signing-up/", 
            "text": "After you created your user on Bitrise your account will start with a \n2 weeks of trial\n of\nthe \nPro plan\n.\nThis means that you can setup your application and start building it with all the benefits of the paying plan.\n\n\n\n\nTip\n\n\nRead more about \noptimizing your build times\n\nto help you fit into the 10 minute limit for free accounts.", 
            "title": "Trial after signing up"
        }, 
        {
            "location": "/adding-a-new-app/", 
            "text": "When adding your app to \nBitrise\n, we will clone your repository to make sure we can access it. Besides cloning your repository we will run our \nproject scanner\n that detects all the supported apps and instantly configure your workflow with all the necessary steps to build and deploy your app.\n\n\n\n\nCurrently we are supporting the following projects out of the box\n\n\n\n\niOS\n\n\nAndroid\n\n\nXamarin\n\n\nFastlane\n\n\n\n\n\n\nTo add a new app to Bitrise go to your \ndashboard\n and press the \nAdd new app\n button.\n\n\n\n\nIn case this is the first application the dashboard will show you the quickstart guide instead of a list of you apps. There you can select to try out our sample to check how Bitrise works, without connecting any of your apps to the system. Or you can choose to add your own app right away.\n\n\nLet's check out how you can \nconnect a repository\n!", 
            "title": "Adding a new app"
        }, 
        {
            "location": "/adding-a-new-app/connecting-a-repository/", 
            "text": "After you've selected adding a new app, you will find yourself on the \nCreate app\n page.\n\n\nBitrise will give you options to connect any kind of git repository to it. \nGitHub\n and \nBitbucket\n are supported out of the box.\nIf you've already authorized Bitrise with your GitHub for example,\nyou will see Bitrise automatically listing all your repositories, so you can just click on the one you'd like to connect.\n\n\n\n\nConnect any git repository to Bitrise\n\n\nYou can connect any private or public git repository to Bitrise.\nWe will automatically create an SSH key that you can use to setup the connection with your provider.\n\n\n\n\n\n\nIf you haven't authorized Bitrise against the provider hosting your repository, it will ask for permission.\n\n\n\n\nIt will then list your repositories as above. If you'd like to connect git repository hosted by other than GitHub or Bitbucket,\nselect the \nOther / Manual\n tab.\n\n\n\n\nYou will have to add the git url of the repository you would like to connect.\n\n\n\n\nUse SSH URLs for private repositories\n\n\nPlease note, that if you are connecting a private repository,\nBitrise will try to clone it through SSH, so it's necessary to provide an SSH URL to your repository here.\n\n\n\n\nBitrise will add an SSH key to your repository at a later step.\nRead more about how to add SSH keys automatically, or manually at \nSSH keys\n.", 
            "title": "Connecting a repository"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/", 
            "text": "SSH keys serve the role of secure transfer between services. In the case of Bitrise, it will ask for your permission to be authorized at your git source provider, e.g. GitHub. Read more about how to \nauthorize Bitrise\n.\n\n\nThe reason behind the need for being authorized, is that Bitrise has to have a working SSH connection to your repository to be able to clone it. There are several ways to make it work. Automatically, by adding it manually, or by using your own key.\n\n\n\n\nUse SSH URLs everywhere\n\n\nMost services support SSH key based authentication \nonly\n for SSH URLs (ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs (ex: \nhttps://github.com/bitrise-io/bitrise.git\n)! This means, that \nevery private repository you want to use have to be addressed with the SSH URL\n. If you have direct private git repo references in your \nPodfile\n you'll have to use the SSH URL there as well! Same applies for \nsubmodules\n and every other private git repository URL you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\n\nAutomatic setup\n\u2693\n\n\nIn case of \nGitHub\n and \nBitbucket\n repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.\n\n\n\n\nAs the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.\n\n\nThe auto-add option will add the generated key as a read-only \ndeploy key\n to your repository, it's the best for your security.\n\n\nManual setup\n\u2693\n\n\nIf you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.\n\n\n\n\nA bot user\n\n\nThere's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories. \nAdd the SSH key you would like to use to the user and add the user to the projects\n. You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.\n\n\n\n\n\n\nWarning\n\n\nDo not\n add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.\n\n\n\n\nGitHub\n\u2693\n\n\n\n\nBitbucket\n\u2693\n\n\n\n\nGitLab\n\u2693\n\n\n\n\nUse your own key\n\u2693\n\n\nThis option can be used if you also have the private key of the given user. You just have to paste the private key and \nBitrise\n will be able to access the repositories.", 
            "title": "Setting up SSH keys"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#automatic-setup", 
            "text": "In case of  GitHub  and  Bitbucket  repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.   As the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.  The auto-add option will add the generated key as a read-only  deploy key  to your repository, it's the best for your security.", 
            "title": "Automatic setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#manual-setup", 
            "text": "If you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.   A bot user  There's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories.  Add the SSH key you would like to use to the user and add the user to the projects . You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.    Warning  Do not  add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.", 
            "title": "Manual setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#github", 
            "text": "", 
            "title": "GitHub"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#bitbucket", 
            "text": "", 
            "title": "Bitbucket"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#gitlab", 
            "text": "", 
            "title": "GitLab"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#use-your-own-key", 
            "text": "This option can be used if you also have the private key of the given user. You just have to paste the private key and  Bitrise  will be able to access the repositories.", 
            "title": "Use your own key"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/", 
            "text": "After \nSetting up the SSH key\n for\nyour project, Bitrise will download your code to make sure it can access the repository\nand will run an automatic repository scanner script to find the best initial configuration for your project.\nCurrently Bitrise will detect \niOS\n, \nAndroid\n, \nXamarin\n and \nfastlane\n projects out of the box.\n\n\nYou can configure other types of projects too, but that will require manual\nconfiguration.\n\n\nProject configuration with automatic repository scanner\n\u2693\n\n\nTo validate and automatically scan your project you only need to tell Bitrise\nthe default branch of your repository.\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the \nSSH key\n you set up.\n\n\nAfter successful validation Bitrise will scan your repository and give you a default workflow\n\n\nSkipping the scanner - full manual configuration\n\u2693\n\n\nIf for some reason you want to skip the scanner, you can choose\nthe \nConfigure manually without project scanning\n option,\nin the \nValidation setup\n section.\n\n\n\n\nBy choosing this option \nbitrise.io\n will only\nvalidate the access to the repository, but it won't run the scanner.\nInstead, it'll present you the manual configuration options\nin the \nProject build configuration\n section.", 
            "title": "Setting up configuration"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#project-configuration-with-automatic-repository-scanner", 
            "text": "To validate and automatically scan your project you only need to tell Bitrise\nthe default branch of your repository.\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the  SSH key  you set up.  After successful validation Bitrise will scan your repository and give you a default workflow", 
            "title": "Project configuration with automatic repository scanner"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#skipping-the-scanner-full-manual-configuration", 
            "text": "If for some reason you want to skip the scanner, you can choose\nthe  Configure manually without project scanning  option,\nin the  Validation setup  section.   By choosing this option  bitrise.io  will only\nvalidate the access to the repository, but it won't run the scanner.\nInstead, it'll present you the manual configuration options\nin the  Project build configuration  section.", 
            "title": "Skipping the scanner - full manual configuration"
        }, 
        {
            "location": "/team-management/", 
            "text": "Now that you have set up your app on Bitrise we can start inviting team members! You can select multiple roles for the new members, like: \nadmin\n, \ndeveloper\n, and \nqa/tester\n.\nDifferent roles have different permissions that you can read more about below.\n\n\nTo invite a team member head to the \nTeam tab\n on your application's page. You can invite any user by their username or by their email address. If they are not registered on Bitrise we will send out an invitation email for them.\n\n\n\n\nInviting team members\n\n\nYou need to be the app's \nowner\n or an \nadmin\n to be able to add new team members to your app.\n\n\n\n\n\n\nCheck out the different roles and permissions below:\n\n\nAdmin\n\u2693\n\n\n\n\nDeveloper\n\u2693\n\n\n\n\nTester / QA\n\u2693", 
            "title": "Adding a new team member"
        }, 
        {
            "location": "/team-management/#admin", 
            "text": "", 
            "title": "Admin"
        }, 
        {
            "location": "/team-management/#developer", 
            "text": "", 
            "title": "Developer"
        }, 
        {
            "location": "/team-management/#tester-qa", 
            "text": "", 
            "title": "Tester / QA"
        }, 
        {
            "location": "/team-management/changing-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an application on \nBitrise\n to another user. This can be done in a few seconds by following these quick steps:\n\n\n\n\nLogin with the \ncurrent owner\n of the app\n\n\nOpen the app's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the app is in the team or add her/him if you need to\n\n\nClick the \nTransfer ownership\n button next to the current owner's username\n\n\n\n\nFor transferring the ownership, select the new user to transfer the app to:\n\n\n\n\nYou can use the toggle to stay the connected service user. This is important if you are the admin of the given repository on \nGitHub\n, or \nBitbucket\n and the app needs your credentials to work on Bitrise.", 
            "title": "Changing the owner of an app"
        }, 
        {
            "location": "/webhooks/", 
            "text": "Most source code hosting service provides a feature to register webhooks. A webhook is basically an URL which will be called on specified events.\n\n\nTo have Bitrise automatically start a build every time you push code into your repository you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nSetting up webhooks automatically\n\u2693\n\n\nIf you select \nGitHub\n or \nBitbucket\n as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.\n\n\nSetting up webhooks by hand\n\u2693\n\n\nYou can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's \nCode\n tab.\n\n\n\n\n\n\nCustom webhook support\n\n\nOur webhook processor is Open Sourced\n. If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.\n\n\nYou can also run your own webhook provider behind your own firewall if required.\n\n\n\n\nYou can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:\n\n\n\n\nAdding a GitHub webhook\n\n\nAdding a Bitbucket webhook\n\n\nAdding webhooks for Gitlab\n\n\nAdding webhooks for Visual Studio Online / Visual Studio Team Services\n\n\nAdding webhooks for Slack\n\n\nAdding webhooks for Gogs\n\n\n\n\nTroubleshooting\n\u2693\n\n\nSee the \nWebhook Troubleshooting\n guide\nfor webhook related troubleshooting / debugging notes.", 
            "title": "Adding webhooks"
        }, 
        {
            "location": "/webhooks/#setting-up-webhooks-automatically", 
            "text": "If you select  GitHub  or  Bitbucket  as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.", 
            "title": "Setting up webhooks automatically"
        }, 
        {
            "location": "/webhooks/#setting-up-webhooks-by-hand", 
            "text": "You can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's  Code  tab.    Custom webhook support  Our webhook processor is Open Sourced . If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.  You can also run your own webhook provider behind your own firewall if required.   You can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:   Adding a GitHub webhook  Adding a Bitbucket webhook  Adding webhooks for Gitlab  Adding webhooks for Visual Studio Online / Visual Studio Team Services  Adding webhooks for Slack  Adding webhooks for Gogs", 
            "title": "Setting up webhooks by hand"
        }, 
        {
            "location": "/webhooks/#troubleshooting", 
            "text": "See the  Webhook Troubleshooting  guide\nfor webhook related troubleshooting / debugging notes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nGet the webhook URL for GitHub\n\u2693\n\n\nNavigate to the \nCode\n tab of your app's page and select \nGitHub\n from the dropdown at the webhooks section.\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\nSetup webhook on GitHub\n\u2693\n\n\nNavigate to your GitHub repository and select \nSettings\n.\n\n\n\n\nSelect \nAdd webhook\n under Webhooks \n Services.\n\n\n\n\nPaste the GitHub Webhook URL from Bitrise to the Payload URL.\n\n\n\n\nSelect \nLet me select individual events\n.\n\n\n\n\nSelect \nPull request\n and \nPush\n. After you are ready press the \nAdd webhook\n button and you are ready to roll!", 
            "title": "Adding a GitHub webhook"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#get-the-webhook-url-for-github", 
            "text": "Navigate to the  Code  tab of your app's page and select  GitHub  from the dropdown at the webhooks section.   Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#setup-webhook-on-github", 
            "text": "Navigate to your GitHub repository and select  Settings .   Select  Add webhook  under Webhooks   Services.   Paste the GitHub Webhook URL from Bitrise to the Payload URL.   Select  Let me select individual events .   Select  Pull request  and  Push . After you are ready press the  Add webhook  button and you are ready to roll!", 
            "title": "Setup webhook on GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you\ncan set up a webhook at your code hosting service which will automatically\ntrigger a build on Bitrise with the code you push to your repository.\n\n\n\n\nIf you have a Bitbucket webhook already set up for your app ...\n\n\nIf you have a Bitbucket webhook already set up for your app,\nsimply skip to the \ntriggers\n section\nand edit your current one according to the screenshot there.\n\n\n\n\nGet the webhook URL for Bitbucket\n\u2693\n\n\nNavigate to the \nCode\n tab of your app's page and select \nBitbucket\n from the dropdown at the webhooks section.\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\nSetup webhook on Bitbucket\n\u2693\n\n\nNavigate to your Bitbucket repository and select \nSettings\n.\n\n\n\n\nSelect \nWebhooks\n from the left.\n\n\n\n\nSelect \nAdd Webhook\n\n\n\n\nPaste the Bitbucket Webhook URL from Bitrise to the \nURL\n and add a \nTitle\n.\n\n\n\n\nChoose from triggers\n\u2693\n\n\nSelect \nChoose from a full list of triggers\n.\n\n\n\n\nSelect Repository \nPush\n and Pull Request \nCreated\n and \nUpdated\n triggers. After you are ready press the \nSave\n button and you are ready to roll!", 
            "title": "Adding a Bitbucket webhook"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#get-the-webhook-url-for-bitbucket", 
            "text": "Navigate to the  Code  tab of your app's page and select  Bitbucket  from the dropdown at the webhooks section.   Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#setup-webhook-on-bitbucket", 
            "text": "Navigate to your Bitbucket repository and select  Settings .   Select  Webhooks  from the left.   Select  Add Webhook   Paste the Bitbucket Webhook URL from Bitrise to the  URL  and add a  Title .", 
            "title": "Setup webhook on Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#choose-from-triggers", 
            "text": "Select  Choose from a full list of triggers .   Select Repository  Push  and Pull Request  Created  and  Updated  triggers. After you are ready press the  Save  button and you are ready to roll!", 
            "title": "Choose from triggers"
        }, 
        {
            "location": "/webhooks/trigger-map/", 
            "text": "Now that you have a \nwebhook registered\n,\nthe next step is to define when to build what.\n\n\nWhen you register a webhook for an event or for multiple events (e.g. for \nCode Push\n and\nfor \nPull Request\n events), your source code hosting service will call the webhook\nevery time the related event happens.\n\n\nOn \nbitrise.io\n these webhooks calls are called \"triggers\",\nand can be mapped to different \nWorkflows\n, or not mapped at all.\nIf you don't map a trigger to any workflow, then \nbitrise.io\n won't\nstart a build. If you map it to a workflow, then a build will be started\nwith the selected workflow.\n\n\nIn the following examples we'll use a very simple Bitrise configuration (\nbitrise.yml\n),\nwhich does nothing else just prints the selected workflow's ID:\n\n\n---\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  pull_request_source_branch: \n*\n\n  workflow: primary\n- tag: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - script:\n        inputs:\n        - content: |-\n            #!/bin/bash\n            echo \n$BITRISE_TRIGGERED_WORKFLOW_ID\n\n\n\n\n\n\nWhat is bitrise.yml?\n\n\nbitrise.yml\n is the representation of your app's configuration.\nIn the workflow editor you can edit it in a visual way through the web UI,\nbut you can always switch to \nbitrise.yml\n mode (left side of the workflow editor)\nto see the configuration in a YAML format, as well as you can edit the configuration\nin YAML format too. It's up to you which solution you prefer, the visual web UI\nor the YAML (\nbitrise.yml\n) representation, and you can switch between the two\nany time (the changes you do in the web UI will be reflected in the \nbitrise.yml\n,\nand vice versa).\n\n\n\n\nThe above example \nbitrise.yml\n will select the \nprimary\n branch for every Code Push (\npush_branch: \"*\"\n), Tag Push (\ntag: \"*\"\n)\nand for every Pull Request (\npull_request_target_branch: \"*\"\n \n \npull_request_source_branch: \"*\"\n).\n\n\nIf you remove the pull request item\n from the \ntrigger_map\n list, then\nno pull request will trigger a build anymore. Example:\n\n\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis configuration will start a build with the \nprimary\n workflow\nfor every code push, but for nothing else (e.g. not for pull requests).\n\n\n\"Components\" of the \ntrigger_map\n\u2693\n\n\nA \ntrigger_map\n is a \nlist of filters\n, and the \nworkflow\n the given\nfilters should select in case of a matching trigger.\n\n\nEvery filter item has to include at least one condition!\n\n\nThis means that you can't have an item which only specifies the \nworkflow\n,\nat least one filter (\npush_branch\n / \npull_request_source_branch\n / \npull_request_target_branch\n / \ntag\n)\nhas to be specified!\n\n\nThe available filters:\n\u2693\n\n\n\n\npush_branch\n : A filter which is matched against Code Push events' \"branch\" parameter\n\n\npull_request_source_branch\n : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)\n\n\npull_request_target_branch\n : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be \nmerged into\n\n\ntag\n : A filter which is matched against Tag Push events' \"tag\" (name) parameter\n\n\npattern\n : \nDEPRECATED\n - this filter was used for both code push and pull request events,\n  in combination with \nis_pull_request_allowed\n. This filter is now deprecated,\n  as the new filters allow better control over event mapping.\n\n\n\n\nIf you define multiple filters in a single item then \nall filters have to match\n\nin order to select that item's workflow.\nFor example:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\n\nwill only select the \nprimary\n workflow if the pull request's source branch is \ndevelop\n \nAND\n\nthe target branch is \nmaster\n.\n\n\nIf you want to specify filters which should be treated separately, e.g. to\nselect \nprimary\n for pull requests where the source is \ndevelop\n, as well as select\nfor the ones which target \nmaster\n:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  workflow: primary\n- pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\n\nOne last note, which is hopefully not surprising after the previous example:\nyou can't mix and match \npush_branch\n, \ntag\n and the \npull_request_..\n filters \nin the same item\n.\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event \nat the same time\n.\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events.\n\nA single webhook event will never be Code Push, Tag Push and Pull Request at the same time\n,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).\n\n\nOne trigger = one build\n\u2693\n\n\nOne trigger can only select a single workflow / can only start a single build.\n\nThe first item which matches the trigger will select the workflow for the build!\n\n\nIf you want to run more than one workflow\n, you can\n\nChaining workflows\n\nafter each other. \nThe workflows chained this way won't run in parallel\n,\nbut the full chain of workflows will be executed, in the order you chain them.\n\n\nThe order of the items\n also matter: if you'd specify a \npush_branch: master\n item \nafter\n a\n\npush_branch: \"*\"\n item, the \npush_branch: master\n \nwould never be selected\n\nas every code push event would match \npush_branch: \"*\"\n first,\nand \nthe first item which matches the trigger will select the workflow for the build!\n\n\nHow to build only a single branch\n\u2693\n\n\nIf you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a \ntrigger_map\n which does not map anything else\nto any workflow, only the branch you want to build.\n\n\nE.g. if you only want to build the \nmaster\n branch on code push:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n\n\n\n\nOr if you only want to build \nfeature/\n branches:\n\n\ntrigger_map:\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nOr the two together:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nThis configuration will start a build for every code push which happens on\neither \nmaster\n or on a \nfeature/\n branch, and will use the same workflow for\nboth (\nprimary\n).\n\n\nIf you want to use a different workflow for your \nmaster\n branch, then\nall you have to do is to change the \nworkflow:\n for that trigger map item:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary\n\n\n\n\nThis configuration will use the workflow \ndeploy\n for every code push on \nmaster\n,\nand the workflow \nprimary\n for every code push on \nfeature/\n branches,\nand \nwill not start a build for anything else\n.\n\n\nA very simple, two-workflow CI/CD setup\n\u2693\n\n\nA base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.\n\n\nIf you have a workflow \nprimary\n for doing the integration tests,\nand \ndeploy\n to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the \nmaster\n branch, which should instead use the \ndeploy\n workflow:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\n\n\nOrder of the items matter!\n\n\nWhen \nbitrise\n receives a webhook event (any kind) it'll match it against\nthe app's \ntrigger_map\n. \nThe first item it matches will select the workflow for the build!\n\n\n\n\nThis means that if you'd specify the \npush_branch: master\n \nafter\n the\n\npush_branch: \"*\"\n item, \nmaster\n would never be selected as every code push\nevent would match \npush_branch: \"*\"\n first!\n\n\nDon't start two builds for pull requests from the same repository\n\u2693\n\n\nWhen you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository),\n\nthe source code hosting service will send two webhooks\n,\none for the code push and one for the pull request!\n\n\nAn important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code \nafter\n you merged the pull request.\n\n\nWhether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with \nbitrise\n\nyou can decide whether you want it or not.\n\n\n\n\nPull Request merge is actually a Code Push!\n\n\nSource code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from \nfeature/a\n into \nmaster\n,\nwhen you merge the PR it will generate a code push to \nmaster\n.\n\n\n\n\nAn example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying \nmaster\n:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nor if you don't want to start a build for pull requests, only for code push events:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n\n\n\n\nThree workflows: test, deploy to staging and deploy to production\n\u2693\n\n\nAnother common CI/CD pattern is to have three workflows:\n\n\n\n\nA Test workflow, which will run for every pull request, every code push on \nfeature/\n branches etc.,\n  to test whether the test can be integrated into a release (branch)\n\n\nA Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:\n\n\nIn case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.\n\n\nIn case of an Android app this can be a deploy to Google Play to a \"beta\" track.\n\n\nIn case of a server code this can be a deploy to e.g. a staging Heroku server.\n\n\n\n\n\n\nA Production deployment workflow, to deploy the app/code into production. Examples:\n\n\nIn case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".\n\n\nIn case of an Android app this can be a deploy to Google Play as a public update of the app.\n\n\nIn case of a server code this can be a deploy to e.g. the production Heroku server.\n\n\n\n\n\n\n\n\nSo, we have three workflows (\nprimary\n (test), \ndeploy-to-staging\n and \ndeploy-to-production\n)\nand we'll specify three triggers, to select the right workflow for the right trigger.\n\n\nThere are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:\n\n\nUsing Tags to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a new tag (with the format \nv*.*.*\n, e.g. \nv1.0.0\n) is pushed\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \nmaster\n branch (e.g. a pull request is merged into the \nmaster\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nUsing a Branch to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a code push happens on the \nmaster\n branch (e.g. a git flow release branch merged into \nmaster\n)\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \ndevelop\n branch (e.g. a pull request is merged into the \ndevelop\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nHow to build only pull requests\n\u2693\n\n\nIf all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:\n\n\ntrigger_map:\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\nThis will select the \nprimary\n workflow for every and any pull request,\nand will not start a build for anything else.\n\n\nIf you'd only want to build pull requests which are targeted to\nbe merged into \nmaster\n, the configuration would look like this:\n\n\ntrigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "Control what to build when, with the Trigger Map"
        }, 
        {
            "location": "/webhooks/trigger-map/#components-of-the-trigger_map", 
            "text": "A  trigger_map  is a  list of filters , and the  workflow  the given\nfilters should select in case of a matching trigger.  Every filter item has to include at least one condition!  This means that you can't have an item which only specifies the  workflow ,\nat least one filter ( push_branch  /  pull_request_source_branch  /  pull_request_target_branch  /  tag )\nhas to be specified!", 
            "title": "\"Components\" of the trigger_map"
        }, 
        {
            "location": "/webhooks/trigger-map/#the-available-filters", 
            "text": "push_branch  : A filter which is matched against Code Push events' \"branch\" parameter  pull_request_source_branch  : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)  pull_request_target_branch  : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be  merged into  tag  : A filter which is matched against Tag Push events' \"tag\" (name) parameter  pattern  :  DEPRECATED  - this filter was used for both code push and pull request events,\n  in combination with  is_pull_request_allowed . This filter is now deprecated,\n  as the new filters allow better control over event mapping.   If you define multiple filters in a single item then  all filters have to match \nin order to select that item's workflow.\nFor example:  trigger_map:\n- pull_request_target_branch:  master \n  pull_request_source_branch:  develop \n  workflow: primary  will only select the  primary  workflow if the pull request's source branch is  develop   AND \nthe target branch is  master .  If you want to specify filters which should be treated separately, e.g. to\nselect  primary  for pull requests where the source is  develop , as well as select\nfor the ones which target  master :  trigger_map:\n- pull_request_target_branch:  master \n  workflow: primary\n- pull_request_source_branch:  develop \n  workflow: primary  One last note, which is hopefully not surprising after the previous example:\nyou can't mix and match  push_branch ,  tag  and the  pull_request_..  filters  in the same item .\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event  at the same time .\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events. A single webhook event will never be Code Push, Tag Push and Pull Request at the same time ,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).", 
            "title": "The available filters:"
        }, 
        {
            "location": "/webhooks/trigger-map/#one-trigger-one-build", 
            "text": "One trigger can only select a single workflow / can only start a single build. The first item which matches the trigger will select the workflow for the build!  If you want to run more than one workflow , you can Chaining workflows \nafter each other.  The workflows chained this way won't run in parallel ,\nbut the full chain of workflows will be executed, in the order you chain them.  The order of the items  also matter: if you'd specify a  push_branch: master  item  after  a push_branch: \"*\"  item, the  push_branch: master   would never be selected \nas every code push event would match  push_branch: \"*\"  first,\nand  the first item which matches the trigger will select the workflow for the build!", 
            "title": "One trigger = one build"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-a-single-branch", 
            "text": "If you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a  trigger_map  which does not map anything else\nto any workflow, only the branch you want to build.  E.g. if you only want to build the  master  branch on code push:  trigger_map:\n- push_branch: master\n  workflow: primary  Or if you only want to build  feature/  branches:  trigger_map:\n- push_branch: feature/*\n  workflow: primary  Or the two together:  trigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary  This configuration will start a build for every code push which happens on\neither  master  or on a  feature/  branch, and will use the same workflow for\nboth ( primary ).  If you want to use a different workflow for your  master  branch, then\nall you have to do is to change the  workflow:  for that trigger map item:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary  This configuration will use the workflow  deploy  for every code push on  master ,\nand the workflow  primary  for every code push on  feature/  branches,\nand  will not start a build for anything else .", 
            "title": "How to build only a single branch"
        }, 
        {
            "location": "/webhooks/trigger-map/#a-very-simple-two-workflow-cicd-setup", 
            "text": "A base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.  If you have a workflow  primary  for doing the integration tests,\nand  deploy  to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the  master  branch, which should instead use the  deploy  workflow:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary   Order of the items matter!  When  bitrise  receives a webhook event (any kind) it'll match it against\nthe app's  trigger_map .  The first item it matches will select the workflow for the build!   This means that if you'd specify the  push_branch: master   after  the push_branch: \"*\"  item,  master  would never be selected as every code push\nevent would match  push_branch: \"*\"  first!", 
            "title": "A very simple, two-workflow CI/CD setup"
        }, 
        {
            "location": "/webhooks/trigger-map/#dont-start-two-builds-for-pull-requests-from-the-same-repository", 
            "text": "When you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository), the source code hosting service will send two webhooks ,\none for the code push and one for the pull request!  An important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code  after  you merged the pull request.  Whether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with  bitrise \nyou can decide whether you want it or not.   Pull Request merge is actually a Code Push!  Source code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from  feature/a  into  master ,\nwhen you merge the PR it will generate a code push to  master .   An example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying  master :  trigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch:  * \n  workflow: primary  or if you don't want to start a build for pull requests, only for code push events:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary", 
            "title": "Don't start two builds for pull requests from the same repository"
        }, 
        {
            "location": "/webhooks/trigger-map/#three-workflows-test-deploy-to-staging-and-deploy-to-production", 
            "text": "Another common CI/CD pattern is to have three workflows:   A Test workflow, which will run for every pull request, every code push on  feature/  branches etc.,\n  to test whether the test can be integrated into a release (branch)  A Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:  In case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.  In case of an Android app this can be a deploy to Google Play to a \"beta\" track.  In case of a server code this can be a deploy to e.g. a staging Heroku server.    A Production deployment workflow, to deploy the app/code into production. Examples:  In case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".  In case of an Android app this can be a deploy to Google Play as a public update of the app.  In case of a server code this can be a deploy to e.g. the production Heroku server.     So, we have three workflows ( primary  (test),  deploy-to-staging  and  deploy-to-production )\nand we'll specify three triggers, to select the right workflow for the right trigger.  There are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:", 
            "title": "Three workflows: test, deploy to staging and deploy to production"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-tags-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a new tag (with the format  v*.*.* , e.g.  v1.0.0 ) is pushed  with the  deploy-to-staging  workflow if a code push happens on the  master  branch (e.g. a pull request is merged into the  master  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using Tags to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-a-branch-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a code push happens on the  master  branch (e.g. a git flow release branch merged into  master )  with the  deploy-to-staging  workflow if a code push happens on the  develop  branch (e.g. a pull request is merged into the  develop  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using a Branch to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-pull-requests", 
            "text": "If all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:  trigger_map:\n- pull_request_target_branch:  * \n  workflow: primary  This will select the  primary  workflow for every and any pull request,\nand will not start a build for anything else.  If you'd only want to build pull requests which are targeted to\nbe merged into  master , the configuration would look like this:  trigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "How to build only pull requests"
        }, 
        {
            "location": "/webhooks/troubleshooting/", 
            "text": "First of all, if you registered your app on \nbitrise.io\n a while ago (especially\nif before 2016 Sept.) you should check the webhook URL registered on the git hosting service you use (GitHub, Bitbucket, ...).\n\n\nNew trigger feature\n (like \nskip ci\n or tag based triggering)\n\nare only available if you use the new \nhooks.bitrise.io\n webhook URL!\n\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint for webhooks,\nbut every new project registered should now get the new \nhooks.bitrise.io\n webhook URL automatically.\n\n\nIf your webhook would still be a \nbitrise.io/hooks\n URL, please replace it with the new \nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nDebugging - what happens with webhooks related to un-mapped branches\n\n\nYou can't limit Webhooks by branch in most of the source code hosting services,\nso \nbitrise.io\n will still receive a webhook call for every code push of other branches,\nbut it won't start a build unless it finds a matching filter in the \ntrigger_map\n,\nwhich specifies a \nworkflow\n to be selected for the build.\n\nThis is also true if you use the \nBuild Trigger API\n directly.\n\n\nYou can see all the ignored calls on your \nActivity page on bitrise.io\n.\nThis means that if you think a given event should have started a build but it did not,\nyou should check your \nActivity\n page (or your source code hosting service's Webhook history - more info a bit below)\nto find out why it did not trigger a build.\n\n\nAn ignored build call entry in the Activity list looks like:\n\n\nBuild trigger failed: trigger-pattern (push_branch:) (pr_source_branch:prtest/t1) (pr_target_branch:develop) did not match any defined workflow in trigger_map\nPROJECT-NAME - Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n\n\n\n\nBitrise also returns the reason to the source code hosting service\n (the service which sent the webhook, e.g. GitHub) too,\nso if your service has a webhook history (e.g. GitHub, Bitbucket, ...)\nyou can see the reason why a given webhook did not trigger a build there too!\n\n\nSimply open the webhook history on your source code hosting service,\nand check the response Bitrise returned. It will be something like:\n\n\n{\nsuccess_responses\n:[],\nfailed_responses\n:[{\nstatus\n:\nerror\n,\nmessage\n:\ntrigger pattern did not match any defined mapping: Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n,\nservice\n:\nbitrise\n,\nslug\n:\n...\n,\nbuild_slug\n:\n,\nbuild_number\n:0,\nbuild_url\n:\n,\ntriggered_workflow\n:\n}]}\n\n\n\n\nThese detailed responses are only generated if you use\nthe new \nhooks.bitrise.io\n webhook URL!\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint\nfor webhooks, but every new project registered should now get the new\n\nhooks.bitrise.io\n webhook URL automatically. If your webhook\nwould still be a \nbitrise.io/hook\n URL, please replace it with the new\n\nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nLocal debugging\n\u2693\n\n\nYou can also test which workflow will be selected for a trigger\nusing our \nopen source, Bitrise CLI\n.\n\n\nTo simulate a code push, you can run:\n\n\nbitrise trigger-check --push-branch master\n\n\n\n\nTo simulate a Pull Request, you can run:\n\n\nbitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master\n\n\n\n\nTo simulate a tag push, you can run:\n\n\nbitrise trigger-check --tag 1.0.0\n\n\n\n\nFor more information and options run:\n\n\nbitrise trigger-check --help", 
            "title": "Webhook Troubleshooting"
        }, 
        {
            "location": "/webhooks/troubleshooting/#local-debugging", 
            "text": "You can also test which workflow will be selected for a trigger\nusing our  open source, Bitrise CLI .  To simulate a code push, you can run:  bitrise trigger-check --push-branch master  To simulate a Pull Request, you can run:  bitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master  To simulate a tag push, you can run:  bitrise trigger-check --tag 1.0.0  For more information and options run:  bitrise trigger-check --help", 
            "title": "Local debugging"
        }, 
        {
            "location": "/caching/about-caching/", 
            "text": "The caching will tar all the cached directories and dependencies and store them securely in Amazon S3.\nNote that if you store files which are downloaded from a CDN / cloud storage you might not see any improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as downloading\nit from its canonical CDN / cloud storage location.\nHowever Bitrise Caching still might help if you have reliability issues with the resource's, or dependency's canonical download location.\n\n\n\n\nCache Expiring\n\n\nThe Build Cache related to a \nspecific branch\n expires / is auto-deleted after 7 days,\n\nif there's no new build on that branch in the meantime\n.\n\n\nThis means that \nif you do builds on a specific branch every day\n (more frequently than a week),\n\nit'll never expire / will never be deleted automatically\n,\nbut if you don't start a build on that specific branch for more than 7 days then the related cache\nwill be removed, and your next build will run like the first time, when there was no cache for that branch yet.\n\n\n\n\nSetup\n\u2693\n\n\nAll you need to get started is adding two Steps to your Workflow:\n\n\n\n\nOne for downloading the previous cache (if any): \nCache:Pull\n\n\nOne for checking the state of the cache and uploading it if required: \nCache:Push\n\n\n\n\nYou should add the \nCache:Pull\n (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the \nGit Clone\n and the \nCocoaPods\n install steps.\nIf you intend to cache your \n./Pods\n directory you should not pull the cache before the \nGit Clone\n,\nbecause \nGit Clone\n will create the base directory for \n./Pods\n.\nBefore the \nGit Clone\n step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.\n\n\nThe \nCache:Push\n step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of \nCocoaPods\n you should put the \nCache:Push\n step anywhere after the \nCocoaPods\n install,\nbecause that's the step which generates, or updates the directory (\n./Pods\n) which is cached.\n\n\nDownloading and deleting caches\n\u2693\n\n\nYou can download and delete caches, for every branch which generated a cache,\non the \nSettings\n tab of the app, under the \nManage Build Caches\n section.\n\n\n\n\nDelete a single branch's cache\n\n\nIf you only want to delete the cache which is related to a single branch,\nyou should also delete the default branch's cache too!\nFor more detail see the\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\nsection.\n\n\n\n\n\n\nNote\n\n\nYou can see the size of the caches and the last time a given cache was used in the popup.\n\n\n\n\nTechnical notes\n\u2693\n\n\nThe Build Cache feature is split into two parts, the \nBuild Cache API\n and the \nSteps\n.\n\n\nThe \nBuild Cache API\n is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.\n\n\nThe \nSteps\n are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.\n\n\n\n\nAdvanced notes\n\n\n\n\nYou can create your own Cache steps\n\n\nYou can create and use your own Build Cache server and API\n\n\n\n\n\n\nThe cache might or might not be available\n\u2693\n\n\nYou should write your code in a way that it won't fail if the cache can't be accessed.\n\n\nThe cache is downloaded over the internet\n\u2693\n\n\nWhich means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.\n\n\nOne important note: storing a dependency in Bitrise Build Cache might help if you have \nreliability\n\nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited (\nexample: PhantomJS\n).\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but \nit definitely can improve the reliability\n.\n\n\nThe cache is stored as one archive file\n\u2693\n\n\nSo if you have multiple paths you want to cache and any\nof the paths gets updated \nit'll update the whole cache archive\n,\nincluding all the paths you cache.\n\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\u2693\n\n\nThe build on a non default branch, to speed up things,\ncan (read-only) access the \nprimary\n branch's cache, until a successful\nbuild on the new branch. Once a build on the new branch\npushes a cache, new builds on that branch will get the branch's cache.\n\nCaches are stored and available for every branch separately.\n\n\n\n\nDefault branch\n\n\nYou can see which is your \ndefault branch\n on your\n\nbitrise.io\n app's \nSettings\n tab.", 
            "title": "About caching"
        }, 
        {
            "location": "/caching/about-caching/#setup", 
            "text": "All you need to get started is adding two Steps to your Workflow:   One for downloading the previous cache (if any):  Cache:Pull  One for checking the state of the cache and uploading it if required:  Cache:Push   You should add the  Cache:Pull  (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the  Git Clone  and the  CocoaPods  install steps.\nIf you intend to cache your  ./Pods  directory you should not pull the cache before the  Git Clone ,\nbecause  Git Clone  will create the base directory for  ./Pods .\nBefore the  Git Clone  step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.  The  Cache:Push  step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of  CocoaPods  you should put the  Cache:Push  step anywhere after the  CocoaPods  install,\nbecause that's the step which generates, or updates the directory ( ./Pods ) which is cached.", 
            "title": "Setup"
        }, 
        {
            "location": "/caching/about-caching/#downloading-and-deleting-caches", 
            "text": "You can download and delete caches, for every branch which generated a cache,\non the  Settings  tab of the app, under the  Manage Build Caches  section.   Delete a single branch's cache  If you only want to delete the cache which is related to a single branch,\nyou should also delete the default branch's cache too!\nFor more detail see the If a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache \nsection.    Note  You can see the size of the caches and the last time a given cache was used in the popup.", 
            "title": "Downloading and deleting caches"
        }, 
        {
            "location": "/caching/about-caching/#technical-notes", 
            "text": "The Build Cache feature is split into two parts, the  Build Cache API  and the  Steps .  The  Build Cache API  is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.  The  Steps  are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.   Advanced notes   You can create your own Cache steps  You can create and use your own Build Cache server and API", 
            "title": "Technical notes"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-might-or-might-not-be-available", 
            "text": "You should write your code in a way that it won't fail if the cache can't be accessed.", 
            "title": "The cache might or might not be available"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-downloaded-over-the-internet", 
            "text": "Which means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.  One important note: storing a dependency in Bitrise Build Cache might help if you have  reliability \nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited ( example: PhantomJS ).\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but  it definitely can improve the reliability .", 
            "title": "The cache is downloaded over the internet"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-stored-as-one-archive-file", 
            "text": "So if you have multiple paths you want to cache and any\nof the paths gets updated  it'll update the whole cache archive ,\nincluding all the paths you cache.", 
            "title": "The cache is stored as one archive file"
        }, 
        {
            "location": "/caching/about-caching/#if-a-build-runs-on-a-branch-which-doesnt-have-a-cache-yet-itll-get-the-maindefault-branchs-cache", 
            "text": "The build on a non default branch, to speed up things,\ncan (read-only) access the  primary  branch's cache, until a successful\nbuild on the new branch. Once a build on the new branch\npushes a cache, new builds on that branch will get the branch's cache. Caches are stored and available for every branch separately.   Default branch  You can see which is your  default branch  on your bitrise.io  app's  Settings  tab.", 
            "title": "If a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache"
        }, 
        {
            "location": "/caching/caching-cocoapods/", 
            "text": "Put the \nCache:Pull\n step after the \nGit Clone\n, and before the \nCocoaPods Install\n step\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and specify the following paths for caching (Cache Paths inputs):\n   \n./Pods -\n ./Podfile.lock\n\n\n\n\n\n\nNote\n\n\nIf your Podfile and Pods directory is not in the root of your repository then you should specify the\npath relative to the repository root, e.g. \n./subdir/Pods -\n ./subdir/Podfile.lock\n\n\n\n\nThat's all. This specification (using the \n-\n separator) means that the \n./Pods\n directory\nshould be cached, and that the cache should be updated/uploaded only if the \n./Podfile.lock\n file changes.\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - cocoapods-install:\n  - certificate-and-profile-installer: {}\n  - xcode-archive:\n  - cache-push:\n      inputs:\n      - cache_paths: \n./Pods -\n ./Podfile.lock", 
            "title": "Caching Cocoapods"
        }, 
        {
            "location": "/caching/caching-cocoapods/#example-workflow", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - cocoapods-install:\n  - certificate-and-profile-installer: {}\n  - xcode-archive:\n  - cache-push:\n      inputs:\n      - cache_paths:  ./Pods -  ./Podfile.lock", 
            "title": "Example workflow"
        }, 
        {
            "location": "/caching/caching-gradle/", 
            "text": "Put the \nCache:Pull\n step after the Git Clone\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and specify the following paths for caching (Cache Paths input):\n   \n$HOME/.gradle\n./.gradle\n\n\nSelect the \nCache:Push\n step and specify the following paths for update-check ignore (Ignore Paths from change check input):\n   \n$HOME/.gradle/caches/\n.lock\n./.gradle/\n.lock\n./.gradle/*.bin\n\n\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file: \n$BITRISE_PROJECT_PATH\n\n      - gradle_task: \n$GRADLE_TASK\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Caching Gradle"
        }, 
        {
            "location": "/caching/caching-gradle/#example-workflow", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file:  $BITRISE_PROJECT_PATH \n      - gradle_task:  $GRADLE_TASK \n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Example workflow"
        }, 
        {
            "location": "/caching/caching-maven/", 
            "text": "Your build process may use \nApache Maven\n repositories to fetch dependencies at runtime.\nFor example \nRoboelectric\n testing framework uses \nSonatype\n\nto fetch target platforms and shadow-classes during a test run (unless explicitly \nconfigured\n).\nResolved dependencies are cached in a local Maven repository at \n$HOME/.m2\n\n\nTo cache it follow these steps:   \n\n\n\n\nPut the \nCache:Pull\n step after the Git Clone\n\n\nPut the \nCache:Push\n step to the very end of the Workflow\n\n\nSelect the \nCache:Push\n step and add the following paths for caching (Cache Paths input):\n   \n$HOME/.m2\n\n\n\n\nExample workflow (gradle and maven caches)\n\u2693\n\n\nexample:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file: \n$BITRISE_PROJECT_PATH\n\n      - gradle_task: \n$GRADLE_TASK\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n          $HOME/.m2\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Caching Maven"
        }, 
        {
            "location": "/caching/caching-maven/#example-workflow-gradle-and-maven-caches", 
            "text": "example:\n  steps:\n  - git-clone: {}\n  - cache-pull: {}\n  - gradle-runner:\n      inputs:\n      - gradle_file:  $BITRISE_PROJECT_PATH \n      - gradle_task:  $GRADLE_TASK \n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $HOME/.gradle\n          ./.gradle\n          $HOME/.m2\n      - ignore_check_on_paths: |-\n          $HOME/.gradle/caches/*.lock\n          ./.gradle/*.lock\n          ./.gradle/*.bin", 
            "title": "Example workflow (gradle and maven caches)"
        }, 
        {
            "location": "/caching/caching-ruby-gems/", 
            "text": "Technical note\n\u2693\n\n\nRuby GEMs are installed into a single directory by default. You can get the location of this directory\nwith \ngem environment gemdir\n. If you want to change this directory you can set the \n$GEM_HOME\n environment variable,\nthis will be picked up by \ngem install\n and it'll install the GEMs to the location specified by \n$GEM_HOME\n.\n\n\nNow that you know where the Ruby GEMs are stored you can easily cache the directory. As in any other previous case you need two steps:\n\n\n\n\nput the \nCache:Pull\n step after the \nGit Clone\n\n\nput the \nCache:Push\n step to the very end of the Workflow\n\n\nYou can now just select the \nCache:Push\n step and add the Ruby GEM home directory to the Cache Paths input.\n\n\n\n\n\n\nWarning\n\n\nYou can't just add \ngem environment gemdir\n to the input as you can only reference\nEnvironment Variables in the inputs directly,\nand \n$GEM_HOME\n is not set by default on the Bitrise.io VMs.\n\n\n\n\nThere are two simple solutions for this issue:\n\n\n\n\nSet \nGEM_HOME\n as an App Env Var to, let's say, \n$HOME/.gem\n.\n\n\nAdd a \nScript step\n to your workflow and set the \n$GEM_HOME\n environment variable there\n\n\n\n\nThe second option is usually more error proof as you don't change the location of gem home,\nyou just set the environment variable to the path where it's located.\n\n\nExample workflow\n\u2693\n\n\nexample:\n  steps:\n  - script:\n      title: GEM_HOME\n      inputs:\n      - content: |-\n          #!/bin/bash\n          set -ev\n\n          envman add --key GEM_HOME --value \n$(gem environment gemdir)\n\n  - git-clone: {}\n  - cache-pull: {}\n\n  # ... Add your steps here.\n  # You can `gem install` Ruby gems with Script steps here too,\n  # just make sure it's between the `cache-pull` and `cache-push` steps.\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $GEM_HOME", 
            "title": "Caching Ruby GEMs"
        }, 
        {
            "location": "/caching/caching-ruby-gems/#technical-note", 
            "text": "Ruby GEMs are installed into a single directory by default. You can get the location of this directory\nwith  gem environment gemdir . If you want to change this directory you can set the  $GEM_HOME  environment variable,\nthis will be picked up by  gem install  and it'll install the GEMs to the location specified by  $GEM_HOME .  Now that you know where the Ruby GEMs are stored you can easily cache the directory. As in any other previous case you need two steps:   put the  Cache:Pull  step after the  Git Clone  put the  Cache:Push  step to the very end of the Workflow  You can now just select the  Cache:Push  step and add the Ruby GEM home directory to the Cache Paths input.    Warning  You can't just add  gem environment gemdir  to the input as you can only reference\nEnvironment Variables in the inputs directly,\nand  $GEM_HOME  is not set by default on the Bitrise.io VMs.   There are two simple solutions for this issue:   Set  GEM_HOME  as an App Env Var to, let's say,  $HOME/.gem .  Add a  Script step  to your workflow and set the  $GEM_HOME  environment variable there   The second option is usually more error proof as you don't change the location of gem home,\nyou just set the environment variable to the path where it's located.", 
            "title": "Technical note"
        }, 
        {
            "location": "/caching/caching-ruby-gems/#example-workflow", 
            "text": "example:\n  steps:\n  - script:\n      title: GEM_HOME\n      inputs:\n      - content: |-\n          #!/bin/bash\n          set -ev\n\n          envman add --key GEM_HOME --value  $(gem environment gemdir) \n  - git-clone: {}\n  - cache-pull: {}\n\n  # ... Add your steps here.\n  # You can `gem install` Ruby gems with Script steps here too,\n  # just make sure it's between the `cache-pull` and `cache-push` steps.\n\n  - cache-push:\n      inputs:\n      - cache_paths: |-\n          $GEM_HOME", 
            "title": "Example workflow"
        }, 
        {
            "location": "/bitrise-cli/", 
            "text": "Bitrise is a collection of tools and services to help you with the development\nand automation of your software projects, with a main focus on mobile apps.\n\n\nMost of this DevCenter describes things related to \nbitrise.io\n,\nthe hosted automation service, but the heart of Bitrise is the\n\nopen source Bitrise CLI / runner\n,\nwhich is responsible for interpreting the build configuration and executing it.\n\n\nThis open source runner is referred to as \nBitrise CLI\n or \nBitrise\n,\nand \nit's a tool which you can install and run on your own Mac/PC!\n\n\nThis section of the DevCenter is dedicated to this runner (\nBitrise CLI\n) and the\n\nbitrise.yml\n configuration format, \nthe things described here don't even require a\n\nbitrise.io\n account\n, the only requirement is that\nyou install the \nBitrise CLI\n on your Mac/PC.\n\n\n\n\nBitrise CLI on bitrise.io\n\n\nThe CLI you can install is exactly the same as what's used on \nbitrise.io\n.\nWhen a build starts on \nbitrise.io\n, a virtual machine\nis created for the build with the Bitrise CLI preinstalled,\nand once the virtual machine is ready, the build is performed through the Bitrise CLI.\n\n\n\n\nBitrise CLI - the open source, offline, automation runner\n\u2693\n\n\nTo run a Bitrise build on your machine, you can install our \nopen source runner\n\nand use the \nbitrise\n command to execute your \nworkflows\n locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nbitrise.yml - the configuration format\n\u2693\n\n\nThe configuration format of the \nBitrise CLI\n is referred to as \nbitrise.yml\n,\nas that's the expected file name the configuration should be saved with.\n\n\nTechnically the CLI can also accept the configuration in JSON format,\nand the file name can be changed too, but if you save the configuration\ninto a file named \nbitrise.yml\n, you can simply \nbitrise run\n in that directory,\nwithout specifying any configuration path, and the CLI will read the\nconfiguration from \nbitrise.yml\n automatically.\n\n\nStep Library (StepLib)\n\u2693\n\n\nThe StepLib is the collection of the build steps you can use in your\n\nbitrise.yml\n. The steps in the official \nBitrise StepLib\n\nare all open source, \nyou can write your own\n too and then share it with others!\nSee the \nstep-template\n for more information.\n\n\nYou can also create your own Step Library if you want to, but it's usually\neasier to just reference your steps with their \ngit clone\n URL directly\nif you don't want to share it with others.\n\n\n\n\nCustom StepLib support in tools\n\n\nThe Bitrise CLI tools can work with custom step libraries, but other\ntools like the Visual Workflow Editor on \nbitrise.io\n\nmight be limited in functionality for steps not available in the main\n\nBitrise StepLib\n.\n\n\n\n\nIf possible you should share your steps in the\nmain \nBitrise StepLib\n,\nto help others as well as for the extra reliability the StepLib offers.\n\n\nCustom StepLibs can also provide fallbacks (alternative download URLs, caches),\nautomatic and preiodic checks etc. to provide the best reliability, but you get all these for free\nif you use the main Bitrise StepLib.\n\n\nWhy to use the StepLib and Steps instead of ad-hoc build scripts?\n\u2693\n\n\nSame reason why code libraries / dependencies are awesome:\n\n\nYou have a code which can be updated independently from other parts,\nand \nyou can re-use/share\n this between your configurations.\n\n\nShared maintenance\n: when you use Steps created by others you don't have to maintain\nthe codes, but you can contribute to it if you want to, or create and use your own.\n\n\nVersioned\n: If a new version doesn't work for you, \nyou can always go back to a previous one\n.\n\n\nWe frequently push features as Steps instead of building it into the core tools.\nThis allows faster and versioned iterations, and updating the parts independently.\nWe try to maintain compatibility as much as possible, so older versions can work too,\nproviding a way to upgrade when it's appropriate for you.", 
            "title": "Intro"
        }, 
        {
            "location": "/bitrise-cli/#bitrise-cli-the-open-source-offline-automation-runner", 
            "text": "To run a Bitrise build on your machine, you can install our  open source runner \nand use the  bitrise  command to execute your  workflows  locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for  any kind of automation  on your machine.", 
            "title": "Bitrise CLI - the open source, offline, automation runner"
        }, 
        {
            "location": "/bitrise-cli/#bitriseyml-the-configuration-format", 
            "text": "The configuration format of the  Bitrise CLI  is referred to as  bitrise.yml ,\nas that's the expected file name the configuration should be saved with.  Technically the CLI can also accept the configuration in JSON format,\nand the file name can be changed too, but if you save the configuration\ninto a file named  bitrise.yml , you can simply  bitrise run  in that directory,\nwithout specifying any configuration path, and the CLI will read the\nconfiguration from  bitrise.yml  automatically.", 
            "title": "bitrise.yml - the configuration format"
        }, 
        {
            "location": "/bitrise-cli/#step-library-steplib", 
            "text": "The StepLib is the collection of the build steps you can use in your bitrise.yml . The steps in the official  Bitrise StepLib \nare all open source,  you can write your own  too and then share it with others!\nSee the  step-template  for more information.  You can also create your own Step Library if you want to, but it's usually\neasier to just reference your steps with their  git clone  URL directly\nif you don't want to share it with others.   Custom StepLib support in tools  The Bitrise CLI tools can work with custom step libraries, but other\ntools like the Visual Workflow Editor on  bitrise.io \nmight be limited in functionality for steps not available in the main Bitrise StepLib .   If possible you should share your steps in the\nmain  Bitrise StepLib ,\nto help others as well as for the extra reliability the StepLib offers.  Custom StepLibs can also provide fallbacks (alternative download URLs, caches),\nautomatic and preiodic checks etc. to provide the best reliability, but you get all these for free\nif you use the main Bitrise StepLib.", 
            "title": "Step Library (StepLib)"
        }, 
        {
            "location": "/bitrise-cli/#why-to-use-the-steplib-and-steps-instead-of-ad-hoc-build-scripts", 
            "text": "Same reason why code libraries / dependencies are awesome:  You have a code which can be updated independently from other parts,\nand  you can re-use/share  this between your configurations.  Shared maintenance : when you use Steps created by others you don't have to maintain\nthe codes, but you can contribute to it if you want to, or create and use your own.  Versioned : If a new version doesn't work for you,  you can always go back to a previous one .  We frequently push features as Steps instead of building it into the core tools.\nThis allows faster and versioned iterations, and updating the parts independently.\nWe try to maintain compatibility as much as possible, so older versions can work too,\nproviding a way to upgrade when it's appropriate for you.", 
            "title": "Why to use the StepLib and Steps instead of ad-hoc build scripts?"
        }, 
        {
            "location": "/bitrise-cli/installation/", 
            "text": "Installing the Bitrise CLI is super simple.\n\n\nThe Bitrise CLI is distributed as a single binary, so\nyou just have to download this binary file, make it executable,\nand run \nbitrise setup\n to download all the core plugins\nand tools required for running a build.\n\n\nIf you'd forget to run \nbitrise setup\n that's not an issue either,\nthe first time you run \nbitrise run\n it will perform the \nsetup\n\nif it was not performed for the current version of the CLI yet.\n\nbitrise setup\n can be called any time to validate the CLI installation.\n\n\nUpgrading the CLI works exactly the same way: just download the\nnew binary (overwrite the previous binary), make it executable\nand run \nbitrise setup\n (or the next \nbitrise run\n will run it\nautomatically).\n\n\nYou can download the release binary on GitHub from the CLI's\n\nreleases\n page.\nEvery release includes copy paste ready \ncurl\n commands\nto install the specific version.\n\n\nThe CLI is also available in \nbrew\n on macOS, so it can be installed with\n\n\nbrew update \n brew install bitrise\n\n\n\n\nif you have Homebrew installed on your Mac.\n\n\nYou can find more information about the installation in the\n\nInstall and Setup section of the CLI's README\n.", 
            "title": "Install the Bitrise CLI"
        }, 
        {
            "location": "/bitrise-cli/run-your-first-build/", 
            "text": "To run your Bitrise build you only need two things:\n\n\n\n\nThe Bitrise CLI - \ninstallation guide\n\n\nA build configuration (\nbitrise.yml\n)\n\n\n\n\nOnce you have the Bitrise CLI installed (just run \nbitrise setup\n to validate\nthe installation) you just have to create the \nbitrise.yml\n build configuration,\nand you're ready to go!\n\n\nIf you use \nbitrise.io\n, you can download your app's \nbitrise.yml\n right from\n\nbitrise.io\n, and run the build locally. The \nbitrise.yml\n can be found\nin the Workflow Editor of the app on \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\nIf you want to create a \nbitrise.yml\n yourself, simply create a \nbitrise.yml\n file\nin the root of your project. You can use this as the base content of \nbitrise.yml\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\napp:\n  envs:\n  - MY_NAME: My Name\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\n\nTo run this build open your Terminal / Command Line, \ncd\n into the directory where\nyou saved the \nbitrise.yml\n, and run: \nbitrise run test\n.\n\n\nThat's all, you just ran your first build with the Bitrise CLI!\n\n\nRead on to learn more about how the Bitrise CLI and the \nbitrise.yml\n configuration works,\nyou'll be able to compose and run complex builds in no time!", 
            "title": "Run your first build"
        }, 
        {
            "location": "/bitrise-cli/basics-of-bitrise-yml/", 
            "text": "A bare minimal \nbitrise.yml\n is as simple as:\n\n\nformat_version: 1.3.1\n\n\n\n\nThis configuration is valid, everything else is optional, but does not include anything to execute,\nthere's nothing to \nrun\n.\n\n\nA minimal configuration which you can \nbitrise run\n:\n\n\nformat_version: 1.3.1\nworkflows:\n  test:\n\n\n\n\nThis configuration can be executed with \nbitrise run test\n, and the \nbitrise\n CLI\nwon't give you any errors, but of course there's still nothing declared to do.\n\n\nLet's continue with our example from the previous guide,\nwhich executes a single Script step when you run it with \nbitrise run test\n,\nand talk about what's what in the configuration:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\napp:\n  envs:\n  - MY_NAME: My Name\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\n\nA quick walk through of this sample configuration:\n\n\n\n\nformat_version\n : this property declares the minimum Bitrise CLI format version.\n  You can get your Bitrise CLI's supported highest format version with: \nbitrise version --full\n.\n  If you set the \nformat_version\n to \n1.3.1\n that means that Bitrise CLI versions which\n  don't support the format version \n1.3.1\n or higher won't be able to run the configuration.\n  This is important if you use features which are not available in older Bitrise CLI versions.\n\n\ndefault_step_lib_source\n : specifies the source to use when no other source is defined for a step.\n  More info a bit later, in the \n- script@1.1.3:\n step description.\n\n\napp\n - \nenvs\n : the \napp: envs:\n section specifies Environment Variables which will be available for\n  every build, every workflow, every step.\n\n\nworkflows\n : the workflows section is the collection of separate build configurations\n  which you can run with \nbitrise run WORKFLOWID\n.\n  In this example the only workflow is \ntest\n, which you can perform with \nbitrise run test\n.\n  If you'd have a second workflow called \nmain\n, you could run both \nbitrise run test\n and \nbitrise run main\n.\n\n\nsteps:\n : the list of steps which should be executed when the workflow is performed.\n  In this example the \ntest\n workflow includes only a single \nscript\n step. If more than one\n  step is declared, the steps are performed one by one, after each other.\n\n\n- script@1.1.3:\n : a step (reference) to perform. This reference does not have a \"StepLib Source\" declaration,\n  which means that the \ndefault_step_lib_source\n will be used as the StepLib Source.\n  For more information check the \nStep reference section of the Steps guide\n.\n\n\ninputs:\n : the inputs you want to specify for the given step.\n  A step can have many inputs,\n  but \nyou only have to specify those in the \nbitrise.yml\n which you want to set/overwrite.\n\n  For more information see the \nSteps documentation\n.\n\n\n- content:\n : the input we want to set. In this example we only wanted to specify the Content\n  of the Script step, all other inputs are irrelevant.\n\n\necho \"Hello ${MY_NAME}!\"\n : this is the \nvalue\n we specified for the \ncontent\n input.\n\n\n\n\nRead on to learn more about how you can use multiple workflows,\ndefine multiple steps to execute for a given workflow and for\nmore advanced concepts. You'll be able to define your perfect automation\nconfiguration in no time!", 
            "title": "Basics of bitrise.yml"
        }, 
        {
            "location": "/bitrise-cli/workflows/", 
            "text": "A workflow is a collection of steps, environment variables,\nand other configurations for a single \nbitrise run\n.\n\n\nThe only requirement for a workflow is an ID for the step.\n\n\nformat_version: 1.3.1\nworkflows:\n  test:\n\n\n\n\nIn this configuration we declared one workflow, with the ID \ntest\n.\nYou can define as many workflows as you want to, and run a specific\nworkflow with \nbitrise run WORKFLOWID\n.\n\n\nformat_version: 1.3.1\nworkflows:\n  first:\n  second:\n\n\n\n\nThis configuration contains two workflows, \nfirst\n and \nsecond\n,\nso you can execute both \nbitrise run first\n and \nbitrise run second\n.\n\n\n\n\nAvailable workflow list\n\n\nYou can list all the available workflows in a \nbitrise.yml\n\nby running \nbitrise run\n or \nbitrise workflows\n in the directory\nof the \nbitrise.yml\n.\n\n\n\n\nAdd steps to a workflow\n\u2693\n\n\nTo add steps to a workflow simply include \nsteps:\n and then the list of steps.\nFor example to run two script steps after each other:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        title: First step\n    - script:\n        title: Second step\n\n\n\n\nWhen you you run \nbitrise run test\n, the Bitrise CLI will run the two\nscript steps one by one, starting with \nFirst step\n and then\ncontinuing with \nSecond step\n.\n\n\nTo learn more about Build Steps, check the \nSteps\n section.\n\n\nDefine workflow specific parameters / environment variables\n\u2693\n\n\nIn addition to steps, you can also specify environment variables\nfor every workflow.\n\n\nThe environment variables you specify for a given workflow will be used\nwhen the workflow is executed and will be available for every step\nin the workflow.\n\n\nAn example, defining two environment variables (\nENV_VAR_ONE\n and \nENV_VAR_TWO\n)\nfor the \ntest\n workflow:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    envs:\n    - ENV_VAR_ONE: first value\n    - ENV_VAR_TWO: second value\n\n\n\n\nChaining workflows and reusing workflows\n\u2693\n\n\nIt's also possible to \"chain\" workflows, to run one or more workflow\nbefore and/or after a specific workflow.\n\n\nAn example:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  send-notifications:\n    steps:\n    # send notifications\n\n  setup:\n    steps:\n    # setup steps to run\n\n  test:\n    before_run:\n    - setup\n    envs:\n    - IS_TEST: \ntrue\n\n    steps:\n    # test steps to run\n\n  ci:\n    before_run:\n    - test\n    after_run:\n    - send-notifications\n\n  deploy:\n    before_run:\n    - test\n    steps:\n    # steps to deploy\n    after_run:\n    - send-notifications\n\n\n\n\nIn the above example, if you run:\n\n\n\n\nbitrise run send-notifications\n : only the steps of the \nsend-notifications\n workflow will be executed\n\n\nbitrise run setup\n : only the steps of the \nsetup\n workflow will be executed\n\n\nbitrise run test\n : first the steps of the \nsetup\n workflow will be executed,\n  then the steps declared in \ntest\n workflow\n\n\nbitrise run ci\n: will execute the steps of the workflows, in the following order:\n\n\nsetup\n\n\ntest\n\n\nci\n (the \nci\n workflow doesn't have any steps, but that's not an issue, it just means\n   that no step will be executed here, the build will continue with the next workflow in the chain)\n\n\nsend-notifications\n\n\n\n\n\n\nbitrise run deploy\n: will execute the steps of the workflows, in the following order:\n\n\nsetup\n\n\ntest\n\n\ndeploy\n\n\nsend-notifications\n\n\n\n\n\n\n\n\nThis means that you can define what a \nsetup\n and \ntest\n should do\nin your project only once, in the \nsetup\n and \ntest\n workflows,\nand then you can resuse those in other workflows.\nThere's no need to duplicate steps between workflows.\n\n\nWhen you chain workflows, technically it's the same as if you'd create\none workflow which would include all steps from all the workflows\nchained after each other. This means that, for example,\none step's outputs will be available for\nevery other step which is executed after that step during the build,\nregardless of whether the other step is\nin the same or in another workflow; if a step is executed\nafter another one during the build, it can access the outputs\nof the previous steps. Just like if both steps would be in a single workflow.\n\n\nNote about workflow environment variables\n\u2693\n\n\nWorkflow specific environment variables are made accessible\n\nwhen the workflow is executed\n, and are available for workflows\nexecuted \nafter\n that workflow, \nbut not in the ones executed before\n that workflow.\n\n\nUsing the example above, if you \nbitrise run ci\n,\nthe \nIS_TEST\n environment variable \nwon't\n be available in the \nsetup\n\nworkflow, as that runs \nbefore\n the \ntest\n workflow,\nbut the environment variable \nwill\n be available for the steps in \ntest\n, \nci\n and\n\nsend-notifications\n workflows.\n\n\nThis is true even if the workflow doesn't have any steps.\nThis can be utilized if you want to create generic workflows,\nwhich can do different things based on environment variables,\nand you specify those environment variables through a \"wrapper\" workflow.\n\n\nExample:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  generic-build:\n    steps:\n    # steps which depend on `BUILD_TYPE` environment variable\n\n  build-alpha:\n    envs:\n    - BUILD_TYPE: alpha\n    after_run:\n    - generic-build\n\n  build-beta:\n    envs:\n    - BUILD_TYPE: beta\n    after_run:\n    - generic-build\n\n\n\n\nbuild-alpha\n nor \nbuild-beta\n has any steps, the steps are defined in \ngeneric-build\n,\nbut when you \nbitrise run build-alpha\n the \nBUILD_TYPE\n environment variable will be set to \nalpha\n,\nwhile if you \nbitrise run build-beta\n  the \nBUILD_TYPE\n environment variable will be set to \nbeta\n.\n\n\nImportant:\n as noted above, workflow defined environment variables are\nonly available in the workflow it defines it, and the ones \nexecuted after\n that workflow.\nIn the example above \ngeneric-build\n is included as \nafter_run\n workflow,\nso the \nBUILD_TYPE\n environment variable will be available in the steps of \ngeneric-build\n.\nBut if you'd use \nbefore_run\n instead of \nafter_run\n, that would mean that technically\nthe steps of \ngeneric-build\n are processed and executed before processing\nthe \nbuild-alpha\n or \nbuild-beta\n workflows, so the \nBUILD_TYPE\n environment\nvariable would not be available in the step of \ngeneric-build\n.\n\n\nUtility workflows\n\u2693\n\n\nUtility workflows are just a small trick to help you organize your workflows.\n\n\nIf you rely on workflow chaining, you might quickly have tons of small,\nreusable workflows. Finding the right workflow might get tricky.\n\n\nTo help with this, the Bitrise CLI supports a small notation called\n\"utility workflows\".\n\n\nA workflow is considered as a utility workflow if it's ID starts\nwith an underscore character (for example \n_setup\n).\n\n\nUtility workflows are listed at the end of the workflow list if you\nrun \nbitrise run\n or \nbitrise workflows\n, and\n\nutility workflows can't be executed directly with a \nbitrise run\n.\n\n\nThese workflows can still be referenced in \nbefore_run\n and \nafter_run\n\nlists of course, and \nthere's absolutely no other difference\ncompared to a regular workflow\n.\n\n\nUsing the above example where there were five workflows\n(\nci\n, \ndeploy\n, \nsend-notifications\n, \nsetup\n and \ntest\n),\nif you run \nbitrise run\n in the directory of the \nbitrise.yml\n\n(just \nbitrise run\n, without specifying a workflow)\nyou'll get a single list of all five workflows:\n\n\nThe following workflows are available:\n * ci\n * deploy\n * send-notifications\n * setup\n * test\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\n\n\nYou most likely don't want to run \nsetup\n, \ntest\n nor \nsend-notifications\n\nby itself, only through \nci\n or \ndeploy\n, so if you prefix those\nwith an underscore character to make them utility workflows,\nthe \nbitrise run\n output will better highlight which workflows\nare meant to be executed directly:\n\n\nThe following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n\nNote about utility workflows:\n Utility workflow names start with '_' (example: _my_utility_workflow).\n These workflows can't be triggered directly, but can be used by other workflows\n in the before_run and after_run lists.\n\n\n\n\nFull spec / list of available properties\n\u2693\n\n\nYou can find the complete list of available properties in the\n\nbitrise.yml format specification / reference\n\ndocs of the CLI.", 
            "title": "Workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#add-steps-to-a-workflow", 
            "text": "To add steps to a workflow simply include  steps:  and then the list of steps.\nFor example to run two script steps after each other:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        title: First step\n    - script:\n        title: Second step  When you you run  bitrise run test , the Bitrise CLI will run the two\nscript steps one by one, starting with  First step  and then\ncontinuing with  Second step .  To learn more about Build Steps, check the  Steps  section.", 
            "title": "Add steps to a workflow"
        }, 
        {
            "location": "/bitrise-cli/workflows/#define-workflow-specific-parameters-environment-variables", 
            "text": "In addition to steps, you can also specify environment variables\nfor every workflow.  The environment variables you specify for a given workflow will be used\nwhen the workflow is executed and will be available for every step\nin the workflow.  An example, defining two environment variables ( ENV_VAR_ONE  and  ENV_VAR_TWO )\nfor the  test  workflow:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    envs:\n    - ENV_VAR_ONE: first value\n    - ENV_VAR_TWO: second value", 
            "title": "Define workflow specific parameters / environment variables"
        }, 
        {
            "location": "/bitrise-cli/workflows/#chaining-workflows-and-reusing-workflows", 
            "text": "It's also possible to \"chain\" workflows, to run one or more workflow\nbefore and/or after a specific workflow.  An example:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  send-notifications:\n    steps:\n    # send notifications\n\n  setup:\n    steps:\n    # setup steps to run\n\n  test:\n    before_run:\n    - setup\n    envs:\n    - IS_TEST:  true \n    steps:\n    # test steps to run\n\n  ci:\n    before_run:\n    - test\n    after_run:\n    - send-notifications\n\n  deploy:\n    before_run:\n    - test\n    steps:\n    # steps to deploy\n    after_run:\n    - send-notifications  In the above example, if you run:   bitrise run send-notifications  : only the steps of the  send-notifications  workflow will be executed  bitrise run setup  : only the steps of the  setup  workflow will be executed  bitrise run test  : first the steps of the  setup  workflow will be executed,\n  then the steps declared in  test  workflow  bitrise run ci : will execute the steps of the workflows, in the following order:  setup  test  ci  (the  ci  workflow doesn't have any steps, but that's not an issue, it just means\n   that no step will be executed here, the build will continue with the next workflow in the chain)  send-notifications    bitrise run deploy : will execute the steps of the workflows, in the following order:  setup  test  deploy  send-notifications     This means that you can define what a  setup  and  test  should do\nin your project only once, in the  setup  and  test  workflows,\nand then you can resuse those in other workflows.\nThere's no need to duplicate steps between workflows.  When you chain workflows, technically it's the same as if you'd create\none workflow which would include all steps from all the workflows\nchained after each other. This means that, for example,\none step's outputs will be available for\nevery other step which is executed after that step during the build,\nregardless of whether the other step is\nin the same or in another workflow; if a step is executed\nafter another one during the build, it can access the outputs\nof the previous steps. Just like if both steps would be in a single workflow.", 
            "title": "Chaining workflows and reusing workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#note-about-workflow-environment-variables", 
            "text": "Workflow specific environment variables are made accessible when the workflow is executed , and are available for workflows\nexecuted  after  that workflow,  but not in the ones executed before  that workflow.  Using the example above, if you  bitrise run ci ,\nthe  IS_TEST  environment variable  won't  be available in the  setup \nworkflow, as that runs  before  the  test  workflow,\nbut the environment variable  will  be available for the steps in  test ,  ci  and send-notifications  workflows.  This is true even if the workflow doesn't have any steps.\nThis can be utilized if you want to create generic workflows,\nwhich can do different things based on environment variables,\nand you specify those environment variables through a \"wrapper\" workflow.  Example:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  generic-build:\n    steps:\n    # steps which depend on `BUILD_TYPE` environment variable\n\n  build-alpha:\n    envs:\n    - BUILD_TYPE: alpha\n    after_run:\n    - generic-build\n\n  build-beta:\n    envs:\n    - BUILD_TYPE: beta\n    after_run:\n    - generic-build  build-alpha  nor  build-beta  has any steps, the steps are defined in  generic-build ,\nbut when you  bitrise run build-alpha  the  BUILD_TYPE  environment variable will be set to  alpha ,\nwhile if you  bitrise run build-beta   the  BUILD_TYPE  environment variable will be set to  beta .  Important:  as noted above, workflow defined environment variables are\nonly available in the workflow it defines it, and the ones  executed after  that workflow.\nIn the example above  generic-build  is included as  after_run  workflow,\nso the  BUILD_TYPE  environment variable will be available in the steps of  generic-build .\nBut if you'd use  before_run  instead of  after_run , that would mean that technically\nthe steps of  generic-build  are processed and executed before processing\nthe  build-alpha  or  build-beta  workflows, so the  BUILD_TYPE  environment\nvariable would not be available in the step of  generic-build .", 
            "title": "Note about workflow environment variables"
        }, 
        {
            "location": "/bitrise-cli/workflows/#utility-workflows", 
            "text": "Utility workflows are just a small trick to help you organize your workflows.  If you rely on workflow chaining, you might quickly have tons of small,\nreusable workflows. Finding the right workflow might get tricky.  To help with this, the Bitrise CLI supports a small notation called\n\"utility workflows\".  A workflow is considered as a utility workflow if it's ID starts\nwith an underscore character (for example  _setup ).  Utility workflows are listed at the end of the workflow list if you\nrun  bitrise run  or  bitrise workflows , and utility workflows can't be executed directly with a  bitrise run .  These workflows can still be referenced in  before_run  and  after_run \nlists of course, and  there's absolutely no other difference\ncompared to a regular workflow .  Using the above example where there were five workflows\n( ci ,  deploy ,  send-notifications ,  setup  and  test ),\nif you run  bitrise run  in the directory of the  bitrise.yml \n(just  bitrise run , without specifying a workflow)\nyou'll get a single list of all five workflows:  The following workflows are available:\n * ci\n * deploy\n * send-notifications\n * setup\n * test\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID  You most likely don't want to run  setup ,  test  nor  send-notifications \nby itself, only through  ci  or  deploy , so if you prefix those\nwith an underscore character to make them utility workflows,\nthe  bitrise run  output will better highlight which workflows\nare meant to be executed directly:  The following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n\nNote about utility workflows:\n Utility workflow names start with '_' (example: _my_utility_workflow).\n These workflows can't be triggered directly, but can be used by other workflows\n in the before_run and after_run lists.", 
            "title": "Utility workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#full-spec-list-of-available-properties", 
            "text": "You can find the complete list of available properties in the bitrise.yml format specification / reference \ndocs of the CLI.", 
            "title": "Full spec / list of available properties"
        }, 
        {
            "location": "/bitrise-cli/steps/", 
            "text": "What is a Step\n\u2693\n\n\nA Step encapsulates a \"build task\": the code to perform that task, the inputs/parameters\nyou can define for the task, and the outputs the task generates.\n\n\nFor example the \nGit Clone\n (id: \ngit-clone\n) step performs a \"git clone\"\nof the specified repository, with the inputs you (or the system) specify (e.g.\nthe branch, tag or commit to clone, the local path where the clone should happen, etc.).\n\n\nFrom a technical perspective a Step is a semver \nversioned\n repository\nwhich includes the \ncode\n of the Step and the \ninterface\n definition of the Step.\n\n\nThe \nstep interface definition\n (\nstep.yml\n) includes information like the dependencies of the step,\nthe inputs and outputs of the step, the title and description of the step;\nand other properties like the issue tracker / support URL, or\nthe filter properties which define when the step should be performed or skipped\nand whether a failed step should mark the build as failed.\n\n\nFrom a configuration perspective all you have to know about Bitrise Steps\nis how you can include and configure them in your build configuration (\nbitrise.yml\n).\n\n\nTo include a Step you have to reference it by a \nStep reference/ID\n\nin the \nsteps:\n list of a Workflow.\n\n\nAn example, with a single \nscript\n step, which will be executed when you run \nbitrise run test\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n\n\n\n\n\n\nList of available steps (step IDs)\n\n\nYou can list all the available steps in the main Bitrise StepLib\nby running \nbitrise step-list\n, or by checking\n\nthe steps/ directory of the main Bitrise StepLib repository\n.\n\n\n\n\nOnce you include a step in your build configuration (\nbitrise.yml\n),\nyou can specify configurations for the step. The most common thing\nyou'll do is to specify values for the step's inputs.\nYou can do this with the \ninputs:\n list property of the step,\ndefining the \nkey\n of the input and the \nvalue\n you want to set.\n\n\nFor example, to specify a simple script to perform for the \nscript\n step,\nyou can specify a value for the \nscript\n step's \ncontent\n input.\n(\nNote: you can list all the inputs of a step with \nbitrise step-info STEP-ID\n)\n\n\nLet's do a simple \"Hello World\" script, using the \nscript\n step:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \necho 'Hello World!'\n\n\n\n\nWhen you run the \ntest\n workflow of this configuration with \nbitrise run test\n\nyou'll now see that the \nscript\n step prints the text \nHellow World\n in its log:\n\n\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-07T17:05:17+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nHello World!\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.30 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\n\nIf the step doesn't have any required inputs you don't have to specify an input,\nand of course you can specify values for as many inputs as you want to.\n\n\nFor example the \nscript\n step can run Ruby scripts too, not just Bash scripts.\nTo do this, in addition to specifying the script in the \ncontent\n input\nyou also have to specify the \"runner\" input:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nStep input values are always \nstring\n / text values, as the input id/key and the value\nare passed to the step as environment variables\n(\nmore information\n),\nand the value can be multi line too, using the standard YAML multi line format.\nAn example multi line Bash script:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            set -ex\n            var_to_print='Hello World!'\n            echo \n${var_to_print}\n\n\n\n\n\n\nWatch out for the indentation!\n\n\nIndentation in the YAML format is very important!\nYou should use two-spaces indentation, and you can't use tabs to indent!\n\n\nIf you use a multi line value, like the one above, it's important that you\nhave to \nindent the value with two spaces\n, compared to the key!\n\n\n\n\nYou can change other properties of the step too, not just the inputs.\nFor example, if you want to \"force\" run the step even if a previous step fails,\nyou can set the \nis_always_run\n property to \ntrue\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nor if you want to specify a better, more descriptive title for the step,\nyou can use the \ntitle\n property:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nThe Step data you define in bitrise.yml - your diff!\n\u2693\n\n\nYou might already suspect it after the examples above:\nthe step data / infos you specify in the \nbitrise.yml\n are the parameters\nof the step \nyou want to change\n / overwrite.\n\n\nIf you don't specify any input or other step property, only the step (reference/iD),\nthat means that the step should run with the default values (defined by the step's developer).\n\n\nYou could also think about this as a \ndiff\n. The step defines values for the step interface\nproperties, and in the \nbitrise.yml\n you define a \ndiff\n, the things you want to change\nand the values to change to.\n\n\nLet's go through the example above:\n\n\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nThe \n- script@1.1.3:\n line selects the step, and the properties you define after this\n(with an indentation!)\nare the things you want to overwrite.\n\n\nTo see the step's raw interface definition you can check it in the step library.\nIn these examples we always use the \nmain Bitrise StepLib\n.\nThe step interface definitions can be found in the StepLib's\n\nsteps\n directory\n,\nin this case it's in the \nsteps/script/1.1.3\n directory,\nas we used the \n1.1.3\n version of the \nscript\n step.\nThe \nstep.yml\n in this directory is the step's interface definition\n.\n\n\nCheck the \nstep.yml\n,\nyou can see all the properties defined for this version of the step.\nNow, if you check our example above, all we did is to\nchange the \ntitle\n property (from \nScript\n to \nPrint Hello Ruby\n),\nthe \nis_always_run\n property (from \nfalse\n to \ntrue\n)\nand two inputs of the step, \ncontent\n (from a default, example script content)\nand \nrunner_bin\n (from \n/bin/bash\n to \nruby\n).\n\n\nAll other properties you can see in the step version's \nstep.yml\n will be read\nfrom the \nstep.yml\n, you don't have to define those. You only have to define\n\nthe things you want to change\n, compared to the values specified for the step\nin the step's interface definition (\nstep.yml\n).\n\n\nStep reference/ID format\n\u2693\n\n\nA step reference from the example \nbitrise.yml\n above:\n\n\n- script@1.1.3:\n\n\n\n\n\n\nthe StepLib source\n\n\nthe Step ID\n\n\nthe Step Version\n\n\n\n\nStep reference format: \n- StepLibSource::StepID@StepVersion:\n\n\nFrom the three components only Step ID is required (e.g. \n- script:\n).\n\nThis example item could alternatively be written as \n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n,\nto include all three components of the step reference.\n\n\nIf the Version is not defined, the latest version of the step will be used.\n\n\nIf the StepLib Source is not defined, the \ndefault_step_lib_source\n will be used.\n\n\nSo, if \ndefault_step_lib_source\n is set to \nhttps://github.com/bitrise-io/bitrise-steplib.git\n,\nand the latest version of the Script step is \n1.1.3\n, all the following references\nwill mean the exact same thing:\n\n\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n\n\n- script@1.1.3:\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script:\n\n\n- script:\n\n\n\n\nBut, if a new version of the \nscript\n step is released (e.g. \n2.0.0\n)\nand you don't include the \n@1.1.3\n version reference component,\nnew builds will use the \"latest version at the time\".\nFor this reason, it's usually a good idea to specify the version of the step,\nso that your build does not break accidentally when a breaking change\nis introduced in a new version of the step.\n\n\nSpecial step sources\n\u2693\n\n\nThere are two special step sources:\n\n\n\n\ngit::\n\n\nand \npath::\n\n\n\n\nWhen you use one of these sources, the step won't be identified through\na Step Library, but through the ID data you specify.\n\n\nFor example, the \nscript\n step's github is at: \nhttps://github.com/bitrise-io/steps-script\n.\nTo reference the \nscript\n step directly through a git reference,\nyou can use the \ngit::\n source, the step's git clone URL,\nand the branch or tag in the repository.\n\n\nExample, to reference the \n1.1.3\n version tag of the script step's repository:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@1.1.3:\n\n\n\n\nIn general, \nwhenever you can use a step version through a Step Library,\nyou should do that\n, instead of using the \ngit::\n source type,\nbecause features like \nlocal step caching\n or \nnetwork caching\n / alternative\ndownload URLs are only supported for steps shared in a StepLib.\n\n\nBut this type of referencing allows certain things you can't get through\na StepLib. For example the \ngit::\n source type can be used for not-yet-published or\nwork-in-progress states of a step.\nIf you \ndevelop your own Step\n you can use\nthis \ngit::\n source type to test your step \nbefore you would publish it\n\nin a StepLib.\n\n\nExample:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@BRANCH-OR-TAG:\n\n\n\n\nBRANCH-OR-TAG\n of course have to be a branch or tag which does exist in\nthe step's repository. For example, if you develop your own Step\nand you work on a \nsoon-to-be-released\n branch, you can\nuse that state of the step with:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@soon-to-be-released:\n\n\n\n\nThe second special source is \npath::\n, which works in a similar way,\nexcept for \nlocal paths\n, and it requires no version information.\n\n\nA good example for this is, again, when you create and work on your own\nStep, you can run the state of the Step (step's code) directly on your Mac/PC,\nwithout even pushing it to the step's repository.\n\n\nBoth absolute and relative (relative to the \nbitrise.yml\n!) local paths are supported, so you can:\n\n\n- path::/path/to/my/step:\n\n\n\n\nas well as:\n\n\n- path::./relative/path:\n\n\n\n\nDuring step development it's a best practice to have a \nbitrise.yml\n directly\nin the step's repository, for unit and ad hoc testing. In this case \nthe current directory is the step directory\n,\nand the step can be referenced with:\n\n\n- path::./:\n\n\n\n\nThis can also be used if you want to include your build steps in your app's source code.\n\nFor example if you store the \nscript\n step's code in your source code repository,\nunder the \nsteps/script\n directory, you can run the version included in your source code\nrepository with:\n\n\n- path::./steps/script:", 
            "title": "Steps"
        }, 
        {
            "location": "/bitrise-cli/steps/#what-is-a-step", 
            "text": "A Step encapsulates a \"build task\": the code to perform that task, the inputs/parameters\nyou can define for the task, and the outputs the task generates.  For example the  Git Clone  (id:  git-clone ) step performs a \"git clone\"\nof the specified repository, with the inputs you (or the system) specify (e.g.\nthe branch, tag or commit to clone, the local path where the clone should happen, etc.).  From a technical perspective a Step is a semver  versioned  repository\nwhich includes the  code  of the Step and the  interface  definition of the Step.  The  step interface definition  ( step.yml ) includes information like the dependencies of the step,\nthe inputs and outputs of the step, the title and description of the step;\nand other properties like the issue tracker / support URL, or\nthe filter properties which define when the step should be performed or skipped\nand whether a failed step should mark the build as failed.  From a configuration perspective all you have to know about Bitrise Steps\nis how you can include and configure them in your build configuration ( bitrise.yml ).  To include a Step you have to reference it by a  Step reference/ID \nin the  steps:  list of a Workflow.  An example, with a single  script  step, which will be executed when you run  bitrise run test :  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:   List of available steps (step IDs)  You can list all the available steps in the main Bitrise StepLib\nby running  bitrise step-list , or by checking the steps/ directory of the main Bitrise StepLib repository .   Once you include a step in your build configuration ( bitrise.yml ),\nyou can specify configurations for the step. The most common thing\nyou'll do is to specify values for the step's inputs.\nYou can do this with the  inputs:  list property of the step,\ndefining the  key  of the input and the  value  you want to set.  For example, to specify a simple script to perform for the  script  step,\nyou can specify a value for the  script  step's  content  input.\n( Note: you can list all the inputs of a step with  bitrise step-info STEP-ID )  Let's do a simple \"Hello World\" script, using the  script  step:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content:  echo 'Hello World!'  When you run the  test  workflow of this configuration with  bitrise run test \nyou'll now see that the  script  step prints the text  Hellow World  in its log:  +------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-07T17:05:17+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nHello World!\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.30 sec |\n+---+---------------------------------------------------------------+----------+  If the step doesn't have any required inputs you don't have to specify an input,\nand of course you can specify values for as many inputs as you want to.  For example the  script  step can run Ruby scripts too, not just Bash scripts.\nTo do this, in addition to specifying the script in the  content  input\nyou also have to specify the \"runner\" input:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  Step input values are always  string  / text values, as the input id/key and the value\nare passed to the step as environment variables\n( more information ),\nand the value can be multi line too, using the standard YAML multi line format.\nAn example multi line Bash script:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            set -ex\n            var_to_print='Hello World!'\n            echo  ${var_to_print}   Watch out for the indentation!  Indentation in the YAML format is very important!\nYou should use two-spaces indentation, and you can't use tabs to indent!  If you use a multi line value, like the one above, it's important that you\nhave to  indent the value with two spaces , compared to the key!   You can change other properties of the step too, not just the inputs.\nFor example, if you want to \"force\" run the step even if a previous step fails,\nyou can set the  is_always_run  property to  true :  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  or if you want to specify a better, more descriptive title for the step,\nyou can use the  title  property:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby", 
            "title": "What is a Step"
        }, 
        {
            "location": "/bitrise-cli/steps/#the-step-data-you-define-in-bitriseyml-your-diff", 
            "text": "You might already suspect it after the examples above:\nthe step data / infos you specify in the  bitrise.yml  are the parameters\nof the step  you want to change  / overwrite.  If you don't specify any input or other step property, only the step (reference/iD),\nthat means that the step should run with the default values (defined by the step's developer).  You could also think about this as a  diff . The step defines values for the step interface\nproperties, and in the  bitrise.yml  you define a  diff , the things you want to change\nand the values to change to.  Let's go through the example above:      - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  The  - script@1.1.3:  line selects the step, and the properties you define after this\n(with an indentation!)\nare the things you want to overwrite.  To see the step's raw interface definition you can check it in the step library.\nIn these examples we always use the  main Bitrise StepLib .\nThe step interface definitions can be found in the StepLib's steps  directory ,\nin this case it's in the  steps/script/1.1.3  directory,\nas we used the  1.1.3  version of the  script  step.\nThe  step.yml  in this directory is the step's interface definition .  Check the  step.yml ,\nyou can see all the properties defined for this version of the step.\nNow, if you check our example above, all we did is to\nchange the  title  property (from  Script  to  Print Hello Ruby ),\nthe  is_always_run  property (from  false  to  true )\nand two inputs of the step,  content  (from a default, example script content)\nand  runner_bin  (from  /bin/bash  to  ruby ).  All other properties you can see in the step version's  step.yml  will be read\nfrom the  step.yml , you don't have to define those. You only have to define the things you want to change , compared to the values specified for the step\nin the step's interface definition ( step.yml ).", 
            "title": "The Step data you define in bitrise.yml - your diff!"
        }, 
        {
            "location": "/bitrise-cli/steps/#step-referenceid-format", 
            "text": "A step reference from the example  bitrise.yml  above:  - script@1.1.3:   the StepLib source  the Step ID  the Step Version   Step reference format:  - StepLibSource::StepID@StepVersion:  From the three components only Step ID is required (e.g.  - script: ). \nThis example item could alternatively be written as  - https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3: ,\nto include all three components of the step reference.  If the Version is not defined, the latest version of the step will be used.  If the StepLib Source is not defined, the  default_step_lib_source  will be used.  So, if  default_step_lib_source  is set to  https://github.com/bitrise-io/bitrise-steplib.git ,\nand the latest version of the Script step is  1.1.3 , all the following references\nwill mean the exact same thing:   - https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:  - script@1.1.3:  - https://github.com/bitrise-io/bitrise-steplib.git::script:  - script:   But, if a new version of the  script  step is released (e.g.  2.0.0 )\nand you don't include the  @1.1.3  version reference component,\nnew builds will use the \"latest version at the time\".\nFor this reason, it's usually a good idea to specify the version of the step,\nso that your build does not break accidentally when a breaking change\nis introduced in a new version of the step.", 
            "title": "Step reference/ID format"
        }, 
        {
            "location": "/bitrise-cli/steps/#special-step-sources", 
            "text": "There are two special step sources:   git::  and  path::   When you use one of these sources, the step won't be identified through\na Step Library, but through the ID data you specify.  For example, the  script  step's github is at:  https://github.com/bitrise-io/steps-script .\nTo reference the  script  step directly through a git reference,\nyou can use the  git::  source, the step's git clone URL,\nand the branch or tag in the repository.  Example, to reference the  1.1.3  version tag of the script step's repository:  - git::https://github.com/bitrise-io/steps-script.git@1.1.3:  In general,  whenever you can use a step version through a Step Library,\nyou should do that , instead of using the  git::  source type,\nbecause features like  local step caching  or  network caching  / alternative\ndownload URLs are only supported for steps shared in a StepLib.  But this type of referencing allows certain things you can't get through\na StepLib. For example the  git::  source type can be used for not-yet-published or\nwork-in-progress states of a step.\nIf you  develop your own Step  you can use\nthis  git::  source type to test your step  before you would publish it \nin a StepLib.  Example:  - git::https://github.com/bitrise-io/steps-script.git@BRANCH-OR-TAG:  BRANCH-OR-TAG  of course have to be a branch or tag which does exist in\nthe step's repository. For example, if you develop your own Step\nand you work on a  soon-to-be-released  branch, you can\nuse that state of the step with:  - git::https://github.com/bitrise-io/steps-script.git@soon-to-be-released:  The second special source is  path:: , which works in a similar way,\nexcept for  local paths , and it requires no version information.  A good example for this is, again, when you create and work on your own\nStep, you can run the state of the Step (step's code) directly on your Mac/PC,\nwithout even pushing it to the step's repository.  Both absolute and relative (relative to the  bitrise.yml !) local paths are supported, so you can:  - path::/path/to/my/step:  as well as:  - path::./relative/path:  During step development it's a best practice to have a  bitrise.yml  directly\nin the step's repository, for unit and ad hoc testing. In this case  the current directory is the step directory ,\nand the step can be referenced with:  - path::./:  This can also be used if you want to include your build steps in your app's source code. \nFor example if you store the  script  step's code in your source code repository,\nunder the  steps/script  directory, you can run the version included in your source code\nrepository with:  - path::./steps/script:", 
            "title": "Special step sources"
        }, 
        {
            "location": "/bitrise-cli/secrets/", 
            "text": "Secrets can be accessed and used in a similar way as App Env Vars,\nthe main difference is that \nsecrets are not stored as part of the build configuration\n.\n\n\nWhen you run a build locally, with the Bitrise CLI, the secrets are read from\na \n.bitrise.secrets.yml\n file, which is expected to be in the same directory\nwhere the \nbitrise.yml\n is, and where you run the \nbitrise run\n command.\n\n\nIf you want to store your secrets somewhere else, you can specify\nthe location of the secrets file with the \n--inventory\n flag of the \nbitrise run\n command,\ne.g. \nbitrise run my-workflow --inventory /path/to/secrets.yml\n.\n\n\n\n\nMake sure to \ngitignore\n your secrets file!\n\n\nAs a best practice, you should always make sure that the \n.bitrise.secrets.yml\n\nis added to your \n.gitignore\n, so that it will never be committed into your\nrepository! The best is if you \ngitignore\n everything what\nstarts with \n.bitrise\n, which can be done by adding the\nline: \n.bitrise*\n to your \n.gitignore\n file.\n\n\n\n\nThe format of the secrets YAML file is really simple. It have to include\na root \nenvs:\n item and then the list of environment variables.\n\n\nExample:\n\n\nenvs:\n- SECRET_ENV_ONE: first secret value\n- SECRET_ENV_TWO: second secret value\n\n\n\n\nThe environment variables defined in the secrets file can be used\njust like any other environment variable, so, if you save the above\nexample into a \n.bitrise.secrets.yml\n file, and you have a \nbitrise.yml\n\nfile in the same directory with the content:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nSECRET_ENV_ONE: ${SECRET_ENV_ONE}\n\n            echo \nSECRET_ENV_TWO: ${SECRET_ENV_TWO}\n\n\n\n\nYou can just \nbitrise run test\n in the directory, and you'll see that the Script\nstep will print the values specified in the secrets file:\n\n\n...\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-08T18:45:19+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nSECRET_ENV_ONE: first secret value\nSECRET_ENV_TWO: second secret value\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.32 sec |\n+---+---------------------------------------------------------------+----------+\n...\n\n\n\n\nAs Secrets are the first environment variables processed when you execute\na \nbitrise run\n command, you can use the environment variables everywhere in\nyour \nbitrise.yml\n, for example in \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n),\n\nWorkflow environment variables\n\nand Step inputs too.", 
            "title": "Secrets"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/", 
            "text": "Every input, output and parameter is an Environment Variable\n\u2693\n\n\nEvery step input, step output, secret environment variable, app environment variable and workflow environment variable\n(basically every input and variable in your build config) is an environment variable.\n\n\nThere's nothing special about how Bitrise handles environment variables,\n\nthese are regular environment variable, with the same rules and restrictions as any other environment variable.\n\n\nTo highlight a couple of technical details:\n\n\nThe value of an Environment Variable can only be a String\n\u2693\n\n\nEnvironment Variables can only hold \nString\n values. Even if you set a number or bool, like \n1\n or \ntrue\n as\nthe value of the Environment Variable, that will be a string.\n\n\nParent process can't access  Environment Variables exposed by child processes\n\u2693\n\n\nParent process(es) can't access Environment Variables exposed by child processes.\n\n\nFor example, if you run a \nmy_bash_script.sh\n in your Terminal with \nbash my_bash_script.sh\n,\nand \nmy_bash_script.sh\n sets an environment variable with \nexport MY_VAR=the-value\n,\nyou won't be able to access \nMY_VAR\n in your Terminal after the script is finished,\n\nMY_VAR\n will only be available in \nmy_bash_script.sh\n \nand\n in the processes / scripts\nstarted by \nmy_bash_script.sh\n.\n\n\nIn terms of Bitrise CLI this means that if you \nexport MY_VAR=...\n in a Script step,\n\nMY_VAR\n won't be available in subsequent steps. This is true for the steps too,\nregardless of which language the step is written in.\n\n\nBitrise CLI includes a mechanism for exposing environment variables from Steps\nso that subsequent Steps can also access it, through the Bitrise CLI tool\ncalled \nenvman\n.\n\n\nTo set an environment variable in your script or in your step to make that\navailable in other steps too, you have to do that through \nenvman\n.\n\n\nA simple example:\n\n\nenvman add --key MY_TEST_ENV_KEY --value 'test value for test key'\n\n\n\n\nYou can find more examples in \nenvman's README\n,\nand in the \nExpose an Environment Variable and use it in another Step\n guide.\n\n\nAvailability order of environment variables\n\u2693\n\n\nEnvironment variables are available \nafter\n the environment variable\nis \"processed\".\n\n\nThere are a few environment variables \nexposed by the Bitrise CLI itself\n,\nthose are available from the start (e.g. \nBITRISE_SOURCE_DIR\n and \nBITRISE_TRIGGERED_WORKFLOW_ID\n).\n\n\nAll other environment variables are \"processed\" / made available \nas the build progresses.\n\n\nThere are two types of environment variables which are processed and\nmade available before the workflow would be executed:\n\nSecrets\n and \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n).\n\n\nAfter these, the processing of the specified Workflow starts, and the\n\nenvironment variables specified for that Workflow\n\nare made available. If the workflow has before or after workflows, when\na specific workflow is processed (right before the first step of the workflow would run)\nthe workflow's environment variables are processed and made available.\n\n\nStep inputs are also environment variables;\nthose are exposed only for the specific step, and right before the Step would start.\n\n\nLast but not least Step outputs are exposed by the specific step,\nso those are available for subsequent steps \nafter the Step finishes\n.\n\n\nThe environment variable processing order:\n\n\n\n\nBitrise CLI exposed environment variables\n\n\nSecrets\n\n\nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n)\n\n\nWorkflow environment variables\n\n\nStep inputs\n\n\nStep outputs\n\n\n\n\nSo, why does the processing order matter?\n\n\nAn environment variable is only available \nafter\n it is processed and made available.\n\nWhen you reference or use an environment variable, you can only reference/use those which are already processed!\n\n\nA couple of examples:\n\n\n\n\nIn the value of a \nSecret\n environment variable,\n  you can use environment variables exposed by Bitrise CLI,\n  but you can't use any other environment variable (App Env Vars, Workflow Env Vars, ...),\n  as those are not processed when secrets are processed.\n\n\nIn the value of an \nApp Env Var\n, you can use environment variables\n  from \nSecrets\n as well as the Bitrise CLI exposed ones, but you can't use Workflow Env Vars,\n  nor Step inputs.\n\n\nIn a \nWorkflow environment variable\n you can use all the above (\nSecrets\n, \nApp Env Vars\n,\n  Bitrise CLI exposed env vars).\n\n\nAnd finally, in step input values, you can use all other environment variables,\n  including the workflow's environment variables, as well as the outputs\n  of steps which run before the specific step.\n\n\n\n\nEnvironment variables of chained workflows\n\u2693\n\n\nOnce an environment variable of a workflow is processed and made available,\nit is available everywhere else during the build. This means that other workflows\nof the chain \ncan\n use the environment variables of a workflow which is performed \nbefore\n\nthe specific workflow, similar to Step outputs, which are available for every\nother step \nafter\n the step (which generates the outputs) completes.\n\n\nYou can find more information about environment variable availability\nof Workflow env vars in chained workflows in the\n\nWorkflows: Note about workflow environment variables\n\ndocumentation.", 
            "title": "Most important concepts"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#every-input-output-and-parameter-is-an-environment-variable", 
            "text": "Every step input, step output, secret environment variable, app environment variable and workflow environment variable\n(basically every input and variable in your build config) is an environment variable.  There's nothing special about how Bitrise handles environment variables, these are regular environment variable, with the same rules and restrictions as any other environment variable.  To highlight a couple of technical details:", 
            "title": "Every input, output and parameter is an Environment Variable"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#the-value-of-an-environment-variable-can-only-be-a-string", 
            "text": "Environment Variables can only hold  String  values. Even if you set a number or bool, like  1  or  true  as\nthe value of the Environment Variable, that will be a string.", 
            "title": "The value of an Environment Variable can only be a String"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#parent-process-cant-access-environment-variables-exposed-by-child-processes", 
            "text": "Parent process(es) can't access Environment Variables exposed by child processes.  For example, if you run a  my_bash_script.sh  in your Terminal with  bash my_bash_script.sh ,\nand  my_bash_script.sh  sets an environment variable with  export MY_VAR=the-value ,\nyou won't be able to access  MY_VAR  in your Terminal after the script is finished, MY_VAR  will only be available in  my_bash_script.sh   and  in the processes / scripts\nstarted by  my_bash_script.sh .  In terms of Bitrise CLI this means that if you  export MY_VAR=...  in a Script step, MY_VAR  won't be available in subsequent steps. This is true for the steps too,\nregardless of which language the step is written in.  Bitrise CLI includes a mechanism for exposing environment variables from Steps\nso that subsequent Steps can also access it, through the Bitrise CLI tool\ncalled  envman .  To set an environment variable in your script or in your step to make that\navailable in other steps too, you have to do that through  envman .  A simple example:  envman add --key MY_TEST_ENV_KEY --value 'test value for test key'  You can find more examples in  envman's README ,\nand in the  Expose an Environment Variable and use it in another Step  guide.", 
            "title": "Parent process can't access  Environment Variables exposed by child processes"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#availability-order-of-environment-variables", 
            "text": "Environment variables are available  after  the environment variable\nis \"processed\".  There are a few environment variables  exposed by the Bitrise CLI itself ,\nthose are available from the start (e.g.  BITRISE_SOURCE_DIR  and  BITRISE_TRIGGERED_WORKFLOW_ID ).  All other environment variables are \"processed\" / made available  as the build progresses.  There are two types of environment variables which are processed and\nmade available before the workflow would be executed: Secrets  and  App Env Vars  ( app: envs:  in the  bitrise.yml ).  After these, the processing of the specified Workflow starts, and the environment variables specified for that Workflow \nare made available. If the workflow has before or after workflows, when\na specific workflow is processed (right before the first step of the workflow would run)\nthe workflow's environment variables are processed and made available.  Step inputs are also environment variables;\nthose are exposed only for the specific step, and right before the Step would start.  Last but not least Step outputs are exposed by the specific step,\nso those are available for subsequent steps  after the Step finishes .  The environment variable processing order:   Bitrise CLI exposed environment variables  Secrets  App Env Vars  ( app: envs:  in the  bitrise.yml )  Workflow environment variables  Step inputs  Step outputs   So, why does the processing order matter?  An environment variable is only available  after  it is processed and made available. When you reference or use an environment variable, you can only reference/use those which are already processed!  A couple of examples:   In the value of a  Secret  environment variable,\n  you can use environment variables exposed by Bitrise CLI,\n  but you can't use any other environment variable (App Env Vars, Workflow Env Vars, ...),\n  as those are not processed when secrets are processed.  In the value of an  App Env Var , you can use environment variables\n  from  Secrets  as well as the Bitrise CLI exposed ones, but you can't use Workflow Env Vars,\n  nor Step inputs.  In a  Workflow environment variable  you can use all the above ( Secrets ,  App Env Vars ,\n  Bitrise CLI exposed env vars).  And finally, in step input values, you can use all other environment variables,\n  including the workflow's environment variables, as well as the outputs\n  of steps which run before the specific step.", 
            "title": "Availability order of environment variables"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#environment-variables-of-chained-workflows", 
            "text": "Once an environment variable of a workflow is processed and made available,\nit is available everywhere else during the build. This means that other workflows\nof the chain  can  use the environment variables of a workflow which is performed  before \nthe specific workflow, similar to Step outputs, which are available for every\nother step  after  the step (which generates the outputs) completes.  You can find more information about environment variable availability\nof Workflow env vars in chained workflows in the Workflows: Note about workflow environment variables \ndocumentation.", 
            "title": "Environment variables of chained workflows"
        }, 
        {
            "location": "/bitrise-cli/create-your-own-step/", 
            "text": "We're working on a Bitrise CLI plugin which will make the process even easier,\nfor now the fastest way to create and share your own step is:\n\n\n\n\nCheck the \nStep Template\n\n\nCreate a new repository on GitHub\n\n\ngit clone\n your repository, and copy paste all the files from the \nStep Template\n\n\nFollow the \nHow to create your own step\n\n   guide which you can find in the Step Template's README\n\n\n\n\nThe Step Template's README also described how you can run your step locally,\nbefore you'd even commit the code, as well as how you can test your step\nin any build by using the \ngit::\n step reference, before sharing the step\nin a Step Library, and finally how you can share your step with others\nthrough the Bitrise StepLib.\n\n\nIf you'd have any question, please \ncontact us\n!", 
            "title": "Create your own Step"
        }, 
        {
            "location": "/ios/code-signing/", 
            "text": "There are many ways you can manage the Code Signing of iOS projects.\nIn short, all you need for signing an iOS app is:\n\n\n\n\n.p12\n Certificate / Identity file(s)\n\n\nProvisioning Profile\n file(s) matching your project (team ID, bundle ID, ...)\n\n\nAnd a script, tool or step which installs these files in the build environment.\n  \nIf you want to store your code signing files on \nbitrise.io\n,\n  please make sure that you have the \nCertificate and profile installer\n step in your\n  app's workflow!\n\n\n\n\nUse bitrise.io and our tools to manage your code signing files\n\u2693\n\n\nIf you use \nbitrise.io\n to store your code signing files,\ncreating a signed iOS \n.ipa\n (iOS app file) is as simple as:\n\n\n\n\nCollect the required files with codesigndoc\n\n\nMake sure the \nCertificate and profile installer\n step is in your Workflow (that's\n   our step which can download \n install the code signing files from \nbitrise.io\n)\n\n\nUse the \nXcode Archive\n or \nXamarin Archive\n steps to create a signed \n.ipa\n\n\nXcode projects: \nConfigure \nXcode Archive\n to create the signed \n.ipa\n\n\nXamarin projects: \nConfigure \nXamarin Archive\n to create the signed \n.ipa\n\n\n\n\n\n\n\n\nCollect the required files with codesigndoc\n\u2693\n\n\nThe easiest way to collect these files is to use our open source \ncodesigndoc\n\ntool. This tool runs a clean Archive \non your Mac\n, and analyzes the Xcode log output\nto see which code signing files Xcode used during the Archive.\n\n\nYou can run \ncodesigndoc\n with the \none liner you can find in its Readme\n.\n\n\n\n\nSeparate one-liners for Xcode and Xamarin projects\n\n\nThere are two one-liners, one for \nXcode\n projects, and one for \nXamarin\n (iOS) projects.\nMake sure you use the right one!\n\n\n\n\n\n\nTroubleshooting: Ensure the sate of the code\n\n\nYou get the most accurate result if you run \ncodesigndoc\n on the same state of your\nrepository/code which is available after a clean \ngit clone\n, as that will\nbe the state of the code after the build server checks out the code (e.g.\nyou might have files on your Mac which are in \n.gitignore\n, so it exists\non your Mac but not in the repository / after a \ngit clone\n on a new Mac).\n\n\nSo, for the best result, you should \ndo a clean \ngit clone\n of the\nrepository\n (into a new directory) on your Mac, and then\nrun \ncodesigndoc\n in this directory (not in the directory where\nyou usually work on the project).\n\n\n\n\n\n\nTroubleshooting: make sure you can export an IPA from Xcode.app\n\n\nIt's also advised to do a full Archive + Export (until you get a signed \n.ipa\n)\nof your project from \nXcode.app\n first, and run \ncodesigndoc\n \nafter that\n.\nThe reason is that \nXcode.app\n might download or update profiles in the background\nduring the IPA export. If you run \ncodesigndoc\n after you exported an \n.ipa\n\nfrom Xcode, \ncodesigndoc\n will able to collect all the files.\n\n\n\n\nOnce you have the \n.p12\n and Provisioning Profiles collected by \ncodesigndoc\n,\nupload these files to your app on \nbitrise.io\n.\n\n\nCode signing files can be uploaded to \nbitrise.io\n in the app's Workflow Editor\n,\nunder the \nCode signing \n Files\n section of the editor.\n\n\nThere's only one more thing you have to do: if you want to store your code signing files on \nbitrise.io\n,\n\nplease make sure that you have the \nCertificate and profile installer\n step in your app's workflow!\n\nThat's the step which downloads and installs the Certificate (.p12) file(s) and\nthe Provisioning Profile file(s) from \nbitrise.io\n.\n\n\n\n\nTroubleshooting: missing Distribution signing files\n\n\nIf \ncodesigndoc\n would not pick up one or more distribution .p12 / Provisioning Profile,\nyou can export those manually (.p12 from \nKeychain Access\n app, Provisioning Profiles from\n\nApple Developer Portal\n), just like you would when you\ntransfer these files between Macs.\n\n\nBut, \neven if \ncodesigndoc\n would not find\nall the files, you should upload all the files collected by \ncodesigndoc\n!\n\nThe base files collected by \ncodesigndoc\n are essential for your project's\ncode signing, without those it's not possible to create a signed IPA\nfor the project!\n\n\n\n\nConfigure Xcode Archive to create the signed IPA\n\u2693\n\n\nOnce you have all your code signing files \ncollected\n,\nand you have the \nCertificate and profile installer\n and the \nXcode Archive\n steps in the workflow,\nyou can start a build and get a signed IPA.\n\n\nIf you use Xcode 8 automatic code signing, the generated IPA by default will be a development signed IPA.\nIf you use Manual code signing, the default code signing type will be what you set in your\nXcode project for the Scheme/Configuration.\n\n\nTo specify a distribution code signing type, all you have to do is:\n\n\n\n\nselect the \nXcode Archive for iOS\n (or in case of a Mac app, the \nXcode Archive for Mac\n) step in the app's Workflow Editor\n\n\nset the \nSelect method for export\n input of the step to the type of code signing you want to use (\napp-store\n, \nad-hoc\n, \nenterprise\n, ...)\n\n\nsave the Workflow, and start a new build\n\n\n\n\nThat's all. Xcode will auto select the right signing files based on your project's Bundle ID and\nTeam ID settings, and the Export Method you set.\n\n\nIf you want to sign the IPA with a different team's code signing files (e.g.\nif you use your company's code signing for internal builds, but your client's\ncode signing files for App Store distribution), all you have to do is to set\nthe \nThe Developer Portal team to use for this export\n option as well (in addition\nto the \nSelect method for export\n).\n\n\nConfigure Xamarin Archive to create the signed IPA\n\u2693\n\n\nOnce you have all your code signing files \ncollected\n,\nand you have the \nCertificate and profile installer\n and the \nXamarin Archive\n steps in the workflow,\nyou can start a build and get a signed IPA.\n\n\nTo control what kind of code signing the IPA should be signed with, all you have to do is:\n\n\n\n\nselect the \nXamarin Archive\n step in the app's Workflow Editor\n\n\nset the \nXamarin solution configuration\n input to the Xamarin project Configuration you want to use (e.g. \nRelease\n)\n\n\nset the \nXamarin solution platform\n input to \niPhone\n\n\n\n\nYou can control the code signing type in your Xamarin project, by settings the\ncode signing configurations for the Configuration in Xamarin Studio.\n\n\nIf you want to use more than one code signing type (e.g. to create both Ad Hoc and App Store\nsigned apps), you should create more than one Release configuration in Xamarin Studio,\nand set the separate configurations to the types you want to use (e.g. one to Ad Hoc,\nand the second one to App Store).\n\n\n\n\nTip: Copy/clone an existing Release configuration\n\n\nYou can \nCopy\n the existing\n\nRelease\n configuration in Xamarin Studio, to have an identical base configuration,\nwhere you only change the code signing settings. For example,\n\nCopy\n the \nRelease|iPhone\n configuration with the name \nReleaseAppStore\n,\nset the code signing to App Store for this \nReleaseAppStore\n configuration,\nand specify this configuration as the \nXamarin solution configuration\n\ninput of the \nXamarin Archive\n step.\n\n\nNote: Don't forget to run \ncodesigndoc\n again if you change code signing\nconfigurations in your Xamarin project, or to manually collect\nand upload the signing files required for the configurations\nyou want to use!\n\n\n\n\nUse a third party tool to manage your code signing files\n\u2693\n\n\nThere are third party tools which can be used for managing your code signing files,\nlike \nfastlane match\n -\nrelated bitrise.io setup guide: \nHow to configure fastlane match for Bitrise\n -\nor \nfastlane sigh\n.\n\n\n\n\nWarning\n\n\nIf you decide to use a third party tool for code signing management,\nplease consult the tool's documentation and issue tracker,\nwe only provide customer support for our own Step (\nCertificate and profile installer\n)\nand tools (\ncodesigndoc\n)!\n\n\n\n\n\n\nCertificate and profile installer\n step\n\n\nEven if you use a third party tool to manage your code signing files,\nand you don't plan to upload any code signing file to bitrise.io,\nyou should keep the \nCertificate and profile installer\n step in your\nWorkflow. This is because certain tools were not designed to work\nin an ephemeral environment, or in a full clean macOS install,\nand the \nCertificate and profile installer\n includes common\nworkarounds for this situation. It's not guaranteed that it will help with\nthe tool of your choice, but it won't cause any issue either.", 
            "title": "iOS Code Signing"
        }, 
        {
            "location": "/ios/code-signing/#use-bitriseio-and-our-tools-to-manage-your-code-signing-files", 
            "text": "If you use  bitrise.io  to store your code signing files,\ncreating a signed iOS  .ipa  (iOS app file) is as simple as:   Collect the required files with codesigndoc  Make sure the  Certificate and profile installer  step is in your Workflow (that's\n   our step which can download   install the code signing files from  bitrise.io )  Use the  Xcode Archive  or  Xamarin Archive  steps to create a signed  .ipa  Xcode projects:  Configure  Xcode Archive  to create the signed  .ipa  Xamarin projects:  Configure  Xamarin Archive  to create the signed  .ipa", 
            "title": "Use bitrise.io and our tools to manage your code signing files"
        }, 
        {
            "location": "/ios/code-signing/#collect-the-required-files-with-codesigndoc", 
            "text": "The easiest way to collect these files is to use our open source  codesigndoc \ntool. This tool runs a clean Archive  on your Mac , and analyzes the Xcode log output\nto see which code signing files Xcode used during the Archive.  You can run  codesigndoc  with the  one liner you can find in its Readme .   Separate one-liners for Xcode and Xamarin projects  There are two one-liners, one for  Xcode  projects, and one for  Xamarin  (iOS) projects.\nMake sure you use the right one!    Troubleshooting: Ensure the sate of the code  You get the most accurate result if you run  codesigndoc  on the same state of your\nrepository/code which is available after a clean  git clone , as that will\nbe the state of the code after the build server checks out the code (e.g.\nyou might have files on your Mac which are in  .gitignore , so it exists\non your Mac but not in the repository / after a  git clone  on a new Mac).  So, for the best result, you should  do a clean  git clone  of the\nrepository  (into a new directory) on your Mac, and then\nrun  codesigndoc  in this directory (not in the directory where\nyou usually work on the project).    Troubleshooting: make sure you can export an IPA from Xcode.app  It's also advised to do a full Archive + Export (until you get a signed  .ipa )\nof your project from  Xcode.app  first, and run  codesigndoc   after that .\nThe reason is that  Xcode.app  might download or update profiles in the background\nduring the IPA export. If you run  codesigndoc  after you exported an  .ipa \nfrom Xcode,  codesigndoc  will able to collect all the files.   Once you have the  .p12  and Provisioning Profiles collected by  codesigndoc ,\nupload these files to your app on  bitrise.io .  Code signing files can be uploaded to  bitrise.io  in the app's Workflow Editor ,\nunder the  Code signing   Files  section of the editor.  There's only one more thing you have to do: if you want to store your code signing files on  bitrise.io , please make sure that you have the  Certificate and profile installer  step in your app's workflow! \nThat's the step which downloads and installs the Certificate (.p12) file(s) and\nthe Provisioning Profile file(s) from  bitrise.io .   Troubleshooting: missing Distribution signing files  If  codesigndoc  would not pick up one or more distribution .p12 / Provisioning Profile,\nyou can export those manually (.p12 from  Keychain Access  app, Provisioning Profiles from Apple Developer Portal ), just like you would when you\ntransfer these files between Macs.  But,  even if  codesigndoc  would not find\nall the files, you should upload all the files collected by  codesigndoc ! \nThe base files collected by  codesigndoc  are essential for your project's\ncode signing, without those it's not possible to create a signed IPA\nfor the project!", 
            "title": "Collect the required files with codesigndoc"
        }, 
        {
            "location": "/ios/code-signing/#configure-xcode-archive-to-create-the-signed-ipa", 
            "text": "Once you have all your code signing files  collected ,\nand you have the  Certificate and profile installer  and the  Xcode Archive  steps in the workflow,\nyou can start a build and get a signed IPA.  If you use Xcode 8 automatic code signing, the generated IPA by default will be a development signed IPA.\nIf you use Manual code signing, the default code signing type will be what you set in your\nXcode project for the Scheme/Configuration.  To specify a distribution code signing type, all you have to do is:   select the  Xcode Archive for iOS  (or in case of a Mac app, the  Xcode Archive for Mac ) step in the app's Workflow Editor  set the  Select method for export  input of the step to the type of code signing you want to use ( app-store ,  ad-hoc ,  enterprise , ...)  save the Workflow, and start a new build   That's all. Xcode will auto select the right signing files based on your project's Bundle ID and\nTeam ID settings, and the Export Method you set.  If you want to sign the IPA with a different team's code signing files (e.g.\nif you use your company's code signing for internal builds, but your client's\ncode signing files for App Store distribution), all you have to do is to set\nthe  The Developer Portal team to use for this export  option as well (in addition\nto the  Select method for export ).", 
            "title": "Configure Xcode Archive to create the signed IPA"
        }, 
        {
            "location": "/ios/code-signing/#configure-xamarin-archive-to-create-the-signed-ipa", 
            "text": "Once you have all your code signing files  collected ,\nand you have the  Certificate and profile installer  and the  Xamarin Archive  steps in the workflow,\nyou can start a build and get a signed IPA.  To control what kind of code signing the IPA should be signed with, all you have to do is:   select the  Xamarin Archive  step in the app's Workflow Editor  set the  Xamarin solution configuration  input to the Xamarin project Configuration you want to use (e.g.  Release )  set the  Xamarin solution platform  input to  iPhone   You can control the code signing type in your Xamarin project, by settings the\ncode signing configurations for the Configuration in Xamarin Studio.  If you want to use more than one code signing type (e.g. to create both Ad Hoc and App Store\nsigned apps), you should create more than one Release configuration in Xamarin Studio,\nand set the separate configurations to the types you want to use (e.g. one to Ad Hoc,\nand the second one to App Store).   Tip: Copy/clone an existing Release configuration  You can  Copy  the existing Release  configuration in Xamarin Studio, to have an identical base configuration,\nwhere you only change the code signing settings. For example, Copy  the  Release|iPhone  configuration with the name  ReleaseAppStore ,\nset the code signing to App Store for this  ReleaseAppStore  configuration,\nand specify this configuration as the  Xamarin solution configuration \ninput of the  Xamarin Archive  step.  Note: Don't forget to run  codesigndoc  again if you change code signing\nconfigurations in your Xamarin project, or to manually collect\nand upload the signing files required for the configurations\nyou want to use!", 
            "title": "Configure Xamarin Archive to create the signed IPA"
        }, 
        {
            "location": "/ios/code-signing/#use-a-third-party-tool-to-manage-your-code-signing-files", 
            "text": "There are third party tools which can be used for managing your code signing files,\nlike  fastlane match  -\nrelated bitrise.io setup guide:  How to configure fastlane match for Bitrise  -\nor  fastlane sigh .   Warning  If you decide to use a third party tool for code signing management,\nplease consult the tool's documentation and issue tracker,\nwe only provide customer support for our own Step ( Certificate and profile installer )\nand tools ( codesigndoc )!    Certificate and profile installer  step  Even if you use a third party tool to manage your code signing files,\nand you don't plan to upload any code signing file to bitrise.io,\nyou should keep the  Certificate and profile installer  step in your\nWorkflow. This is because certain tools were not designed to work\nin an ephemeral environment, or in a full clean macOS install,\nand the  Certificate and profile installer  includes common\nworkarounds for this situation. It's not guaranteed that it will help with\nthe tool of your choice, but it won't cause any issue either.", 
            "title": "Use a third party tool to manage your code signing files"
        }, 
        {
            "location": "/ios/code-signing-technical-details/", 
            "text": "How iOS code signing works - if you use Xcode 8 automatic code signing\n\u2693\n\n\nIf you're interested in all of the details, you should check this year's\n\nWWDC video which covers the code signing changes\n.\nWe'll focus more on the basics and issue resolution here.\n\n\n\n\nUploading code signing files to bitrise.io\n\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.\n\n\n\n\nIn short, Xcode 8's automatic code signing works this way:\n\n\n\n\nWhen you do an Archive in Xcode, either in Xcode.app or on a CI server / through Xcode's command line tool (\nxcodebuild\n)\n   it first creates an archive \nsigned with development code signing\n.\n\n\nThen, when you specify the distribution method (export method) it \nresigns the archive with distribution signing\n.\n\n\n\n\n\n\nThis means that if you want to create for example an App Store signed IPA,\non the Mac (e.g. on the \nbitrise.io\n virtual machine)\nyou have to have \nboth a Wildcard, Team / Development AND the App Store\ndistribution certificates and provisioning profiles\n!\n\n\n\n\nCollecting all of these might take quite a bit of time\n\n\nbut fortunately our updated \ncodesigndoc\n\ncan now collect all of these files for you, \nautomatically\n!\n\n\n\n\nSo, \nis this automatic code signing worth all of this trouble\n?\nShould you instead opt to use manual code signing in Xcode 8?\n\n\nIn general using Automatic code signing is a good idea, and you should\nmigrate to it (as Apple suggests this is the new way, how you should do\ncode signing in the future) if you can.\n\n\nIs it worth the trouble?\n Well, \nthe good thing about Automatic code signing\n\nis that once you collected all the code signing files\n\nit's incredibly easy to use these files / to select the right file(s) during your build!\n\n\nAll you need to do is specifying the \"export method\" (\napp-store\n, \nad-hoc\n, etc.)\nin the \nXcode Archive\n step, and that's all! \nXcode will select the right certificate\nand provisioning profiles automatically\n, based on your project's\nTeam and Bundle ID (if the signing files are available in the system of course ;) )!\n\n\nCompare this with the previous solution\n, where you had to either create multiple Schemes\nin Xcode to be able to control where to use which code signing settings,\nor you had to specify \"Force Identity / Provisioning Profile\" options,\nwhich could lead to even more trouble when not configured properly.\nIn Xcode 8 automatic code signing you don't have to (actually, you can't)\nmess with these configurations, initial code signing is always performed\nwith Development code signing, and Xcode resignes the IPA during export\nbased on the \"export method\".\n\n\nAnd, \nit works the same way on \nbitrise.io\n too\n!\nOnce you've uploaded all the required signing files (e.g. with \ncodesigndoc\n),\nall you have to do is to set the \nexport method\n option\nof the \nXcode Archive\n step to the option you want to use.\n\nThat's all!\n\n\nThis is the same as what you do when you create/export an iOS app archive\nfrom Xcode.app - \nthe \nXcode Archive\n step just runs Xcode's command line tool\n.\nThere's no \"magic\" here, \nXcode Archive\n just passes the export options\nto Xcode, and Xcode creates the archive and IPA the same way it does on your Mac!\n\n\nMigrating your Bitrise configuration to Automatic code signing\n\u2693\n\n\nFirst of all, you should upgrade your steps in your Workflow\nto the latest versions - especially the \nCertificate and profile installer\n\nand the \nXcode Archive\n steps - as there are a couple of features\nonly available in the latest versions.\n\n\nThe second step is to \nremove every previous, now incompatible code signing input\nfrom the \nXcode Archive\n step\n.\nIn general you should try to \nreset every code signing related input option of the \nXcode Archive\n step\n,\ne.g. \"Force code signing with Identity\" and \"Force code signing with Provisioning Profile Specifier\".\n\n\nNote: it might be easier to see which input options you defined a value for in \nbitrise.yml\n mode\nof the Workflow Editor. Just click on \nbitrise.yml\n on the left side of the Workflow Editor\nand search for the \nxcode-archive\n step. In \nbitrise.yml\n only those inputs are listed which\nyou specified a value for / which are not set to their default value, so it should be pretty\nquick to check the list there, easier than on the Web UI.\n\n\nYou're almost ready\n, really! All you have to do is:\n\n\n\n\nMake sure that you've uploaded all the required code signing files, \nincluding a Wildcard Team Development\n\n   certificate and provisioning profile, as noted in the \nDescription of how Xcode 8's new Automatic code signing feature works\n section.\n   You might want to use \ncodesigndoc\n for this,\n   as it can export all the required files automatically from your Mac.\n\n\nSet the \nSelect method for export\n input option of the \nXcode Archive\n step to the\n   method you want to use (e.g. \napp-store\n or \nad-hoc\n)\n\n\n\n\nAnd that's all!\n\n\nYou can use multiple \nXcode Archive\n steps to create multiple IPAs signed with different\ncode signing methods in the same build, just by adding a second \nXcode Archive\n step\nand setting the \nSelect method for export\n option to the other method.\nAlternatively you can also use the \nRe-sign IPA\n step, to resign the IPA\nof a previous \nXcode Archive\n step.\n\n\nOne note: if you'd have to use a distribution provisioning profile \n certificate\nwhich is related to a different Team, not the one set in your Xcode project's\nsettings, then you have to specify the \nThe Developer Portal team to use for this export\n\ninput option too, or else Xcode will search for code signing files with the same Team ID\nyou have in your Xcode project's settings. Again, this is the same what you do in\nXcode.app when you create an Archive and export it with a distribution signing - if you're\npart of more than one Apple Dev Portal team you'll be prompted to select one.\n\n\nAnother note, especially if your project includes Extension project(s),\nfor some reason, Xcode 8.0 might not accept just any Wildcard Development Provisioning Profile\nfor the initial signing. It seems that in case of e.g. a Today Widget Extension\nXcode 8.0 requires the Wildcard \nTeam\n Provisioning Profile,\nor a specific development one which includes the Extension's \nfull\n bundle ID.\nThis might be just an Xcode 8.0 issue which will be fixed in an upcoming Xcode 8 update,\nbut for now it's best to use the \nTeam\n Provisioning Profile, which you can\nexport from Xcode Preferences (Xcode -\n Preferences -\n select your Apple ID on the left side -\n\nselect your Team on the right side -\n click \"View Details\" -\n search for\n\niOS Team Provisioning Profile: *\n -\n right click \"Show in Finder\").\n\ncodesigndoc\n can help to\nexport the proper one in this case too!\n\n\n\n\nMake sure you can archive and export on your Mac!\n\n\ncodesigndoc\n only works if you can archive and export your app from \nXcode.app\n -\n\nuntil you get a signed IPA\n!\n\n\n\n\nXcode.app\n might auto generate files in the background\nduring the export process, and obviously \ncodesigndoc\n can only collect those files\nafter the files are available on your Mac.\n\n\nThis means that you should first Archive the project in \nXcode.app\n,\nExport it for the distribution type you want to use (\nAd Hoc\n, \nApp Store\n or \nEnterprise\n),\nand \nrun \ncodesigndoc\n after you have the \n.ipa\n file generated by \nXcode.app\n.\nThis way \ncodesigndoc\n can collect all the code signing files\nrequired for that type of distribution.\n\n\n\n\nUploading code signing files to bitrise.io\n\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.\n\n\n\n\nHow iOS code signing works (Xcode 7 \n Xcode 8 manual code signing mode)\n\u2693\n\n\niOS apps require code signing for every action/output which generates an app (\n.ipa\n) meant to\nrun on a physical iOS device.\n\n\nWhen you create and export an Archive (\n.ipa\n) of your app Xcode will sign it automatically,\nbased on the \nCode Signing\n settings you have in your Xcode project. There are, however,\na couple of things you have to know about how Xcode selects the code signing\nfiles (unless you set a specific Identity and/or Provisioning Profile).\n\n\nIf you have a Code Signing configuration in your Xcode project like this one:\n\n\n\n\nwhere you don't set a specific Identity and Provisioning Profile, Xcode will\nselect the ones which match the following points:\n\n\n\n\nFor the \nRelease\n configuration it'll search for a Distribution Identity/Certificate\n\n\nFor the \nDebug\n configuration it'll search for a Development Identity/Certificate\n\n\nThe Provisioning Profile has to match with the \nteam ID\n and with the \nbundle ID\n you set\n  in your Xcode project settings.\n\n\n\n\nThis means that even if you have a Distribution Identity/Certificate available in the system,\nif Xcode can't find a related Provisioning Profile which matches the \nteam ID\n \nand\n the \nbundle ID\n\nyou'll get an error like this when you try to archive the project:\n\n\nCode Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u2018...\u2019 were found.\n\n\n\n\nThis means that to be able to Archive your project you have to provide both a Certificate (\n.p12\n Identity file)\nand a Provisioning Profile which matches:\n\n\n\n\nthe type of the configuration you set in your Xcode project settings under the \nCode Signing\n section (Distribution or Development)\n\n\nthe Provisioning Profile has to match both the \nbundle ID\n \nand\n the \nteam ID\n set in the Xcode project settings\n\n\nand \nthe two files have to be compatible with each other\n (you\ncan check this on the \nApple Developer Portal\n - select a Provisioning Profile,\nclick \nEdit\n, there you can see the Certificates which are allowed to use that specific Provisioning Profile)\n\n\n\n\nThere can be multiple Certificates/Identities and Provisioning Profiles installed on the system,\nthe only thing what matters for Xcode when it tries to sign the app is to find a Certificate/Identity and\nProvisioning Profile pair which fulfills all the requirements listed above.\n\n\n\n\nHow to export your iOS Code Signing files\n\n\nIf you need help with exporting your iOS Code Signing files, you can find\na step-by-step guide with screenshots \non our old DevCenter\n.\n\n\n\n\nHow to make the process easier, more manageable? (Xcode 7 \n Xcode 8 manual code signing mode)\n\u2693\n\n\nUsing Export Options (available for Xcode 7+ and Xcode Archive step v1.9.1+)\n\u2693\n\n\nSince the \n1.9.1\n version of the \nXcode Archive\n step you can set Xcode \"export options\"\ndirectly through the step!\n\n\nThe thing you have to know about Xcode's Export Options or how archiving works\nwhen you do it from \nXcode.app\n on your Mac:\n\n\n\n\nWhen you click \"Archive\" in Xcode first it creates an Xcode \"archive\" file (directory),\n   and \nit signs the archive with the code signing files set in your Xcode project settings\n!\n\n\nThen, when the Xcode \"Organizer\" window appears and you click \"Export...\" and\n   select an \"export method\" (App Store, Ad Hoc, Enterprise or Development Deployment)\n   \nXcode does re-sign\n the archive with the final code signing files appropriate for the\n   export method you selected.\n\n\n\n\nThis means that if you want to do the same on any Mac (e.g. on \nbitrise.io\n virtual machines)\n\nyou'll need the code signing files for the final app/IPA\n (e.g. App Store or Ad Hoc distribution certificate and provisioning profile)\n\nand additionally the code signing files used for the initial signing\n (usually Development certificate and provisioning profile)!\n\n\nTo do the same on \nbitrise.io\n all you have to do is:\n\n\n\n\nUpload all the certificates and provisioning profiles, including the ones required for the initial\n   code signing (usually your Development certificate and provisioning profile for the project).\n\n\nOpen the Workflow Editor on \nbitrise.io\n, select the \nXcode Archive\n step,\n   and make sure its version is at least \n1.9.1\n\n\nGo to the step's \nSelect method for export\n input, and set it to the \"export method\" you want to use,\n   just like you would in Xcode's Organizer.\n   \nNote: you can add more than one \nXcode Archive\n step to your workflow, if you want to create\n   e.g. both an Ad Hoc and an App Store signed app/IPA in the same build/workflow!\n\n\nClick \nSave\n in the Workflow Editor\n\n\n\n\nThat's all. Run a new build and you're done ;)\n\n\nFull manual / full control\n\u2693\n\n\nThere's an important \"trick\" which can make your code signing process much easier\n(if you don't or can't use the Xcode 7+ Export Options - as described in the previous section):\nXcode (Xcode's Command Line Tool, \nxcodebuild\n) has a command line parameter to\noverride the Identity and Provisioning Profile configurations set in Xcode project settings!\n\n\nThe \nCODE_SIGN_IDENTITY\n parameter can be used to override the \nCode Signing Identity\n,\nwhile the \nPROVISIONING_PROFILE\n parameter can be used to override the \nProvisioning Profile\n configuration\nfor any \nxcodebuild\n command (e.g. Archive).\n\n\nBoth our \nXcode Archive\n and \nXcode Analyze\n steps include two related inputs,\n\nForce code signing with Identity\n and \nForce code signing with Provisioning Profile\n.\nThe value you provide for these inputs will be passed to \nxcodebuild\n\nas \nCODE_SIGN_IDENTITY\n and \nPROVISIONING_PROFILE\n.\n\n\nNow, the important bit, that can make your life much easier\n (especially if you generate an iOS app with\nmultiple, different code signing configuration (e.g. if you want to generate both an Ad-Hoc and\nan App Store signed \nipa\n)):\n\n\n\n\nSetting a specific Identity will make Xcode ignore other search parameters!\n\n\nIf you set the Identity to \niPhone Distribution\n Xcode will search for a matching Provisioning\nProfile which fulfills all the other criteria (team ID and bundle ID),\nwhile \nif you provide the full ID of the Identity\n like \niPhone Distribution: My Company\n\nXcode will \nignore\n everything else and will use that specific Identity (if it can\nfind it in the system)!\n\n\n\n\nThis means that even if the Provisioning Profile has a different \nteam ID\n set, just by\nspecifying the Identity's full ID, Xcode will pick the Provisioning Profile\nwhich is compatible with the Identity, it won't check the \nteam ID\n parameter!\n\n\nThis makes iOS code signing (in most cases) much easier, as all you have to do is:\n\n\n\n\nMake sure that you set the Provisioning Profile configuration \nin your Xcode project settings\n to \"Automatic\",\n  or else you'll have to override this configuration too (to be able to use different Provisioning Profiles)\n\n\nYou should set the Identity configuration \nin your Xcode project settings\n to a generic category like\n  \"iPhone Developer\" or \"iPhone Distribution\" (this is more like a best practice, to make the life of\n  developers easier, \nnot a requirement if you override the configuration\n)\n\n\nAnd the last piece is\n: set the \nForce code signing with Identity\n input of Xcode Archive and\n  Xcode Analyze to the \nfull ID of the Identity\n (something like: \niPhone Distribution: My Company\n)\n\n\n\n\nWith this setup you don't have to change your code signing configuration in your Xcode project\n,\nyou only have to specify the configuration in your Bitrise workflow, and you can specify\ndifferent code signing configuration for every Xcode step if you want to!\n\n\n\n\nWhere to get these IDs?\n\n\nIf you use our \nCertificate and profile installer\n step then you can find the IDs in the step's\nlog. It prints the ID of every identity and provisioning profile it downloads\nand installs successfully. You can copy-paste that ID directly into the\n\nForce code signing with Identity\n (ID looks like: \niPhone Distribution: My Company (Xyz)\n),\nand if you need it, into the \nForce code signing with Provisioning Profile\n\n(ID looks like: \nxyz045x4-6143-4e5a-a94a-3fe3aec96eb3\n) input fields.\n\n\n\n\nUsually it's enough to specify only the Identity ID\n for the build, the compatible Provisioning Profile\nwill be selected by Xcode automatically. Not setting the Provisioning Profile has the advantage\nthat if you have to update the Provisioning Profile you won't have to update your\nBitrise configuration with the new profile's ID, as long as the Provisioning Profile is\ncompatible with the Identity you set. But if you'd need to control exactly\nwhich Provisioning Profile should be used for a given step, you can use\nthe \nForce code signing with Provisioning Profile\n input of the steps.\n\nThis can be useful if you want to use multiple Distribution Provisioning Profiles\nin a single build, \ne.g. to create both an Ad-Hoc and an App Store signed app.", 
            "title": "iOS Code Signing - Technical details"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#how-ios-code-signing-works-if-you-use-xcode-8-automatic-code-signing", 
            "text": "If you're interested in all of the details, you should check this year's WWDC video which covers the code signing changes .\nWe'll focus more on the basics and issue resolution here.   Uploading code signing files to bitrise.io  Code signing files can be uploaded to  bitrise.io \nin the app's Workflow Editor, under the  Code signing   Files  section of the editor.   In short, Xcode 8's automatic code signing works this way:   When you do an Archive in Xcode, either in Xcode.app or on a CI server / through Xcode's command line tool ( xcodebuild )\n   it first creates an archive  signed with development code signing .  Then, when you specify the distribution method (export method) it  resigns the archive with distribution signing .    This means that if you want to create for example an App Store signed IPA,\non the Mac (e.g. on the  bitrise.io  virtual machine)\nyou have to have  both a Wildcard, Team / Development AND the App Store\ndistribution certificates and provisioning profiles !   Collecting all of these might take quite a bit of time  but fortunately our updated  codesigndoc \ncan now collect all of these files for you,  automatically !   So,  is this automatic code signing worth all of this trouble ?\nShould you instead opt to use manual code signing in Xcode 8?  In general using Automatic code signing is a good idea, and you should\nmigrate to it (as Apple suggests this is the new way, how you should do\ncode signing in the future) if you can.  Is it worth the trouble?  Well,  the good thing about Automatic code signing \nis that once you collected all the code signing files it's incredibly easy to use these files / to select the right file(s) during your build!  All you need to do is specifying the \"export method\" ( app-store ,  ad-hoc , etc.)\nin the  Xcode Archive  step, and that's all!  Xcode will select the right certificate\nand provisioning profiles automatically , based on your project's\nTeam and Bundle ID (if the signing files are available in the system of course ;) )!  Compare this with the previous solution , where you had to either create multiple Schemes\nin Xcode to be able to control where to use which code signing settings,\nor you had to specify \"Force Identity / Provisioning Profile\" options,\nwhich could lead to even more trouble when not configured properly.\nIn Xcode 8 automatic code signing you don't have to (actually, you can't)\nmess with these configurations, initial code signing is always performed\nwith Development code signing, and Xcode resignes the IPA during export\nbased on the \"export method\".  And,  it works the same way on  bitrise.io  too !\nOnce you've uploaded all the required signing files (e.g. with  codesigndoc ),\nall you have to do is to set the  export method  option\nof the  Xcode Archive  step to the option you want to use. That's all!  This is the same as what you do when you create/export an iOS app archive\nfrom Xcode.app -  the  Xcode Archive  step just runs Xcode's command line tool .\nThere's no \"magic\" here,  Xcode Archive  just passes the export options\nto Xcode, and Xcode creates the archive and IPA the same way it does on your Mac!", 
            "title": "How iOS code signing works - if you use Xcode 8 automatic code signing"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#migrating-your-bitrise-configuration-to-automatic-code-signing", 
            "text": "First of all, you should upgrade your steps in your Workflow\nto the latest versions - especially the  Certificate and profile installer \nand the  Xcode Archive  steps - as there are a couple of features\nonly available in the latest versions.  The second step is to  remove every previous, now incompatible code signing input\nfrom the  Xcode Archive  step .\nIn general you should try to  reset every code signing related input option of the  Xcode Archive  step ,\ne.g. \"Force code signing with Identity\" and \"Force code signing with Provisioning Profile Specifier\".  Note: it might be easier to see which input options you defined a value for in  bitrise.yml  mode\nof the Workflow Editor. Just click on  bitrise.yml  on the left side of the Workflow Editor\nand search for the  xcode-archive  step. In  bitrise.yml  only those inputs are listed which\nyou specified a value for / which are not set to their default value, so it should be pretty\nquick to check the list there, easier than on the Web UI.  You're almost ready , really! All you have to do is:   Make sure that you've uploaded all the required code signing files,  including a Wildcard Team Development \n   certificate and provisioning profile, as noted in the  Description of how Xcode 8's new Automatic code signing feature works  section.\n   You might want to use  codesigndoc  for this,\n   as it can export all the required files automatically from your Mac.  Set the  Select method for export  input option of the  Xcode Archive  step to the\n   method you want to use (e.g.  app-store  or  ad-hoc )   And that's all!  You can use multiple  Xcode Archive  steps to create multiple IPAs signed with different\ncode signing methods in the same build, just by adding a second  Xcode Archive  step\nand setting the  Select method for export  option to the other method.\nAlternatively you can also use the  Re-sign IPA  step, to resign the IPA\nof a previous  Xcode Archive  step.  One note: if you'd have to use a distribution provisioning profile   certificate\nwhich is related to a different Team, not the one set in your Xcode project's\nsettings, then you have to specify the  The Developer Portal team to use for this export \ninput option too, or else Xcode will search for code signing files with the same Team ID\nyou have in your Xcode project's settings. Again, this is the same what you do in\nXcode.app when you create an Archive and export it with a distribution signing - if you're\npart of more than one Apple Dev Portal team you'll be prompted to select one.  Another note, especially if your project includes Extension project(s),\nfor some reason, Xcode 8.0 might not accept just any Wildcard Development Provisioning Profile\nfor the initial signing. It seems that in case of e.g. a Today Widget Extension\nXcode 8.0 requires the Wildcard  Team  Provisioning Profile,\nor a specific development one which includes the Extension's  full  bundle ID.\nThis might be just an Xcode 8.0 issue which will be fixed in an upcoming Xcode 8 update,\nbut for now it's best to use the  Team  Provisioning Profile, which you can\nexport from Xcode Preferences (Xcode -  Preferences -  select your Apple ID on the left side - \nselect your Team on the right side -  click \"View Details\" -  search for iOS Team Provisioning Profile: *  -  right click \"Show in Finder\"). codesigndoc  can help to\nexport the proper one in this case too!   Make sure you can archive and export on your Mac!  codesigndoc  only works if you can archive and export your app from  Xcode.app  - until you get a signed IPA !   Xcode.app  might auto generate files in the background\nduring the export process, and obviously  codesigndoc  can only collect those files\nafter the files are available on your Mac.  This means that you should first Archive the project in  Xcode.app ,\nExport it for the distribution type you want to use ( Ad Hoc ,  App Store  or  Enterprise ),\nand  run  codesigndoc  after you have the  .ipa  file generated by  Xcode.app .\nThis way  codesigndoc  can collect all the code signing files\nrequired for that type of distribution.   Uploading code signing files to bitrise.io  Code signing files can be uploaded to  bitrise.io \nin the app's Workflow Editor, under the  Code signing   Files  section of the editor.", 
            "title": "Migrating your Bitrise configuration to Automatic code signing"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#how-ios-code-signing-works-xcode-7-xcode-8-manual-code-signing-mode", 
            "text": "iOS apps require code signing for every action/output which generates an app ( .ipa ) meant to\nrun on a physical iOS device.  When you create and export an Archive ( .ipa ) of your app Xcode will sign it automatically,\nbased on the  Code Signing  settings you have in your Xcode project. There are, however,\na couple of things you have to know about how Xcode selects the code signing\nfiles (unless you set a specific Identity and/or Provisioning Profile).  If you have a Code Signing configuration in your Xcode project like this one:   where you don't set a specific Identity and Provisioning Profile, Xcode will\nselect the ones which match the following points:   For the  Release  configuration it'll search for a Distribution Identity/Certificate  For the  Debug  configuration it'll search for a Development Identity/Certificate  The Provisioning Profile has to match with the  team ID  and with the  bundle ID  you set\n  in your Xcode project settings.   This means that even if you have a Distribution Identity/Certificate available in the system,\nif Xcode can't find a related Provisioning Profile which matches the  team ID   and  the  bundle ID \nyou'll get an error like this when you try to archive the project:  Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u2018...\u2019 were found.  This means that to be able to Archive your project you have to provide both a Certificate ( .p12  Identity file)\nand a Provisioning Profile which matches:   the type of the configuration you set in your Xcode project settings under the  Code Signing  section (Distribution or Development)  the Provisioning Profile has to match both the  bundle ID   and  the  team ID  set in the Xcode project settings  and  the two files have to be compatible with each other  (you\ncan check this on the  Apple Developer Portal  - select a Provisioning Profile,\nclick  Edit , there you can see the Certificates which are allowed to use that specific Provisioning Profile)   There can be multiple Certificates/Identities and Provisioning Profiles installed on the system,\nthe only thing what matters for Xcode when it tries to sign the app is to find a Certificate/Identity and\nProvisioning Profile pair which fulfills all the requirements listed above.   How to export your iOS Code Signing files  If you need help with exporting your iOS Code Signing files, you can find\na step-by-step guide with screenshots  on our old DevCenter .", 
            "title": "How iOS code signing works (Xcode 7 &amp; Xcode 8 manual code signing mode)"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#how-to-make-the-process-easier-more-manageable-xcode-7-xcode-8-manual-code-signing-mode", 
            "text": "", 
            "title": "How to make the process easier, more manageable? (Xcode 7 &amp; Xcode 8 manual code signing mode)"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#using-export-options-available-for-xcode-7-and-xcode-archive-step-v191", 
            "text": "Since the  1.9.1  version of the  Xcode Archive  step you can set Xcode \"export options\"\ndirectly through the step!  The thing you have to know about Xcode's Export Options or how archiving works\nwhen you do it from  Xcode.app  on your Mac:   When you click \"Archive\" in Xcode first it creates an Xcode \"archive\" file (directory),\n   and  it signs the archive with the code signing files set in your Xcode project settings !  Then, when the Xcode \"Organizer\" window appears and you click \"Export...\" and\n   select an \"export method\" (App Store, Ad Hoc, Enterprise or Development Deployment)\n    Xcode does re-sign  the archive with the final code signing files appropriate for the\n   export method you selected.   This means that if you want to do the same on any Mac (e.g. on  bitrise.io  virtual machines) you'll need the code signing files for the final app/IPA  (e.g. App Store or Ad Hoc distribution certificate and provisioning profile) and additionally the code signing files used for the initial signing  (usually Development certificate and provisioning profile)!  To do the same on  bitrise.io  all you have to do is:   Upload all the certificates and provisioning profiles, including the ones required for the initial\n   code signing (usually your Development certificate and provisioning profile for the project).  Open the Workflow Editor on  bitrise.io , select the  Xcode Archive  step,\n   and make sure its version is at least  1.9.1  Go to the step's  Select method for export  input, and set it to the \"export method\" you want to use,\n   just like you would in Xcode's Organizer.\n    Note: you can add more than one  Xcode Archive  step to your workflow, if you want to create\n   e.g. both an Ad Hoc and an App Store signed app/IPA in the same build/workflow!  Click  Save  in the Workflow Editor   That's all. Run a new build and you're done ;)", 
            "title": "Using Export Options (available for Xcode 7+ and Xcode Archive step v1.9.1+)"
        }, 
        {
            "location": "/ios/code-signing-technical-details/#full-manual-full-control", 
            "text": "There's an important \"trick\" which can make your code signing process much easier\n(if you don't or can't use the Xcode 7+ Export Options - as described in the previous section):\nXcode (Xcode's Command Line Tool,  xcodebuild ) has a command line parameter to\noverride the Identity and Provisioning Profile configurations set in Xcode project settings!  The  CODE_SIGN_IDENTITY  parameter can be used to override the  Code Signing Identity ,\nwhile the  PROVISIONING_PROFILE  parameter can be used to override the  Provisioning Profile  configuration\nfor any  xcodebuild  command (e.g. Archive).  Both our  Xcode Archive  and  Xcode Analyze  steps include two related inputs, Force code signing with Identity  and  Force code signing with Provisioning Profile .\nThe value you provide for these inputs will be passed to  xcodebuild \nas  CODE_SIGN_IDENTITY  and  PROVISIONING_PROFILE .  Now, the important bit, that can make your life much easier  (especially if you generate an iOS app with\nmultiple, different code signing configuration (e.g. if you want to generate both an Ad-Hoc and\nan App Store signed  ipa )):   Setting a specific Identity will make Xcode ignore other search parameters!  If you set the Identity to  iPhone Distribution  Xcode will search for a matching Provisioning\nProfile which fulfills all the other criteria (team ID and bundle ID),\nwhile  if you provide the full ID of the Identity  like  iPhone Distribution: My Company \nXcode will  ignore  everything else and will use that specific Identity (if it can\nfind it in the system)!   This means that even if the Provisioning Profile has a different  team ID  set, just by\nspecifying the Identity's full ID, Xcode will pick the Provisioning Profile\nwhich is compatible with the Identity, it won't check the  team ID  parameter!  This makes iOS code signing (in most cases) much easier, as all you have to do is:   Make sure that you set the Provisioning Profile configuration  in your Xcode project settings  to \"Automatic\",\n  or else you'll have to override this configuration too (to be able to use different Provisioning Profiles)  You should set the Identity configuration  in your Xcode project settings  to a generic category like\n  \"iPhone Developer\" or \"iPhone Distribution\" (this is more like a best practice, to make the life of\n  developers easier,  not a requirement if you override the configuration )  And the last piece is : set the  Force code signing with Identity  input of Xcode Archive and\n  Xcode Analyze to the  full ID of the Identity  (something like:  iPhone Distribution: My Company )   With this setup you don't have to change your code signing configuration in your Xcode project ,\nyou only have to specify the configuration in your Bitrise workflow, and you can specify\ndifferent code signing configuration for every Xcode step if you want to!   Where to get these IDs?  If you use our  Certificate and profile installer  step then you can find the IDs in the step's\nlog. It prints the ID of every identity and provisioning profile it downloads\nand installs successfully. You can copy-paste that ID directly into the Force code signing with Identity  (ID looks like:  iPhone Distribution: My Company (Xyz) ),\nand if you need it, into the  Force code signing with Provisioning Profile \n(ID looks like:  xyz045x4-6143-4e5a-a94a-3fe3aec96eb3 ) input fields.   Usually it's enough to specify only the Identity ID  for the build, the compatible Provisioning Profile\nwill be selected by Xcode automatically. Not setting the Provisioning Profile has the advantage\nthat if you have to update the Provisioning Profile you won't have to update your\nBitrise configuration with the new profile's ID, as long as the Provisioning Profile is\ncompatible with the Identity you set. But if you'd need to control exactly\nwhich Provisioning Profile should be used for a given step, you can use\nthe  Force code signing with Provisioning Profile  input of the steps. This can be useful if you want to use multiple Distribution Provisioning Profiles\nin a single build,  e.g. to create both an Ad-Hoc and an App Store signed app.", 
            "title": "Full manual / full control"
        }, 
        {
            "location": "/ios/uploading-certificates/", 
            "text": "Easiest way to export code signing identities\n\u2693\n\n\nYou can easily locate the needed certificates and provisioning profiles for your project with our \ncodesigndoc\n tool.\n\n\nSimply open your \nTerminal.app\n on your Mac and\n\nrun the one liner \"install\" command\n.\n\n\nAfter that open your \nFinder.app\n and drag-and-drop your project's \n.xcodeproj\n or \n.xcworkspace\n file into the command line in your terminal.\n\n\nOnce it's done you'll have all the required files exported, ready for upload.\n\n\nUploading the exported code signing files to Bitrise\n\u2693\n\n\nOnce you have all the needed files, head to your dashboard on \nbitrise.io\n and select your app.\n\n\nGo to \nWorkflow\n \n \nManage Workflows\n \n and select the \nCode Signing \n Files\n tab on the left.\nUpload your code signing certificate (p12) and provisioning profiles and you are ready to go! \ud83d\ude80", 
            "title": "Uploading certificates"
        }, 
        {
            "location": "/ios/uploading-certificates/#easiest-way-to-export-code-signing-identities", 
            "text": "You can easily locate the needed certificates and provisioning profiles for your project with our  codesigndoc  tool.  Simply open your  Terminal.app  on your Mac and run the one liner \"install\" command .  After that open your  Finder.app  and drag-and-drop your project's  .xcodeproj  or  .xcworkspace  file into the command line in your terminal. \nOnce it's done you'll have all the required files exported, ready for upload.", 
            "title": "Easiest way to export code signing identities"
        }, 
        {
            "location": "/ios/uploading-certificates/#uploading-the-exported-code-signing-files-to-bitrise", 
            "text": "Once you have all the needed files, head to your dashboard on  bitrise.io  and select your app.  Go to  Workflow     Manage Workflows    and select the  Code Signing   Files  tab on the left.\nUpload your code signing certificate (p12) and provisioning profiles and you are ready to go! \ud83d\ude80", 
            "title": "Uploading the exported code signing files to Bitrise"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/", 
            "text": "The Provisioning Profile(s) and Code Signing Identity (.p12 Certificate) are\ncrucial part of the development process.\nThe Provisioning Profile contains application related data,\nthe list of devices that can run the given application, the connected Certificates and many more.\n\n\nThe Code Signing Identity (.p12 Certificate) contains information about the developer\nand makes it possible to sign the application. Both of these files are needed to build your application,\ntest them on devices or upload them to the AppStore.\n\n\nExport with \ncodesigndoc\n\u2693\n\n\nThe easiest way to get the required code signing files\nis to use our \ncodesigndoc\n tool.\n\n\nIt supports both Xcode and Xamarin projects, and can be installed and run\nwith a single line of command in Terminal:\n\nhttps://github.com/bitrise-tools/codesigndoc#one-liner\n\n\nOnce it's done you'll have all the required files exported.\nOpen your app on \nbitrise.io\n,\ngo to the \nWorkflow Editor\n (click the \nWorkflow\n tab),\nand \nupload these files\n into the \nCode signing \n Files\n section (left side of the editor).\n\n\nThat's all\n!\n\n\n\n\nMake sure you can archive and export on your Mac!\n\n\ncodesigndoc\n only works if you can archive and export your app from \nXcode.app\n -\nuntil you get a signed IPA! \n\n\n\n\nXcode.app\n might auto generate files in the background\nduring the export process, and obviously \ncodesigndoc\n can only collect those files\nafter the files are available on your Mac.\n\n\nThis means that you should first Archive the project in \nXcode.app\n,\nExport it for the distribution type you want to use (\nAd Hoc\n, \nApp Store\n or \nEnterprise\n),\nand \nrun \ncodesigndoc\n after you have the \n.ipa\n file generated by \nXcode.app\n.\nThis way \ncodesigndoc\n can collect all the code signing files\nrequired for that type of distribution. \n\n\nManually exporting Provisioning Profiles\n\u2693\n\n\n\n\nVisit the \nApple Developer Portal\n - use your AppleID to login.\n\n\nOnce you're signed in, select the \nCertificates, IDs \n Profiles\n section\n\n\nFind the Provisioning Profile you need,\n   select it and click download (the file extension is \n.mobileprovision\n\n   in case of an iOS Provisioning Profile, and \n.provisionprofile\n in case of a macOS application Provisioning Profile)\n\n\nTo upload it to your app on \nbitrise.io\n\n\nopen your app on \nbitrise.io\n\n\nselect the \nWorkflow\n tab\n\n\nin the Workflow Editor, on the left side, select the \nCode signing \n Files\n option\n\n\nhere you can upload your Provisioning Profiles and your Code Signing Identities (\n.p12\n Certificate)\n\n\n\n\n\n\n\n\nManually exporting and uploading the Certificate (.p12 Identity)\n\u2693\n\n\nTo request/create a signing certificate\n\u2693\n\n\n\n\nRequest a Certificate from \nXcode.app\n's \nAccounts\n section in \nPreferences\n,\n   or from the \nApple Developer Portal\n manually.\n\n\n\n\nDownload signing certificate from the Apple Developer Portal\n\u2693\n\n\n\n\nVisit the \nCertificates, IDs \n Profiles\n section\n   of the Apple Developer Portal.\n\n\nChoose \nCertificates\n on the left side\n\n\nSelect the Certificate and click download (the file extension is \n.cer\n)\n\n\nOpen the file once the download is finished\n\n\nThis will open the certificate in your \nKeychain Access.app\n\n\n\n\nExport the certificate (.p12 identity)\n\u2693\n\n\n\n\nOpen \nKeychain Access.app\n\n\nOn the left side, select \nMy Certificates\n\n\nRight click on the certificate you want to exported\n\n\nSelect \"Export ..\" in the menu\n\n\n\n\nNote: you can select more than one certificate at the same time, then right\nclick and select \"Export ...\" - this will export all the certificates\ninto a \nsingle \n.p12\n file\n!\n\n\nTo upload the .p12 signing certificate file to your app on \nbitrise.io\n:\n\n\n\n\nopen your app on \nbitrise.io\n\n\nselect the \nWorkflow\n tab\n\n\nin the Workflow Editor, on the left side, select the \nCode signing \n Files\n option\n\n\nhere you can upload your Provisioning Profiles and your Code Signing Identities (\n.p12\n Certificate)\n\n\n\n\n\n\nMore information about how iOS code signing works\n\n\nFor more information about how iOS code signing works, please\ncheck the \niOS/Code Signing\n page.", 
            "title": "How to export Certificates and Provisioning Profiles"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#export-with-codesigndoc", 
            "text": "The easiest way to get the required code signing files\nis to use our  codesigndoc  tool.  It supports both Xcode and Xamarin projects, and can be installed and run\nwith a single line of command in Terminal: https://github.com/bitrise-tools/codesigndoc#one-liner  Once it's done you'll have all the required files exported.\nOpen your app on  bitrise.io ,\ngo to the  Workflow Editor  (click the  Workflow  tab),\nand  upload these files  into the  Code signing   Files  section (left side of the editor).  That's all !   Make sure you can archive and export on your Mac!  codesigndoc  only works if you can archive and export your app from  Xcode.app  -\nuntil you get a signed IPA!    Xcode.app  might auto generate files in the background\nduring the export process, and obviously  codesigndoc  can only collect those files\nafter the files are available on your Mac.  This means that you should first Archive the project in  Xcode.app ,\nExport it for the distribution type you want to use ( Ad Hoc ,  App Store  or  Enterprise ),\nand  run  codesigndoc  after you have the  .ipa  file generated by  Xcode.app .\nThis way  codesigndoc  can collect all the code signing files\nrequired for that type of distribution.", 
            "title": "Export with codesigndoc"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#manually-exporting-provisioning-profiles", 
            "text": "Visit the  Apple Developer Portal  - use your AppleID to login.  Once you're signed in, select the  Certificates, IDs   Profiles  section  Find the Provisioning Profile you need,\n   select it and click download (the file extension is  .mobileprovision \n   in case of an iOS Provisioning Profile, and  .provisionprofile  in case of a macOS application Provisioning Profile)  To upload it to your app on  bitrise.io  open your app on  bitrise.io  select the  Workflow  tab  in the Workflow Editor, on the left side, select the  Code signing   Files  option  here you can upload your Provisioning Profiles and your Code Signing Identities ( .p12  Certificate)", 
            "title": "Manually exporting Provisioning Profiles"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#manually-exporting-and-uploading-the-certificate-p12-identity", 
            "text": "", 
            "title": "Manually exporting and uploading the Certificate (.p12 Identity)"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#to-requestcreate-a-signing-certificate", 
            "text": "Request a Certificate from  Xcode.app 's  Accounts  section in  Preferences ,\n   or from the  Apple Developer Portal  manually.", 
            "title": "To request/create a signing certificate"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#download-signing-certificate-from-the-apple-developer-portal", 
            "text": "Visit the  Certificates, IDs   Profiles  section\n   of the Apple Developer Portal.  Choose  Certificates  on the left side  Select the Certificate and click download (the file extension is  .cer )  Open the file once the download is finished  This will open the certificate in your  Keychain Access.app", 
            "title": "Download signing certificate from the Apple Developer Portal"
        }, 
        {
            "location": "/ios/export-certificate-and-provisioning-profile/#export-the-certificate-p12-identity", 
            "text": "Open  Keychain Access.app  On the left side, select  My Certificates  Right click on the certificate you want to exported  Select \"Export ..\" in the menu   Note: you can select more than one certificate at the same time, then right\nclick and select \"Export ...\" - this will export all the certificates\ninto a  single  .p12  file !  To upload the .p12 signing certificate file to your app on  bitrise.io :   open your app on  bitrise.io  select the  Workflow  tab  in the Workflow Editor, on the left side, select the  Code signing   Files  option  here you can upload your Provisioning Profiles and your Code Signing Identities ( .p12  Certificate)    More information about how iOS code signing works  For more information about how iOS code signing works, please\ncheck the  iOS/Code Signing  page.", 
            "title": "Export the certificate (.p12 identity)"
        }, 
        {
            "location": "/ios/resigning-an-ipa/", 
            "text": "During the development of your iOS app you will need at least two types of distribution. One for internal testing and deployment for your QA team, and one for deploying your app to the App Store.\n\n\nTo achieve this, \nfirst you have to upload multiple certificates\n ( development and distribution ) and the associated provisioning profiles. When it's all set up you can create multiple workflows for your app on Bitrise:\n\n\nHow it was before\n\u2693\n\n\nLet's say you setup two workflows, one with a \nmaster\n trigger to kick of your \nAppStore\n workflow. This will sign your apps with the distribution profile and a trigger with \n*\n to kick of your normal \nPrimary\n workflow that builds and deploys your app to the testers. On both workflows you can setup an \nXcode Archive step\n, update the needed signing and you are ready to go.\n\n\nThis will create the required IPA's for you, but there is an easier way!\n\n\nSetting up automatic resigning\n\u2693\n\n\nInstead of running multiple \nXcode Archive steps\n, setup your project to sign your apps with \nAutomatic \n iOS Developer\n and upload a \nwildcard provisioning profile\n. ( You can even use our own preinstalled certificate and provisioning profile for that if you don't set the team id. )\n\n\n\n\nWhen you want to deploy your app to the QA team or to App Store, add the \niOS Re-sign step\n to your workflow and set your iTunes team ID with the required distribution. It will simply re-sign your IPA and your are ready to go, without the need of manually handling different versions of settings in your project, or burning build minutes.\n\n\nHere you can find a sample bitrise.yml that will resign your app and deploy it to iTunes Connect if you are deploying to the \nmaster branch\n\n\n---\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- pattern: \nmaster\n\n  is_pull_request_allowed: false\n  workflow: appstore\n- pattern: \n*\n\n  is_pull_request_allowed: true\n  workflow: primary\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: $BITRISE_PROJECT_PATH\n  - BITRISE_SCHEME: $BITRISE_SCHEME\n  - INFO_PLIST_PATH: $INFO_PLIST_PATH\n  - ITUNES_CONNECT_USER: $ITUNES_CONNECT_USER           # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_PASSWORD: $ITUNES_CONNECT_PASSWORD   # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_TEAM_ID: $ITUNES_CONNECT_TEAM_ID     # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_APP_ID: $ITUNES_CONNECT_APP_ID       # Store it in .bitrise.secrets.yml\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.3.2: {}\n    - certificate-and-profile-installer@1.6.0: {}\n    - set-xcode-build-number@1.0.4:\n        inputs:\n        - plist_path: $INFO_PLIST_PATH\n    - xcode-archive@1.8.5: {}\n    - deploy-to-bitrise-io@1.2.4: {}\n\n  appstore:\n    before_run:\n    - primary\n    steps:\n    - resign-ipa@1.0.0:\n        inputs:\n        - distribution_type: AppStore\n        - itunes_connect_team_id: $ITUNES_CONNECT_TEAM_ID\n    - deploy-to-itunesconnect-deliver@2.6.1:\n        inputs:\n        - ipa_path: $BITRISE_RESIGNED_IPA_PATH\n        - itunescon_user: $ITUNES_CONNECT_USER\n        - password: $ITUNES_CONNECT_PASSWORD\n        - app_id: $ITUNES_CONNECT_APP_ID", 
            "title": "Resigning an IPA"
        }, 
        {
            "location": "/ios/resigning-an-ipa/#how-it-was-before", 
            "text": "Let's say you setup two workflows, one with a  master  trigger to kick of your  AppStore  workflow. This will sign your apps with the distribution profile and a trigger with  *  to kick of your normal  Primary  workflow that builds and deploys your app to the testers. On both workflows you can setup an  Xcode Archive step , update the needed signing and you are ready to go.  This will create the required IPA's for you, but there is an easier way!", 
            "title": "How it was before"
        }, 
        {
            "location": "/ios/resigning-an-ipa/#setting-up-automatic-resigning", 
            "text": "Instead of running multiple  Xcode Archive steps , setup your project to sign your apps with  Automatic   iOS Developer  and upload a  wildcard provisioning profile . ( You can even use our own preinstalled certificate and provisioning profile for that if you don't set the team id. )   When you want to deploy your app to the QA team or to App Store, add the  iOS Re-sign step  to your workflow and set your iTunes team ID with the required distribution. It will simply re-sign your IPA and your are ready to go, without the need of manually handling different versions of settings in your project, or burning build minutes.  Here you can find a sample bitrise.yml that will resign your app and deploy it to iTunes Connect if you are deploying to the  master branch  ---\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- pattern:  master \n  is_pull_request_allowed: false\n  workflow: appstore\n- pattern:  * \n  is_pull_request_allowed: true\n  workflow: primary\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: $BITRISE_PROJECT_PATH\n  - BITRISE_SCHEME: $BITRISE_SCHEME\n  - INFO_PLIST_PATH: $INFO_PLIST_PATH\n  - ITUNES_CONNECT_USER: $ITUNES_CONNECT_USER           # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_PASSWORD: $ITUNES_CONNECT_PASSWORD   # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_TEAM_ID: $ITUNES_CONNECT_TEAM_ID     # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_APP_ID: $ITUNES_CONNECT_APP_ID       # Store it in .bitrise.secrets.yml\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.3.2: {}\n    - certificate-and-profile-installer@1.6.0: {}\n    - set-xcode-build-number@1.0.4:\n        inputs:\n        - plist_path: $INFO_PLIST_PATH\n    - xcode-archive@1.8.5: {}\n    - deploy-to-bitrise-io@1.2.4: {}\n\n  appstore:\n    before_run:\n    - primary\n    steps:\n    - resign-ipa@1.0.0:\n        inputs:\n        - distribution_type: AppStore\n        - itunes_connect_team_id: $ITUNES_CONNECT_TEAM_ID\n    - deploy-to-itunesconnect-deliver@2.6.1:\n        inputs:\n        - ipa_path: $BITRISE_RESIGNED_IPA_PATH\n        - itunescon_user: $ITUNES_CONNECT_USER\n        - password: $ITUNES_CONNECT_PASSWORD\n        - app_id: $ITUNES_CONNECT_APP_ID", 
            "title": "Setting up automatic resigning"
        }, 
        {
            "location": "/ios/frequent-ios-issues/", 
            "text": "Searching for errors and issues in Xcode generated output\n\u2693\n\n\nThis applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the \nOutput Tool\n option\nof the Xcode ... step to \nxcodebuild\n (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool (\nxcodebuild\n). All of the official Bitrise Xcode steps\nhave an \nOutput Tool\n input with a \nxcodebuild\n option.\n\n\nYou should search for \nerror:\n in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.\n\n\nIf that doesn't work you should also search for \nwarning:\n, in rare cases Xcode doesn't print an \nerror:\n even if it fails.\n\n\nIf you have the logs on your own machine then you can run something like this in your Terminal:\n\n\ngrep --color 'error:' my.log\ngrep --color 'warning:' my.log\n\n\n\n\nXcode Scheme not found\n\u2693\n\n\nThe first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a \nThe project named \"Foo\" does not contain a scheme named \"Bar\"\n error during build,\nis your Xcode project settings.\n\n\n\n\nCheck if the desired Scheme is shared\n\n\nWhen you share your scheme the Xcode project changes. Don't forget to \ncommit\n and to \npush\n your changes!\n\n\nIf the related validation is still running on Bitrise abort it and try to run it again.\n\n\n\n\n\n\nDon't forget to commit \n push the changes\n if you just enabled the Shared option!\nThis change should be reflected in your \ngit\n repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder):\n\n*.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme\n.\n\n\nIf you still can't see the desired Scheme,\ntry to look into your \n.gitignore\n file and check if you are ignoring the config files of your Xcode project.\n\n\nCocoaPods (missing) dependency issue\n\u2693\n\n\nError:\n\u2693\n\n\nld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nOR:\n\n\nno such module '...'\n\n\n\n\nSolution:\n\u2693\n\n\nMost likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace (\n.xcworkspace\n) file. Go to your App's \nWorkflow tab\n on Bitrise,\nclick \nManage Workflows\n, click \nApp Environments\n and change the \nBITRISE_PROJECT_PATH\n item.\nThis will change the default Project Path configuration for every workflow.\n\n\nIf it worked before\n and the \nBITRISE_PROJECT_PATH\n did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.\n\n\nFastlane Export Issue\n\u2693\n\n\nThis section was contributed by \n@kwoylie\n,\nand applies if you have a \nGemfile\n in your repository and you use\nthe \nfastlane\n step which uses the \nGemfile\n automatically if present.\n\n\nGemfile\n content was:\n\n\ngem \nfastlane\n, \n1.104.0\n\ngem \ngym\n, \n1.10.0\n\ngem \nbadge\n, \n0.5.0\n\ngem \nCFPropertyList\n,\n2.3.3\n\ngem \nsqlite3\n, \n1.3.11\n\n\n\n\nI have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.\n\n\nI had disabled xcpretty on Fastlane and got the following error from gym:\n\n\n$/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed: \nIDEDistributionThinningStep: 0x7f868c80f810\n: Error Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with \nIDEDistributionContext: 0x7f868c51ed70; archive(resolved)='\nIDEArchive: 0x7f868c4af8d0\n', distributionTask(resolved)='2', distributionMethod(resolved)='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID(resolved)='(null)'\n\n    Chain (2, self inclusive):\n    \nIDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID='(null)'\n\n    \nIDEDistributionContext: 0x7f868c4b0e70; archive = '\nIDEArchive: 0x7f868c4af8d0\n', distributionMethod='(null)', teamID='(null)'\n\n\n/IDEDistributionContext: 0x7f868c51ed70\n\n\n\n\nThis error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:\n\n\n2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in `\ntop (required)\n'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)\n\n\n\n\nSo after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.\n\n\nSolution:\n\u2693\n\n\nTo fix this issue, you just have to add a \nScript\n step to run the following:\n\n\nsudo /usr/bin/gem install bundler\n\n\n\n\nThis will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies\n\n\nWorks in local but not on Bitrise.io\n\u2693\n\n\nAn example error: \nld: file not found ...\n\n\nFirst of all restart your Xcode and try a new build.\n\n\nIf it doesn't help try a \nclean build\n in Xcode.\n\n\nIf no error was displayed, try resetting your simulator(s).\n\n\nAnother problem could be your CocoaPods version.\nTry updating your CocoaPods with the \n[sudo] gem install cocoapods\n command.\nAlso make sure that your \nPodfile.lock\n is \ncommitted into your repository\n,\nas that's the file which describes the exact Pod versions you use.\n\nWithout this Bitrise might download newer versions of Pods than the ones you use.\n\n\nIf there's still no error try deleting the \nPods\n folder in your project and run the \npod install\n command again.\n\n\nFinally, if none of the above helped, or you get an error with \nld: file not found\n on Bitrise,\nand the path contains \nDerivedData\n, with no other error message, like this:\n\n\nld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nTry deleting the Xcode local cache. After that the error should be reproducible on your local machine.\n\n\nYou can delete the local Xcode cache using your Terminal:\n\n\nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n\n\n\nStep hangs (times out after a period without any logs)\n\u2693\n\n\nCheck whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.\n\n\nMost frequent sources of this issue:\n\n\n\n\nXcode\n (command line tools) might hang if you try to build a Scheme which is not marked as \nshared\n.\n  Usually it hangs right after you start any \nxcodebuild\n command (e.g. \nxcodebuild -list\n or \nxcodebuild .. archive\n).\n\n\nSolution\n: Please make sure that you marked the Scheme as \nshared\n,\n  and that you actually committed \n pushed it into your repository.\n  For more information please follow this guide: \nXcode scheme not found\n.\n\n\n\n\n\n\nYour script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)\n\n\nYou try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an \nosascript\n). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using \nhttps://github.com/jacobsalmela/tccutil\n.\n\n\nFor example to add \nosascript\n to the allowed OS X Accessibility list you can call \ntccutil\n from\n  your script (don't forget to include it in your repository or download on-the-fly): \nsudo python tccutil.py -i /usr/bin/osascript\n\n\nYou can download the script from GitHub directly, for example: \nwget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py\n.\n\n\n\n\n\n\nIt can also be \nsomething in your app's code\n.\n  An example: one of our user had a simple \npopup in the app, presented only at the first start of the app\n.\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit \n\"Reset Content and Settings\"\n in the iOS Simulator's menu.\n\n\nSolution\n: try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.\n\n\n\n\n\n\n\n\nIt might also be that the build does not hang, \nit just doesn't generate any log output\n.\nThis can happen for various reasons;\nyou can find an example in case of an \niOS library project\n.\n\n\nCocoaPods frameworks signing issue\n\u2693\n\n\nWhen you get an error something like this:\n\n\n=== CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'\n\n\n\n\nThis error is related to how CocoaPods expects code signing configurations for \nframeworks\n.\n\n\nSolution 1: make sure that you upload/include/install a wildcard development provisioning profile\n\u2693\n\n\nUsually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.\n\n\nOn your Mac you most likely have your own Development certificate and\n\nWildcard\n team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.\n\n\nSo, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team \nwildcard\n provisioning profile) to \nbitrise.io\n,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.\n\n\nSolution 2: modifying code signing settings through \nPodfile\n\u2693\n\n\nOne of our beloved user sent us the following fix for this problem.\nYou should add the following script as a \nPost script\n to your \nPodfile\n:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = \n\n      config.build_settings['CODE_SIGNING_REQUIRED'] = \nNO\n\n      config.build_settings['CODE_SIGNING_ALLOWED'] = \nNO\n\n    end\n  end\nend\n\n\n\n\nYou can find a related CocoaPods issue and discussion at:\n\nhttps://github.com/CocoaPods/CocoaPods/issues/4331\n\n\nYou can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one: \nhttps://github.com/CocoaPods/CocoaPods/issues/3063\n.\n\n\nInstalling an Enterprise app: \nUntrusted Enterprise Developer\n\u2693\n\n\nIf you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title \nUntrusted Enterprise Developer\n.\n\n\n\n\nStarting with iOS 9 there's no option to \"Trust\" the developer right from the popup.\n\n\nYou can Trust the developer and enable the app to run in iOS Settings:\n\n\n\n\nOpen the Settings app on your iPhone or iPad\n\n\nSelect the \nGeneral\n category\n\n\nSelect the \nProfile\n option\n\n\nstarting with iOS 9.2 the option was renamed to \nDevice Management\n instead of \nProfile\n\n\n\n\n\n\nTap on the Enterprise App option related to the app (the one mentioned in the popup)\n\n\nTap the \nTrust \"The Developer's Name\"\n button\n\n\nA popup will appear, tap on \nTrust\n again\n\n\n\n\nYou should now be able to run the app, and any other Enterprise app from the same developer.\n\n\nNo dSYM found\n\u2693\n\n\nA couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.\n\n\nSolution:\n\u2693\n\n\nTo generate debug symbols (dSYM) go to your \nXcode Project's Settings -\n Build Settings -\n Debug Information Format\n and set it to \nDWARF with dSYM File\n.\n\n\nInvalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary\n\u2693\n\n\nSolution:\n Generate a new Certificate on the Apple Developer portal, \nnot\n in Xcode.\n\n\nAnother solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.\n\n\nNo identity found\n\u2693\n\n\nYou uploaded the correct \nProvisioning Profile\n and \nCertificate\n pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:\n\n\n22...D11: no identity found\n\n\n\n\nSolution:\n\n\nYou probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like \n--keychain /../../xxx.keychain\n code signing flag\nand a \nCODE_SIGN_KEYCHAIN\n variable set in the \n.pbxproj\n.\n\n\nThis might happen if you migrate your Xcode Bot based setup into Bitrise.\n\n\nTo fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.\n\n\nNo mobileprovision_path found / No embedded.mobileprovision found in ...\n\u2693\n\n\nError: \nNo embedded.mobileprovision found in ...\n\n\nOr: \nNo mobileprovision_path found\n\n\nPossible solution 1: \nSkip Install\n Xcode Settings\n\u2693\n\n\nIf you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the \nSkip Install\n option set to \nYES\n.\n\n\nThis should only be used for iOS frameworks, \nfor iOS apps this should be set to \nNO\n.\n\n\nYou can find the official documentation at:\n\nhttps://developer.apple.com/library/ios/technotes/tn2215/_index.html\n\n- under the \nXcode successfully archived my application, but the Archives Organizer does not list my archive\n section.\n\n\nPossible solution 2: \nInstallation Directory\n Xcode Settings\n\u2693\n\n\nAnother cause of the issue can be\n if you (or a tool you use) modifies\nthe \nBuild Setting -\n Deployment -\n Installation Directory\n settings in your Xcode Project.\nThis can result in an \n.xcarchive\n where your app is not generated\ninto the canonical \nProducts/Applications\n folder, but instead into a \nProducts/Users/USERNAME/...\n folder,\nincluding the full absolute path of an intermediate build.\n\n\nSolution:\n Please make sure that the \nInstallation Directory\n option is set to \n$(LOCAL_APPS_DIR)\n\n(the default value when you generate a new iOS Xcode Project) or \n/Applications\n\n(which is the default value of \n$(LOCAL_APPS_DIR)\n) in your Xcode Project settings,\nand that no build tool you use modifies this option.\n\n\nHuge thanks to \nAntje\n, who reported this solution!\n\n\nDuplicated Schemes\n\u2693\n\n\nThis is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the \nexact same name\n,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations,\n\nrandomly\n. This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this:\n\nxcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action\n when it fails.\n\n\nThis might also happen if you use CocoaPods and one of your Pods have the same name as your project.\n\n\nIn any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run: \nxcodebuild -workspace ./path/to/workspace/file -list\n - or if you use a project file\ninstead of a workspace file: \nxcodebuild -project ./path/to/project/file -list\n.\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.\n\n\nSystem dialog blocks the tests to run\n\u2693\n\n\n(huge thanks to \n@AronI\n who reported this issue and the solution)\n\n\nError:\n\n\n2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}\n\n\n\n\nSolution:\n\n\n\n\nSo to put it simply my problem was my UI Tests were failing.\n\n\n\n\nThe steps leading to the failure were the following:\n\n\n\n\nUnit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.\n\n\nWhen a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).\n\n\nWhen the UITests start the permissions dialog is still visible and overlaying the screen.\n\n\nThe application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails\n\n\n\n\nI resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:\n\n\nlet unitTestMode = NSProcessInfo.processInfo().environment[\nXCTestConfigurationFilePath\n] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}\n\n\n\n\n\n\nThis is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "Frequent iOS issues"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#searching-for-errors-and-issues-in-xcode-generated-output", 
            "text": "This applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the  Output Tool  option\nof the Xcode ... step to  xcodebuild  (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool ( xcodebuild ). All of the official Bitrise Xcode steps\nhave an  Output Tool  input with a  xcodebuild  option.  You should search for  error:  in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.  If that doesn't work you should also search for  warning: , in rare cases Xcode doesn't print an  error:  even if it fails.  If you have the logs on your own machine then you can run something like this in your Terminal:  grep --color 'error:' my.log\ngrep --color 'warning:' my.log", 
            "title": "Searching for errors and issues in Xcode generated output"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#xcode-scheme-not-found", 
            "text": "The first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a  The project named \"Foo\" does not contain a scheme named \"Bar\"  error during build,\nis your Xcode project settings.   Check if the desired Scheme is shared  When you share your scheme the Xcode project changes. Don't forget to  commit  and to  push  your changes!  If the related validation is still running on Bitrise abort it and try to run it again.    Don't forget to commit   push the changes  if you just enabled the Shared option!\nThis change should be reflected in your  git  repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder): *.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme .  If you still can't see the desired Scheme,\ntry to look into your  .gitignore  file and check if you are ignoring the config files of your Xcode project.", 
            "title": "Xcode Scheme not found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#cocoapods-missing-dependency-issue", 
            "text": "", 
            "title": "CocoaPods (missing) dependency issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#error", 
            "text": "ld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  OR:  no such module '...'", 
            "title": "Error:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution", 
            "text": "Most likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace ( .xcworkspace ) file. Go to your App's  Workflow tab  on Bitrise,\nclick  Manage Workflows , click  App Environments  and change the  BITRISE_PROJECT_PATH  item.\nThis will change the default Project Path configuration for every workflow.  If it worked before  and the  BITRISE_PROJECT_PATH  did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#fastlane-export-issue", 
            "text": "This section was contributed by  @kwoylie ,\nand applies if you have a  Gemfile  in your repository and you use\nthe  fastlane  step which uses the  Gemfile  automatically if present.  Gemfile  content was:  gem  fastlane ,  1.104.0 \ngem  gym ,  1.10.0 \ngem  badge ,  0.5.0 \ngem  CFPropertyList , 2.3.3 \ngem  sqlite3 ,  1.3.11  I have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.  I had disabled xcpretty on Fastlane and got the following error from gym:  $/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed:  IDEDistributionThinningStep: 0x7f868c80f810 : Error Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with  IDEDistributionContext: 0x7f868c51ed70; archive(resolved)=' IDEArchive: 0x7f868c4af8d0 ', distributionTask(resolved)='2', distributionMethod(resolved)=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID(resolved)='(null)' \n    Chain (2, self inclusive):\n     IDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID='(null)' \n     IDEDistributionContext: 0x7f868c4b0e70; archive = ' IDEArchive: 0x7f868c4af8d0 ', distributionMethod='(null)', teamID='(null)'  /IDEDistributionContext: 0x7f868c51ed70  This error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:  2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in ` top (required) '\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)  So after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.", 
            "title": "Fastlane Export Issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution_1", 
            "text": "To fix this issue, you just have to add a  Script  step to run the following:  sudo /usr/bin/gem install bundler  This will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#works-in-local-but-not-on-bitriseio", 
            "text": "An example error:  ld: file not found ...  First of all restart your Xcode and try a new build.  If it doesn't help try a  clean build  in Xcode.  If no error was displayed, try resetting your simulator(s).  Another problem could be your CocoaPods version.\nTry updating your CocoaPods with the  [sudo] gem install cocoapods  command.\nAlso make sure that your  Podfile.lock  is  committed into your repository ,\nas that's the file which describes the exact Pod versions you use. Without this Bitrise might download newer versions of Pods than the ones you use.  If there's still no error try deleting the  Pods  folder in your project and run the  pod install  command again.  Finally, if none of the above helped, or you get an error with  ld: file not found  on Bitrise,\nand the path contains  DerivedData , with no other error message, like this:  ld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  Try deleting the Xcode local cache. After that the error should be reproducible on your local machine.  You can delete the local Xcode cache using your Terminal:  rm -rf ~/Library/Developer/Xcode/DerivedData", 
            "title": "Works in local but not on Bitrise.io"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#step-hangs-times-out-after-a-period-without-any-logs", 
            "text": "Check whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.  Most frequent sources of this issue:   Xcode  (command line tools) might hang if you try to build a Scheme which is not marked as  shared .\n  Usually it hangs right after you start any  xcodebuild  command (e.g.  xcodebuild -list  or  xcodebuild .. archive ).  Solution : Please make sure that you marked the Scheme as  shared ,\n  and that you actually committed   pushed it into your repository.\n  For more information please follow this guide:  Xcode scheme not found .    Your script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)  You try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an  osascript ). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using  https://github.com/jacobsalmela/tccutil .  For example to add  osascript  to the allowed OS X Accessibility list you can call  tccutil  from\n  your script (don't forget to include it in your repository or download on-the-fly):  sudo python tccutil.py -i /usr/bin/osascript  You can download the script from GitHub directly, for example:  wget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py .    It can also be  something in your app's code .\n  An example: one of our user had a simple  popup in the app, presented only at the first start of the app .\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit  \"Reset Content and Settings\"  in the iOS Simulator's menu.  Solution : try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.     It might also be that the build does not hang,  it just doesn't generate any log output .\nThis can happen for various reasons;\nyou can find an example in case of an  iOS library project .", 
            "title": "Step hangs (times out after a period without any logs)"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#cocoapods-frameworks-signing-issue", 
            "text": "When you get an error something like this:  === CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'  This error is related to how CocoaPods expects code signing configurations for  frameworks .", 
            "title": "CocoaPods frameworks signing issue"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution-1-make-sure-that-you-uploadincludeinstall-a-wildcard-development-provisioning-profile", 
            "text": "Usually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.  On your Mac you most likely have your own Development certificate and Wildcard  team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.  So, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team  wildcard  provisioning profile) to  bitrise.io ,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.", 
            "title": "Solution 1: make sure that you upload/include/install a wildcard development provisioning profile"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution-2-modifying-code-signing-settings-through-podfile", 
            "text": "One of our beloved user sent us the following fix for this problem.\nYou should add the following script as a  Post script  to your  Podfile :  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] =  \n      config.build_settings['CODE_SIGNING_REQUIRED'] =  NO \n      config.build_settings['CODE_SIGNING_ALLOWED'] =  NO \n    end\n  end\nend  You can find a related CocoaPods issue and discussion at: https://github.com/CocoaPods/CocoaPods/issues/4331  You can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one:  https://github.com/CocoaPods/CocoaPods/issues/3063 .", 
            "title": "Solution 2: modifying code signing settings through Podfile"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#installing-an-enterprise-app-untrusted-enterprise-developer", 
            "text": "If you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title  Untrusted Enterprise Developer .   Starting with iOS 9 there's no option to \"Trust\" the developer right from the popup.  You can Trust the developer and enable the app to run in iOS Settings:   Open the Settings app on your iPhone or iPad  Select the  General  category  Select the  Profile  option  starting with iOS 9.2 the option was renamed to  Device Management  instead of  Profile    Tap on the Enterprise App option related to the app (the one mentioned in the popup)  Tap the  Trust \"The Developer's Name\"  button  A popup will appear, tap on  Trust  again   You should now be able to run the app, and any other Enterprise app from the same developer.", 
            "title": "Installing an Enterprise app: Untrusted Enterprise Developer"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-dsym-found", 
            "text": "A couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.", 
            "title": "No dSYM found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#solution_2", 
            "text": "To generate debug symbols (dSYM) go to your  Xcode Project's Settings -  Build Settings -  Debug Information Format  and set it to  DWARF with dSYM File .", 
            "title": "Solution:"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#invalid-ipa-get-task-allow-values-in-the-embedded-mobileprovision-dont-match-your-binary", 
            "text": "Solution:  Generate a new Certificate on the Apple Developer portal,  not  in Xcode.  Another solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.", 
            "title": "Invalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-identity-found", 
            "text": "You uploaded the correct  Provisioning Profile  and  Certificate  pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:  22...D11: no identity found  Solution:  You probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like  --keychain /../../xxx.keychain  code signing flag\nand a  CODE_SIGN_KEYCHAIN  variable set in the  .pbxproj .  This might happen if you migrate your Xcode Bot based setup into Bitrise.  To fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.", 
            "title": "No identity found"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#no-mobileprovision_path-found-no-embeddedmobileprovision-found-in", 
            "text": "Error:  No embedded.mobileprovision found in ...  Or:  No mobileprovision_path found", 
            "title": "No mobileprovision_path found / No embedded.mobileprovision found in ..."
        }, 
        {
            "location": "/ios/frequent-ios-issues/#possible-solution-1-skip-install-xcode-settings", 
            "text": "If you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the  Skip Install  option set to  YES .  This should only be used for iOS frameworks,  for iOS apps this should be set to  NO .  You can find the official documentation at: https://developer.apple.com/library/ios/technotes/tn2215/_index.html \n- under the  Xcode successfully archived my application, but the Archives Organizer does not list my archive  section.", 
            "title": "Possible solution 1: Skip Install Xcode Settings"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#possible-solution-2-installation-directory-xcode-settings", 
            "text": "Another cause of the issue can be  if you (or a tool you use) modifies\nthe  Build Setting -  Deployment -  Installation Directory  settings in your Xcode Project.\nThis can result in an  .xcarchive  where your app is not generated\ninto the canonical  Products/Applications  folder, but instead into a  Products/Users/USERNAME/...  folder,\nincluding the full absolute path of an intermediate build.  Solution:  Please make sure that the  Installation Directory  option is set to  $(LOCAL_APPS_DIR) \n(the default value when you generate a new iOS Xcode Project) or  /Applications \n(which is the default value of  $(LOCAL_APPS_DIR) ) in your Xcode Project settings,\nand that no build tool you use modifies this option.  Huge thanks to  Antje , who reported this solution!", 
            "title": "Possible solution 2: Installation Directory Xcode Settings"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#duplicated-schemes", 
            "text": "This is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the  exact same name ,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations, randomly . This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this: xcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action  when it fails.  This might also happen if you use CocoaPods and one of your Pods have the same name as your project.  In any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run:  xcodebuild -workspace ./path/to/workspace/file -list  - or if you use a project file\ninstead of a workspace file:  xcodebuild -project ./path/to/project/file -list .\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.", 
            "title": "Duplicated Schemes"
        }, 
        {
            "location": "/ios/frequent-ios-issues/#system-dialog-blocks-the-tests-to-run", 
            "text": "(huge thanks to  @AronI  who reported this issue and the solution)  Error:  2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}  Solution:   So to put it simply my problem was my UI Tests were failing.   The steps leading to the failure were the following:   Unit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.  When a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).  When the UITests start the permissions dialog is still visible and overlaying the screen.  The application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails   I resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:  let unitTestMode = NSProcessInfo.processInfo().environment[ XCTestConfigurationFilePath ] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}   This is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "System dialog blocks the tests to run"
        }, 
        {
            "location": "/ios/known-xcode-issues/", 
            "text": "Feel free to add your comments to this list.\n\n\nYou can do it directly on GitHub, by clicking this link\n,\njust don't forget to send it as a Pull Request ;)\n\n\nPerformance related\n\u2693\n\n\nNote: mainly affects UI tests.\n\n\nThe root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on \nbitrise.io\n),\nMacBook Airs, Mac Minis with HDD storage, ...\n\n\nIt can happen even if you use\n\nApple's Xcode Bots CI server\n on \nnon SSD\n\nMac Mini.\n\n\nExamples:\n\n\n\n\nUI Tests fail to start\n\n\nOne or more UI Test case hangs\n\n\n\n\nRelated links \n reports:\n\n\n\n\nXCode bot error: Early unexpected exit, operation never finished bootstrapping\n\n\nUI Testing Failure - Failed to launch within 2.5s, Interrupting test\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for ...\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s\n\n\nUI Testing Failure - Failed to perform AX action for monitoring the event loop\n\n\nUI Testing Failure due to failed AX Action\n\n\nEvery other test case being skipped - UI Testing Failure - App state for \n is XCApplicationStateRunningActive (3), still not XCApplicationStateNotRunning\n\n\n\n\nPossible solutions\n\u2693\n\n\n\n\nAs reported \nin this StackOverflow answer\n \n\n  \nin this Apple dev forum discussion\n\n  a possible workaround can be to \nnot to store \nXCUIApplication()\n in a variable\n, instead\n  reference / use it directly. E.g. instead of: \nlet app = XCUIApplication() ; ... ; app.launch()\n\n  do: \nXCUIApplication().launch()\n\n\nOthers reported that if you add a delay (\nsleep(10)\n) after every \napp.launch()\n related to your tests, it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels. (\nRelated Apple developer forum discussion\n)\n\n\nRelated: remove every explicit \napp.terminate()\n in your \ntearDown()\n method(s)\n\n\n\n\n\n\nTry another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")\n\n\nUse the Async testing APIs\n\n\nSome users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.\n\n\nA great article about splitting tests into multiple Schemes:\n  \nhttp://artsy.github.io/blog/2016/04/06/Testing-Schemes\n\n\n\n\n\n\nSometimes it's related to a code which makes Xcode to misbehave\n\n\nTry another Xcode version.\n\n\n\n\nFlaky UI tests, UI test cases failing randomly\n\u2693\n\n\nThis can happen with a really simple project too. Even something as\nsimple as:\n\n\nfunc testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[\nMaster\n]\n        masterNavigationBar.buttons[\nAdd\n].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier(\nDetail\n).buttons[\nMaster\n].tap()\n        masterNavigationBar.buttons[\nEdit\n].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[\nDelete\n].tap()\n\n        masterNavigationBar.buttons[\nDone\n].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }\n\n\n\n\ncan trigger this issue.\n\n\nPossible solutions\n\u2693\n\n\nWe could reproduce this issue with the code above, using \nXcode 7.3\n.\nThe exact same code worked perfectly with \nXcode 7.2.1\n while it randomly\nfailed with \n7.3\n. The solution was to use a different iOS Simulator device.\nThe test failed \n2 out of 3\n on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.\n\n\nChanging the simulator device to \"iPhone 6s Plus\" solved the issue with \nXcode 7.3\n.\n\n\nXcode Unit Test fails without any error, with exit code 65\n\u2693\n\n\nThis can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.\n\n\nYou can find a long discussion, with possible reasons \n solutions \nhere\n.\n\n\nA quick summary:\n\n\n\n\nFirst of all, if you use \nxcpretty\n to format the output try a build without it\n  (if you use the Xcode Test step you can set \nxcodebuild\n as the \"Output Tool\" option/input\n  to not to format the log produced by \nxcodebuild\n). The cause is: \nxcpretty\n sometimes\n  omits the error message in it's output. \nRelated GitHub issue\n.\n\n\nIf you don't use our \nXcode Test\n step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.\n\n\nIf you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.\n\n\nTry \nanother Xcode version\n,\n  there are issues which are present in one Xcode version but not in another one.\n\n\nMake sure your desired \nXcode scheme is shared\n. Don't forget to commit and push the changes if you just enabled it.\n\n\nIt might also be a \nproject configuration issue in your Xcode project\n,\n  or a \ncode issue in your tests\n,\n  or a \nmulti threading issue in your code\n.\n\n\nWe received reports that this might also be caused by Code Coverage report generation,\n  you can disable the \nGenerate code coverage files?\n option of the Xcode Test step\n  to not to generate Code Coverage files.\n\n\nIf the previous steps did not help, you should check the whole discussion and suggested solutions at: \nhttps://github.com/bitrise-io/bitrise.io/issues/5\n\n\n\n\nSegmentation fault\n\u2693\n\n\nThe error is:\n\n\nclang: error: unable to execute command: Segmentation fault: 11\n\n\n\n\nThis is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on \nbitrise.io\n. Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.\n\n\nThe solution is simple, just make sure that you use the same Xcode version everywhere.\n\n\nIssues which occur with the Xcode Command Line Tools (\nxcodebuild\n), but not with Xcode.app\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\n\nNote: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9\n\n\nXcode 8 - \nxcodebuild .. test\n hangs at the very end of the tests\n\u2693\n\n\nxcodebuild .. test\n hangs at the end of the tests (after it printed the summary of the tests)\nif the output of \nxcodebuild ..\n is piped / redirected in any way.\nThis means that \nxcodebuild .. test .. | xcpretty\n or even \ntee\n can be used to reproduce this issue.\n\n\n\n\nAffected Xcode versions\n: so far it seems to be an \nXcode 8 beta\n only issue, and it was fixed in \nXcode 8 beta 4\n.\n\n\nRelated \nradar\n and \nxcpretty\n issues.\n\n\nWorkaround: use a \nScript\n step instead of the Xcode Test step,\n  and copy paste the \nxcodebuild\n command from the hanging Xcode Test step's log, without \n| xcpretty\n etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base \nxcodebuild\n command should be able to run, if the output\n  is not redirected / piped.\n\n\n\n\nEvery/Any Xcode command hangs\n\u2693\n\n\nThis is a rare issue, caused by running a \nnon shared Scheme\n.\n\n\nxcodebuild\n can only work with \nshared Schemes\n and user schemes (auto created by Xcode.app).\n\nxcodebuild\n, unlike Xcode.app, \ndoes not\n auto create user schemes, it can only work with\n\nshared schemes\n and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app \non the specific Mac machine the first time\n, for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in \nxcodebuild\n hanging, instead\nof an error message.\n\n\nIf this is the case then any \nxcodebuild\n command will hang, even something\nas simple as \nxcodebuild -list\n.\n\n\nSolution\n\u2693\n\n\nMake sure that you marked the Scheme as shared, and that you actually committed \n pushed it into your repository\n.\n\n\nBuild hangs\n\u2693\n\n\nSimulator reset\n\u2693\n\n\nAs reported \nhere\n,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script \nxcrun simctl erase all\n, it can cause Xcode / the Simulator to hang.\n\n\nOther\n\u2693\n\n\nIt might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).\n\n\nYou can find pointers to identify and solve these kind\nof issues \non our old DevCenter\n.", 
            "title": "List of known Xcode issues"
        }, 
        {
            "location": "/ios/known-xcode-issues/#performance-related", 
            "text": "Note: mainly affects UI tests.  The root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on  bitrise.io ),\nMacBook Airs, Mac Minis with HDD storage, ...  It can happen even if you use Apple's Xcode Bots CI server  on  non SSD \nMac Mini.  Examples:   UI Tests fail to start  One or more UI Test case hangs   Related links   reports:   XCode bot error: Early unexpected exit, operation never finished bootstrapping  UI Testing Failure - Failed to launch within 2.5s, Interrupting test  Assertion Failure: UI Testing Failure - Failed to receive completion for ...  Assertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s  UI Testing Failure - Failed to perform AX action for monitoring the event loop  UI Testing Failure due to failed AX Action  Every other test case being skipped - UI Testing Failure - App state for   is XCApplicationStateRunningActive (3), still not XCApplicationStateNotRunning", 
            "title": "Performance related"
        }, 
        {
            "location": "/ios/known-xcode-issues/#possible-solutions", 
            "text": "As reported  in this StackOverflow answer   \n   in this Apple dev forum discussion \n  a possible workaround can be to  not to store  XCUIApplication()  in a variable , instead\n  reference / use it directly. E.g. instead of:  let app = XCUIApplication() ; ... ; app.launch() \n  do:  XCUIApplication().launch()  Others reported that if you add a delay ( sleep(10) ) after every  app.launch()  related to your tests, it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels. ( Related Apple developer forum discussion )  Related: remove every explicit  app.terminate()  in your  tearDown()  method(s)    Try another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")  Use the Async testing APIs  Some users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.  A great article about splitting tests into multiple Schemes:\n   http://artsy.github.io/blog/2016/04/06/Testing-Schemes    Sometimes it's related to a code which makes Xcode to misbehave  Try another Xcode version.", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/ios/known-xcode-issues/#flaky-ui-tests-ui-test-cases-failing-randomly", 
            "text": "This can happen with a really simple project too. Even something as\nsimple as:  func testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[ Master ]\n        masterNavigationBar.buttons[ Add ].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier( Detail ).buttons[ Master ].tap()\n        masterNavigationBar.buttons[ Edit ].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[ Delete ].tap()\n\n        masterNavigationBar.buttons[ Done ].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }  can trigger this issue.", 
            "title": "Flaky UI tests, UI test cases failing randomly"
        }, 
        {
            "location": "/ios/known-xcode-issues/#possible-solutions_1", 
            "text": "We could reproduce this issue with the code above, using  Xcode 7.3 .\nThe exact same code worked perfectly with  Xcode 7.2.1  while it randomly\nfailed with  7.3 . The solution was to use a different iOS Simulator device.\nThe test failed  2 out of 3  on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.  Changing the simulator device to \"iPhone 6s Plus\" solved the issue with  Xcode 7.3 .", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcode-unit-test-fails-without-any-error-with-exit-code-65", 
            "text": "This can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.  You can find a long discussion, with possible reasons   solutions  here .  A quick summary:   First of all, if you use  xcpretty  to format the output try a build without it\n  (if you use the Xcode Test step you can set  xcodebuild  as the \"Output Tool\" option/input\n  to not to format the log produced by  xcodebuild ). The cause is:  xcpretty  sometimes\n  omits the error message in it's output.  Related GitHub issue .  If you don't use our  Xcode Test  step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.  If you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.  Try  another Xcode version ,\n  there are issues which are present in one Xcode version but not in another one.  Make sure your desired  Xcode scheme is shared . Don't forget to commit and push the changes if you just enabled it.  It might also be a  project configuration issue in your Xcode project ,\n  or a  code issue in your tests ,\n  or a  multi threading issue in your code .  We received reports that this might also be caused by Code Coverage report generation,\n  you can disable the  Generate code coverage files?  option of the Xcode Test step\n  to not to generate Code Coverage files.  If the previous steps did not help, you should check the whole discussion and suggested solutions at:  https://github.com/bitrise-io/bitrise.io/issues/5", 
            "title": "Xcode Unit Test fails without any error, with exit code 65"
        }, 
        {
            "location": "/ios/known-xcode-issues/#segmentation-fault", 
            "text": "The error is:  clang: error: unable to execute command: Segmentation fault: 11  This is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on  bitrise.io . Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.  The solution is simple, just make sure that you use the same Xcode version everywhere.", 
            "title": "Segmentation fault"
        }, 
        {
            "location": "/ios/known-xcode-issues/#issues-which-occur-with-the-xcode-command-line-tools-xcodebuild-but-not-with-xcodeapp", 
            "text": "", 
            "title": "Issues which occur with the Xcode Command Line Tools (xcodebuild), but not with Xcode.app"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcodebuild-hangs-when-a-test-causes-exc_bad_access-kernel-exception", 
            "text": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception  Note: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9", 
            "title": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception"
        }, 
        {
            "location": "/ios/known-xcode-issues/#xcode-8-xcodebuild-test-hangs-at-the-very-end-of-the-tests", 
            "text": "xcodebuild .. test  hangs at the end of the tests (after it printed the summary of the tests)\nif the output of  xcodebuild ..  is piped / redirected in any way.\nThis means that  xcodebuild .. test .. | xcpretty  or even  tee  can be used to reproduce this issue.   Affected Xcode versions : so far it seems to be an  Xcode 8 beta  only issue, and it was fixed in  Xcode 8 beta 4 .  Related  radar  and  xcpretty  issues.  Workaround: use a  Script  step instead of the Xcode Test step,\n  and copy paste the  xcodebuild  command from the hanging Xcode Test step's log, without  | xcpretty  etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base  xcodebuild  command should be able to run, if the output\n  is not redirected / piped.", 
            "title": "Xcode 8 - xcodebuild .. test hangs at the very end of the tests"
        }, 
        {
            "location": "/ios/known-xcode-issues/#everyany-xcode-command-hangs", 
            "text": "This is a rare issue, caused by running a  non shared Scheme .  xcodebuild  can only work with  shared Schemes  and user schemes (auto created by Xcode.app). xcodebuild , unlike Xcode.app,  does not  auto create user schemes, it can only work with shared schemes  and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app  on the specific Mac machine the first time , for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in  xcodebuild  hanging, instead\nof an error message.  If this is the case then any  xcodebuild  command will hang, even something\nas simple as  xcodebuild -list .", 
            "title": "Every/Any Xcode command hangs"
        }, 
        {
            "location": "/ios/known-xcode-issues/#solution", 
            "text": "Make sure that you marked the Scheme as shared, and that you actually committed   pushed it into your repository .", 
            "title": "Solution"
        }, 
        {
            "location": "/ios/known-xcode-issues/#build-hangs", 
            "text": "", 
            "title": "Build hangs"
        }, 
        {
            "location": "/ios/known-xcode-issues/#simulator-reset", 
            "text": "As reported  here ,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script  xcrun simctl erase all , it can cause Xcode / the Simulator to hang.", 
            "title": "Simulator reset"
        }, 
        {
            "location": "/ios/known-xcode-issues/#other", 
            "text": "It might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).  You can find pointers to identify and solve these kind\nof issues  on our old DevCenter .", 
            "title": "Other"
        }, 
        {
            "location": "/android/code-signing/", 
            "text": "In general there are two options to create a signed apk with bitrise:\n\n\n\n\nThe first option is: \nspecify code sign configuration in your Gradle configuration\n\n\nThe second option is: let \nsign-apk step\n to sign/resign your unsigned/debug signed apk\n\n\n\n\n1. Specify code sign configuration in your project\n\u2693\n\n\nIn case of android project you can specify signing configs in Android Studio, or in your Gradle configuration\n:\n\n\n\n\n\n\nin project navigator select your project and \nOpen Module Settings\n\n\nfrom \nModules\n select your module to sign  \n\n\non \nSigning\n tab fill out the signing informations\n\n\n\n\nSigning config is stored in you app's \nbuild.gradle\n file and looks something like this:\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(\n/path/to/my/keystore.jks\n)\n            storePassword '***'\n        }\n    }\n...\n\n\n\n\nIn case of Xamarin android project with Xamarin Studio\n:\n\n\n\n\n\n\ndouble click on your android project to open the \nProject Options\n\n\nselect \nAndroid Package Signing\n in \nBuild\n group\n\n\nselect the \nConfiguration - Platform\n you want to use to create signed apk and check the \nSign the .APK file using the following keystore details.\n\n\nfill out the signing information\n\n\n\n\nHow to use the same keystore path locally and on bitrise?\n\u2693\n\n\nIn case of android project :\n \n\n\n\n\nYou can eliminate this problem by using \nenvironment variables\n in keystore path (\nstoreFile\n), and in the password and other configuration values. Let's say your keystore path is: \n$HOME/keystores/my_keystore.jks\n, then your \nbuild.gradle\n file would look something like this:\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n            storePassword '***'\n        }\n    }\n...\n\n\n\n\n\n\nYou can use System.getenv(\"ENV_KEY\") to access environment variables anywhere in the gradle config file.\n\n\n\n\nUsing environment variable as keyPassword and storePassword, your build.gradle file may looks like (\nthis examples uses the env vars you get when you upload your keystore to \nbitrise.io\n in the Workflow Editor, under the Code signing \n Files section\n):\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n)\n            keyPassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n)\n            storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n            storePassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n)\n        }\n    }\n...\n\n\n\n\nIn this case do not forget to define these environments on bitrise too. \n\n\nWorking with Xamarin Studio :\n \n\n\n\n\nYou \ncan NOT use environment variables\n in keystore path, the path has to be relative to the android project's folder or \nyou can use an\n absolute path. To use the same path on your local machine and bitrise, it might be a good idea to put your keystore into your repository \nbut don't forget to .gitignore it!\n\n\nUpload your keystore to bitrise:\n\u2693\n\n\n\n\nOpen your app on \nbitrise.io\n\n\nGo to \nWorkflow\n tab\n\n\nClick the \nMANAGE WORKFLOWS\n button\n\n\nOn the left side of Workflow editor, select \nCode signing \n Files\n\n\nScroll down to \nGeneric File Storage\n section and click on \n+ Add another File\n\n\nSelect file type\n: Android Keystore\n\n\nUpload your file and fill the required data\n\n\n\n\nBitrise will upload your file and assign an environment variable (\nBITRISEIO_ANDROID_KEYSTORE_URL\n) to the file's download url. A time limited, read only download URL will be set as the value of this Environment Variable for every build. You can use this URL to download the file during a build.\n\n\nDownload your keystore from Generic File Storage:\n\u2693\n\n\nThe easiest way to download your keystore (\nor any file you uploaded to generic file storage\n) is to use a \nfile-downloader\n step:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n    - destination: \n$HOME/keystores/my_keystore.jks\n #native android\n#    - destination: \n$BITRISE_SOURCE_DIR/keystores/my_keystore.jks\n #Xamarin android\n...\n\n\n\n\nAfter this step \nmy_keystore.jks\n will be available at \n$HOME/keystores/my_keystore.jks\n or \n$BITRISE_SOURCE_DIR/keystores/my_keystore.jks\n.\n\n\n2. Let sign-apk step to sign/resign your unsigned/debug signed apk\n\u2693\n\n\nAdvantage of this solution is that you \ndon't have to set code signing in your project\n.  \n\n\nDuring the archive no signing/only debug signing will be performed.\n\nYou should place the \nsign-apk\n step \nafter\n the step which generates your APK.\n\n\nTo use this step, you have to upload your keystore to bitrise (see: \nUpload your keystore to bitrise\n), but you do not have to download it (\nsign-apk\n step can work with remote file paths (URLs) too)\n\n\nWhen you upload your keystore to bitrise's Generic File Storage, it will export:\n\n\n\n\nthe Download URL in \nBITRISEIO_ANDROID_KEYSTORE_URL\n\n\nthe Keystore password in \nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n\n\nthe Keystore alias in \nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n\n\nthe Private key password in \nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n\n\n\n\nFortunately these environment variables are the default input values to \nsign-apk step\n, so you just have to add the step, no further configuration is required (in most cases).\n\nIf you want to configure the sign command, check the \njarsigner_options\n input's description.", 
            "title": "Android Code Signing"
        }, 
        {
            "location": "/android/code-signing/#1-specify-code-sign-configuration-in-your-project", 
            "text": "In case of android project you can specify signing configs in Android Studio, or in your Gradle configuration :    in project navigator select your project and  Open Module Settings  from  Modules  select your module to sign    on  Signing  tab fill out the signing informations   Signing config is stored in you app's  build.gradle  file and looks something like this:  android {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file( /path/to/my/keystore.jks )\n            storePassword '***'\n        }\n    }\n...  In case of Xamarin android project with Xamarin Studio :    double click on your android project to open the  Project Options  select  Android Package Signing  in  Build  group  select the  Configuration - Platform  you want to use to create signed apk and check the  Sign the .APK file using the following keystore details.  fill out the signing information", 
            "title": "1. Specify code sign configuration in your project"
        }, 
        {
            "location": "/android/code-signing/#how-to-use-the-same-keystore-path-locally-and-on-bitrise", 
            "text": "In case of android project :     You can eliminate this problem by using  environment variables  in keystore path ( storeFile ), and in the password and other configuration values. Let's say your keystore path is:  $HOME/keystores/my_keystore.jks , then your  build.gradle  file would look something like this:  android {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n            storePassword '***'\n        }\n    }\n...   You can use System.getenv(\"ENV_KEY\") to access environment variables anywhere in the gradle config file.   Using environment variable as keyPassword and storePassword, your build.gradle file may looks like ( this examples uses the env vars you get when you upload your keystore to  bitrise.io  in the Workflow Editor, under the Code signing   Files section ):  android {\n    signingConfigs {\n        release {\n            keyAlias System.getenv( BITRISEIO_ANDROID_KEYSTORE_ALIAS )\n            keyPassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD )\n            storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n            storePassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PASSWORD )\n        }\n    }\n...  In this case do not forget to define these environments on bitrise too.   Working with Xamarin Studio :     You  can NOT use environment variables  in keystore path, the path has to be relative to the android project's folder or  you can use an  absolute path. To use the same path on your local machine and bitrise, it might be a good idea to put your keystore into your repository  but don't forget to .gitignore it!", 
            "title": "How to use the same keystore path locally and on bitrise?"
        }, 
        {
            "location": "/android/code-signing/#upload-your-keystore-to-bitrise", 
            "text": "Open your app on  bitrise.io  Go to  Workflow  tab  Click the  MANAGE WORKFLOWS  button  On the left side of Workflow editor, select  Code signing   Files  Scroll down to  Generic File Storage  section and click on  + Add another File  Select file type : Android Keystore  Upload your file and fill the required data   Bitrise will upload your file and assign an environment variable ( BITRISEIO_ANDROID_KEYSTORE_URL ) to the file's download url. A time limited, read only download URL will be set as the value of this Environment Variable for every build. You can use this URL to download the file during a build.", 
            "title": "Upload your keystore to bitrise:"
        }, 
        {
            "location": "/android/code-signing/#download-your-keystore-from-generic-file-storage", 
            "text": "The easiest way to download your keystore ( or any file you uploaded to generic file storage ) is to use a  file-downloader  step:  ...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n    - destination:  $HOME/keystores/my_keystore.jks  #native android\n#    - destination:  $BITRISE_SOURCE_DIR/keystores/my_keystore.jks  #Xamarin android\n...  After this step  my_keystore.jks  will be available at  $HOME/keystores/my_keystore.jks  or  $BITRISE_SOURCE_DIR/keystores/my_keystore.jks .", 
            "title": "Download your keystore from Generic File Storage:"
        }, 
        {
            "location": "/android/code-signing/#2-let-sign-apk-step-to-signresign-your-unsigneddebug-signed-apk", 
            "text": "Advantage of this solution is that you  don't have to set code signing in your project .    During the archive no signing/only debug signing will be performed. \nYou should place the  sign-apk  step  after  the step which generates your APK.  To use this step, you have to upload your keystore to bitrise (see:  Upload your keystore to bitrise ), but you do not have to download it ( sign-apk  step can work with remote file paths (URLs) too)  When you upload your keystore to bitrise's Generic File Storage, it will export:   the Download URL in  BITRISEIO_ANDROID_KEYSTORE_URL  the Keystore password in  BITRISEIO_ANDROID_KEYSTORE_PASSWORD  the Keystore alias in  BITRISEIO_ANDROID_KEYSTORE_ALIAS  the Private key password in  BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD   Fortunately these environment variables are the default input values to  sign-apk step , so you just have to add the step, no further configuration is required (in most cases). \nIf you want to configure the sign command, check the  jarsigner_options  input's description.", 
            "title": "2. Let sign-apk step to sign/resign your unsigned/debug signed apk"
        }, 
        {
            "location": "/android/the-environment/", 
            "text": "Hardware\n\u2693\n\n\nWe're still experimenting with new VM providers and VM configurations, but in general, what you can expect:\n\n\n\n\nat least 7.5GB RAM\n\n\nat least 2 CPU cores\n\n\n64 bit CPU\n\n\nat least 10GB free disk space\n\n\n\n\nEnvironment\n\u2693\n\n\nWe use standard \nDocker\n images, published on \nDocker Hub\n,\nand the related \nDockerfile\n (the description file which describes the docker image / environment,\nand which is directly used to build the image) can be found on \nGitHub\n.\n\n\nRight now we have three docker images, built on top of each other:\n\n\n\n\nBitrise Base\n image ( \nGitHub\n / \nDocker Hub\n )\n\n\nincludes all the non-Android tools and environment setup\n\n\nideal to be used for non-Android projects as a base image, if you want to use it locally too, as this is\n  the smallest image\n\n\nRuby\n, \nGo\n, \nPython\n, \ngit\n and the \nbitrise command line tools\n are all preinstalled and ready to use.\n\n\nOS: \nUbuntu 16.04\n, 64 bit\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/bitrise-base/blob/master/Dockerfile\n\n\n\n\n\n\nBase Android\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\nextends the Bitrise Base image\n with Android specific tools and environments.\n\n\nMultiple Android SDK, Build Tool and system image versions are preinstalled, as well as \ngradle\n and \nmaven\n.\n\n\nYou can use the \n$ANDROID_HOME\n environment variable to point to the location of the pre-installed Android SDK\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile\n\n\n\n\n\n\nAndroid NDK\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\nbuilt on the Base Android image\n, extends it with the latest Android NDK.\n\n\nYou can use the \n$ANDROID_NDK_HOME\n environment variable to point to the location of the preinstalled Android NDK, and it's also added to \n$PATH\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/android-ndk/blob/master/Dockerfile\n\n\n\n\n\n\n\n\nYou can find the pre-installed tools \n System Report\n of this Stack at:\n\nhttps://github.com/bitrise-io/bitrise.io/blob/master/system_reports/linux-docker-android.log\n\n\nDocker \n Virtual Machines\n\u2693\n\n\nEvery build runs in a new VM\n (which is destroyed right after the build),\nnot just in a new container! This allows us to grant you full control over \nDocker\n\nand the whole environment.\n\n\nWhen your build starts on the Docker based Stack we volume mount the \n/var/run/docker.sock\n socket\ninto your container (similar to calling \ndocker run -v /var/run/docker.sock:/var/run/docker.sock ...\n;\nyou can find a description about this access granting method at:\n\nhttps://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/\n).\n\nNote: The \ndocker\n binary have to be installed inside the base Docker image\n(we install Docker in every one of our Docker images so that you don't have to do anything if you use our image,\nor you base your own image on our Docker images),\nbecause docker started to migrate from a single-binary solution to dynamically loaded components,\nand simply sharing the \ndocker\n binary is not sufficient anymore.\n\n\nThis means that you have access to \ndocker\n in your container, and can use other tools which use docker,\nlike \ndocker-compose\n.\nYou can, for example, configure and run tests and other automations on website projects using \ndocker-compose\n.\n\n\nYou can call \ndocker info\n, \ndocker build\n, \ndocker run\n, \ndocker login\n, \ndocker push\n,\netc. exactly how you would on your own machine.\n\n\nShared volumes\n\u2693\n\n\n\n\nWarning\n\n\nImportant Note if you want to run \ndocker\n in your build, and share volumes\n: because of how \ndocker\n handles volume sharing,\nonly those volumes can be shared which are shared with the base docker container (the one your build is running in).\nEverything under \n/bitrise\n can be mounted as a volume, but no other path is guaranteed to work with \n--volume\n mapping.\n\n\n\n\nPractically this means\n that if you use the standard paths and you use relative paths to mount volumes it'll work as expected,\nas the default source code directory is located inside \n/bitrise\n (by default it's \n/bitrise/src\n in our Docker images).\n\nWhat won't work\n is if you change the source code directory to be located \noutside\n of \n/bitrise\n,\nor you want to mount a folder with an absolute path outside of \n/bitrise\n.", 
            "title": "The Android/Linux/Docker environment"
        }, 
        {
            "location": "/android/the-environment/#hardware", 
            "text": "We're still experimenting with new VM providers and VM configurations, but in general, what you can expect:   at least 7.5GB RAM  at least 2 CPU cores  64 bit CPU  at least 10GB free disk space", 
            "title": "Hardware"
        }, 
        {
            "location": "/android/the-environment/#environment", 
            "text": "We use standard  Docker  images, published on  Docker Hub ,\nand the related  Dockerfile  (the description file which describes the docker image / environment,\nand which is directly used to build the image) can be found on  GitHub .  Right now we have three docker images, built on top of each other:   Bitrise Base  image (  GitHub  /  Docker Hub  )  includes all the non-Android tools and environment setup  ideal to be used for non-Android projects as a base image, if you want to use it locally too, as this is\n  the smallest image  Ruby ,  Go ,  Python ,  git  and the  bitrise command line tools  are all preinstalled and ready to use.  OS:  Ubuntu 16.04 , 64 bit  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/bitrise-base/blob/master/Dockerfile    Base Android  image (   GitHub  /  Docker Hub  )  extends the Bitrise Base image  with Android specific tools and environments.  Multiple Android SDK, Build Tool and system image versions are preinstalled, as well as  gradle  and  maven .  You can use the  $ANDROID_HOME  environment variable to point to the location of the pre-installed Android SDK  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/android/blob/master/Dockerfile    Android NDK  image (   GitHub  /  Docker Hub  )  built on the Base Android image , extends it with the latest Android NDK.  You can use the  $ANDROID_NDK_HOME  environment variable to point to the location of the preinstalled Android NDK, and it's also added to  $PATH  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/android-ndk/blob/master/Dockerfile     You can find the pre-installed tools   System Report  of this Stack at: https://github.com/bitrise-io/bitrise.io/blob/master/system_reports/linux-docker-android.log", 
            "title": "Environment"
        }, 
        {
            "location": "/android/the-environment/#docker-virtual-machines", 
            "text": "Every build runs in a new VM  (which is destroyed right after the build),\nnot just in a new container! This allows us to grant you full control over  Docker \nand the whole environment.  When your build starts on the Docker based Stack we volume mount the  /var/run/docker.sock  socket\ninto your container (similar to calling  docker run -v /var/run/docker.sock:/var/run/docker.sock ... ;\nyou can find a description about this access granting method at: https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/ ). Note: The  docker  binary have to be installed inside the base Docker image\n(we install Docker in every one of our Docker images so that you don't have to do anything if you use our image,\nor you base your own image on our Docker images),\nbecause docker started to migrate from a single-binary solution to dynamically loaded components,\nand simply sharing the  docker  binary is not sufficient anymore.  This means that you have access to  docker  in your container, and can use other tools which use docker,\nlike  docker-compose .\nYou can, for example, configure and run tests and other automations on website projects using  docker-compose .  You can call  docker info ,  docker build ,  docker run ,  docker login ,  docker push ,\netc. exactly how you would on your own machine.", 
            "title": "Docker &amp; Virtual Machines"
        }, 
        {
            "location": "/android/the-environment/#shared-volumes", 
            "text": "Warning  Important Note if you want to run  docker  in your build, and share volumes : because of how  docker  handles volume sharing,\nonly those volumes can be shared which are shared with the base docker container (the one your build is running in).\nEverything under  /bitrise  can be mounted as a volume, but no other path is guaranteed to work with  --volume  mapping.   Practically this means  that if you use the standard paths and you use relative paths to mount volumes it'll work as expected,\nas the default source code directory is located inside  /bitrise  (by default it's  /bitrise/src  in our Docker images). What won't work  is if you change the source code directory to be located  outside  of  /bitrise ,\nor you want to mount a folder with an absolute path outside of  /bitrise .", 
            "title": "Shared volumes"
        }, 
        {
            "location": "/android/android-tips-and-tricks/", 
            "text": "What are Gradle tasks and how can I get the list of available tasks in my project?\n\u2693\n\n\nA \ngradle\n task is a process you can run with \ngradle\n.\nYou can run these tasks by running \ngradle TASK-TO-RUN\n in your Command Line / Terminal.\n\n\nA standard Android Gradle project includes a lot of tasks by default, things like:\n\n\n\n\nandroidDependencies - Displays the Android dependencies of the project.\n\n\nassemble - Assembles all variants of all applications and secondary packages.\n\n\nassembleAndroidTest - Assembles all the Test applications.\n\n\nclean - Deletes the build directory\n\n\n\n\nYou can get the base task list by calling \ngradle tasks\n in your Android app's directory,\nor to see all the available tasks you can call \ngradle tasks --all\n.\n\n\nRunning \ngradle tasks\n you'll get a list of available Gradle tasks in the format:\n\n\n$ gradle task\n\n:tasks\n\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nAndroid tasks\n-------------\nandroidDependencies - Displays the Android dependencies of the project.\nsigningReport - Displays the signing info for each variant.\nsourceSets - Prints out all the source sets defined in this project.\n\nBuild tasks\n-----------\nassemble - Assembles all variants of all applications and secondary packages.\nassembleAndroidTest - Assembles all the Test applications.\nassembleDebug - Assembles all Debug builds.\nassembleRelease - Assembles all Release builds.\n...\n\n\n\n\nYou can run any of the tasks on bitrise from a \nScript\n step by calling \ngradle task-name-to-run\n (for example: \ngradle assemle\n)\nor by using our \nGradle Runner\n step (\nhttps://github.com/bitrise-io/steps-gradle-runner\n)\nand specifying the task as the value of the \ngradle_task\n input.\n\n\nInstead of running \ngradle\n directly, you should run the gradle commands through \ngradlew\n (the Gradle Wrapper)!\n\nThe \nGradle Runner\n step does this, and as you can see it in the related input description of the step:\n\n\n\n\nUsing a Gradle Wrapper (gradlew) is strongly suggested, as the wrapper is what makes sure\nthat the right Gradle version is installed and used for the build.\n\n\nYou can find more information about the Gradle Wrapper (gradlew),\nand about how you can generate one (if you would not have one already)\n\nin the official guide at: \nhttps://docs.gradle.org/current/userguide/gradle_wrapper.html\n.\n\n\n\n\nHow to install an additional Android SDK package\n\u2693\n\n\nAll you have to do is to add a \nScript\n step to your workflow,\nand use \nandroid update sdk\n to install the additional SDKs or packages you want to.\n\n\nAs an example, to install the Android SDK v18 and the related \nbuild-tools\n v18.0.1,\nyou can add a \nScript\n step (can be the very first step in the Workflow)\nwith the following content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter android-18 | grep 'package installed\necho y | android update sdk --no-ui --all --filter build-tools-18.0.1 | grep 'package installed\n\n\n\n\nThe \necho y |\n prefix is really important.\nIf you miss to include this your build will hang waiting for your input,\nto accept the license agreements presented during an Android SDK / package install.\n\n\nYou can get the full list of available packages\n by running:\n\nandroid list sdk --no-ui --all --extended\n. You can run this on your own machine if you have \nandroid\n in your \n$PATH\n.\n\n\n\n\nNote\n\n\nYou should only install the Android tools which are \nnot\n yet installed.\nCalling \nandroid update\n for an already installed tool might fail if it can't create a backup -\nwhich is the case if you use the default \nDocker\n file system driver (\naufs\n).\n\n\nThis issue does not affect builds running on \nbitrise.io\n,\nas the filesystem driver for \ndocker\n is set to \nbtrfs\n instead of the default \naufs\n.\n\n\nYou can check all the pre-installed tools in the official Bitrise Android Dockerfile:\n\nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile\n\n\n\n\nEnable Gradle debug options\n\u2693\n\n\nIf your Gradle build fails and you can't find any information in the logs you can try to call it with\n\n--stacktrace --debug\n flags (ex: \ngradle ... --stacktrace --debug\n) to get more detailed logs.\n\n\nIn most cases \n--stacktrace\n should be enough, and the \nGradle Runner\n step includes\nthis flag by default.\n\n\nRun a bitrise Android build on your Mac/PC, with Docker\n\u2693\n\n\nYou can run your build on your Mac/PC, inside the same \ndocker\n container you use on \nbitrise.io\n,\nto fully test your build in an identical environment! You can find the detailed guide here:\n\nHow to run your build locally in Docker\n\n\nMemory (RAM) limit\n\u2693\n\n\nYou can specify the amount allowed RAM for the JVM by adding two \nEnvironment Variables\n to your Workflow,\ne.g. as \nApp Env Var\ns:\n\n\n\n\nGRADLE_OPTS: '-Dorg.gradle.jvmargs=\"-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError\"'\n\n\n_JAVA_OPTIONS: \"-Xms512m -Xmx1024m\"\n\n\n\n\nThis method can be used to limit the allowed RAM the Gradle JVM process can use,\nwhich can be useful in case there's not enough RAM available in the system.\n\n\nEmulators\n\u2693\n\n\nYou can use our Android emulator steps to create \n boot emulators:\n\nhttp://www.bitrise.io/integrations#?filter=emulator\n.\n\n\nFirst you have to create an emulator with a \nCreate Android emulator\n step,\nwhere you can set the Android version and a couple of other parameters for the new emulator,\nthen you can boot this emulator with the \nStart Android emulator\n step,\nwhich makes sure that the emulator is booted and ready for subsequent steps.\n\n\nEmulator with Google APIs\n\u2693\n\n\nTo create an Android Emulator with Google APIs,\nyou can use the following code snippet instead of the \nCreate Android emulator\n step:\n\n\n#!/bin/bash\nset -ex\n\necho y | android update sdk --no-ui --all --filter addon-google_apis-google-21\n\necho y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-google_apis-21\n\necho no | android create avd --force --name YOUR_EMULATOR_NAME --target \nandroid-21\n --abi \ngoogle_apis/armeabi-v7a\n\n\n\n\nNote about Android SDK versions:\n at this time there are lots of known issues reported for Android Emulators\nwith Android SDK version 22 \n 23 when combined with Google Play services\n(see \n1\n\nand \n2\n).\nThe script above creates an emulator with SDK version 21, which should work properly with Google Play services.\n\n\nThere are possible workarounds for newer versions\n(see \n1\n\nand \n2\n),\nbut that requires some customization in your project.\n\n\nInstalling / Using Java version X\n\u2693\n\n\n\n\nJava 8 is now pre-installed\n\n\nJava 8 is now the pre-installed Java version on the Bitrise.io Linux Stack.\nThis section is kept here for future reference, in case you'd need another Java version.\n\n\n\n\nIf you'd need a Java / JDK version which is not preinstalled on the Android stacks,\nyou can follow this guide to install it. This example will install Java/JDK 8,\nplease adapt it to the version you need.\n\n\nIf your build requires JDK 8, you can install and activate it with a \nScript\n step:\n\n\n#!/bin/bash\nset -ex\n\nadd-apt-repository -y ppa:openjdk-r/ppa\napt-get update -qq\napt-get install -y openjdk-8-jdk\nupdate-java-alternatives -s /usr/lib/jvm/java-1.8.0-openjdk-amd64\necho \ndone\n\n\n\n\nThat's all, just add the \nScript\n step to the Workflow with the content above,\nand start a new build. \nThis \nScript\n step can be the very first step in the Workflow,\nas it does not depend on anything else.", 
            "title": "Android tips and tricks"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#what-are-gradle-tasks-and-how-can-i-get-the-list-of-available-tasks-in-my-project", 
            "text": "A  gradle  task is a process you can run with  gradle .\nYou can run these tasks by running  gradle TASK-TO-RUN  in your Command Line / Terminal.  A standard Android Gradle project includes a lot of tasks by default, things like:   androidDependencies - Displays the Android dependencies of the project.  assemble - Assembles all variants of all applications and secondary packages.  assembleAndroidTest - Assembles all the Test applications.  clean - Deletes the build directory   You can get the base task list by calling  gradle tasks  in your Android app's directory,\nor to see all the available tasks you can call  gradle tasks --all .  Running  gradle tasks  you'll get a list of available Gradle tasks in the format:  $ gradle task\n\n:tasks\n\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nAndroid tasks\n-------------\nandroidDependencies - Displays the Android dependencies of the project.\nsigningReport - Displays the signing info for each variant.\nsourceSets - Prints out all the source sets defined in this project.\n\nBuild tasks\n-----------\nassemble - Assembles all variants of all applications and secondary packages.\nassembleAndroidTest - Assembles all the Test applications.\nassembleDebug - Assembles all Debug builds.\nassembleRelease - Assembles all Release builds.\n...  You can run any of the tasks on bitrise from a  Script  step by calling  gradle task-name-to-run  (for example:  gradle assemle )\nor by using our  Gradle Runner  step ( https://github.com/bitrise-io/steps-gradle-runner )\nand specifying the task as the value of the  gradle_task  input.  Instead of running  gradle  directly, you should run the gradle commands through  gradlew  (the Gradle Wrapper)! \nThe  Gradle Runner  step does this, and as you can see it in the related input description of the step:   Using a Gradle Wrapper (gradlew) is strongly suggested, as the wrapper is what makes sure\nthat the right Gradle version is installed and used for the build.  You can find more information about the Gradle Wrapper (gradlew),\nand about how you can generate one (if you would not have one already) \nin the official guide at:  https://docs.gradle.org/current/userguide/gradle_wrapper.html .", 
            "title": "What are Gradle tasks and how can I get the list of available tasks in my project?"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#how-to-install-an-additional-android-sdk-package", 
            "text": "All you have to do is to add a  Script  step to your workflow,\nand use  android update sdk  to install the additional SDKs or packages you want to.  As an example, to install the Android SDK v18 and the related  build-tools  v18.0.1,\nyou can add a  Script  step (can be the very first step in the Workflow)\nwith the following content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter android-18 | grep 'package installed\necho y | android update sdk --no-ui --all --filter build-tools-18.0.1 | grep 'package installed  The  echo y |  prefix is really important.\nIf you miss to include this your build will hang waiting for your input,\nto accept the license agreements presented during an Android SDK / package install.  You can get the full list of available packages  by running: android list sdk --no-ui --all --extended . You can run this on your own machine if you have  android  in your  $PATH .   Note  You should only install the Android tools which are  not  yet installed.\nCalling  android update  for an already installed tool might fail if it can't create a backup -\nwhich is the case if you use the default  Docker  file system driver ( aufs ).  This issue does not affect builds running on  bitrise.io ,\nas the filesystem driver for  docker  is set to  btrfs  instead of the default  aufs .  You can check all the pre-installed tools in the official Bitrise Android Dockerfile: https://github.com/bitrise-docker/android/blob/master/Dockerfile", 
            "title": "How to install an additional Android SDK package"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#enable-gradle-debug-options", 
            "text": "If your Gradle build fails and you can't find any information in the logs you can try to call it with --stacktrace --debug  flags (ex:  gradle ... --stacktrace --debug ) to get more detailed logs.  In most cases  --stacktrace  should be enough, and the  Gradle Runner  step includes\nthis flag by default.", 
            "title": "Enable Gradle debug options"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#run-a-bitrise-android-build-on-your-macpc-with-docker", 
            "text": "You can run your build on your Mac/PC, inside the same  docker  container you use on  bitrise.io ,\nto fully test your build in an identical environment! You can find the detailed guide here: How to run your build locally in Docker", 
            "title": "Run a bitrise Android build on your Mac/PC, with Docker"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#memory-ram-limit", 
            "text": "You can specify the amount allowed RAM for the JVM by adding two  Environment Variables  to your Workflow,\ne.g. as  App Env Var s:   GRADLE_OPTS: '-Dorg.gradle.jvmargs=\"-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError\"'  _JAVA_OPTIONS: \"-Xms512m -Xmx1024m\"   This method can be used to limit the allowed RAM the Gradle JVM process can use,\nwhich can be useful in case there's not enough RAM available in the system.", 
            "title": "Memory (RAM) limit"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#emulators", 
            "text": "You can use our Android emulator steps to create   boot emulators: http://www.bitrise.io/integrations#?filter=emulator .  First you have to create an emulator with a  Create Android emulator  step,\nwhere you can set the Android version and a couple of other parameters for the new emulator,\nthen you can boot this emulator with the  Start Android emulator  step,\nwhich makes sure that the emulator is booted and ready for subsequent steps.", 
            "title": "Emulators"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#emulator-with-google-apis", 
            "text": "To create an Android Emulator with Google APIs,\nyou can use the following code snippet instead of the  Create Android emulator  step:  #!/bin/bash\nset -ex\n\necho y | android update sdk --no-ui --all --filter addon-google_apis-google-21\n\necho y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-google_apis-21\n\necho no | android create avd --force --name YOUR_EMULATOR_NAME --target  android-21  --abi  google_apis/armeabi-v7a  Note about Android SDK versions:  at this time there are lots of known issues reported for Android Emulators\nwith Android SDK version 22   23 when combined with Google Play services\n(see  1 \nand  2 ).\nThe script above creates an emulator with SDK version 21, which should work properly with Google Play services.  There are possible workarounds for newer versions\n(see  1 \nand  2 ),\nbut that requires some customization in your project.", 
            "title": "Emulator with Google APIs"
        }, 
        {
            "location": "/android/android-tips-and-tricks/#installing-using-java-version-x", 
            "text": "Java 8 is now pre-installed  Java 8 is now the pre-installed Java version on the Bitrise.io Linux Stack.\nThis section is kept here for future reference, in case you'd need another Java version.   If you'd need a Java / JDK version which is not preinstalled on the Android stacks,\nyou can follow this guide to install it. This example will install Java/JDK 8,\nplease adapt it to the version you need.  If your build requires JDK 8, you can install and activate it with a  Script  step:  #!/bin/bash\nset -ex\n\nadd-apt-repository -y ppa:openjdk-r/ppa\napt-get update -qq\napt-get install -y openjdk-8-jdk\nupdate-java-alternatives -s /usr/lib/jvm/java-1.8.0-openjdk-amd64\necho  done  That's all, just add the  Script  step to the Workflow with the content above,\nand start a new build.  This  Script  step can be the very first step in the Workflow,\nas it does not depend on anything else.", 
            "title": "Installing / Using Java version X"
        }, 
        {
            "location": "/android/frequent-android-issues/", 
            "text": "Could not find an android package or you have not accepted the license agreements\n\u2693\n\n\nError\n\u2693\n\n\n A problem occurred configuring project ':lib'.\n   \n You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nor\n\n\nCould not find com.android.support:appcompat-v7:24.2.0.\n\n\n\n\nSolution\n\u2693\n\n\nThe error means that your build requires an Android package which is either not (yet) preinstalled\n(\nyou can see which packages are preinstalled \nhere, on GitHub\n -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package!\n),\n\nor outdated\n.\n\n\nThe solution is quite simple, you just have to install/update the related package(s).\nTo do that add a \nScript\n step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'\n\n\n\n\nIn most cases you don't need all three packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.\n\n\n\n\nWe update the preinstalled Android packages on every weekend\n\n\nso if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.\n\n\n\n\nAlternative solution for the license error\n\u2693\n\n\nAn alternative solution for the \nYou have not accepted the license agreements of the following SDK components\n\nerror, as printed in the log:\n\n\nBefore building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nYou can find more info at the link printed in the log (\nhttp://d.android.com/r/studio-ui/export-licenses.html\n),\nbut in short this can be done by:\n\n\nLocate the licenses on your Mac/PC\n:\n\n\n\n\nIf you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at \nandroid sdk home path\n/licenses\n) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.\n\n\n\n\nCreate an \nandroid-licenses\n directory in the root directory of your git repository,\nand copy the license files into this directory\n,\nthen in your Workflow copy the licenses to the right location using a \nScript\n step.\n\n\nAdd the \nScript\n step right after the \nGit Clone\n step\n (that's when your code is available\non the build virtual machine), with the content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/ \n$ANDROID_HOME/licenses/\n\n\n\n\nThat's all, this script copies the licenses from the \nandroid-licenses\n (from your repository)\ninto the system's Android SDK Home path under \nlicenses\n directory.\n\n\nInstall an additional Android package\n\u2693\n\n\nAn Android package (e.g. a build tool version) is not preinstalled or missing?\nNo problem at all, the solution is quite simple!\n\n\nJust add a \nScript\n step to your Workflow (can be the very first step)\nand run \nandroid sdk update ..\n with the package you want to install.\n\n\nAn example \nScript\n step content which installs \nbuild-tools-24.0.3\n:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter build-tools-24.0.3 | grep 'package installed'\n\n\n\n\nThis should work for any other Android package - you can\nget the full available Android package list by running this on your Mac/PC:\n\n\nandroid list sdk --no-ui --all --extended\n\n\n\n\n\n\nRequest a package to be pre-installed\n\n\nIf we missed an Android package which should be pre-installed,\nfeel free to create a Pull Request here: \nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile", 
            "title": "Frequent Android issues"
        }, 
        {
            "location": "/android/frequent-android-issues/#could-not-find-an-android-package-or-you-have-not-accepted-the-license-agreements", 
            "text": "", 
            "title": "Could not find an android package or you have not accepted the license agreements"
        }, 
        {
            "location": "/android/frequent-android-issues/#error", 
            "text": "A problem occurred configuring project ':lib'.\n     You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  or  Could not find com.android.support:appcompat-v7:24.2.0.", 
            "title": "Error"
        }, 
        {
            "location": "/android/frequent-android-issues/#solution", 
            "text": "The error means that your build requires an Android package which is either not (yet) preinstalled\n( you can see which packages are preinstalled  here, on GitHub  -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package! ), or outdated .  The solution is quite simple, you just have to install/update the related package(s).\nTo do that add a  Script  step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'  In most cases you don't need all three packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.   We update the preinstalled Android packages on every weekend  so if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.", 
            "title": "Solution"
        }, 
        {
            "location": "/android/frequent-android-issues/#alternative-solution-for-the-license-error", 
            "text": "An alternative solution for the  You have not accepted the license agreements of the following SDK components \nerror, as printed in the log:  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  You can find more info at the link printed in the log ( http://d.android.com/r/studio-ui/export-licenses.html ),\nbut in short this can be done by:  Locate the licenses on your Mac/PC :   If you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at  android sdk home path /licenses ) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.   Create an  android-licenses  directory in the root directory of your git repository,\nand copy the license files into this directory ,\nthen in your Workflow copy the licenses to the right location using a  Script  step.  Add the  Script  step right after the  Git Clone  step  (that's when your code is available\non the build virtual machine), with the content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/  $ANDROID_HOME/licenses/  That's all, this script copies the licenses from the  android-licenses  (from your repository)\ninto the system's Android SDK Home path under  licenses  directory.", 
            "title": "Alternative solution for the license error"
        }, 
        {
            "location": "/android/frequent-android-issues/#install-an-additional-android-package", 
            "text": "An Android package (e.g. a build tool version) is not preinstalled or missing?\nNo problem at all, the solution is quite simple!  Just add a  Script  step to your Workflow (can be the very first step)\nand run  android sdk update ..  with the package you want to install.  An example  Script  step content which installs  build-tools-24.0.3 :  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\necho y | android update sdk --no-ui --all --filter build-tools-24.0.3 | grep 'package installed'  This should work for any other Android package - you can\nget the full available Android package list by running this on your Mac/PC:  android list sdk --no-ui --all --extended   Request a package to be pre-installed  If we missed an Android package which should be pre-installed,\nfeel free to create a Pull Request here:  https://github.com/bitrise-docker/android/blob/master/Dockerfile", 
            "title": "Install an additional Android package"
        }, 
        {
            "location": "/docker/", 
            "text": "Docker\n is an ideal tool to create, use and share custom environments,\nas well as to provide a lightweight way to do builds in emphemeral environments (where\nthe environment is destroyed after the build, and a new one is created when the next build starts).\n\n\nUnfortunately Docker can only be used to \nrun\n Linux \nguest\n systems right now,\nand since Windows Server 2016 it's now possible to run Windows docker containers (guest system)\nbut only from Windows Server 2016 and on Windows 10 with Anniversary Update.\n\n\nDocker can be installed on Linux, macOS and Windows, but the environment (container)\nit runs can only be Linux (and Windows, on Windows Server 2016 and on Windows 10 with Anniversary Update).\nLinux containers (guest) can run on all platforms where you can install \ndocker\n (Linux, Windows, macOS, ...).\n\n\nThis is why our Android/Linux environment is provided as a docker image, but not our macOS Stacks.\n\n\nOur Linux/Android stacks have full \ndocker\n support, which means that you can run\nany \ndocker\n command during the build, and when a build runs on a Linux/Android\nstack, the build actually runs inside a docker container (but, for security,\nevery Linux/Android build gets its own Virtual Machine too, in which the build\nruns in a docker container).\n\n\nIt is possible to set a custom docker image for your builds if you select the Linux/Android\nstack, on the app's Bitrise.io page, on the \nSettings\n tab,\n\nbut in most cases you should not change this image\n,\ninstead you should run \ndocker\n commands yourself during the build, e.g. using a \nScript\n step.\n\n\nFor more Docker related information see the sub sections.", 
            "title": "Docker support on bitrise.io"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/", 
            "text": "To be able to run your Linux stack builds locally you'll need \ndocker\n.\n\n\nFor Linux just follow the \nofficial install instructions\n.\n\n\nFor Mac you can use \nDocker for Mac\n,\nwhich is probably the easiest way to get started.\n\n\nFor this example we'll use \nthis Bitrise Android sample project\n.\n\n\n\n\nLarge images ahead\n\n\nThe official Bitrise Docker images are quite large, due to the fact that it includes\na wide variety of preinstalled tools. You'll need at \nleast\n 20-25 GB free disk space!\n\n\n\n\nIf you're not familiar with the \nBitrise CLI\n\nyou should try that first. You don't have to master the CLI,\nif you know what \nbitrise run WORKFLOW\n does, that should be enough for this tutorial.\n\n\nTL;DR;\n\u2693\n\n\nIf you're familiar with \ndocker\n and the \nbitrise\n CLI:\n\n\n\n\nInstall \ndocker\n\n\nMake sure you have your \nbitrise.yml\n in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)\n\n\ncd\n into your repository's directory on your Mac/Linux\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a \nnew directory\n,\n  so that the directory will only contain the files which are committed into the repository!\n\n\n\n\n\n\ndocker pull bitriseio/docker-android:latest\n\n\ndocker run --privileged --env CI=false --volume \"$(pwd):/bitrise/src\" --volume \"/var/run/docker.sock:/var/run/docker.sock\" --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\nKeep reading if you want to read more details and notes about the process and commands!\n\n\nGetting started\n\u2693\n\n\nOpen your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the\n\nbitriseio/docker-android\n docker image.\nYou can find other official Bitrise docker images \non our Docker Hub page\n.\nFor this example we'll use the \nbitriseio/docker-android\n one.\n\n\nDownloading docker images from the \nDocker Hub\n is quite easy:\n\n\ndocker pull bitriseio/docker-android:latest\n\n\n\n\nBe prepared, this can take quite a bit of time, as this image is over 10 GB.\n\nIf the download would fail or hang, you can restart it any time by running\nthe same command again.\n\n\nOnce the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration (\nbitrise.yml\n).\n\n\n\n\nbitrise.yml\n\n\nYou can download your project's \nbitrise.yml\n from the \nWorkflow Editor\n\non \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\n\n\nIn your Terminal / Command Line go to (\ncd\n) the root directory\nof \nyour repository\n, and make sure your \nbitrise.yml\n is at this location.\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a new directory,\nso that the directory will only contain the files which are committed into the repository!\n\nIt's a frequent reproducibility issue that you try to run the commands in your\nnormal working directory, where you most likely have files which are not\ncommitted into your repository, e.g. files which are in \n.gitignore\n.\n\n\nRun your builds\n\u2693\n\n\nThe only thing left to do is to actually run a build:\n\n\ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\nDon't forget to replace \nWORKFLOW\n with the actual ID of your workflow in your \nbitrise.yml\n,\nwith something like \nprimary\n!\n\n\nThis command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available \ninside\n the\ncontainer at the path \n/bitrise/src\n.\n\n\nThe \n--env CI=false\n flag sets the environment variable \nCI\n to \nfalse\n - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the \nGit Clone\n step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a \n--volume\n).\n\n\nThe \n--rm\n flag tells docker to discard the container after the \ndocker run\n\ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the \ndocker run ..\n commands are the files stored at the shared \n--volume\n\n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the \n--rm\n flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container - \nNote: simply running the command again \nwill not\n use the same container,\nbut \nwill create a new one\n!\n\n\nThe \n--privileged\n flag allows access control of the host (!) from the docker container,\nso you should never use this flag unless you trust the docker image you will use!\nThis flag is required for allowing VPNs to work (to change network configs\nof the host) for example.\n\n\nThe \n--volume \"/var/run/docker.sock:/var/run/docker.sock\"\n flag exposes the\ndocker socket from the host for the container - this is required\nif you want to run other docker containers from whithin the container,\nor if you want to run any \ndocker\n command during your build / inside the container.", 
            "title": "How to run your build locally in Docker"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#tldr", 
            "text": "If you're familiar with  docker  and the  bitrise  CLI:   Install  docker  Make sure you have your  bitrise.yml  in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)  cd  into your repository's directory on your Mac/Linux  If you try to reproduce an issue, you should  git clone  your repository into a  new directory ,\n  so that the directory will only contain the files which are committed into the repository!    docker pull bitriseio/docker-android:latest  docker run --privileged --env CI=false --volume \"$(pwd):/bitrise/src\" --volume \"/var/run/docker.sock:/var/run/docker.sock\" --rm bitriseio/docker-android:latest bitrise run WORKFLOW   Keep reading if you want to read more details and notes about the process and commands!", 
            "title": "TL;DR;"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#getting-started", 
            "text": "Open your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the bitriseio/docker-android  docker image.\nYou can find other official Bitrise docker images  on our Docker Hub page .\nFor this example we'll use the  bitriseio/docker-android  one.  Downloading docker images from the  Docker Hub  is quite easy:  docker pull bitriseio/docker-android:latest  Be prepared, this can take quite a bit of time, as this image is over 10 GB. If the download would fail or hang, you can restart it any time by running\nthe same command again.  Once the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration ( bitrise.yml ).   bitrise.yml  You can download your project's  bitrise.yml  from the  Workflow Editor \non  bitrise.io , under the  bitrise.yml  section.   In your Terminal / Command Line go to ( cd ) the root directory\nof  your repository , and make sure your  bitrise.yml  is at this location.  If you try to reproduce an issue, you should  git clone  your repository into a new directory,\nso that the directory will only contain the files which are committed into the repository! \nIt's a frequent reproducibility issue that you try to run the commands in your\nnormal working directory, where you most likely have files which are not\ncommitted into your repository, e.g. files which are in  .gitignore .", 
            "title": "Getting started"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#run-your-builds", 
            "text": "The only thing left to do is to actually run a build:  docker run --privileged --env CI=false --volume  $(pwd):/bitrise/src  --volume  /var/run/docker.sock:/var/run/docker.sock  --rm bitriseio/docker-android:latest bitrise run WORKFLOW  Don't forget to replace  WORKFLOW  with the actual ID of your workflow in your  bitrise.yml ,\nwith something like  primary !  This command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available  inside  the\ncontainer at the path  /bitrise/src .  The  --env CI=false  flag sets the environment variable  CI  to  false  - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the  Git Clone  step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a  --volume ).  The  --rm  flag tells docker to discard the container after the  docker run \ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the  docker run ..  commands are the files stored at the shared  --volume \n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the  --rm  flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container -  Note: simply running the command again  will not  use the same container,\nbut  will create a new one !  The  --privileged  flag allows access control of the host (!) from the docker container,\nso you should never use this flag unless you trust the docker image you will use!\nThis flag is required for allowing VPNs to work (to change network configs\nof the host) for example.  The  --volume \"/var/run/docker.sock:/var/run/docker.sock\"  flag exposes the\ndocker socket from the host for the container - this is required\nif you want to run other docker containers from whithin the container,\nor if you want to run any  docker  command during your build / inside the container.", 
            "title": "Run your builds"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/", 
            "text": "There are two ways to use \ndocker\n on \nbitrise.io\n:\n\n\n\n\nRun \ndocker\n commands yourself, e.g. with a \nScript\n step\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\nThe first option is strongly preferred, you should not change the base environment docker image (on the \nSettings\n tab on bitrise.io)\nunless you really have to!\n Running the \ndocker\n commands yourself during the build is way more flexible,\nand provides an overall better control.\n\n\nRun docker commands during the build\n\u2693\n\n\nThis is the preferred way of using docker\n, both locally and on \nbitrise.io\n.\n\n\nAll you have to do is:\n\n\n\n\nAdd a \nScript\n step to your workflow\n\n\nAnd in the \nScript\n step run the \ndocker\n (or \ndocker-compose\n, etc.) command you want to\n\n\nAdditionally, if you want to run the build on \nbitrise.io\n, make sure that you select\n   a Linux/Android stack for the app; those stacks have \ndocker\n preinstalled and ready to use our of the box.\n\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nRunning docker hello-world\n\u2693\n\n\nFollowing the official \"getting started\" guide for example, to run the \"hello world\" docker image\nyour bitrise build configuration yml can be as simple as:\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run hello-world\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker run hello-world\n\n\n\n\nBuild and run a Dockerfile\n\u2693\n\n\nA bit more complex example, using your own \nDockerfile\n in your repository to define the docker environment:\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker build -t bitrise-minimal-sample .\n            docker run --rm bitrise-minimal-sample\n\n\n\n\nThis workflow will:\n\n\n\n\nGit Clone your repository\n\n\nAnd then run \ndocker build -t bitrise-minimal-sample .\n and \ndocker run --rm bitrise-minimal-sample\n in the repository's root.\n\n\n\n\nIf you have a \nDockerfile\n like this in the root of the repository:\n\n\nFROM alpine:3.3\n\nCMD cat /etc/alpine-release\n\n\n\n\nThe output will be something like:\n\n\n+------------------------------------------------------------------------------+\n| (2) docker run hello-world                                                   |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-11-21T14:28:23Z                                                   |\n+------------------------------------------------------------------------------+\n|                                                                              |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---\n 6c2aa2137d97\nStep 2 : CMD cat /etc/alpine-release\n ---\n Running in 507cfb961cc7\n ---\n 02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | docker run hello-world                                        | 4.24 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nUsing docker-compose\n\u2693\n\n\nThe previous example could be even shorter using \ndocker-compose\n.\n\n\nFor example, if you have a \ndocker-compose.yml\n like this in your repository root (where the \nDockerfile\n is):\n\n\nversion: '2'\nservices:\n  sample-app:\n    build: .\n\n\n\n\nYou can replace the\n\n\ndocker build -t bitrise-minimal-sample .\ndocker run --rm bitrise-minimal-sample\n\n\n\n\nlines with a single \ndocker-compose\n call:\n\n\ndocker-compose run --rm sample-app\n\n\n\n\nDocker compose will build and run the image automatically, you don't have to specify a \n-t\n tag - the \nservices\n\nname will be used by \ndocker-compose\n to tag the image automatically.\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nUsing bitrise.io custom docker image option\n\u2693\n\n\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\n\n\nCustom Android docker image\n\n\nCreating and maintaining your own Android Docker image can be quite time consuming!\n\nIf what you need is just to install a couple of additional tools, you should do that with e.g. a Script step instead!\n\nFor more information see the \nInstall Any Additional Tool\n guide.\n\nYou should only use your own Android docker image if you really have to!\n\n\n\n\nIf you want to run your build in a custom docker environment,\n\nyou should base your own docker image on one of our base Docker images\n, as those have every base tool pre-installed,\nthe standard bitrise directories created, the Environments (like \n$BITRISE_DEPLOY_DIR\n) set,\nand are pre-cached on the build virtual machines.\n\nIf you decide to create your own Docker image please read this guide, from start to finish!\n\n\nFeel free to send Pull Request for our images if you think we missed something, which would be useful for everyone who uses our images!\n\n\nThe bare-minimum base image can be found at:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-bitrise-base/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/bitrise-base\n\n\n\n\nAndroid base image, built on the bare-minimum base image, adding Android specific tools and Envs:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-android/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android\n\n\n\n\nAndroid NDK image, built on the Android base image, adding a pre-installed Android NDK and Envs:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/android-ndk/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android-ndk\n\n\n\n\nAs you can see, if you want to base your own image on one of our available images you can do that by specifying\nit at the very top of your \nDockerfile\n with a \nFROM bitriseio/IMAGE-ID:latest\n,\nfor example: \nFROM bitriseio/docker-bitrise-base:latest\n\n\n\n\nDon't use the \n-alpha\n images for your builds\n\n\nFor every docker image we have on Docker Hub we have a \n-alpha\n post fixed version too.\nthe \n-alpha\n ones are rebuilt frequently and are \nnot precached on \nbitrise.io\n,\nso you should avoid those. The only purpose of the \n-alpha\n images is to provide\nready to use test environments for us, before we would publish a non \n-alpha\n version.\n\n\n\n\nImportant\n: you have to use the \nDocker Hub ID\n of the image you want to use as\nthe base image (ex: \nbitriseio/docker-android\n, \nbitriseio/android-ndk\n or \nbitriseio/docker-bitrise-base\n).\n\n\nYou can find an example project which extends our Android image by\ninstalling additional SDKs at: \nhttps://github.com/viktorbenei/docker-bitrise-android-ext\n\n\nCreate the Docker Image, to be able to use it on bitrise.io\n\u2693\n\n\nYou can create it any way you want to and push it into any Docker registry.\nThe only requirement is that it have to be a \npublic\n image, private images are not (yet) supported.\n\n\nWe'll show a quick example with GitHub and Docker Hub, using Docker Hub's\nautomatic builds (it'll automatically create a new Docker image for you every time you change your Dockerfile on GitHub).\n\n\nWhat you need for this guide:\n\n\n\n\nGitHub account\n\n\nDocker Hub account\n\n\n\n\nFirst, you have to create a new repository on GitHub, and add at least a \nDockerfile\n, with a \nFROM bitriseio/IMAGE-ID:latest\n\nstatement at the top of the \nDockerfile\n, like the one you can see at:\n\nhttps://github.com/viktorbenei/docker-bitrise-android-ext/blob/master/Dockerfile#L1\n\n(\ndon't forget to commit \n push it!\n).\n\n\n\n\nWhich image to use? - Performance notes\n\n\nIf you don't need the Android tools you should base your image on the \nbitrise-base\n image\nand install just the things you need. If you really need the Android tools then you should use\nthe \nandroid\n image, and you should only use the \nandroid-ndk\n image as the base image if you actually need the NDK.\n\n\nFrom a performance perspective: you should install the least amount of tools in your image,\nas it'll make your image smaller, which means faster download \n build start.\n\n\n\n\nYou now have the description of your image. Go to \nDocker Hub\n, click \nCreate\n in the top menu and select \nCreate Automated Build\n.\nIf you haven't linked your GitHub account to your Docker Hub account you'll have to do it now.\nOnce the link between GitHub and Docker Hub is established you'll see a list of your GitHub repositories.\nSelect the repository you just created (the one with the \nDockerfile\n in its root), and follow the guide.\n\n\nCongratulation! You now have a fully automatic Docker image creation, based on your GitHub repository!\nThis means that every time you change the repository, commit \n push the change Docker Hub will pick up the new \nDockerfile\n and will build a Docker image for you.\n\n\nOne more thing you should do is to Link your image to our base image you use, so that every time our base image is updated your image will update as well.\n\n\nThis is especially important if you base your Docker image on one of our Android images.\nThose images are quite large, and if we have to do a change in the base Docker image and you don't build a new image,\n\nyour image will require the old base image, which won't be pre-cached\n on the build Virtual Machines anymore!\nThis means that to \ndocker pull\n your image it won't be enough to download just the diffs anymore,\n\nthe whole image will have to be pulled\n which might even result in errors like \"no space left on the device\" -\nto \ndocker pull\n the base Android image, if no cache is available, it already requires ~10GB disk space, and the Android NDK image is even larger!\n\n\nLink your image to one of ours\n: you can do this on DockerHub, on the \nBuild Settings\n tab,\nunder the \nRepository Links\n section. Just specify the ID of our Docker image (ex: \nbitriseio/docker-android\n),\nsave the link and the next time the specified image is updated your image will be re-built as well (using the \nDockerfile\n in \nyour\n repository).\n\n\nUse your own (public) Docker image for your builds\n\u2693\n\n\nOnce you have your own Docker image and you verified that it can be \ndocker pull\n-ed,\nyou can set its ID on the \nSettings\n tab of your app on \nbitrise.io\n,\nin the \nStack Selector\n section.\n\n\nYou just have to copy paste the ID of your image (e.g. \nbitriseio/docker-bitrise-base\n)\ninto the \nDocker image to use\n field and click the \nSave\n button.\nYour next build will use the image you specified.", 
            "title": "Use your own Docker image"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#run-docker-commands-during-the-build", 
            "text": "This is the preferred way of using docker , both locally and on  bitrise.io .  All you have to do is:   Add a  Script  step to your workflow  And in the  Script  step run the  docker  (or  docker-compose , etc.) command you want to  Additionally, if you want to run the build on  bitrise.io , make sure that you select\n   a Linux/Android stack for the app; those stacks have  docker  preinstalled and ready to use our of the box.   You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Run docker commands during the build"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#running-docker-hello-world", 
            "text": "Following the official \"getting started\" guide for example, to run the \"hello world\" docker image\nyour bitrise build configuration yml can be as simple as:  ---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch:  * \n  workflow: primary\n- pull_request_source_branch:  * \n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run hello-world\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker run hello-world", 
            "title": "Running docker hello-world"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#build-and-run-a-dockerfile", 
            "text": "A bit more complex example, using your own  Dockerfile  in your repository to define the docker environment:  ---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch:  * \n  workflow: primary\n- pull_request_source_branch:  * \n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker build -t bitrise-minimal-sample .\n            docker run --rm bitrise-minimal-sample  This workflow will:   Git Clone your repository  And then run  docker build -t bitrise-minimal-sample .  and  docker run --rm bitrise-minimal-sample  in the repository's root.   If you have a  Dockerfile  like this in the root of the repository:  FROM alpine:3.3\n\nCMD cat /etc/alpine-release  The output will be something like:  +------------------------------------------------------------------------------+\n| (2) docker run hello-world                                                   |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-11-21T14:28:23Z                                                   |\n+------------------------------------------------------------------------------+\n|                                                                              |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---  6c2aa2137d97\nStep 2 : CMD cat /etc/alpine-release\n ---  Running in 507cfb961cc7\n ---  02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | docker run hello-world                                        | 4.24 sec |\n+---+---------------------------------------------------------------+----------+  You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Build and run a Dockerfile"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#using-docker-compose", 
            "text": "The previous example could be even shorter using  docker-compose .  For example, if you have a  docker-compose.yml  like this in your repository root (where the  Dockerfile  is):  version: '2'\nservices:\n  sample-app:\n    build: .  You can replace the  docker build -t bitrise-minimal-sample .\ndocker run --rm bitrise-minimal-sample  lines with a single  docker-compose  call:  docker-compose run --rm sample-app  Docker compose will build and run the image automatically, you don't have to specify a  -t  tag - the  services \nname will be used by  docker-compose  to tag the image automatically.  You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Using docker-compose"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#using-bitriseio-custom-docker-image-option", 
            "text": "Use a Linux/Android stack and set the environment docker image for the app ( Settings  tab)    Custom Android docker image  Creating and maintaining your own Android Docker image can be quite time consuming! If what you need is just to install a couple of additional tools, you should do that with e.g. a Script step instead! \nFor more information see the  Install Any Additional Tool  guide. You should only use your own Android docker image if you really have to!   If you want to run your build in a custom docker environment, you should base your own docker image on one of our base Docker images , as those have every base tool pre-installed,\nthe standard bitrise directories created, the Environments (like  $BITRISE_DEPLOY_DIR ) set,\nand are pre-cached on the build virtual machines. If you decide to create your own Docker image please read this guide, from start to finish!  Feel free to send Pull Request for our images if you think we missed something, which would be useful for everyone who uses our images!  The bare-minimum base image can be found at:   Docker Hub:  https://hub.docker.com/r/bitriseio/docker-bitrise-base/  GitHub:  https://github.com/bitrise-docker/bitrise-base   Android base image, built on the bare-minimum base image, adding Android specific tools and Envs:   Docker Hub:  https://hub.docker.com/r/bitriseio/docker-android/  GitHub:  https://github.com/bitrise-docker/android   Android NDK image, built on the Android base image, adding a pre-installed Android NDK and Envs:   Docker Hub:  https://hub.docker.com/r/bitriseio/android-ndk/  GitHub:  https://github.com/bitrise-docker/android-ndk   As you can see, if you want to base your own image on one of our available images you can do that by specifying\nit at the very top of your  Dockerfile  with a  FROM bitriseio/IMAGE-ID:latest ,\nfor example:  FROM bitriseio/docker-bitrise-base:latest   Don't use the  -alpha  images for your builds  For every docker image we have on Docker Hub we have a  -alpha  post fixed version too.\nthe  -alpha  ones are rebuilt frequently and are  not precached on  bitrise.io ,\nso you should avoid those. The only purpose of the  -alpha  images is to provide\nready to use test environments for us, before we would publish a non  -alpha  version.   Important : you have to use the  Docker Hub ID  of the image you want to use as\nthe base image (ex:  bitriseio/docker-android ,  bitriseio/android-ndk  or  bitriseio/docker-bitrise-base ).  You can find an example project which extends our Android image by\ninstalling additional SDKs at:  https://github.com/viktorbenei/docker-bitrise-android-ext", 
            "title": "Using bitrise.io custom docker image option"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#create-the-docker-image-to-be-able-to-use-it-on-bitriseio", 
            "text": "You can create it any way you want to and push it into any Docker registry.\nThe only requirement is that it have to be a  public  image, private images are not (yet) supported.  We'll show a quick example with GitHub and Docker Hub, using Docker Hub's\nautomatic builds (it'll automatically create a new Docker image for you every time you change your Dockerfile on GitHub).  What you need for this guide:   GitHub account  Docker Hub account   First, you have to create a new repository on GitHub, and add at least a  Dockerfile , with a  FROM bitriseio/IMAGE-ID:latest \nstatement at the top of the  Dockerfile , like the one you can see at: https://github.com/viktorbenei/docker-bitrise-android-ext/blob/master/Dockerfile#L1 \n( don't forget to commit   push it! ).   Which image to use? - Performance notes  If you don't need the Android tools you should base your image on the  bitrise-base  image\nand install just the things you need. If you really need the Android tools then you should use\nthe  android  image, and you should only use the  android-ndk  image as the base image if you actually need the NDK.  From a performance perspective: you should install the least amount of tools in your image,\nas it'll make your image smaller, which means faster download   build start.   You now have the description of your image. Go to  Docker Hub , click  Create  in the top menu and select  Create Automated Build .\nIf you haven't linked your GitHub account to your Docker Hub account you'll have to do it now.\nOnce the link between GitHub and Docker Hub is established you'll see a list of your GitHub repositories.\nSelect the repository you just created (the one with the  Dockerfile  in its root), and follow the guide.  Congratulation! You now have a fully automatic Docker image creation, based on your GitHub repository!\nThis means that every time you change the repository, commit   push the change Docker Hub will pick up the new  Dockerfile  and will build a Docker image for you.  One more thing you should do is to Link your image to our base image you use, so that every time our base image is updated your image will update as well.  This is especially important if you base your Docker image on one of our Android images.\nThose images are quite large, and if we have to do a change in the base Docker image and you don't build a new image, your image will require the old base image, which won't be pre-cached  on the build Virtual Machines anymore!\nThis means that to  docker pull  your image it won't be enough to download just the diffs anymore, the whole image will have to be pulled  which might even result in errors like \"no space left on the device\" -\nto  docker pull  the base Android image, if no cache is available, it already requires ~10GB disk space, and the Android NDK image is even larger!  Link your image to one of ours : you can do this on DockerHub, on the  Build Settings  tab,\nunder the  Repository Links  section. Just specify the ID of our Docker image (ex:  bitriseio/docker-android ),\nsave the link and the next time the specified image is updated your image will be re-built as well (using the  Dockerfile  in  your  repository).", 
            "title": "Create the Docker Image, to be able to use it on bitrise.io"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#use-your-own-public-docker-image-for-your-builds", 
            "text": "Once you have your own Docker image and you verified that it can be  docker pull -ed,\nyou can set its ID on the  Settings  tab of your app on  bitrise.io ,\nin the  Stack Selector  section.  You just have to copy paste the ID of your image (e.g.  bitriseio/docker-bitrise-base )\ninto the  Docker image to use  field and click the  Save  button.\nYour next build will use the image you specified.", 
            "title": "Use your own (public) Docker image for your builds"
        }, 
        {
            "location": "/xamarin/", 
            "text": "With \nXamarin\n integration you can now build your\niOS and Android Xamarin applications on \nBitrise\n.\n\n\nWe have listed a couple of tutorials to help you get started, but if you get stuck,\nfeel free to \ncontact us\n!\n\n\nXamarin tutorials\n\u2693\n\n\nHighlighted\n:\nA great overview and a detailed \"getting started\" tutorial: check out \nJames Montemagno\n's\nvideo session about setting up Xamarin apps on Bitrise here: \nhttps://www.youtube.com/watch?v=1UeNajpjIXY\n\n\nGetting Started\n\u2693\n\n\n\n\nConnect your Xamarin account to Bitrise\n \n\n\nCreating your first App on Bitrise\n\n\nRestore NuGet packages and Xamarin Components\n\n\n\n\nCode Signing\n\u2693\n\n\n\n\niOS code signing\n\n\nAndroid code signing\n \n\n\n\n\nAdvanced\n\u2693\n\n\n\n\nDeploy your Xamarin app\n\n\nAdd Unit Test to your Xamarin app\n\n\nRun your tests in the Xamarin Test Cloud\n\n\nAdd custom sources to NuGet\n \n\n\nBuild with FAKE (F# Make)\n\n\n\n\n\n\nCommunity created tutorials\n\n\nFor more, community created tutorials, see the Xamarin section on the\n\nCommunity Created Tutorials\n page.", 
            "title": "About Xamarin"
        }, 
        {
            "location": "/xamarin/#xamarin-tutorials", 
            "text": "Highlighted :\nA great overview and a detailed \"getting started\" tutorial: check out  James Montemagno 's\nvideo session about setting up Xamarin apps on Bitrise here:  https://www.youtube.com/watch?v=1UeNajpjIXY", 
            "title": "Xamarin tutorials"
        }, 
        {
            "location": "/xamarin/#getting-started", 
            "text": "Connect your Xamarin account to Bitrise    Creating your first App on Bitrise  Restore NuGet packages and Xamarin Components", 
            "title": "Getting Started"
        }, 
        {
            "location": "/xamarin/#code-signing", 
            "text": "iOS code signing  Android code signing", 
            "title": "Code Signing"
        }, 
        {
            "location": "/xamarin/#advanced", 
            "text": "Deploy your Xamarin app  Add Unit Test to your Xamarin app  Run your tests in the Xamarin Test Cloud  Add custom sources to NuGet    Build with FAKE (F# Make)    Community created tutorials  For more, community created tutorials, see the Xamarin section on the Community Created Tutorials  page.", 
            "title": "Advanced"
        }, 
        {
            "location": "/xamarin/connect-your-xamarin-account-to-bitrise/", 
            "text": "A connected Xamarin account is required if you use Xamarin Components\nfor example, which requires Xamarin authentication.\n\n\nTo connect your Xamarin account to your Bitrise.io account,\nopen your \nAccount Settings page on bitrise.io\n,\nand click the toggle in the left sidebar where you see \nXamarin\n.\n\n\nHere you can type in your username and password.\nPlease note that \nwe won't store your username or password\n,\nwe send an authentication request with these information to the Xamarin\nserver and store only the returned authentication token.\n\n\nIf you'd want to remove the connection just turn off the toggle.\n\n\nActivating the Xamarin connection for an App on Bitrise.io\n\u2693\n\n\nTo select/activate a Xamarin account connection for an App,\ngo to the app's page on \nbitrise.io\n, select the \nTeam\n tab,\nand set the \nbitrise.io\n user in the \nService credential User\n section.", 
            "title": "Connect your Xamarin account to Bitrise"
        }, 
        {
            "location": "/xamarin/connect-your-xamarin-account-to-bitrise/#activating-the-xamarin-connection-for-an-app-on-bitriseio", 
            "text": "To select/activate a Xamarin account connection for an App,\ngo to the app's page on  bitrise.io , select the  Team  tab,\nand set the  bitrise.io  user in the  Service credential User  section.", 
            "title": "Activating the Xamarin connection for an App on Bitrise.io"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/", 
            "text": "To restore your \nNuGet\n packages or \nXamarin Components\n\nsimply navigate to the app on \nbitrise.io\n,\nand select the \nWorkflow\n tab to open the Workflow Editor.\n\n\nRestore Nuget packages\n\u2693\n\n\nAdd the \nNuGet Restore\n step to your workflow, after the \nGit Clone\n step.\nBy default the step will use the same solution file that you have provided when you added your app,\nbut you can simply modify it if you need to.\n\n\nRestore Xamarin Components\n\u2693\n\n\nAdd the \nXamarin Components Restore\n step, after the \nXamarin User Management\n step.\n\n\nXamarin Components requires Xamarin authentication - for more information\nplease see the \nConnect your Xamarin account to Bitrise\n guide!", 
            "title": "Restore NuGet packages and Xamarin Components"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/#restore-nuget-packages", 
            "text": "Add the  NuGet Restore  step to your workflow, after the  Git Clone  step.\nBy default the step will use the same solution file that you have provided when you added your app,\nbut you can simply modify it if you need to.", 
            "title": "Restore Nuget packages"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/#restore-xamarin-components", 
            "text": "Add the  Xamarin Components Restore  step, after the  Xamarin User Management  step.  Xamarin Components requires Xamarin authentication - for more information\nplease see the  Connect your Xamarin account to Bitrise  guide!", 
            "title": "Restore Xamarin Components"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/", 
            "text": "After successfully adding your Xamarin application we will create a default workflow (build configuration) for you.\nThis workflow includes a \nDeploy to bitrise.io\n step by default.\n\n\nBuilding the default workflow will checkout your git repository,\narchive your application and move all the generated applications ( \nipa\n / \napk\n ) to the deployment folder.\nAfter the archive the \nDeploy to bitrise.io\n step will upload these files to Bitrise.\n\n\nWe will not just upload your application,\nbut send out an email to your team as well.\nThey can simply open the email from their mobile device and install the application from there.\nAlso you can send out the build to any tester by providing their email address.\n\n\nBut what if you are already using or want to use another deployment service?\n\u2693\n\n\nBesides the default Bitrise deployment we have \ndozens of other services integrated\n to Bitrise.\nYou can simply modify your workflow and add the ones you would like to,\nlike \nHockeyApp\n, \nAppaloosa\n\nor \nTestFairy\n -\njust filter by the \ndeploy\n tag in the list to see all the available deployment steps.\n\n\nSimply add the integration Step you want to use instead of the \nDeploy to bitrise.io\n step or after that\n(but in any case after the \nXamarin Archive\n step, as that's the step which generates the\ndeployable artifact - \n.ipa\n, \n.apk\n, ...), and fill out the parameters of the step.\n\n\nThe next time you start a build your app will be deployed to the service of your choice!\n\n\nCode signing\n\u2693\n\n\nXamarin.Android\n\u2693\n\n\nFor Xamarin Android project code signing see the \nCreate signed APK on bitrise.io\n tutorial.\n\n\nXamarin.iOS\n\u2693\n\n\nWork in progress\n - this section will be updated soon.\n\n\nRight now the best way to get started with Xamarin.iOS code signing\nis to run \ncodesigndoc\n\nand upload the files it generates, or to manually upload the code signing\nfiles you use locally.\n\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.", 
            "title": "Deploy your Xamarin app"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#but-what-if-you-are-already-using-or-want-to-use-another-deployment-service", 
            "text": "Besides the default Bitrise deployment we have  dozens of other services integrated  to Bitrise.\nYou can simply modify your workflow and add the ones you would like to,\nlike  HockeyApp ,  Appaloosa \nor  TestFairy  -\njust filter by the  deploy  tag in the list to see all the available deployment steps.  Simply add the integration Step you want to use instead of the  Deploy to bitrise.io  step or after that\n(but in any case after the  Xamarin Archive  step, as that's the step which generates the\ndeployable artifact -  .ipa ,  .apk , ...), and fill out the parameters of the step.  The next time you start a build your app will be deployed to the service of your choice!", 
            "title": "But what if you are already using or want to use another deployment service?"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#code-signing", 
            "text": "", 
            "title": "Code signing"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#xamarinandroid", 
            "text": "For Xamarin Android project code signing see the  Create signed APK on bitrise.io  tutorial.", 
            "title": "Xamarin.Android"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#xamarinios", 
            "text": "Work in progress  - this section will be updated soon.  Right now the best way to get started with Xamarin.iOS code signing\nis to run  codesigndoc \nand upload the files it generates, or to manually upload the code signing\nfiles you use locally.  Code signing files can be uploaded to  bitrise.io \nin the app's Workflow Editor, under the  Code signing   Files  section of the editor.", 
            "title": "Xamarin.iOS"
        }, 
        {
            "location": "/xamarin/add-unit-test-to-your-xamarin-app/", 
            "text": "Work in progress\n\n\nPrevious, outdated tutorial can be found at: http://bitrise.readme.io/v1.0/docs/add-unit-test-to-your-xamarin-app .", 
            "title": "Add UITest to your Xamarin app"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/", 
            "text": "To add \nXamarin Test Cloud\n to your Xamarin application,\ngo to your app's \nWorkflow\n tab on \nbitrise.io\n to open the Workflow Editor.\n\n\nXamarin Test Cloud for iOS apps\n\u2693\n\n\nIn the Workflow Editor \nadd\n\nthe \nXamarin Test Cloud for iOS\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use\n\n\n\n\nXamarin Test Cloud for Android apps\n\u2693\n\n\nIn the Workflow Editor \nadd\n\nadd the \nXamarin Test Cloud for Android\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use", 
            "title": "Run your tests in the Xamarin Test Cloud"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/#xamarin-test-cloud-for-ios-apps", 
            "text": "In the Workflow Editor  add \nthe  Xamarin Test Cloud for iOS  step to the workflow.\nAfter adding the step you should set the following parameters:   Path to Xamarin UITest Project : The relative path to your test project  (relative to the repository's root directory)  User email : Your Xamarin user's email address  Api key : Your Xamarin Test Cloud API key  Device selection id : The device id that you would like to use", 
            "title": "Xamarin Test Cloud for iOS apps"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/#xamarin-test-cloud-for-android-apps", 
            "text": "In the Workflow Editor  add \nadd the  Xamarin Test Cloud for Android  step to the workflow.\nAfter adding the step you should set the following parameters:   Path to Xamarin UITest Project : The relative path to your test project  (relative to the repository's root directory)  User email : Your Xamarin user's email address  Api key : Your Xamarin Test Cloud API key  Device selection id : The device id that you would like to use", 
            "title": "Xamarin Test Cloud for Android apps"
        }, 
        {
            "location": "/xamarin/add-custom-sources-to-nuget/", 
            "text": "If you are using third-party NuGet packages in your application\nyou have to add these sources to your NuGet package sources.\n\n\nSimply add a new \nScript\n step to your workflow with the following bash script as the content:\n\n\n#!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL\n\n\n\n\n\n\nWarning\n\n\nDon't forget to update the \nNAME_FOR_SOURCE\n and \nSOURCE_URL\n parameters,\nand make sure to place the \nScript\n step before the \nNuGet Restore Step\n.\n\n\n\n\nCustom NuGet source with credentials\n\u2693\n\n\nIf you need to set credentials for your NuGet source you can modify the \nScript\n above in the following way:\n\n\n#!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL -UserName NUGET_USERNAME -Password NUGET_PASSWORD", 
            "title": "Add custom sources to NuGet"
        }, 
        {
            "location": "/xamarin/add-custom-sources-to-nuget/#custom-nuget-source-with-credentials", 
            "text": "If you need to set credentials for your NuGet source you can modify the  Script  above in the following way:  #!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL -UserName NUGET_USERNAME -Password NUGET_PASSWORD", 
            "title": "Custom NuGet source with credentials"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/", 
            "text": "Having more time to be creative is the key to great inventions.\nWe believe that giving developers the chance to work without distractions is the most important thing that can lead to extraordinary creations.\nOur mission is to provide a platform that lets you concentrate on the process of creation,\ninstead of the administrative tasks that get in the way of it.\n\n\nThat's why we created Bitrise. But we're not alone in this!\nWe love how \nFelix Krause\n sought to solve this problem by\ncreating \nfastlane\n. So by the combined force of earth, water, fire and wind\u2026\nwe integrated the whole \nfastlane toolkit\n - booyah! How cool is that!\n\n\n\n\nBitrise offline CLI\n\n\nWe have an open source, offline CLI, which can be used in a similar way as \nfastlane\n.\nIf you're interested, you can find the CLI's website \nhere\n,\nand its GitHub repository \nhere\n.\nYou can use this CLI to run your bitrise configurations locally, which can\ninclude runing \nfastlane\n too as part of the build, as described below ;)\n\n\n\n\nWhat is fastlane?\n\u2693\n\n\nfastlane\n lets you define and run your deployment pipelines for different environments.\nIt helps you unify and automate your app's release process.\n\nfastlane\n connects all \nfastlane tools\n and third party tools, like CocoaPods and xctool.\n\n\nfastlane\n is a collection of ruby gems that cover the most usual tasks required during iOS app development\nand upload or update to the App Store.\n\n\nHow to get started?\n\u2693\n\n\nUsing \nfastlane\n for your workflow is easy as pie. Just \nadd the \nFastlane\n step to your\nworkflow\n,\nafter the \nGit Clone\n step (and any other dependency step).\n\n\n\n\nNote\n\n\nYou should also add/keep the \nCertificate and profile installer\n step in the workflow,\nto download your \n.p12 Certificates\n and \nProvisioning Profiles\n uploaded to \nbitrise.io\n\nand to install them. \nEven if you don't upload your files to \nbitrise.io\n\nand instead you use a fastlane tool to manage your code signing files you should\nstill keep this step in the workflow\n. Read more about \niOS Code Signing using\nthird party tools\n.\n\n\n\n\nWith adding the \nfastlane\n step we ensure that you are running on the latest \nfastlane\n version,\nas it is pre-installed on all our VMs.\nInside the step you can set the \nfastlane\n action and we will run it automatically every time you push a new code change.\n\n\nFor more configuration options see the \nFastlane\n step's description in the Workflow Editor!\n\n\n\n\nNote\n\n\nIf you want to use \nbitrise.io\n to store your code signing files,\nyou should just follow the \niOS Code Signing guide here\n.\n\n\n\n\nWhat's next?\n\u2693\n\n\nfastlane\n's greatness comes from its ability to define different lanes for your different deployment needs - hence the name.\nYou can combine this with Bitrise and run separate lanes for separate branches, automatically.\nFor example you can run a lane for every code push onto the \nmaster\n branch to update your\nscreenshots and metadata on the App Store and to release the distribution version,\nand a separate lane for the \ndevelop\n branch to deploy your test releases\nand all the others to ensure that nobody has broken anything.\nYou can simply clone the workflow as many times as you want to,\nand use the \nTrigger\n feature of \nbitrise.io\n to define\nwhich Workflow to be selected for this branch / tag / pull request.\nYou can find more information about the Triggers feature in the\n\nControl what to build when, with the Trigger Map\n guide.\n\n\nWe hope that you are as happy as we are to have this amazing tool inside Bitrise. Go ahead and try it out!\n\n\nAnd as always, happy building!", 
            "title": "fastlane tools integration"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#what-is-fastlane", 
            "text": "fastlane  lets you define and run your deployment pipelines for different environments.\nIt helps you unify and automate your app's release process. fastlane  connects all  fastlane tools  and third party tools, like CocoaPods and xctool.  fastlane  is a collection of ruby gems that cover the most usual tasks required during iOS app development\nand upload or update to the App Store.", 
            "title": "What is fastlane?"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#how-to-get-started", 
            "text": "Using  fastlane  for your workflow is easy as pie. Just  add the  Fastlane  step to your\nworkflow ,\nafter the  Git Clone  step (and any other dependency step).   Note  You should also add/keep the  Certificate and profile installer  step in the workflow,\nto download your  .p12 Certificates  and  Provisioning Profiles  uploaded to  bitrise.io \nand to install them.  Even if you don't upload your files to  bitrise.io \nand instead you use a fastlane tool to manage your code signing files you should\nstill keep this step in the workflow . Read more about  iOS Code Signing using\nthird party tools .   With adding the  fastlane  step we ensure that you are running on the latest  fastlane  version,\nas it is pre-installed on all our VMs.\nInside the step you can set the  fastlane  action and we will run it automatically every time you push a new code change.  For more configuration options see the  Fastlane  step's description in the Workflow Editor!   Note  If you want to use  bitrise.io  to store your code signing files,\nyou should just follow the  iOS Code Signing guide here .", 
            "title": "How to get started?"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#whats-next", 
            "text": "fastlane 's greatness comes from its ability to define different lanes for your different deployment needs - hence the name.\nYou can combine this with Bitrise and run separate lanes for separate branches, automatically.\nFor example you can run a lane for every code push onto the  master  branch to update your\nscreenshots and metadata on the App Store and to release the distribution version,\nand a separate lane for the  develop  branch to deploy your test releases\nand all the others to ensure that nobody has broken anything.\nYou can simply clone the workflow as many times as you want to,\nand use the  Trigger  feature of  bitrise.io  to define\nwhich Workflow to be selected for this branch / tag / pull request.\nYou can find more information about the Triggers feature in the Control what to build when, with the Trigger Map  guide.  We hope that you are as happy as we are to have this amazing tool inside Bitrise. Go ahead and try it out!  And as always, happy building!", 
            "title": "What's next?"
        }, 
        {
            "location": "/fastlane/how-to-configure-fastlane-match-for-bitrise/", 
            "text": "If you want to use \nfastlane match\n\nin your \nbitrise.io\n build you only have to do three things:\n\n\n\n\nMake sure that a single SSH key can be used to \ngit clone\n both your main repository (the one\n   you register on \nbitrise.io\n) and the \nmatch\n repository.\n   You can find more info \nin this guide\n.\n\n\nAdd an environment variable \nMATCH_PASSWORD\n, as\n   \ndescribed in \nmatch\n's docs\n,\n   to specify the \nEncryption password\n you used for \nmatch\n.\n   On \nbitrise.io\n you should add this as a \nSecret Environment Variable\n,\n   in the \nWorkflow Editor\n.\n   \nMake sure to \ndisable\n the \nReplace variables in input?\n option of the environment\n   variable, to not to cause issues when the value includes the \n$\n (dollar) sign, which is used\n   for environment variable expansion.\n\n   \n\n\nMake sure to use \nmatch\n's \nreadonly\n mode, or else \nmatch\n will try to connect\n   to the Apple Developer Portal, which requires further authorization (providing additional\n   username and password for Apple Dev Portal login)!\n\n\nIf you use \nmatch\n in your \nFastfile\n or \nfastlane\n config: \nmatch(app_identifier: \"my.domain\", type: \"appstore\", readonly: true)\n\n\nIf you use it as a command line tool: \nmatch development --readonly\n\n\nMore info in \nmatch\n's \nofficial readme / docs\n\n\n\n\n\n\n\n\nThat's all, you can now enjoy the utility of \nmatch\n, automated with \nbitrise.io\n \ud83d\ude80", 
            "title": "How to configure fastlane match for Bitrise"
        }, 
        {
            "location": "/tutorials/community-created/", 
            "text": "If you write a tutorial or blog post about Bitrise feel free to\n\nadd it to this list yourself\n\nor \ncontact us\n and we'll add it for you!\n\n\nEnglish\n\u2693\n\n\niOS\n\u2693\n\n\n\n\nLet's automate Swift builds with Bitrise\n\n\nThe Road to Bitrise\n - \nswitching from Jenkins\n\n\nBitrise and Carthage - a simple guide about how to use Carthage on Bitrise\n\n\n\n\nAndroid\n\u2693\n\n\n\n\nHow to automate Android build process on Bitrise CI (part 1)\n\n\nHow to automate Android build process on Bitrise CI (part 2)\n\n\n\n\nXamarin\n\u2693\n\n\n\n\njfarrell.net\n tutorial series\n\n\nWelcome to Bitrise\n\n\nGetting Started with Bitrise\n\n\nUnderstanding Workflows\n\n\n\n\n\n\nXamarin project setup on Bitrise.io\n - \nyoutube video\n\n\nXamarin Continuous Integration with Bitrise.io\n - \nXamarin project setup guide with Code Signing notes\n\n\n(Xamarin) Continuous Integration and Deployment with Bitrise\n - \ngetting started guide\n\n\nMotz Codes Live: Continuous Integration \n Deployment for Xamarin with Bitrise\n - \nyoutube video, detailed guide\n\n\n\n\nReact Native\n\u2693\n\n\n\n\nContinuous Integration for React Native Apps With Fastlane and Bitrise (iOS)\n\n\nSnowflake: React Native app Continuous Integration with Bitrise.io\n - \ndetailed setup guide with youtube videos\n\n\n\n\nCordova\n\u2693\n\n\n\n\nHow to build Cordova-based Android project on bitrise.io\n\n\n\n\nmacOS app\n\u2693\n\n\n\n\nContinuous happiness for Mac\n - \nbuild your Mac projects on Bitrise\n\n\n\n\nOther\n\u2693\n\n\n\n\nMobile Continuous Delivery With Bitrise | Benoit Pasquier\n - \nintro\n\n\nI was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.\n\n\nThe Trials of Mobile Automation at InVision\n - \nChatOps with Slack and Bitrise\n\n\nHow to send commit changes by email once CI build passes?\n\n\nContinuous integration made easy with Bitrise\n - \nintro to Step development\n\n\n\n\nJapanese\n\u2693\n\n\n\n\nBitrise\u3067iTunesConnect\u306b\u81ea\u52d5\u3067ipa\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\niOS\u30ea\u30ea\u30fc\u30b9\u624b\u9806\n - \nAutomate the deployment of iOS apps to iTunesConnect\n\n\nBitrise\u306eScheduled Build\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u304c\u8a70\u307e\u308b\u554f\u984c\u3092\u6539\u5584\u3059\u308b\n - \nUse Bitrise's Scheduled Build to optimize build times\n\n\nBITRISE\u3092\u7528\u3044\u305fAndroid\u30a2\u30d7\u30ea\u306e\u81ea\u52d5\u914d\u5e03\n - \nAutomatic distribution of Android apps using Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nDetailed introduction guide\n\n\niOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy iOS apps to Deploygate\n\n\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy Android apps to Deploygate\n\n\nBITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n - \nSlideShare\n\n\nCircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f\n - \nMigrating a CircleCI configuration to Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2\n - \nNotes about using Bitrise for iOS Continuous Integration\n\n\n\u4ffa\u7684Bitrise\u6d3b\u7528\u8853\n\n\niOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nSlideShare\n\n\nBitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b\n - \nBitrise + fastlane, automate testing \n deployment (to Crashlytics) of iOS apps\n\n\n\n\nPersian\n\u2693\n\n\n\n\n\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise\n - \nVideo tutorial about CI/CD with Bitrise", 
            "title": "Community Created Tutorials"
        }, 
        {
            "location": "/tutorials/community-created/#english", 
            "text": "", 
            "title": "English"
        }, 
        {
            "location": "/tutorials/community-created/#ios", 
            "text": "Let's automate Swift builds with Bitrise  The Road to Bitrise  -  switching from Jenkins  Bitrise and Carthage - a simple guide about how to use Carthage on Bitrise", 
            "title": "iOS"
        }, 
        {
            "location": "/tutorials/community-created/#android", 
            "text": "How to automate Android build process on Bitrise CI (part 1)  How to automate Android build process on Bitrise CI (part 2)", 
            "title": "Android"
        }, 
        {
            "location": "/tutorials/community-created/#xamarin", 
            "text": "jfarrell.net  tutorial series  Welcome to Bitrise  Getting Started with Bitrise  Understanding Workflows    Xamarin project setup on Bitrise.io  -  youtube video  Xamarin Continuous Integration with Bitrise.io  -  Xamarin project setup guide with Code Signing notes  (Xamarin) Continuous Integration and Deployment with Bitrise  -  getting started guide  Motz Codes Live: Continuous Integration   Deployment for Xamarin with Bitrise  -  youtube video, detailed guide", 
            "title": "Xamarin"
        }, 
        {
            "location": "/tutorials/community-created/#react-native", 
            "text": "Continuous Integration for React Native Apps With Fastlane and Bitrise (iOS)  Snowflake: React Native app Continuous Integration with Bitrise.io  -  detailed setup guide with youtube videos", 
            "title": "React Native"
        }, 
        {
            "location": "/tutorials/community-created/#cordova", 
            "text": "How to build Cordova-based Android project on bitrise.io", 
            "title": "Cordova"
        }, 
        {
            "location": "/tutorials/community-created/#macos-app", 
            "text": "Continuous happiness for Mac  -  build your Mac projects on Bitrise", 
            "title": "macOS app"
        }, 
        {
            "location": "/tutorials/community-created/#other", 
            "text": "Mobile Continuous Delivery With Bitrise | Benoit Pasquier  -  intro  I was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.  The Trials of Mobile Automation at InVision  -  ChatOps with Slack and Bitrise  How to send commit changes by email once CI build passes?  Continuous integration made easy with Bitrise  -  intro to Step development", 
            "title": "Other"
        }, 
        {
            "location": "/tutorials/community-created/#japanese", 
            "text": "Bitrise\u3067iTunesConnect\u306b\u81ea\u52d5\u3067ipa\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9 iOS\u30ea\u30ea\u30fc\u30b9\u624b\u9806  -  Automate the deployment of iOS apps to iTunesConnect  Bitrise\u306eScheduled Build\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u304c\u8a70\u307e\u308b\u554f\u984c\u3092\u6539\u5584\u3059\u308b  -  Use Bitrise's Scheduled Build to optimize build times  BITRISE\u3092\u7528\u3044\u305fAndroid\u30a2\u30d7\u30ea\u306e\u81ea\u52d5\u914d\u5e03  -  Automatic distribution of Android apps using Bitrise  iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f  -  Detailed introduction guide  iOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy iOS apps to Deploygate  Android\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy Android apps to Deploygate  BITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059  -  SlideShare  CircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f  -  Migrating a CircleCI configuration to Bitrise  iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2  -  Notes about using Bitrise for iOS Continuous Integration  \u4ffa\u7684Bitrise\u6d3b\u7528\u8853  iOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f  -  SlideShare  Bitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b  -  Bitrise + fastlane, automate testing   deployment (to Crashlytics) of iOS apps", 
            "title": "Japanese"
        }, 
        {
            "location": "/tutorials/community-created/#persian", 
            "text": "\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise  -  Video tutorial about CI/CD with Bitrise", 
            "title": "Persian"
        }, 
        {
            "location": "/tutorials/hipchat-message/", 
            "text": "You can send \nHipChat\n messages during your build.\n\n\nYou can, for example, send a \nHipChat\n message with the Build's \nbitrise.io\n URL,\nthe build's status (at the point where you include the HipChat step - usually it's best to\nmake it the very last step of the Workflow) and with the Public Install Page for the app.\n\n\nTo do this all you have to do is:\n\n\n\n\nadd a \nSend HipChat message\n step to your app's Workflow, after the \nDeploy to Bitrise.io step\n,\n\n\nfill out the required inputs (authentication token, the room's ID you want to send the message to,\n   color of the message, ...),\n\n\nand in the \nMessage\n input field you can include environment variables\n   defined by Bitrise and by the steps which run before the HipChat Message step.\n\n\n\n\n\n\nNote\n\n\nIf you click into any Step input field, an \nInsert Variable\n button will appear.\nWith this you can insert environment variables defined by Bitrise\n(for example the App's title, the Build's unique ID or the Build's URL on Bitrise)\nand environment variables exported by Steps which ran before this step\n(for example an Xcode Build's status or the generated IPA path).\n\n\n\n\nFill out the HipChat steps' required input fields, and for the HipChat Message\nstep's \nMessage\n input include the build's url with the \n$BITRISE_BUILD_URL\n environment variable,\nthe build's status at that point with the \n$BITRISE_BUILD_STATUS\n variable,\nand the related Public Install Page URL with \n$BITRISE_PUBLIC_INSTALL_PAGE_URL\n.\n\n\nAn example \nMessage\n input:\n\n\nYour build's details can be found at: $BITRISE_BUILD_URL,\nand the Public Install page at: $BITRISE_PUBLIC_INSTALL_PAGE_URL\n\nBuild status: $BITRISE_BUILD_STATUS\n\n\n\n\nThat's all. Once you configure your Workflow this way and start a new build,\nyou'll be notified about the build and deploy on HipChat,\nincluding both the build's details url and the app's Public Install Page url.", 
            "title": "HipChat message with build status and details"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/", 
            "text": "How to upload files to bitrise's \nGeneric File Storage\n?\n\u2693\n\n\n\n\nOpen your app on \nbitrise.io\n\n\nGo to \nWorkflow\n tab, to open the \nWorkflow Editor\n\n\nOn the left side of \nWorkflow Editor\n select \nCode signing \n Files\n\n\nScroll down to \nGeneric File Storage\n section and click on \n+ Add another File\n\n\nEnter your uniqe id and select your file you want to upload\n\n\n\n\n\n\nNote\n\n\nBitrise will upload your file and assign an environment variable (\nBITRISEIO_[the ID you specify]_URL\n)\nto the file's download url. A \ntime limited, read only download URL\n will\nbe set as the value of this Environment Variable\nfor every build. You can use this URL to download the file during a build._\n\n\n\n\nHow to use files uploaded to Bitrise's \nGeneric File Storage\n?\n\u2693\n\n\nYou can refer the file's read-only download url with the environment variable (\nBITRISEIO_[the ID you specify]_URL\n) you defined at upload.\n\n\nSome steps have built-in support for downloading the file from a specified URL.\nThese steps can use \nBITRISEIO_[the ID you specify]_URL\n as input value directly.\n\nExample: the \ncertificate-and-profile-installer\n step's \ncertificate_url\n\n\ninput\n.\n\n\nOther steps might require local file paths, and don't support URLs directly as the input value.\nIf that's the case you can use the \nFile Downloader\n or\nthe generic \nScript\n step to download your file, and (optionally) export the downloaded file's path as an environment variable.\n\n\nExample to download a file using the \nFile Downloader\n step\n\u2693\n\n\nAssuming the file's Generic File Storage url is assigned to \nBITRISEIO_MY_FILE_ID_URL\n, the script step would look like:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: \n$BITRISEIO_MY_FILE_ID_URL\n\n    - destination: \n$BITRISE_SOURCE_DIR/path/to/store/the/file\n\n...\n\n\n\n\nYou can set the location as an \nApp Env Var\n instead of specifying it\ndirectly for the \ndestination\n input. That way you can refer the file\nthrough the environment variable in other steps, you won't have to\nspecify the path every time.\n\n\nFor example, if you specify the \nBITRISEIO_MY_FILE_LOCAL_PATH\n as an \nApp Env Var\n,\nyou can use it as the download destination like:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: \n$BITRISEIO_MY_FILE_ID_URL\n\n    - destination: \n$BITRISEIO_MY_FILE_LOCAL_PATH\n\n...\n\n\n\n\nAnd then in subsequent steps you can use the same \n$BITRISEIO_MY_FILE_LOCAL_PATH\n env var\nas the file path.\n\n\nExample to download a file and export the file's path, using a \nScript\n step\n\u2693\n\n\nAssuming the file's Generic File Storage url is assigned to \nBITRISEIO_MY_FILE_ID_URL\n, the script step would look like:\n\n\n- script:\n    inputs:\n    - content: |\n        #!/bin/bash\n        set -ex\n\n        # specify local download path\n        file_local_path=download/path/to/my/file\n\n        # download the file\n        wget -O \n$file_local_path\n \n$BITRISEIO_MY_FILE_ID_URL\n\n        echo \nfile downloaded to: $file_local_path\n\n\n        # OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\n        envman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value \n$file_local_path\n\n\n\n\nIn subsequent steps you can refer the downloaded file's path with \n$BITRISEIO_MY_FILE_LOCAL_PATH\n.\nAlternatively you can set the location as an \nApp Env Var\n for example, and\nsimply download it to that path instead of defining the path\ninside the Script.", 
            "title": "How to use the Generic File Storage"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#how-to-upload-files-to-bitrises-generic-file-storage", 
            "text": "Open your app on  bitrise.io  Go to  Workflow  tab, to open the  Workflow Editor  On the left side of  Workflow Editor  select  Code signing   Files  Scroll down to  Generic File Storage  section and click on  + Add another File  Enter your uniqe id and select your file you want to upload    Note  Bitrise will upload your file and assign an environment variable ( BITRISEIO_[the ID you specify]_URL )\nto the file's download url. A  time limited, read only download URL  will\nbe set as the value of this Environment Variable\nfor every build. You can use this URL to download the file during a build._", 
            "title": "How to upload files to bitrise's Generic File Storage?"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#how-to-use-files-uploaded-to-bitrises-generic-file-storage", 
            "text": "You can refer the file's read-only download url with the environment variable ( BITRISEIO_[the ID you specify]_URL ) you defined at upload.  Some steps have built-in support for downloading the file from a specified URL.\nThese steps can use  BITRISEIO_[the ID you specify]_URL  as input value directly. Example: the  certificate-and-profile-installer  step's  certificate_url  input .  Other steps might require local file paths, and don't support URLs directly as the input value.\nIf that's the case you can use the  File Downloader  or\nthe generic  Script  step to download your file, and (optionally) export the downloaded file's path as an environment variable.", 
            "title": "How to use files uploaded to Bitrise's Generic File Storage?"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#example-to-download-a-file-using-the-file-downloader-step", 
            "text": "Assuming the file's Generic File Storage url is assigned to  BITRISEIO_MY_FILE_ID_URL , the script step would look like:  ...\n- file-downloader:\n    inputs:\n    - source:  $BITRISEIO_MY_FILE_ID_URL \n    - destination:  $BITRISE_SOURCE_DIR/path/to/store/the/file \n...  You can set the location as an  App Env Var  instead of specifying it\ndirectly for the  destination  input. That way you can refer the file\nthrough the environment variable in other steps, you won't have to\nspecify the path every time.  For example, if you specify the  BITRISEIO_MY_FILE_LOCAL_PATH  as an  App Env Var ,\nyou can use it as the download destination like:  ...\n- file-downloader:\n    inputs:\n    - source:  $BITRISEIO_MY_FILE_ID_URL \n    - destination:  $BITRISEIO_MY_FILE_LOCAL_PATH \n...  And then in subsequent steps you can use the same  $BITRISEIO_MY_FILE_LOCAL_PATH  env var\nas the file path.", 
            "title": "Example to download a file using the File Downloader step"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#example-to-download-a-file-and-export-the-files-path-using-a-script-step", 
            "text": "Assuming the file's Generic File Storage url is assigned to  BITRISEIO_MY_FILE_ID_URL , the script step would look like:  - script:\n    inputs:\n    - content: |\n        #!/bin/bash\n        set -ex\n\n        # specify local download path\n        file_local_path=download/path/to/my/file\n\n        # download the file\n        wget -O  $file_local_path   $BITRISEIO_MY_FILE_ID_URL \n        echo  file downloaded to: $file_local_path \n\n        # OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\n        envman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value  $file_local_path  In subsequent steps you can refer the downloaded file's path with  $BITRISEIO_MY_FILE_LOCAL_PATH .\nAlternatively you can set the location as an  App Env Var  for example, and\nsimply download it to that path instead of defining the path\ninside the Script.", 
            "title": "Example to download a file and export the file's path, using a Script step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/", 
            "text": "You can do this in quite a few ways, these are probably the easiest ones:\n\n\n\n\nuse the \nZIP resource archive downloader\n step for downloading and extracting a ZIP file\n\n\nuse the \nFile Downloader\n step to download a single file\n\n\nuse a \nScript\n Step\n\n\n\n\n\n\nStore the resources file on \nbitrise.io\n\n\nYou can store the resources file on \nbitrise.io\n.\nIn the Workflow Editor select the \"Code signing \n Files\" section,\nand upload the archive file in the \"Generic File Storage\" section.\nBitrise will automatically generate a (time limited, expiring) download URL\nfor the files you upload here, and will expose the download URL\nas an Environment Variable.\n\n\n\n\nUsing the \nZIP resource archive downloader\n step\n\u2693\n\n\nIf you have your resources on your server in a zip archive, all you have to do\nis to add the \nZIP resource archive downloader\n Step to your Workflow,\nspecify the URL of the ZIP and the destination where the zip's content should be uncompressed.\n\n\nThe \nsource code of your app\n will be (by default) downloaded into the folder\ndefined in the \n$BITRISE_SOURCE_DIR\n environment variable.\n\n\nIf you want to place the content of your ZIP archive into a folder called \nmyresource\n\ninside your app's source code directory, you can define the extract target folder\n(of the \nZIP resource archive downloader\n step) as \n${BITRISE_SOURCE_DIR}/myresource\n,\nor \n./myresource\n (as the default working directory is the source code directory).\n\n\nSingle file - using the \nFile Downloader\n step\n\u2693\n\n\nIf you only want to download a single file, you can of course ZIP it up and\nuse the \nZIP resource archive downloader\n step as described in the previous section,\nbut there's also a step for single file downloads.\n\n\nThe \nFile Downloader\n step can be used for this use case. Works very similarly as the\n\nZIP resource archive downloader\n step, except it does not require a ZIP file,\nit simply downloads the specified file to the location you set.\n\n\n...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_my_file_id_URL\n    - destination: \n$BITRISE_SOURCE_DIR/path/to/store/the/file\n\n...\n\n\n\n\nThe \"manual\" way\n\u2693\n\n\nIf you want to control the whole download process, you can use the \nScript\n step\nand write your own download code, something like this:\n\n\n#!/bin/bash\nset -ex\n# Download your resource\ncurl -fo \ndownload/path\n \nhttps://url/of/your/resource\n\n# Uncompress it\nunzip -u \ndownload/path\n -d \nuncompress/target/path\n\n\n\n\nIf you'd need an additional tool to download or uncompress the resources file,\nplease see the \nInstall Any Additional Tool\n guide.", 
            "title": "Download or replace project resources"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#using-the-zip-resource-archive-downloader-step", 
            "text": "If you have your resources on your server in a zip archive, all you have to do\nis to add the  ZIP resource archive downloader  Step to your Workflow,\nspecify the URL of the ZIP and the destination where the zip's content should be uncompressed.  The  source code of your app  will be (by default) downloaded into the folder\ndefined in the  $BITRISE_SOURCE_DIR  environment variable.  If you want to place the content of your ZIP archive into a folder called  myresource \ninside your app's source code directory, you can define the extract target folder\n(of the  ZIP resource archive downloader  step) as  ${BITRISE_SOURCE_DIR}/myresource ,\nor  ./myresource  (as the default working directory is the source code directory).", 
            "title": "Using the ZIP resource archive downloader step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#single-file-using-the-file-downloader-step", 
            "text": "If you only want to download a single file, you can of course ZIP it up and\nuse the  ZIP resource archive downloader  step as described in the previous section,\nbut there's also a step for single file downloads.  The  File Downloader  step can be used for this use case. Works very similarly as the ZIP resource archive downloader  step, except it does not require a ZIP file,\nit simply downloads the specified file to the location you set.  ...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_my_file_id_URL\n    - destination:  $BITRISE_SOURCE_DIR/path/to/store/the/file \n...", 
            "title": "Single file - using the File Downloader step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#the-manual-way", 
            "text": "If you want to control the whole download process, you can use the  Script  step\nand write your own download code, something like this:  #!/bin/bash\nset -ex\n# Download your resource\ncurl -fo  download/path   https://url/of/your/resource \n# Uncompress it\nunzip -u  download/path  -d  uncompress/target/path  If you'd need an additional tool to download or uncompress the resources file,\nplease see the  Install Any Additional Tool  guide.", 
            "title": "The \"manual\" way"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/", 
            "text": "An efficient CI/CD Workflow for iOS development\n\u2693\n\n\nTo achieve an efficient workflow for rapid iOS app development you have to specify the\nautomation scenarios and the triggers to start specific scenarios.\n\n\nAdditionally you most likely want to minimize the number of tools, configurations and\nmanual steps required to achieve your automated development workflow.\n\n\nTo make the whole process as easy as possible (and still flexible enough to support a\nbroad range of tasks you might want to perform as part of your automation) was one of\nthe fundamental principles when we started \nBitrise.io\n.\n\n\nRequirements\n\u2693\n\n\nGit\n is the most popular modern\n\nDistributed Version Control System (DVCS)\n at the moment,\nits branching system provides the flexibility to efficiently organize your app's code repository.\n\n\nThrough \nhooks\n \ngit\n is ideal to be the trigger of your automation scenarios, \nno other tools required\n.\n\n\nWell, actually there's one more thing: you have to organize your git repository\nbranches in a way which is easy to manage and also which can be used to identify\nwhat automation scenario should be performed when a change happens on a specific branch.\n\n\nLet's do it!\n\u2693\n\n\nThe most popular git branching model which fulfills these requirements is\n\nGitflow\n.\nYou can use other branching models but we'll use Gitflow jargon to describe the concepts.\n\n\nA very minimalistic summary of how Gitflow works:\n\n\n\n\nYou have two fixed, main branches:\n\n\nmaster\n : it should only contain the code of release versions\n\n\ndevelop\n : it's the root branch for development, the integration or synchronization branch for developers\n\n\n\n\n\n\nYou work on \nfeature\n branches:\n\n\nAlways start the feature branch from the \ndevelop\n branch.\n\n\nOnce a feature (issue / task) is finished you close the related feature branch, merging\n  the feature's code back to the integration \ndevelop\n branch.\n\n\n\n\n\n\nOnce you're ready for a release, you merge from \ndevelop\n to \nmaster\n (through a Gitflow \nrelease\n)\n\n\n\n\nWith this model you can always see the active tasks (\nfeature\n branches), the latest \"staging\" or \"beta\" code (\ndevelop\n branch) and the released versions (\nmaster\n branch).\n\n\nYour branches have separate meanings / purposes, which make this branching model a naturally good fit for automation.\n\n\nSo with a branching model like Gitflow and through \nwebhooks\n,\nyou can define and automate three main scenarios:\n\n\n\n\nChange on a \nfeature\n branch: while a feature is under active development you mostly\n   want to continuously \ntest the code\n, checking whether it still fulfills\n   the defined tests, so when it's finished and you merge it back to the \ndevelop\n branch,\n   it won't break anything.\n\n\nChange on \ndevelop\n branch: this is the main integration point of finished features / tasks.\n   If you or your team works on multiple features simultaneously, those independent features might introduce\n   conflicting changes, so you want to always \ntest\n the code changes on \ndevelop\n to detect these breaking changes.\n   If the tests do pass, you or your testers might want to give a manual spin for that particular version\n   of the app, so you configure an \nautomatic deployment\n which should make the version accessible\n   for those use are in charge of testing the new versions.\n   It's also a good idea to \nnotify the testers\n when a new test version is available.\n\n\nEverything worked, your app is rock solid, was tested both automatically with unit and other tests\n   and manually by your internal testers, and now it's ready for prime time.\n   Fantastic! Now you can create a \nrelease\n, which in Gitflow will merge the code from \ndevelop\n into\n   the \nmaster\n branch. As always, just to be absolutely sure, you want to run\n   your \nautomatic tests\n one last time.\n   If it passes you want to \nbuild the release version of the App\n,\n   \ndeploy it\n for your external beta testers / your project manager / anyone who agreed\n   to test your precious app before the App Store submission.\n   And of course you don't want to forget to \ninvite your testers\n, do you?\n\n\n\n\nThe beauty of Gitflow (or a similar branching model) is that if you use an automation service\nlike \nBitrise\n you can define these scenarios,\nconnect to the related branches and you'll never have to do these tasks manually.\n\n\nYou can just work on your code\n, organized into branches and that's all.\n\nEverything else will happen automatically\n, based on which branch changed.\n\n\nGit + Bitrise\n\u2693\n\n\nBitrise is built specifically to help you with this kind of automation.\nTo achieve an automated workflow like the one described in the previous section this is all what you have to do:\n\n\n\n\nRegister your App's repository\n on \nBitrise\n\n   (\nDon't forget to setup a \nwebhook\n!\n If you connect your repository through\n   our GitHub or Bitbucket integration options, Bitrise will do this automatically for you).\n\n\nPrepare your App's \nPrimary Workflow\n to include the \ntests\n you would like to run on every code change.\n\n\nCreate a \nnew Workflow for your develop branch\n and add the \ndeployment\n\n   and \nnotification\n steps you would like to use.\n   For example, you can use Bitrise's built in App Deployment system\n   and send email and Slack notifications when a test build is available -\n   you can find dozens of Steps in our library or you can just add \nscript\n steps\n   and do anything you want to.\n\n\nCreate another \nWorkflow for your master branch\n and configure it for\n   the \ndeployment\n of release versions, \nnotifying\n your beta testers or project manager,\n   maybe even \nSend a Text message\n.\n\n\n\n\nThat's all, no other setup is required\n.\nYou can customize your Workflows the way you want and you can\n\ncontrol everything with nothing but your code repository!\n\n\n\n\nNote\n\n\nYou can create unlimited number of Workflows\nso if you have a more complex branching model\nyou can configure your automations to support the way you work.\n\n\n\n\nWe have a great amount of Steps you can choose from\nand \nall of these Steps are open source\n,\nso if you want to modify one or create a brand new Step you can do that too!", 
            "title": "Efficient Continuous Integration and Deployment Workflow for iOS development"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#an-efficient-cicd-workflow-for-ios-development", 
            "text": "To achieve an efficient workflow for rapid iOS app development you have to specify the\nautomation scenarios and the triggers to start specific scenarios.  Additionally you most likely want to minimize the number of tools, configurations and\nmanual steps required to achieve your automated development workflow.  To make the whole process as easy as possible (and still flexible enough to support a\nbroad range of tasks you might want to perform as part of your automation) was one of\nthe fundamental principles when we started  Bitrise.io .", 
            "title": "An efficient CI/CD Workflow for iOS development"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#requirements", 
            "text": "Git  is the most popular modern Distributed Version Control System (DVCS)  at the moment,\nits branching system provides the flexibility to efficiently organize your app's code repository.  Through  hooks   git  is ideal to be the trigger of your automation scenarios,  no other tools required .  Well, actually there's one more thing: you have to organize your git repository\nbranches in a way which is easy to manage and also which can be used to identify\nwhat automation scenario should be performed when a change happens on a specific branch.", 
            "title": "Requirements"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#lets-do-it", 
            "text": "The most popular git branching model which fulfills these requirements is Gitflow .\nYou can use other branching models but we'll use Gitflow jargon to describe the concepts.  A very minimalistic summary of how Gitflow works:   You have two fixed, main branches:  master  : it should only contain the code of release versions  develop  : it's the root branch for development, the integration or synchronization branch for developers    You work on  feature  branches:  Always start the feature branch from the  develop  branch.  Once a feature (issue / task) is finished you close the related feature branch, merging\n  the feature's code back to the integration  develop  branch.    Once you're ready for a release, you merge from  develop  to  master  (through a Gitflow  release )   With this model you can always see the active tasks ( feature  branches), the latest \"staging\" or \"beta\" code ( develop  branch) and the released versions ( master  branch).  Your branches have separate meanings / purposes, which make this branching model a naturally good fit for automation.  So with a branching model like Gitflow and through  webhooks ,\nyou can define and automate three main scenarios:   Change on a  feature  branch: while a feature is under active development you mostly\n   want to continuously  test the code , checking whether it still fulfills\n   the defined tests, so when it's finished and you merge it back to the  develop  branch,\n   it won't break anything.  Change on  develop  branch: this is the main integration point of finished features / tasks.\n   If you or your team works on multiple features simultaneously, those independent features might introduce\n   conflicting changes, so you want to always  test  the code changes on  develop  to detect these breaking changes.\n   If the tests do pass, you or your testers might want to give a manual spin for that particular version\n   of the app, so you configure an  automatic deployment  which should make the version accessible\n   for those use are in charge of testing the new versions.\n   It's also a good idea to  notify the testers  when a new test version is available.  Everything worked, your app is rock solid, was tested both automatically with unit and other tests\n   and manually by your internal testers, and now it's ready for prime time.\n   Fantastic! Now you can create a  release , which in Gitflow will merge the code from  develop  into\n   the  master  branch. As always, just to be absolutely sure, you want to run\n   your  automatic tests  one last time.\n   If it passes you want to  build the release version of the App ,\n    deploy it  for your external beta testers / your project manager / anyone who agreed\n   to test your precious app before the App Store submission.\n   And of course you don't want to forget to  invite your testers , do you?   The beauty of Gitflow (or a similar branching model) is that if you use an automation service\nlike  Bitrise  you can define these scenarios,\nconnect to the related branches and you'll never have to do these tasks manually.  You can just work on your code , organized into branches and that's all. Everything else will happen automatically , based on which branch changed.", 
            "title": "Let's do it!"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#git-bitrise", 
            "text": "Bitrise is built specifically to help you with this kind of automation.\nTo achieve an automated workflow like the one described in the previous section this is all what you have to do:   Register your App's repository  on  Bitrise \n   ( Don't forget to setup a  webhook !  If you connect your repository through\n   our GitHub or Bitbucket integration options, Bitrise will do this automatically for you).  Prepare your App's  Primary Workflow  to include the  tests  you would like to run on every code change.  Create a  new Workflow for your develop branch  and add the  deployment \n   and  notification  steps you would like to use.\n   For example, you can use Bitrise's built in App Deployment system\n   and send email and Slack notifications when a test build is available -\n   you can find dozens of Steps in our library or you can just add  script  steps\n   and do anything you want to.  Create another  Workflow for your master branch  and configure it for\n   the  deployment  of release versions,  notifying  your beta testers or project manager,\n   maybe even  Send a Text message .   That's all, no other setup is required .\nYou can customize your Workflows the way you want and you can control everything with nothing but your code repository!   Note  You can create unlimited number of Workflows\nso if you have a more complex branching model\nyou can configure your automations to support the way you work.   We have a great amount of Steps you can choose from\nand  all of these Steps are open source ,\nso if you want to modify one or create a brand new Step you can do that too!", 
            "title": "Git + Bitrise"
        }, 
        {
            "location": "/tutorials/vpn-configuration/", 
            "text": "Do you require a VPN connection for your build, to be able to connect to your server,\neither to \ngit clone\n your repository or to access a private API?\nIf yes, then this tutorial is for you!\n\n\nTechnical infos\n\u2693\n\n\nConnecting to a VPN, in short, works like this:\n\n\n\n\nthe build starts\n\n\nyou install \n configure the VPN components you need\n\n\nyou start the VPN\n\n\nyou proceed with the build\n\n\n\n\nObviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN \nbefore\n the \nGit Clone\n step, but in general\nyou can configure \n connect to the VPN anywhere in your Workflow, \nbefore\n you'd use the\nconnection.\n\n\nYou can choose other VPN tools, not just the one shown here (\nstrongswan\n),\nthis is just one example setup which works on \nbitrise.io\n.\n\n\nOne important note\n: when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to \nnot to restart / abort\n existing SSH sessions!\nThe \nbitrise.io\n workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!\n\n\nExample\n\u2693\n\n\nThis is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a \nScript Step\n in your \nbitrise\n\nconfiguration (\nbitrise.yml\n / Workflow).\n\n\n#!/usr/bin/env bash\nset -e\n\necho \nWAN IP\n\n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase \n$OSTYPE\n in\n  linux*)\n    echo \nConfiguring for Linux\n\n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo \nInstalling Strongswan...\n\n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo \nConfiguring for Mac OS\n\n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo \nInstalling OpenSSL...\n\n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo \nInstalling Strongswan...\n\n    brew install strongswan\n\n    ;;\n  *)\n    echo \nUnknown operative system: $OSTYPE, exiting\n\n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval \necho \\\n$(cat $1)\\\n\n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, se examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho \nDownloading ipsec.conf...\n\nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho \nDownloading ipsec.secrets...\n\nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho \nDownloading server.crt...\n\nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho \nRendering config templates\n\nrender_template $temp_dir/ipsec.conf.template \n $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template \n $temp_dir/ipsec.secrets\n\necho \nInstalling configuration\n\n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho \nStarting ipsec\n\nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho \nStatus ipsec\n\nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho \nInitiating VPN connection\n\nsudo ipsec up myconnection\n\nsleep 1\n\ncase \n$OSTYPE\n in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo \nRestarting ipsec\n\n    sudo ipsec restart\n\n    sleep 1\n\n    echo \nInitiating VPN connection\n\n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo \nDisabling IPv6 and forcing DNS settings\n\n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off \n$main_interface\n\n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers \n$main_interface\n 10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Configure and connect to your VPN"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#technical-infos", 
            "text": "Connecting to a VPN, in short, works like this:   the build starts  you install   configure the VPN components you need  you start the VPN  you proceed with the build   Obviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN  before  the  Git Clone  step, but in general\nyou can configure   connect to the VPN anywhere in your Workflow,  before  you'd use the\nconnection.  You can choose other VPN tools, not just the one shown here ( strongswan ),\nthis is just one example setup which works on  bitrise.io .  One important note : when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to  not to restart / abort  existing SSH sessions!\nThe  bitrise.io  workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!", 
            "title": "Technical infos"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#example", 
            "text": "This is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a  Script Step  in your  bitrise \nconfiguration ( bitrise.yml  / Workflow).  #!/usr/bin/env bash\nset -e\n\necho  WAN IP \n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase  $OSTYPE  in\n  linux*)\n    echo  Configuring for Linux \n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo  Installing Strongswan... \n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo  Configuring for Mac OS \n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo  Installing OpenSSL... \n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo  Installing Strongswan... \n    brew install strongswan\n\n    ;;\n  *)\n    echo  Unknown operative system: $OSTYPE, exiting \n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval  echo \\ $(cat $1)\\ \n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, se examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho  Downloading ipsec.conf... \nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho  Downloading ipsec.secrets... \nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho  Downloading server.crt... \nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho  Rendering config templates \nrender_template $temp_dir/ipsec.conf.template   $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template   $temp_dir/ipsec.secrets\n\necho  Installing configuration \n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho  Starting ipsec \nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho  Status ipsec \nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho  Initiating VPN connection \nsudo ipsec up myconnection\n\nsleep 1\n\ncase  $OSTYPE  in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo  Restarting ipsec \n    sudo ipsec restart\n\n    sleep 1\n\n    echo  Initiating VPN connection \n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo  Disabling IPv6 and forcing DNS settings \n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off  $main_interface \n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers  $main_interface  10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Example"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/", 
            "text": "This tutorial helps you create a basic static website project (e.g. a Blog) with \nMiddleman\n,\nconnect and deploy it with Bitrise.\n\n\n1. Create and clone a repository on Github\n\u2693\n\n\nTo create a new repository on Github, \nclick here\n.\nYou need to sign in with your Github account, or sign up if you don't have one yet.\nOnce you created your repository, clone it.\n\n\n2. Install Middleman\n\u2693\n\n\nMiddleman is distributed using the RubyGems package manager.\nThis means you will need both the Ruby language runtime installed and RubyGems to begin using Middleman.\n\n\nMacOS comes prepackaged with Ruby, however, some of the Middleman's dependencies need to be compiled\nduring installation and on macOS that requires Xcode.\nXcode can be installed via the \nMac App Store\n.\nAlternately you can just install the Xcode Command Line Tools, that should be enough\nif you don't want to install the full Xcode.app.\n\n\nOnce you have Ruby and Xcode (Command Line Tools), execute the following from the command line:\n\n\ngem install middleman\n\n\n\n\nThis will install Middleman, its dependencies and the command-line tools for using Middleman.\n\n\n3. Create a Middleman project\n\u2693\n\n\nTo create a Middleman project, navigate to the root folder of your repository and execute the following from the command line:\n\n\nmiddleman init my_new_project\n\n\n\n\nOnce the setup is finished, commit and push your changes.\n\n\n4. Connect your repository with Bitrise\n\u2693\n\n\nTo connect your repository with Bitrise, visit the \nBitrise\n site.\nYou need to sign in with your Bitrise account, or sign up if you don't have one yet.\nOnce you're signed in, select \nAdd new App\n in the top dropdown menu.\n\n\nIn the first step, you need to select the provider, where you store your code, in this case, GitHub.\n\n\nIn the second step, you will see a list of all your repositories on GitHub. Select the one you just created.\n\n\nIn the third step, you will get an alert, since the repository you are connecting is not an Xcode project.\nSelect \"Configure Manually\", then enter the branch name \"master\".\n\n\n5. Prepare your Workflow\n\u2693\n\n\nOnce you created your project, select it in the \nDashboard\n\nand select the \nWorkflow\n tab from the top menu.\nWe are going to add a bash script that will be executed on each build.\nFirst, delete all the automatically created steps (if any).\nNext, we need to add new steps.\nYou can add new steps by clicking on the \n+\n sign button between steps / in the step list and selecting the step\nfrom the step list popup. Add the following steps to your Workflow, in this order:\n\n\n\n\nActivate SSH key\n - unless you used the public, non SSH URL of the repository during the Add New App process\n\n\nGit Clone Repository\n\n\nScript\n\n\n\n\nSelect the \nScript\n step and add the following lines:\n\n\n#!/bin/bash\nset -ex\nbundle install\nbundle exec middleman build --verbose\n\n\n\n\nThe above code installs the dependencies specified in your \nGemfile\n, and runs a Middleman build on the virtual machine.\n\n\n6. Deploy to Amazon S3: Add an Amazon S3 bucket sync to your Workflow steps\n\u2693\n\n\nNow we are going to add and customize an Amazon S3 bucket sync to the Workflow steps.\nClick on the \nAdd new Step\n button and select \nAmazon S3 bucket sync\n from the step list.\n\n\nSelect the step to customize it.\n\n\n\n\nEnter your AWS access key\n\n\nYour AWS secret key\n\n\nAnd enter a name for your S3 bucket.\n\n\nFor your local path, enter the following: \n$BITRISE_SOURCE_DIR/build/\n\n\n\n\nThis will select the \ncontents\n of the build folder in the project source path on the virtual machine.\nIt will be uploaded on every build.\n\n\nFor access control, enter \npublic-read\n or \nprivate\n, as advised.\n\n\n\n\nAlternative deploy destinations\n\n\nYou can of course use \nHeroku\n, GitHub pages or any other service\nas your deployment target.\nYou can find a more complex setup, deploying to \nHeroku\n,\n\non our Blog\n\n\n\n\n7. Run build manually\n\u2693\n\n\nOnce the configuration of your Workflow is complete,\nyou can run a build manually by clicking on the \nStart/Schedule a build\n button on the app's page (where you see the\n\nBuilds\n, \nWorkflow\n, \nTeam\n, ... tabs).\n\n\n8. Run builds automatically\n\u2693\n\n\nIf you chose GitHub when adding your repository, each code change (commit) on GitHub will automatically trigger a Bitrise build.\nOtherwise you can find more information about how you can setup a Webhook, to trigger builds\nautomatically for code push, pull request and tags \nhere\n.", 
            "title": "Auto deploy your Middleman blog / static website"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#1-create-and-clone-a-repository-on-github", 
            "text": "To create a new repository on Github,  click here .\nYou need to sign in with your Github account, or sign up if you don't have one yet.\nOnce you created your repository, clone it.", 
            "title": "1. Create and clone a repository on Github"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#2-install-middleman", 
            "text": "Middleman is distributed using the RubyGems package manager.\nThis means you will need both the Ruby language runtime installed and RubyGems to begin using Middleman.  MacOS comes prepackaged with Ruby, however, some of the Middleman's dependencies need to be compiled\nduring installation and on macOS that requires Xcode.\nXcode can be installed via the  Mac App Store .\nAlternately you can just install the Xcode Command Line Tools, that should be enough\nif you don't want to install the full Xcode.app.  Once you have Ruby and Xcode (Command Line Tools), execute the following from the command line:  gem install middleman  This will install Middleman, its dependencies and the command-line tools for using Middleman.", 
            "title": "2. Install Middleman"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#3-create-a-middleman-project", 
            "text": "To create a Middleman project, navigate to the root folder of your repository and execute the following from the command line:  middleman init my_new_project  Once the setup is finished, commit and push your changes.", 
            "title": "3. Create a Middleman project"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#4-connect-your-repository-with-bitrise", 
            "text": "To connect your repository with Bitrise, visit the  Bitrise  site.\nYou need to sign in with your Bitrise account, or sign up if you don't have one yet.\nOnce you're signed in, select  Add new App  in the top dropdown menu.  In the first step, you need to select the provider, where you store your code, in this case, GitHub.  In the second step, you will see a list of all your repositories on GitHub. Select the one you just created.  In the third step, you will get an alert, since the repository you are connecting is not an Xcode project.\nSelect \"Configure Manually\", then enter the branch name \"master\".", 
            "title": "4. Connect your repository with Bitrise"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#5-prepare-your-workflow", 
            "text": "Once you created your project, select it in the  Dashboard \nand select the  Workflow  tab from the top menu.\nWe are going to add a bash script that will be executed on each build.\nFirst, delete all the automatically created steps (if any).\nNext, we need to add new steps.\nYou can add new steps by clicking on the  +  sign button between steps / in the step list and selecting the step\nfrom the step list popup. Add the following steps to your Workflow, in this order:   Activate SSH key  - unless you used the public, non SSH URL of the repository during the Add New App process  Git Clone Repository  Script   Select the  Script  step and add the following lines:  #!/bin/bash\nset -ex\nbundle install\nbundle exec middleman build --verbose  The above code installs the dependencies specified in your  Gemfile , and runs a Middleman build on the virtual machine.", 
            "title": "5. Prepare your Workflow"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#6-deploy-to-amazon-s3-add-an-amazon-s3-bucket-sync-to-your-workflow-steps", 
            "text": "Now we are going to add and customize an Amazon S3 bucket sync to the Workflow steps.\nClick on the  Add new Step  button and select  Amazon S3 bucket sync  from the step list.  Select the step to customize it.   Enter your AWS access key  Your AWS secret key  And enter a name for your S3 bucket.  For your local path, enter the following:  $BITRISE_SOURCE_DIR/build/   This will select the  contents  of the build folder in the project source path on the virtual machine.\nIt will be uploaded on every build.  For access control, enter  public-read  or  private , as advised.   Alternative deploy destinations  You can of course use  Heroku , GitHub pages or any other service\nas your deployment target.\nYou can find a more complex setup, deploying to  Heroku , on our Blog", 
            "title": "6. Deploy to Amazon S3: Add an Amazon S3 bucket sync to your Workflow steps"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#7-run-build-manually", 
            "text": "Once the configuration of your Workflow is complete,\nyou can run a build manually by clicking on the  Start/Schedule a build  button on the app's page (where you see the Builds ,  Workflow ,  Team , ... tabs).", 
            "title": "7. Run build manually"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#8-run-builds-automatically", 
            "text": "If you chose GitHub when adding your repository, each code change (commit) on GitHub will automatically trigger a Bitrise build.\nOtherwise you can find more information about how you can setup a Webhook, to trigger builds\nautomatically for code push, pull request and tags  here .", 
            "title": "8. Run builds automatically"
        }, 
        {
            "location": "/tutorials/build-with-fake/", 
            "text": "To add support for your \nFAKE\n build scripts,\nopen your app's \nWorkflow Editor on bitrise.io\n\nand add a \nScript\n step to your workflow.\n\n\nBelow you can find an example script content to perform a build with FAKE,\n\nmake sure you fill out the parameters at the top of the script\n!\n\n\n#!/bin/bash\nset -ex\n\n# Fill out these parameters:\n# You should use the same directory that you set in your build script for the FAKE dll\noutput_directory=tools\nfake_build_script=build.fsx\nfake_target_name=\nfake_option_flags=\n\n# ---\n\nfake_exe=\n${output_directory}/FAKE/tools/fake.exe\n\n\nif [ ! -f \n${fake_exe}\n ]; then\n  printf \n\\e[34mInstalling FAKE\\e[0m\\n\n\n  nuget install FAKE -OutputDirectory \n${output_directory}\n -ExcludeVersion -NoCache -NonInteractive\nfi\n\ncommand=(\nmono\n \n${fake_exe}\n)\n\nif [ -n \n$fake_build_script\n ] ; then\n  command+=(\n${fake_build_script}\n)\nfi\n\nif [ -n \n$fake_target_name\n ] ; then\n  command+=(\n${fake_target_name}\n)\nfi\n\nif [ -n \n$fake_option_flags\n ] ; then\n  command+=(\n${fake_option_flags}\n)\nfi\n\nprintf \n\\e[34mExecuting ${fake_build_script}\\e[0m\\n\n\n$(IFS=' '; echo \n${command[*]}\n)\n\n\n\n\nYou should update the \noutput_directory\n and \nfake_build_script\n variables for your needs and you are ready to go!\n\n\n\n\nNote\n\n\nYou should set the \noutput_directory\n to the same directory where your build script will search for the FAKE dlls.", 
            "title": "Build with FAKE (F# Make)"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/", 
            "text": "Bitrise has an integrated App Deployment system you can use for App and other build artifact file distribution.\n\n\nWith this you can distribute your iOS and Android app, over the air, for your testers (\neven for those who don't have a Bitrise account\n)\nor you can just use it for archiving your App and other build artifact files (these files will\nbe available on the related Build's details page).\n\n\nHow does it work?\n\u2693\n\n\nIf you want to distribute your iOS App through Bitrise all you need in your App's Workflow,\nis an \nXcode Archive\n step to generate the iOS app IPA,\nand a \nDeploy to Bitrise.io\n step to distribute it.\n\n\nFor Android apps, use the \nGradle Runner\n step to generate the APK, and use the\n\nDeploy to Bitrise.io\n step to deploy it.\n\n\nFor Xamarin apps use the \nXamarin Archive step\n to create the iOS/Android app,\nand use the \nDeploy to Bitrise.io\n step to deploy it. \n\n\nFor any other project type, just use the step(s) or script(s) which\ncan generate the app, and use the \nDeploy to Bitrise.io\n step to deploy it.\n\n\nOne important thing if you use custom steps/scripts\n: the \nDeploy to Bitrise.io\n\nstep by default deploys apps from the \n$BITRISE_DEPLOY_DIR\n directory, so make sure that you\nmove the generated app there, or set the \nDeploy directory or file path\n input\nof the \nDeploy to Bitrise.io step\n to point to the location of the app file.\n\n\nIf the app file (\n.ipa\n / \n.apk\n) is available, the \nDeploy to Bitrise.io\n step will\nupload it for the Build and \nit will be listed on the Build's details page\n.\nDepending on the \nnotification settings\n you set for the \nDeploy to Bitrise.io\n step,\nBitrise.io will also send emails for the Team of the app.\n\n\nFor each deployed app you'll see an information and notifications card on the Build's page,\nwhere you can check the details of the App (title, bundle id, version number, size, etc.)\nand you can download or install the App right from the Build's page.\n\n\nIf you built your iOS App\n with a Development or Ad-Hock Provisioning Profile,\nan additional section will be presented with a list of allowed device identifiers (UDID).\n\n\nIf you or a team member of your App's team register a device for\nhis/her Bitrise account (you can do this on your \nAccount Settings page\n in the \nTest Devices\n section)\nand the device's identifier can be found in the Provisioning Profile,\nthen instead of just presenting the identifier in the list you'll see the user who registered the device and the device's name.\n\n\nVisiting the Build page from an iOS device (which you registered for your account)\nand you'll see an \nInstall\n button instead of the \nDownload\n button.\nWith this \nyou can install the App on your device directly from Bitrise\n.\n\n\nFor Android apps you don't have to register your test devices\n,\nas Android apps don't have per-device install restrictions. You'll, however,\nhave to enable the \n\"Unknown Sources\"\n option in Android to be able to\ninstall the app/apk from outside of the Google Play Store.\n\n\nPublic App install page\n\u2693\n\n\nIf you enable the \nPublic install page\n option (of the \nDeploy to Bitrise.io\n step)\nfor the App, then a \nlong, random URL\n will be available for you,\nwhich you \ncan be sent even to people who are not registered on Bitrise.io\n.\n\n\nOpening this link you'll see a base description of the\nApp (title, version, size, supported devices) and an \nInstall\n\nbutton if you visit the page from an iOS or Android device (depending on the app's\nplatform of course).\n\n\nYou can share this page with anyone, even if they don't have a Bitrise account,\nbut \nyou have to make it sure that they'll actually be able to install it\n -\nif you don't use an Enterprise Provisioning Profile to build your App,\nyou have to add every device identifier (UDID) to the Provisioning Profile (just like you do on your Mac),\nthe iOS App can't be installed on any other device, only on the ones which were\nincluded in the Provisioning Profile the build was signed with.\n\n\nYou can enable or disable the App's public install page any time from the related Build page\n\nand \nyou can also set the default state\n (enabled or disabled) \nin your App's Workflow\n\n(select the \nDeploy to Bitrise.io\n step and set the \nEnable public page for the App?\n to \nfalse\n\nif you don't want to automatically enable this feature).\n\n\nIf you disable the Public install page for the App, then only your App's team members will be able to install the App from Bitrise,\nfrom the Build's detail page!\n\n\nNotifications and install invites\n\u2693\n\n\nOn the Build's page you can send install invites for your testers.\nYou can either send invites for a group of your team (testers, developers, admins or owner) or\n(if the \nPublic install page\n option is enabled) you can send install invites to any email address.\n\n\nKeep in mind that the install invite email contains the URL of the Public install page.\n\nIf you invite someone who's not in your App's team and then disable the Public install page,\nthey won't be able to access the install page!\nThose who are in your App's team will be redirected to the Build's page if the Public install page is disabled.\n\n\nYou can specify the list of groups and emails for automatic install invite notification\n in the App's Workflow.\nSimilarly to the Public page option just select the \nDeploy to Bitrise.io\n step in your Workflow\nand specify the list of groups and emails to automatically notify in the \nNotify: User Groups\n and \nNotify: Emails\n options.\n\n\nKeep in mind that if you disable the \nPublic install page\n option,\nBitrise won't send install invite emails for the emails you specify,\nonly to those who are in the App's Team,\nbecause in this case only your team members can access the App (on the Build's page).", 
            "title": "Bitrise OTA App Deployment"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#how-does-it-work", 
            "text": "If you want to distribute your iOS App through Bitrise all you need in your App's Workflow,\nis an  Xcode Archive  step to generate the iOS app IPA,\nand a  Deploy to Bitrise.io  step to distribute it.  For Android apps, use the  Gradle Runner  step to generate the APK, and use the Deploy to Bitrise.io  step to deploy it.  For Xamarin apps use the  Xamarin Archive step  to create the iOS/Android app,\nand use the  Deploy to Bitrise.io  step to deploy it.   For any other project type, just use the step(s) or script(s) which\ncan generate the app, and use the  Deploy to Bitrise.io  step to deploy it.  One important thing if you use custom steps/scripts : the  Deploy to Bitrise.io \nstep by default deploys apps from the  $BITRISE_DEPLOY_DIR  directory, so make sure that you\nmove the generated app there, or set the  Deploy directory or file path  input\nof the  Deploy to Bitrise.io step  to point to the location of the app file.  If the app file ( .ipa  /  .apk ) is available, the  Deploy to Bitrise.io  step will\nupload it for the Build and  it will be listed on the Build's details page .\nDepending on the  notification settings  you set for the  Deploy to Bitrise.io  step,\nBitrise.io will also send emails for the Team of the app.  For each deployed app you'll see an information and notifications card on the Build's page,\nwhere you can check the details of the App (title, bundle id, version number, size, etc.)\nand you can download or install the App right from the Build's page.  If you built your iOS App  with a Development or Ad-Hock Provisioning Profile,\nan additional section will be presented with a list of allowed device identifiers (UDID).  If you or a team member of your App's team register a device for\nhis/her Bitrise account (you can do this on your  Account Settings page  in the  Test Devices  section)\nand the device's identifier can be found in the Provisioning Profile,\nthen instead of just presenting the identifier in the list you'll see the user who registered the device and the device's name.  Visiting the Build page from an iOS device (which you registered for your account)\nand you'll see an  Install  button instead of the  Download  button.\nWith this  you can install the App on your device directly from Bitrise .  For Android apps you don't have to register your test devices ,\nas Android apps don't have per-device install restrictions. You'll, however,\nhave to enable the  \"Unknown Sources\"  option in Android to be able to\ninstall the app/apk from outside of the Google Play Store.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#public-app-install-page", 
            "text": "If you enable the  Public install page  option (of the  Deploy to Bitrise.io  step)\nfor the App, then a  long, random URL  will be available for you,\nwhich you  can be sent even to people who are not registered on Bitrise.io .  Opening this link you'll see a base description of the\nApp (title, version, size, supported devices) and an  Install \nbutton if you visit the page from an iOS or Android device (depending on the app's\nplatform of course).  You can share this page with anyone, even if they don't have a Bitrise account,\nbut  you have to make it sure that they'll actually be able to install it  -\nif you don't use an Enterprise Provisioning Profile to build your App,\nyou have to add every device identifier (UDID) to the Provisioning Profile (just like you do on your Mac),\nthe iOS App can't be installed on any other device, only on the ones which were\nincluded in the Provisioning Profile the build was signed with.  You can enable or disable the App's public install page any time from the related Build page \nand  you can also set the default state  (enabled or disabled)  in your App's Workflow \n(select the  Deploy to Bitrise.io  step and set the  Enable public page for the App?  to  false \nif you don't want to automatically enable this feature).  If you disable the Public install page for the App, then only your App's team members will be able to install the App from Bitrise,\nfrom the Build's detail page!", 
            "title": "Public App install page"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#notifications-and-install-invites", 
            "text": "On the Build's page you can send install invites for your testers.\nYou can either send invites for a group of your team (testers, developers, admins or owner) or\n(if the  Public install page  option is enabled) you can send install invites to any email address.  Keep in mind that the install invite email contains the URL of the Public install page. \nIf you invite someone who's not in your App's team and then disable the Public install page,\nthey won't be able to access the install page!\nThose who are in your App's team will be redirected to the Build's page if the Public install page is disabled.  You can specify the list of groups and emails for automatic install invite notification  in the App's Workflow.\nSimilarly to the Public page option just select the  Deploy to Bitrise.io  step in your Workflow\nand specify the list of groups and emails to automatically notify in the  Notify: User Groups  and  Notify: Emails  options.  Keep in mind that if you disable the  Public install page  option,\nBitrise won't send install invite emails for the emails you specify,\nonly to those who are in the App's Team,\nbecause in this case only your team members can access the App (on the Build's page).", 
            "title": "Notifications and install invites"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/", 
            "text": "Would you like to \nbeta test\n and \ndeploy\n your app to 1 or thousands of users?\n\nAppaloosa\n helps you distribute your mobile apps privately,\ncollect feedback and analyse your deployment's efficiency. \nCheck it out!\n\n\nWhat is Appaloosa?\n\u2693\n\n\nAppaloosa is a simple and secure enterprise App Store.\nThey help mobile \n digital teams build, test and deploy their apps privately.\n\n\nYou can manage your apps on Android, iOS and Windows Phone, all in the same place.\nAppaloosa also provides a native app store to increase your users' engagement.\nThey will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps. \n\n\nAppaloosa also gives you great insight on the efficiency of your deployment\nwith download and usage stats as well as feedbacks and ratings from the users.\n\n\nThey are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations\nas well as a RESTful API. \nGet in touch\n for more details.\nPlus your mobile apps can be targeted to groups of users or distributed to all collaborators.\n\n\nBuild with Bitrise, Deploy to Appaloosa\n\u2693\n\n\nTo deploy your app on Appaloosa, simply add the Appaloosa step to your application's workflow.\nIf you don't already have an account on Appaloosa, it will be created on the go.\n\n\n\n\n\n\nAs a \nregistered user\n you simply need your \nstore id\n and \nAPI Key\n.\n\n\nAs an \nunregistered user\n, an \nemail address\n is enough.\n\n\nOptionally you can provide a \ndescription\n, \nscreenshot\n urls (up to 5) and, if registered, \ngroup ids\n.\n\n\n\n\nWith Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest!", 
            "title": "Publish your app to Appaloosa"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/#what-is-appaloosa", 
            "text": "Appaloosa is a simple and secure enterprise App Store.\nThey help mobile   digital teams build, test and deploy their apps privately.  You can manage your apps on Android, iOS and Windows Phone, all in the same place.\nAppaloosa also provides a native app store to increase your users' engagement.\nThey will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps.   Appaloosa also gives you great insight on the efficiency of your deployment\nwith download and usage stats as well as feedbacks and ratings from the users.  They are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations\nas well as a RESTful API.  Get in touch  for more details.\nPlus your mobile apps can be targeted to groups of users or distributed to all collaborators.", 
            "title": "What is Appaloosa?"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/#build-with-bitrise-deploy-to-appaloosa", 
            "text": "To deploy your app on Appaloosa, simply add the Appaloosa step to your application's workflow.\nIf you don't already have an account on Appaloosa, it will be created on the go.    As a  registered user  you simply need your  store id  and  API Key .  As an  unregistered user , an  email address  is enough.  Optionally you can provide a  description ,  screenshot  urls (up to 5) and, if registered,  group ids .   With Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest!", 
            "title": "Build with Bitrise, Deploy to Appaloosa"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/", 
            "text": "If you are looking for a deployment service that also gives you lots of insights\nabout your application, then \nTestFairy\n is a great service to check out.\n\n\nWhat is TestFairy?\n\u2693\n\n\nWhen testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side.\nTestFairy solves this problem by providing a video of everything that happened on the mobile device,\nincluding detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more.\nTo get these insights on iOS you need to \nintegrate their iOS SDK into your app\n.\n\n\nUpload your app to TestFairy through Bitrise\n\u2693\n\n\nTo deploy your app on the TestFairy platform you just simply need to add the \nTestFairy\n step\nto your app's workflow (on \nbitrise.io\n).\n\n\n\n\nThe only required parameter you have to add is your API Key on TestFairy.\nTo get it you should navigate to your \naccount preferences\n on TestFairy\nand find the key under your API Key menu.\n\n\n\n\nNote\n\n\nYou can also enable or disable the email notifications and set the tester groups you would like to notify.\nThere's an option to make your users always upgrade to the latest build by enabling Auto update in the step,\nand you can also start recording video and set the length of it.\n\n\n\n\nReady to go!\n\u2693\n\n\nThere's nothing else you need to do,\nsimply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code.", 
            "title": "Deploy to TestFairy with Bitrise"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#what-is-testfairy", 
            "text": "When testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side.\nTestFairy solves this problem by providing a video of everything that happened on the mobile device,\nincluding detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more.\nTo get these insights on iOS you need to  integrate their iOS SDK into your app .", 
            "title": "What is TestFairy?"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#upload-your-app-to-testfairy-through-bitrise", 
            "text": "To deploy your app on the TestFairy platform you just simply need to add the  TestFairy  step\nto your app's workflow (on  bitrise.io ).   The only required parameter you have to add is your API Key on TestFairy.\nTo get it you should navigate to your  account preferences  on TestFairy\nand find the key under your API Key menu.   Note  You can also enable or disable the email notifications and set the tester groups you would like to notify.\nThere's an option to make your users always upgrade to the latest build by enabling Auto update in the step,\nand you can also start recording video and set the length of it.", 
            "title": "Upload your app to TestFairy through Bitrise"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#ready-to-go", 
            "text": "There's nothing else you need to do,\nsimply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code.", 
            "title": "Ready to go!"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/", 
            "text": "If you want to skip a specific commit, to not to start a build,\nall you have to do is to include either \n[skip ci]\n or \n[ci skip]\n\nin the commit message.\n\n\nFor example, the commit message:\n\n\nThis is not important, please [skip ci]\n\n\n\n\nwon't start a build, nor will:\n\n\nI just changed the README\n\n[ci skip]\n\n\n\n\n\n\nOnly the head/last commit message is checked!\n\n\nIf you push more than one commit\n, only the last (\"head\") commit's\nmessage will be checked for the skip ci pattern!\n\n\n\n\nIf you'd decide that you still want to start a build you'll have to\neither rebase that commit (e.g. just change its commit message), or push another commit.\n\n\n\n\nYou can push an empty commit\n\n\nGit allows to create and push empty commits, so if you'd decide that you\nstill want to build a skipped build you can do \ngit commit --allow-empty -m \"I decided to run this\"\n\non the related branch and push the commit.\n\n\n\n\nPull Requests\n\u2693\n\n\nSkip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.\n\n\nIn short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can \nfetch\n through \ngit\n (if you add the related \nrefs/\n to your git \nfetch\n config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through \ngit\n directly.\n\n\n\n\nWhat's the commit message of a Pull Request?\n\n\nIn any case this means that \nthe Pull Request itself\n is treated as a (virtual) commit,\nwhere \nthe commit message is the title + description of the Pull Request\n and\nnot the commit(s) of the pull request!\n\n\n\n\nThis means that, \nif you want to skip a pull request\n, you have to include the Skip CI\npattern \nin the Pull Request's title or description\n, and not in the commit's message!\n\n\nOnce you decide to not to skip the Pull Request / more commits in the pull request\n\nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Skip a Build (skip ci)"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/#pull-requests", 
            "text": "Skip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.  In short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can  fetch  through  git  (if you add the related  refs/  to your git  fetch  config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through  git  directly.   What's the commit message of a Pull Request?  In any case this means that  the Pull Request itself  is treated as a (virtual) commit,\nwhere  the commit message is the title + description of the Pull Request  and\nnot the commit(s) of the pull request!   This means that,  if you want to skip a pull request , you have to include the Skip CI\npattern  in the Pull Request's title or description , and not in the commit's message!  Once you decide to not to skip the Pull Request / more commits in the pull request \nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/", 
            "text": "For this example we'll attach the OS X \nsystem.log\n to the Build as an Artifact,\nbut this works for any file, even for ones that you generate during the build,\nyou just have to replace the example path we use (\n/var/log/system.log\n) with the path you want to deploy.\nYou can of course use Environment Variables in the path too, like \n$HOME/\n.\n\n\nDeployed Artifacts appear on the Build's page, in the Artifacts \n Apps section,\nand anyone who has access to the Build page can download it from there.\n\n\nTo do this:\n\n\n\n\nAdd a new \nDeploy to Bitrise.io\n step to your workflow, to any point you want to (can be the very last step in the workflow, but of course if you want to deploy a file which is generated during the build you should add the step \nafter\n the file is generated and available).\n\n\nChange the \nDeploy directory or file path\n input of the Step to: \n/var/log/system.log\n\n\n\n\nA YAML configuration example of the step \n input:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: \n/var/log/system.log\n\n\n\n\nThat's all, your next build will attach the OS X system log file\nto your build - you'll see it at the top of the Build's page.\n\n\n\n\nBy default the \nDeploy to Bitrise.io\n will always run\n\n\nBy default the \nDeploy to Bitrise.io\n will always run,\neven if a previous step fails, \nso you can deploy failed step/tool logs too.\n\n\n\n\nDeploy a directory\n\u2693\n\n\nThe \nDeploy to Bitrise.io\n step accepts both file and directory path as its input,\nbut by default \nit does not deploy files recursively\n, from sub directories\nif you specify a directory as it's \ndeploy_path\n input.\n\n\nIf you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.\n\n\nIn this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.\n\n\nAn example configuration:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'\n\n\n\n\nNote: as every input's, \nis_compress\n's value have to be a \nstring\n, that's why \ntrue\n is surrounded with quotes.\n\n\n\n\nUsing more than one \nDeploy to Bitrise.io\n step\n\n\nYou can use as many \nDeploy to Bitrise.io\n steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Attach any file as an Artifact to the Build"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/#deploy-a-directory", 
            "text": "The  Deploy to Bitrise.io  step accepts both file and directory path as its input,\nbut by default  it does not deploy files recursively , from sub directories\nif you specify a directory as it's  deploy_path  input.  If you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.  In this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.  An example configuration:      - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'  Note: as every input's,  is_compress 's value have to be a  string , that's why  true  is surrounded with quotes.   Using more than one  Deploy to Bitrise.io  step  You can use as many  Deploy to Bitrise.io  steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Deploy a directory"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/", 
            "text": "You can expose Environment Variables from one Step,\nto make it available for every other Step performed after the Step during the build.\nAn example might be that you want to generate a\nrelease note which you want to use in a message or deploy step.\nExposing environment variables is really easy,\nyou just have to use \nenvman\n if you want to make it available for every other Step.\n\n\nA very simple example might be:\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\n\nYou can call \nenvman\n in any Step, including a script step,\nor even in your own script (stored in your repository) if you call it from a \nbitrise\n build.\n\n\nEnvman can be used in a couple of ways.\nYou can specify the value as the \n--value\n parameter (you can see this in the previous example),\npipe the value:\n\n\necho 'hi' | envman add --key MY_RELEASE_NOTE\n\n\n\n\nor read the value from a file:\n\n\nenvman add --key MY_RELEASE_NOTE --valuefile ./some/file/path\n\n\n\n\nYou can read more about how \nenvman\n can\nbe used on it's \nGitHub page\n.\n\n\n\n\nEnv Var value size limit\n\n\nEnvironment Variable values set through \nenvman\n are limited to 10KB by default.\nThis is done in order to prevent issues with common tools.\nDifferent tools have different environment size constraints,\ne.g. \nBash\n will start to fail on OS X once the environments set\nexceed ~120KB (\nin total, not a single variable!\n).\n\n\nFor larger data you should use files or other solutions,\nand use environment variables to point to the file / to the\nID or location of where the data is stored.\n\n\n\n\nOnce the environment variable is exposed you can use it like\nany other environment variable. In \nbash\n you can reference\nthe previous example environment as: \n$MY_RELEASE_NOTE\n.\n\n\nYou can of course use these exposed environment variables in the inputs of other Steps.\nFor example the \nHockeyApp Deploy\n step has a \nnotes\n input,\nyou can reference the previous example variable by inserting \n$MY_RELEASE_NOTE\n into the input,\nlike: \nThe Release Note: $MY_RELEASE_NOTE\n,\nwhich will be resolved as \nThe Release Note: This is the release note\n (if you used\nthe first example to set the value of \nMY_RELEASE_NOTE\n).\n\n\nA simple example, exposing the release note and then using it in another \nScript step\n,\nand in a \nSlack step\n:\n\n\nformat_version: 1.1.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  example:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            envman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nMy Release Note: $MY_RELEASE_NOTE\n\n    - slack:\n        inputs:\n        - channel: ...\n        - webhook_url: ...\n        - message: \nRelease Notes: $MY_RELEASE_NOTE\n\n\n\n\nCopy an environment variable to another key\n\u2693\n\n\nIf you want to expose the value of an environment variable to be accessible\nthrough another environment variable key, you can simply expose the value with a new key.\n\n\nFor example, if you want to copy the value of the \nBITRISE_BUILD_NUMBER\n environment variable\nand make it available under the environment variable key \nMY_BUILD_NUMBER\n, you just have to\nread the current value and expose it under the new key.\n\n\nTo modify the first example here, which exposed a fix value:\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\n\nsimply reference/read the value of the other environment variable in the \nenvman add ...\n command.\n\n\nTo expose the value of \nBITRISE_BUILD_NUMBER\n under the key \nMY_BUILD_NUMBER\n:\n\n\nenvman add --key MY_BUILD_NUMBER --value \n${BITRISE_BUILD_NUMBER}\n\n\n\n\nAfter this, subsequent steps can get the value of \nBITRISE_BUILD_NUMBER\n from the\n\nMY_BUILD_NUMBER\n environment variable.\n\n\nNote: if you change the value of \nBITRISE_BUILD_NUMBER\n after this, the\nvalue of \nMY_BUILD_NUMBER\n won't be modified, that will still hold the original value!\n\n\nOverwrite an Environment Variable if another one is set\n\u2693\n\n\nE.g. if a custom environment variable is set through the Build Trigger API.\n\n\nThe best way to do this, to make sure that no matter what, you overwrite the other env var,\nis to use a Script step, as described above, and check whether the custom env var is set.\n\n\nAs an example, if you want to overwrite the \nPROJECT_SCHEME\n environment variable,\nif, let's say, a \nAPI_PROJECT_SCHEME\n env var is set, just drop in a \nScript\n step (can be the very first one\nin the workflow), with the content:\n\n\n#!/bin/bash\nset -ex\nif [ ! -z \n$API_PROJECT_SCHEME\n ] ; then\n  envman add --key PROJECT_SCHEME --value \n$API_PROJECT_SCHEME\n\nfi\n\n\n\n\nThis script will check whether the \nAPI_PROJECT_SCHEME\n env var is defined,\nand if it is, then its value will be assigned to the \nPROJECT_SCHEME\n environment variable,\noverwriting the original value of \nPROJECT_SCHEME\n.\n\n\nAlternative solution: use Workflow Env Vars\n\u2693\n\n\nAlternatively you can set environment variables for Workflows too.\nThe Env Vars you set for a workflow will overwrite the env var\nif defined as an App Env Var or Secret Env Var.\n\n\nAn example workflow which defined an environment variable, and then runs another workflow\nwhich can use those env vars:\n\n\nworkflows:\n\n  deploy-alpha:\n    envs:\n    - ENV_TYPE: alpha\n    after_run:\n    - _deploy\n\n  _deploy:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nENV_TYPE: $ENV_TYPE\n\n\n\n\nIf you run the \ndeploy-alpha\n workflow, that will set the \nENV_TYPE\n env var to \nalpha\n,\nthen it will run the \n_deploy\n workflow, which can use that environment variable -\nin this example it will simply print its value (the printed text will be: \nENV_TYPE: alpha\n).", 
            "title": "Expose an Environment Variable and use it in another Step"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#copy-an-environment-variable-to-another-key", 
            "text": "If you want to expose the value of an environment variable to be accessible\nthrough another environment variable key, you can simply expose the value with a new key.  For example, if you want to copy the value of the  BITRISE_BUILD_NUMBER  environment variable\nand make it available under the environment variable key  MY_BUILD_NUMBER , you just have to\nread the current value and expose it under the new key.  To modify the first example here, which exposed a fix value:  envman add --key MY_RELEASE_NOTE --value  This is the release note  simply reference/read the value of the other environment variable in the  envman add ...  command.  To expose the value of  BITRISE_BUILD_NUMBER  under the key  MY_BUILD_NUMBER :  envman add --key MY_BUILD_NUMBER --value  ${BITRISE_BUILD_NUMBER}  After this, subsequent steps can get the value of  BITRISE_BUILD_NUMBER  from the MY_BUILD_NUMBER  environment variable.  Note: if you change the value of  BITRISE_BUILD_NUMBER  after this, the\nvalue of  MY_BUILD_NUMBER  won't be modified, that will still hold the original value!", 
            "title": "Copy an environment variable to another key"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#overwrite-an-environment-variable-if-another-one-is-set", 
            "text": "E.g. if a custom environment variable is set through the Build Trigger API.  The best way to do this, to make sure that no matter what, you overwrite the other env var,\nis to use a Script step, as described above, and check whether the custom env var is set.  As an example, if you want to overwrite the  PROJECT_SCHEME  environment variable,\nif, let's say, a  API_PROJECT_SCHEME  env var is set, just drop in a  Script  step (can be the very first one\nin the workflow), with the content:  #!/bin/bash\nset -ex\nif [ ! -z  $API_PROJECT_SCHEME  ] ; then\n  envman add --key PROJECT_SCHEME --value  $API_PROJECT_SCHEME \nfi  This script will check whether the  API_PROJECT_SCHEME  env var is defined,\nand if it is, then its value will be assigned to the  PROJECT_SCHEME  environment variable,\noverwriting the original value of  PROJECT_SCHEME .", 
            "title": "Overwrite an Environment Variable if another one is set"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#alternative-solution-use-workflow-env-vars", 
            "text": "Alternatively you can set environment variables for Workflows too.\nThe Env Vars you set for a workflow will overwrite the env var\nif defined as an App Env Var or Secret Env Var.  An example workflow which defined an environment variable, and then runs another workflow\nwhich can use those env vars:  workflows:\n\n  deploy-alpha:\n    envs:\n    - ENV_TYPE: alpha\n    after_run:\n    - _deploy\n\n  _deploy:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo  ENV_TYPE: $ENV_TYPE  If you run the  deploy-alpha  workflow, that will set the  ENV_TYPE  env var to  alpha ,\nthen it will run the  _deploy  workflow, which can use that environment variable -\nin this example it will simply print its value (the printed text will be:  ENV_TYPE: alpha ).", 
            "title": "Alternative solution: use Workflow Env Vars"
        }, 
        {
            "location": "/tips-and-tricks/dont-mark-build-failed-if-step-fails/", 
            "text": "To do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\nAll you have to do is: add an \nis_skippable: true\n flag to the Step.\n\n\nAn example \nscript\n step which, although fails, it won't \"break\" the build:\n\n\n- script:\n    is_skippable: true\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nFailing Step.\n\n        exit 1\n        # exit 1 would mark this step as Failed, but it won't break the Build\n        #  because of the is_skippable: true flag / propery\n\n\n\n\nYou can find more examples on \nGitHub\n.", 
            "title": "Don't mark the Build as failed if a given step would fail (ignore the error of the Step)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/", 
            "text": "Disable a Step\n\u2693\n\n\nIf you don't want to remove the Step from your Workflow and you don't want to duplicate the Workflow either (which is the preferred way if you want to experiment with new things; you can just create a \"backup\" clone of your original Workflow) then you can simply disable a Step by specifying \nrun_if: false\n .\n\n\nExample:\n\n\n- script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nThis will never run, because of run_if:false\n\n\n\n\nRun a Step only if the Build failed\n\u2693\n\n\nTo do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\nYou have to add two properties to the Step you \nonly\n want to run when the Build failed (at that point, when the Step would run):\n\n\n\n\nis_always_run: true\n (this enables the Step to be considered to run even if a previous Step failed)\n\n\nrun_if: .IsBuildFailed\n (you can find more examples of the \nrun_if\n template at: \nhttps://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml\n).\n\n\n\n\nAn example \nscript\n step, which will only run if the Build failed:\n\n\n- script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nBuild Failed!\n\n\n\n\n\n\nA \nrun_if\n can be any valid \nGo\n template\n\n\nA \nrun_if\n can be any valid \nGo template\n, as long as it evaluates to \ntrue\n or \nfalse\n (or any of the String representation, e.g. \n\"True\"\n, \n\"t\"\n, \n\"yes\"\n or \n\"y\"\n are all considered to be \ntrue\n). If the template evaluates to \ntrue\n the Step will run, otherwise it won't.\n\n\n\n\nAn example \nrun_if\n to check a \ncustom environment variable\n (you\ncan expose environment variables from your scripts too,\nusing \nenvman\n):\n\n\nrun_if: |-\n  {{enveq \nCUSTOM_ENV_VAR_KEY\n \ntest value to test against\n}}\n\n\n\n\nThis \nrun_if\n will skip the step in every case when the value of \nCUSTOM_ENV_VAR_KEY\n\nis not \ntest value to test against\n.", 
            "title": "Enable/Disable a step (optionally, based on a condition)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#disable-a-step", 
            "text": "If you don't want to remove the Step from your Workflow and you don't want to duplicate the Workflow either (which is the preferred way if you want to experiment with new things; you can just create a \"backup\" clone of your original Workflow) then you can simply disable a Step by specifying  run_if: false  .  Example:  - script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  This will never run, because of run_if:false", 
            "title": "Disable a Step"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#run-a-step-only-if-the-build-failed", 
            "text": "To do this you have to switch to  bitrise.yml  mode (open the Workflow Editor on bitrise.io -  left side: click on  bitrise.yml  to switch to the interactive  bitrise.yml  editor).  You have to add two properties to the Step you  only  want to run when the Build failed (at that point, when the Step would run):   is_always_run: true  (this enables the Step to be considered to run even if a previous Step failed)  run_if: .IsBuildFailed  (you can find more examples of the  run_if  template at:  https://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml ).   An example  script  step, which will only run if the Build failed:  - script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  Build Failed!   A  run_if  can be any valid  Go  template  A  run_if  can be any valid  Go template , as long as it evaluates to  true  or  false  (or any of the String representation, e.g.  \"True\" ,  \"t\" ,  \"yes\"  or  \"y\"  are all considered to be  true ). If the template evaluates to  true  the Step will run, otherwise it won't.   An example  run_if  to check a  custom environment variable  (you\ncan expose environment variables from your scripts too,\nusing  envman ):  run_if: |-\n  {{enveq  CUSTOM_ENV_VAR_KEY   test value to test against }}  This  run_if  will skip the step in every case when the value of  CUSTOM_ENV_VAR_KEY \nis not  test value to test against .", 
            "title": "Run a Step only if the Build failed"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/", 
            "text": "If you create a new iOS app on \nbitrise.io\n\nthe generated default workflow wil include our \nXcode Archive\n step.\nThis step can manage to archive and export your iOS app.\n\n\nA bit of history and technical info\n\u2693\n\n\nIf the step is used with \nXcode 6\n it'll generate the following (legacy) command to export\nthe \nipa\n of your app (you can see it in the step's log):\n\n\nxcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/Users/vagrant/deploy/ios-simple-objc.ipa\n \\\n    -exportProvisioningProfile \nXyz\n\n\n\n\nBack in the days of Xcode 6 this was everything you had to do; just specify the format to be \nipa\n\nand set the required paths and the Provisioning Profile to be used for code signing the \nipa\n.\n\n\nXcode 7\n instroduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as \ndeprecated\n, and you'd get\nthe following warning if you'd use the old parameters instead of the new \n-exportOptionsPlist\n parameter: \n\n\nxcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated\n\n\n\n\nThe export command's \nnew version\n expects a Plist file (\n-exportOptionsPlist\n),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:\n\n\nxcodebuild -exportArchive \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi\n \\\n    -exportOptionsPlist \n/Users/vagrant/deploy/export_options.plist\n\n\n\n\nBy default the \nXcode Archive\n step generates the minimal sufficient Plist file,\nwith only the export \nmethod\n defined in it (unless you specify the \nexport_options_path\n input,\nwe'll get back to this a bit later):\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\ndevelopment\n/string\n\n\n/dict\n\n\n/plist\n\n\n\n\nAbout the Xcode Archive step generated export options\n\u2693\n\n\nThe default \ngenerated\n export options Plist file only specifies\nthe \nexport method\n (\napp-store\n, \nad-hoc\n, \nenterprise\n or \ndevelopment\n)\nbased on the provisioning profile embedded in the \n.xcarchive\n (which is generated by the \nxcodebuild archive\n\ncommand, also performed by the \nXcode Archive\n step, right before the \nxcodebuild -exportArchive\n command).\n\n\nThe embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith \nXcode Archive\n step's \nforce_code_sign_identity\n and \nforce_provisioning_profile\n inputs.\nYou can find more information about these options in the \niOS Code Signing\n article.\n\n\nEvery other export option which can be defined in the Plist is optional.\n\n\nUse your own export options\n\u2693\n\n\nIn case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use. \n\n\n\n\nAvailable export options\n\n\nYou can get a list of all available options by calling \nxcodebuild -h\n -\ncheck the \nAvailable keys for -exportOptionsPlist:\n section of the printed help.\n\n\n\n\nThese are the options you can select in Xcode when you export the ipa manually.\n\n\nThe \nrecommanded\n way is to \nput this generated plist file in your project's repository\n.\nThen you can set \nXcode Archive\n step's \nexport_options_path\n input\nto the path of your plist file (e.g. \n./path/to/export-options.plist\n).\n\n\nDisable bitcode in ipa\n\u2693\n\n\nBy default uploadBitcode export options is set to YES\n, unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.\n\n\nYour export options plist should look like:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\napp-store\n/string\n\n    \nkey\nuploadBitcode\n/key\n\n    \nfalse/\n\n\n/dict\n\n\n/plist\n\n\n\n\n\n\nCode Signing note\n\n\nOf course, if you set the \nmethod\n to \napp-store\n then you have to upload / use\nan App Store code signing Identity \n Provisioning Profile (it have to be\navailable in the system).\n\n\n\n\nRelated issues:\n\u2693\n\n\nERROR ITMS-90635: Invalid Mach-O Format\n\u2693\n\n\nTransporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...\n\n\n\n\nThis error occurs if you have different \nENABLE_BITCODE\n settings\nin your (sub)projects, including the projects generated by CocoaPods for example.\n\n\nIf you use CocoaPods you can \noverride the \nENABLE_BITCODE\n in the pod projects\n by adding\nthe following section to your \nPodfile\n:\n\n\nFor CocoaPods 1.0+:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend\n\n\n\n\nFor CocoaPods 0.39 and below:\n\n\npost_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "Xcode Archive: export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#a-bit-of-history-and-technical-info", 
            "text": "If the step is used with  Xcode 6  it'll generate the following (legacy) command to export\nthe  ipa  of your app (you can see it in the step's log):  xcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive  \\\n    -exportPath  /Users/vagrant/deploy/ios-simple-objc.ipa  \\\n    -exportProvisioningProfile  Xyz  Back in the days of Xcode 6 this was everything you had to do; just specify the format to be  ipa \nand set the required paths and the Provisioning Profile to be used for code signing the  ipa .  Xcode 7  instroduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as  deprecated , and you'd get\nthe following warning if you'd use the old parameters instead of the new  -exportOptionsPlist  parameter:   xcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated  The export command's  new version  expects a Plist file ( -exportOptionsPlist ),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:  xcodebuild -exportArchive \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive  \\\n    -exportPath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi  \\\n    -exportOptionsPlist  /Users/vagrant/deploy/export_options.plist  By default the  Xcode Archive  step generates the minimal sufficient Plist file,\nwith only the export  method  defined in it (unless you specify the  export_options_path  input,\nwe'll get back to this a bit later):  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string development /string  /dict  /plist", 
            "title": "A bit of history and technical info"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#about-the-xcode-archive-step-generated-export-options", 
            "text": "The default  generated  export options Plist file only specifies\nthe  export method  ( app-store ,  ad-hoc ,  enterprise  or  development )\nbased on the provisioning profile embedded in the  .xcarchive  (which is generated by the  xcodebuild archive \ncommand, also performed by the  Xcode Archive  step, right before the  xcodebuild -exportArchive  command).  The embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith  Xcode Archive  step's  force_code_sign_identity  and  force_provisioning_profile  inputs.\nYou can find more information about these options in the  iOS Code Signing  article.  Every other export option which can be defined in the Plist is optional.", 
            "title": "About the Xcode Archive step generated export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#use-your-own-export-options", 
            "text": "In case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use.    Available export options  You can get a list of all available options by calling  xcodebuild -h  -\ncheck the  Available keys for -exportOptionsPlist:  section of the printed help.   These are the options you can select in Xcode when you export the ipa manually.  The  recommanded  way is to  put this generated plist file in your project's repository .\nThen you can set  Xcode Archive  step's  export_options_path  input\nto the path of your plist file (e.g.  ./path/to/export-options.plist ).", 
            "title": "Use your own export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#disable-bitcode-in-ipa", 
            "text": "By default uploadBitcode export options is set to YES , unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.  Your export options plist should look like:  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string app-store /string \n     key uploadBitcode /key \n     false/  /dict  /plist   Code Signing note  Of course, if you set the  method  to  app-store  then you have to upload / use\nan App Store code signing Identity   Provisioning Profile (it have to be\navailable in the system).", 
            "title": "Disable bitcode in ipa"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#related-issues", 
            "text": "", 
            "title": "Related issues:"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#error-itms-90635-invalid-mach-o-format", 
            "text": "Transporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...  This error occurs if you have different  ENABLE_BITCODE  settings\nin your (sub)projects, including the projects generated by CocoaPods for example.  If you use CocoaPods you can  override the  ENABLE_BITCODE  in the pod projects  by adding\nthe following section to your  Podfile :  For CocoaPods 1.0+:  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend  For CocoaPods 0.39 and below:  post_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "ERROR ITMS-90635: Invalid Mach-O Format"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/", 
            "text": "If you need something you can't find a Step for, you can always install \n use tools with scripts or Script steps.\n\n\nJust add a \nScript\n step to your Workflow, and either write your script there, or run a script from your repository.\n\n\nPasswordless \nsudo\n is enabled on all of our build virtual machines, so you can freely use \nsudo\n if you need it.\n\n\nOnce you have a working script, \nyou can also transform it into a Step\n and optionally share it with others (through our StepLib).\nYou can find a template and more information about how you can create your own Step at: \nhttps://github.com/bitrise-steplib/step-template\n\n\nStep by step setup\n\u2693\n\n\n\n\nOpen your app on Bitrise.io\n\n\nOpen the app's Workflow Editor (on the \nWorkflow\n tab -\n click \nManage Workflows\n)\n\n\nSelect a Workflow\n\n\nClick on the \n+\n sign (you can see this between every step), where you want to insert your Script step\n\n\nIn the step list search for \"script\", and click the \nAdd to Workflow\n button on the \"Script\" step item.\n\n\nNow that you have the Script step in your workflow, you just have to select it and write your script into the \nScript content\n input (on the right side of the Workflow Editor).\n\n\n\n\nNote: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.\n\n\nIf you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at \npath/to/script.sh\n you can run it with this \nScript content\n:\n\n\nbash ./path/to/script.sh\n\n\n\n\nOr, in a more robust form (which is better if you want to extend the content in the future):\n\n\n#!/bin/bash\nset -ex\nbash ./path/to/script.sh\n\n\n\n\nThe \nset -ex\n line is recommended for every multi-line Bash script, to make your scripts easier to debug.\n\n\nYou can of course run non Bash scripts too, e.g. a Ruby script:\n\n\n#!/bin/bash\nset -ex\nruby ./path/to/script.rb\n\n\n\n\nExamples\n\u2693\n\n\nAt this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!\n\n\nbrew\n on macOS\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on macOS, using \nbrew\n:\n\n\n#!/bin/bash\nset -ex\nbrew install cmake\n\n\n\n\nActually, the whole Script content could be as short as:\n\n\nbrew install cmake\n\n\n\n\nWhich is exactly how you would use \nbrew\n on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.\n\n\napt-get\n on Linux\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on Linux, using \napt-get\n:\n\n\n#!/bin/bash\nset -ex\nsudo apt-get install -y cmake\n\n\n\n\n\n\nDon't forget the \n-y\n flag for \napt-get\n!\n\n\nIf you don't add the \n-y\n (\"yes\") flag to the \napt-get\n command, \napt-get\n will\npresent a prompt which you have to accept or deny \nmanually\n.\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for \napt-get\n. To prevent this issue,\nand to auto accept the prompt, just use the \n-y\n flag, as shown in the example.\n\n\n\n\nAdvanced option: use \ndeps\n in \nbitrise.yml\n\u2693\n\n\nInstead of installing your tool inside the Script step, you can use the \ndeps\n option\nof the \nbitrise.yml\n. If you declare \ndeps\n \nfor a given Step\n,\nthe \nBitrise CLI\n\nwill check if that tool is installed, and will install it for you if required.\n\n\n\n\nAvailable dependency managers\n\n\nThis method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.\n\n\n\n\nAn example, installing \ncmake\n with either \napt-get\n (where \napt-get\n is available),\nor with \nbrew\n (on macOS):\n\n\ndeps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake\n\n\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake\n\n\n\n\nAn advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated \nbinary name\n. If that matches the package name (like in case of \ncmake\n) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with \nbin_name\n. An example is AWS CLI, where the package name in both\npackage managers is \nawscli\n, but the binary itself is \naws\n.\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws\n\n\n\n\nConditional execution\n\u2693\n\n\nAdditionally, you can use Environment Variables in your scripts too.\nAs an example, using the \nPR\n environment variable\n(but you can use any \nAvailable Environment Variable\n,\nlike the ones exposed by previous steps in the Workflow),\nto run different scripts in case of a Pull Request and a non Pull Request build:\n\n\n#!/bin/bash\nset -ex\n\nif [[ \n$PR\n == \ntrue\n ]] ; then\n  echo \n=\n Pull Request mode/build!\n\n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo \n=\n Not Pull Request mode/build!\n\n  bash ./path/to/not-pull-request.sh\nfi\n\n\n\n\nNote: if you \ndon't\n want to run any part of the Step/script based on a variable (like \n$PR\n),\nyou don't have to implement the check in the script. You can use the \nrun_if\n expression in\nthe \nbitrise.yml\n directly to declare in which case(s) the Step should run. Additionally,\n\nrun_if\n can be added to any step, not just to Script steps.\nYou can find more information about \nrun_if\n expressions\nin \nthis guide\n.", 
            "title": "Install Any Additional Tool"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#step-by-step-setup", 
            "text": "Open your app on Bitrise.io  Open the app's Workflow Editor (on the  Workflow  tab -  click  Manage Workflows )  Select a Workflow  Click on the  +  sign (you can see this between every step), where you want to insert your Script step  In the step list search for \"script\", and click the  Add to Workflow  button on the \"Script\" step item.  Now that you have the Script step in your workflow, you just have to select it and write your script into the  Script content  input (on the right side of the Workflow Editor).   Note: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.  If you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at  path/to/script.sh  you can run it with this  Script content :  bash ./path/to/script.sh  Or, in a more robust form (which is better if you want to extend the content in the future):  #!/bin/bash\nset -ex\nbash ./path/to/script.sh  The  set -ex  line is recommended for every multi-line Bash script, to make your scripts easier to debug.  You can of course run non Bash scripts too, e.g. a Ruby script:  #!/bin/bash\nset -ex\nruby ./path/to/script.rb", 
            "title": "Step by step setup"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#examples", 
            "text": "At this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!", 
            "title": "Examples"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#brew-on-macos", 
            "text": "E.g. to install  cmake  with a script step, on macOS, using  brew :  #!/bin/bash\nset -ex\nbrew install cmake  Actually, the whole Script content could be as short as:  brew install cmake  Which is exactly how you would use  brew  on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.", 
            "title": "brew on macOS"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#apt-get-on-linux", 
            "text": "E.g. to install  cmake  with a script step, on Linux, using  apt-get :  #!/bin/bash\nset -ex\nsudo apt-get install -y cmake   Don't forget the  -y  flag for  apt-get !  If you don't add the  -y  (\"yes\") flag to the  apt-get  command,  apt-get  will\npresent a prompt which you have to accept or deny  manually .\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for  apt-get . To prevent this issue,\nand to auto accept the prompt, just use the  -y  flag, as shown in the example.", 
            "title": "apt-get on Linux"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#advanced-option-use-deps-in-bitriseyml", 
            "text": "Instead of installing your tool inside the Script step, you can use the  deps  option\nof the  bitrise.yml . If you declare  deps   for a given Step ,\nthe  Bitrise CLI \nwill check if that tool is installed, and will install it for you if required.   Available dependency managers  This method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.   An example, installing  cmake  with either  apt-get  (where  apt-get  is available),\nor with  brew  (on macOS):  deps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake  A minimal  bitrise.yml  for demonstration:  format_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake  An advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated  binary name . If that matches the package name (like in case of  cmake ) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with  bin_name . An example is AWS CLI, where the package name in both\npackage managers is  awscli , but the binary itself is  aws .  A minimal  bitrise.yml  for demonstration:  format_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws", 
            "title": "Advanced option: use deps in bitrise.yml"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#conditional-execution", 
            "text": "Additionally, you can use Environment Variables in your scripts too.\nAs an example, using the  PR  environment variable\n(but you can use any  Available Environment Variable ,\nlike the ones exposed by previous steps in the Workflow),\nto run different scripts in case of a Pull Request and a non Pull Request build:  #!/bin/bash\nset -ex\n\nif [[  $PR  ==  true  ]] ; then\n  echo  =  Pull Request mode/build! \n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo  =  Not Pull Request mode/build! \n  bash ./path/to/not-pull-request.sh\nfi  Note: if you  don't  want to run any part of the Step/script based on a variable (like  $PR ),\nyou don't have to implement the check in the script. You can use the  run_if  expression in\nthe  bitrise.yml  directly to declare in which case(s) the Step should run. Additionally, run_if  can be added to any step, not just to Script steps.\nYou can find more information about  run_if  expressions\nin  this guide .", 
            "title": "Conditional execution"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/", 
            "text": "You can improve your build times with the following tips.\n\n\nFeel free to suggest other ways of optimization!\n\n\nInclude your dependencies in your repository\n\u2693\n\n\nIncluding your dependencies (like CocoaPods) in your repository can speed up your builds.\nOnce the \ngit clone\n of your repository is done, everything will be in place to do your build.\n\n\nFor example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow\nif you include your \nPods\n directory \nand\n the CocoaPods generated \n.xcworkspace\n file in your repository.\n\n\nYou can read more about the pros \n cons of including your dependencies in your repository at:\n\nShould I commit my dependencies into my repository?\n\n\nUse the Build Cache\n\u2693\n\n\nIn some cases using the \nBuild Cache\n feature can also help to speed up your builds.\nNote: the efficiency of the Build Cache depends on the size of the files you want to cache,\nas well as on the number of files you want to cache.\nFor more information see the \nBuild Cache documentation\n.\n\n\nTurn off the \"Clean build\" option of Xcode steps\n\u2693\n\n\nAll of our Xcode steps (Xcode Test, Xcode Archive and Xcode Analyze) have a \"Do a clean Xcode build ...?\" option.\nYou can usually turn off this option without causing any issues.\n\n\nBy turning off \"clean build\" you can speed up subsequent Xcode steps.\nThe first one will still have to do a full, clean build, because there's no build cache at the time it runs\n(as every build runs in a brand new, clean Virtual Machine, as descibed in \nCode Security\n),\nbut subsequent Xcode steps can use the build cache of the previous Xcode step(s), reducing the compilation time of the step.\n\n\nOther\n\u2693\n\n\nFeel free to suggest other ways of optimization!\n\n\n\n\nGuarding Against Long Compiles", 
            "title": "Optimize your build times"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#include-your-dependencies-in-your-repository", 
            "text": "Including your dependencies (like CocoaPods) in your repository can speed up your builds.\nOnce the  git clone  of your repository is done, everything will be in place to do your build.  For example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow\nif you include your  Pods  directory  and  the CocoaPods generated  .xcworkspace  file in your repository.  You can read more about the pros   cons of including your dependencies in your repository at: Should I commit my dependencies into my repository?", 
            "title": "Include your dependencies in your repository"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#use-the-build-cache", 
            "text": "In some cases using the  Build Cache  feature can also help to speed up your builds.\nNote: the efficiency of the Build Cache depends on the size of the files you want to cache,\nas well as on the number of files you want to cache.\nFor more information see the  Build Cache documentation .", 
            "title": "Use the Build Cache"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#turn-off-the-clean-build-option-of-xcode-steps", 
            "text": "All of our Xcode steps (Xcode Test, Xcode Archive and Xcode Analyze) have a \"Do a clean Xcode build ...?\" option.\nYou can usually turn off this option without causing any issues.  By turning off \"clean build\" you can speed up subsequent Xcode steps.\nThe first one will still have to do a full, clean build, because there's no build cache at the time it runs\n(as every build runs in a brand new, clean Virtual Machine, as descibed in  Code Security ),\nbut subsequent Xcode steps can use the build cache of the previous Xcode step(s), reducing the compilation time of the step.", 
            "title": "Turn off the \"Clean build\" option of Xcode steps"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#other", 
            "text": "Feel free to suggest other ways of optimization!   Guarding Against Long Compiles", 
            "title": "Other"
        }, 
        {
            "location": "/tips-and-tricks/should-i-commit-my-dependencies-into-my-repository/", 
            "text": "It's a highly debated topic, there are obvious pros and cons\nfor both keeping your dependencies in or outside of your code repository.\n\n\nYou're of course free to do it the way you want to,\n\nour recommendation is that you should include your dependencies inside your repository,\nwhenever you can\n. \n\n\nLet's see why.\n\n\n\n\nOnce \ngit clone\n is finished you'll have everything, ready for work.\n  In a \nCI / distributed environment\n this also means \nless chance for network issues\n,\n  your build won't fail just because a dependency manager's server is down.\n  Your builds will be \nmore reliable\n, less error prone.\n\n\nYou see every dependency update in your repository, \nyou can review the changes\n in \ngit\n\n  and decide whether you actually want to upgrade to a newer version or not.\n  You can create a Pull Request for just the dependency updates and have it reviewed by your team.\n\n\nIt protects against disappearing packages / dependencies\n.\n  Yes, it can happen that packages / dependencies\n  \ndisappear overnight from the package manager you use\n,\n  and you're no longer able to retrieve them.\n  Keeping your dependencies in your repository makes sure that this won't break your project at the worst time.\n\n\nMakes the build process faster\n as well, as everything is prepared for the build and\n  there's no need to call dependency manager tools, nor to download the dependencies separately.\n\n\nFor example, if you use \nCocoaPods\n and you commit your \nPods\n directory\n  and your CocoaPods generated \n.xcworkspace\n directory (\n.xcworkspace\n is actually a directory, which is presented as a file in Finder)\n  to your repository then you can remove the CocoaPods Install Step from your \nbitrise.io\n workflow completely.\n\n\n\n\n\n\nNo more issues with using \ndifferent versions of the dependency manager tool\n.\n  The most popular iOS dependency tools change quite frequently and sometimes introduce breaking changes.\n  By including your dependencies inside your repository you won't have to\n  rely on using the exact same version of the tool everywhere (across your team and on your CI service as well).\n\n\nNo more issues with private submodules / private pods.\n  As described here \nAdding projects with submodules\n granting permission\n  to a project which depends on private Pods, submodules or other git related dependencies can be quite hard.\n  Most will simply not go through with activating and de-activating separate Deployment SSH keys\n  for every dependency and will eventually just add the SSH key to their account or to a \"bot\" account as a personal SSH key.\n  Using a bot user as described in the linked guide can be sufficient from a security perspective,\n  but it's still way easier (and more secure) to just use Read Only Deployment keys.\n  A given SSH key is allowed to be registered only once on GitHub, which means that you can't register\n  the same SSH key for multiple repositories as Deployment Key.\n  If you have every dependency in your repository you don't have to use any workaround,\n  a single read only Deployment Key will be enough.\n  In fact \nbitrise.io\n registers Deployment Keys\n  by default during the automatic repository setup,\n  which grants access only to the specified repository.\n\n\n\n\nOf course you're free to go with either solution and we'll keep working on supporting the way you work,\nbut we think that having full control over dependency changes\nand having a more reliable setup (which is easier to work with in a remote, automation environment)\nprovides enough advantage in most cases.", 
            "title": "Should I commit my dependencies into my repository?"
        }, 
        {
            "location": "/faq/available-environment-variables/", 
            "text": "Interactive available Environment Variables list\n\u2693\n\n\nIn the \nWorkflow Editor\n on \nbitrise.io\n\nyou can click into any input field of a Step and a green \nInsert Variable\n button will appear.\n\n\nClick this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\nThis is an interactive list, which includes Environment Variables generated by previous Steps!\nThis means, that if you click into an input of the third Step of your Workflow,\nthe list will include all the Environment Variables (outputs) generated by the first and second Steps,\nbut not the ones which will be generated by the forth, fifth, ... Steps.\n\n\nExposed by the Bitrise CLI\n\u2693\n\n\nThese Environment Variables are available everywhere, even if you run the build on your own Mac\n(using the \nBitrise CLI\n):\n\n\n\n\nBITRISE_TRIGGERED_WORKFLOW_ID\n : the Workflow's ID which was triggered, either with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_TRIGGERED_WORKFLOW_TITLE\n : the Workflow's title (if you provided one) which was triggered,\n  either with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_BUILD_STATUS\n : current status of the build - \n\"0\"\n if there are no failed steps yet,\n  \n\"1\"\n if there's at least one failed step\n\n\nBITRISE_SOURCE_DIR\n : path of source / base workdir. By default it's the directory where \nbitrise\n runs\n  (e.g. your repository root), unless you provide a different value.\n  Can be overwritten during the build, which will change the working directory for subsequent Steps in the build.\n\n\nBITRISE_DEPLOY_DIR\n : directory to store artifacts / files for deploy.\n  It's a temporary directory created by \nbitrise\n CLI by default, and can be overwritten before starting \nbitrise\n CLI.\n  \nThe content of this directory can be attached to the \nbitrise.io\n build page, as artifacts,\n  with the \nDeploy to Bitrise.io\n step for example.\n\n\nCI\n : indicates whether \nbitrise\n CLI is running in CI (Continuous Integration) mode. Value can be \n\"true\"\n or \n\"false\"\n.\n\n\nPR\n : indicates whether \nbitrise\n CLI is running in PR (Pull Request) mode. Value can be \n\"true\"\n or \n\"false\"\n.\n\n\n\n\nExposed by Bitrise.io\n\u2693\n\n\nThese environments are available for builds running on \nbitrise.io\n Virtual Machines:\n\n\n\n\nBITRISE_BUILD_NUMBER\n : build number of the build on \nbitrise.io\n\n\nBITRISE_APP_TITLE\n : app title on \nbitrise.io\n\n\nBITRISE_APP_URL\n : app URL on \nbitrise.io\n\n\nBITRISE_APP_SLUG\n : app slug on \nbitrise.io\n\n\nBITRISE_BUILD_URL\n : build's URL on \nbitrise.io\n\n\nBITRISE_BUILD_SLUG\n : build's slug on \nbitrise.io\n\n\nBITRISE_BUILD_TRIGGER_TIMESTAMP\n : triggered at timestamp of the build\n\n\nGIT_REPOSITORY_URL\n : git repository URL\n\n\nBITRISE_GIT_BRANCH\n : the branch which triggered the build (if any)\n\n\nBITRISE_GIT_TAG\n : tag which triggered the build (if any)\n\n\nBITRISE_GIT_COMMIT\n : commit hash which triggered the build (if any)\n\n\nBITRISE_GIT_MESSAGE\n : commit message - or the message you specified if you triggered the build manually\n\n\nBITRISE_PULL_REQUEST\n : Pull Request ID, which triggered the build (if any)\n\n\nBITRISE_PROVISION_URL\n : Provisioning Profile(s) URL - the ones uploaded to \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_URL\n : Certificate / Identity URL - the one uploaded to \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_PASSPHRASE\n : Certificate / Identity's password / passphrase,\n  the one specified on \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.", 
            "title": "Available Environment Variables"
        }, 
        {
            "location": "/faq/available-environment-variables/#interactive-available-environment-variables-list", 
            "text": "In the  Workflow Editor  on  bitrise.io \nyou can click into any input field of a Step and a green  Insert Variable  button will appear.  Click this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.  This is an interactive list, which includes Environment Variables generated by previous Steps!\nThis means, that if you click into an input of the third Step of your Workflow,\nthe list will include all the Environment Variables (outputs) generated by the first and second Steps,\nbut not the ones which will be generated by the forth, fifth, ... Steps.", 
            "title": "Interactive available Environment Variables list"
        }, 
        {
            "location": "/faq/available-environment-variables/#exposed-by-the-bitrise-cli", 
            "text": "These Environment Variables are available everywhere, even if you run the build on your own Mac\n(using the  Bitrise CLI ):   BITRISE_TRIGGERED_WORKFLOW_ID  : the Workflow's ID which was triggered, either with  bitrise run  or  bitrise trigger  BITRISE_TRIGGERED_WORKFLOW_TITLE  : the Workflow's title (if you provided one) which was triggered,\n  either with  bitrise run  or  bitrise trigger  BITRISE_BUILD_STATUS  : current status of the build -  \"0\"  if there are no failed steps yet,\n   \"1\"  if there's at least one failed step  BITRISE_SOURCE_DIR  : path of source / base workdir. By default it's the directory where  bitrise  runs\n  (e.g. your repository root), unless you provide a different value.\n  Can be overwritten during the build, which will change the working directory for subsequent Steps in the build.  BITRISE_DEPLOY_DIR  : directory to store artifacts / files for deploy.\n  It's a temporary directory created by  bitrise  CLI by default, and can be overwritten before starting  bitrise  CLI.\n   The content of this directory can be attached to the  bitrise.io  build page, as artifacts,\n  with the  Deploy to Bitrise.io  step for example.  CI  : indicates whether  bitrise  CLI is running in CI (Continuous Integration) mode. Value can be  \"true\"  or  \"false\" .  PR  : indicates whether  bitrise  CLI is running in PR (Pull Request) mode. Value can be  \"true\"  or  \"false\" .", 
            "title": "Exposed by the Bitrise CLI"
        }, 
        {
            "location": "/faq/available-environment-variables/#exposed-by-bitriseio", 
            "text": "These environments are available for builds running on  bitrise.io  Virtual Machines:   BITRISE_BUILD_NUMBER  : build number of the build on  bitrise.io  BITRISE_APP_TITLE  : app title on  bitrise.io  BITRISE_APP_URL  : app URL on  bitrise.io  BITRISE_APP_SLUG  : app slug on  bitrise.io  BITRISE_BUILD_URL  : build's URL on  bitrise.io  BITRISE_BUILD_SLUG  : build's slug on  bitrise.io  BITRISE_BUILD_TRIGGER_TIMESTAMP  : triggered at timestamp of the build  GIT_REPOSITORY_URL  : git repository URL  BITRISE_GIT_BRANCH  : the branch which triggered the build (if any)  BITRISE_GIT_TAG  : tag which triggered the build (if any)  BITRISE_GIT_COMMIT  : commit hash which triggered the build (if any)  BITRISE_GIT_MESSAGE  : commit message - or the message you specified if you triggered the build manually  BITRISE_PULL_REQUEST  : Pull Request ID, which triggered the build (if any)  BITRISE_PROVISION_URL  : Provisioning Profile(s) URL - the ones uploaded to  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.  BITRISE_CERTIFICATE_URL  : Certificate / Identity URL - the one uploaded to  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.  BITRISE_CERTIFICATE_PASSPHRASE  : Certificate / Identity's password / passphrase,\n  the one specified on  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.", 
            "title": "Exposed by Bitrise.io"
        }, 
        {
            "location": "/faq/how-to-change-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an Application on \nBitrise\n\nto another User or to an Organization.\nThis can be done in a few seconds by following these quick steps:\n\n\n\n\nLogin with the \ncurrent Owner\n of the App on \nbitrise.io\n\n\nOpen the App's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the App is in the team or add her/him if you need to.\n   In case if you want to transfer the ownership to an Organization,\n   you have to be part of the Organization.\n\n\nClick the \nTransfer ownership\n button next to your name\n\n\nAfter selecting the new owner from the dropdown, click on the purple button that says\n   \nTransfer ownership to \nUsername\n, and you are done!\n\n\n\n\n\n\nGood to know: Do you want to remain the connected services user?\n\n\nIf you enable the \nDo you want to remain the connected services user?\n option in the Transfer popup,\nthen during the transfer you'll be explicitly marked as the \"connected services\" user for the app.\n\n\nThe \"connected services\" user specifies which Team Member's service connections / accounts\nconnected to his/her Bitrise user should be used when Bitrise tries to communicate\nwith another service (GitHub, Bitbucket, ...), for example to send back build status information,\nor to register a new SSH key automatically.\n\n\nAdmins of an app can change this any time on the \nSettings\n tab of the app.", 
            "title": "How to change the owner of an app"
        }, 
        {
            "location": "/faq/organization-faq/", 
            "text": "What is an Organization on Bitrise?\n\u2693\n\n\nOrganizations are used to seamlessly manage bigger teams and members inside a company.\nIt is a place to gather all the people working on each of your company's\napps and delegate them through creating different groups.\n\n\nHow do I create a new Organization?\n\u2693\n\n\nJust go to your \naccount settings page\n,\nscroll down and click on the green \nNew organization\n button at the bottom left.\nA popup will appear to guide you through the process.\n\n\nHow do I add an app to an Organization?\n\u2693\n\n\nFirst, you have to be added to at least one \nGroup\n of the Organization.\nThen, go to the \nAdd new app page\n and select\nthe Organization in the \ndropdown at the top left\n.\n\n\nYou can change this throughout the process of adding the app, or after you finished adding the app,\nchanging the owner is possible through \ntransferring ownership\n.\n\n\nHow do I migrate/transfer my existing apps to an Organization?\n\u2693\n\n\nOnce you've created an Organization, you can transfer any of your apps to it by going to\nthe \nTeam\n tab of the app you want to transfer, and clicking the \nTransfer ownership\n button at the top right.\n\n\nWhat are \"Owners\" inside an Organization?\n\u2693\n\n\nOrganizations can have more than one Owner.\nOwners can \nmanage billing\n, \ndelete apps\n and \nchange the billing email\n,\ncreate, delete and assign \ngroups\n to apps.\n\n\nWhat can \"Members\" of an Organization do?\n\u2693\n\n\nMembers are displayed on the \nPeople\n tab of the Organization's page.\nOne can be added as a member by including them in a group on the \nGroups\n tab.\nThese members have the option to add apps to the Organization and view a list of all of the\nOrganization's apps on the \nApps\n tab.\nMembers can only access an Organization's app, if they are granted access to the app directly or through a \nGroup\n,\nin respect of their assigned role (Admin, Developer or Tester).\n\n\nWhat are groups good for?\n\u2693\n\n\nA group is basically a wrapper for members. By creating groups, Owners and Admins can\nadd multiple members to each app's team at once, making it faster and easier to setup new\nprojects on Bitrise. It also make it faster to reassign, remove and change role of multiple members.\n\n\nEach group is handled as one entity on the app's \nTeam\n tab. They can be added to an app's team,\nthe group's role can be set, and by removing the Group from the app's Team\nyou can revoke the access of every member of that group from the app.\nIt's not possible however to add or delete individual members of a group there, only on the Org's page.\n\n\nAll members of a group have the same role when assigned to an app.\n\n\nWhat's the difference between a Team and an Organization?\n\u2693\n\n\nTeams are handled per app, Organizations are handled globally.\n\n\nA Team of an Organization's app can contain members invited directly\nor through the groups assigned to them. Team members with a direct role\ncan only access the app they were invited to and can't add an app to the Organization.\nMembers of a Team always have a role assigned to them (Admin, Developer or Tester).\n\n\nWho are the \"outside contributors\"?\n\u2693\n\n\nOutside contributors are members of an app's Team with a direct role,\ninvited only to an app of an Organization and not to the Organization itself.\n\n\nCan I have multiple Organizations?\n\u2693\n\n\nOne user can have as many Organizations as they like, but each Organization has to have\nan active Pro subscription to be able to run builds.\n\n\nCan I have multiple Pro subscriptions?\n\u2693\n\n\nYes. Each account can subscribe to Pro for their personal account and for as many Organizations as needed.\n\n\nWhat if I cancel my Pro plan for an Organization?\n\u2693\n\n\nAfter the Pro plan expires, builds can't be started for apps owned by the Organization.\n\n\nCan I remove someone from all of my Organization's apps?\n\u2693\n\n\nIf you are an Owner of an Organization, you can remove members and outside contributors\non the Org's \nPeople\n tab, with one click. Owners can also remove someone from a group\non the \nGroups\n tab. In this case the user will be removed from all apps' team that the group is assigned to.\n\n\nWhere can I change the avatar for my Organization?\n\u2693\n\n\nOnce you are on your Organization page, click on the avatar, and you'll see a popup\nto change the color scheme of it. We'll add custom avatar support a bit later.", 
            "title": "Organization FAQ"
        }, 
        {
            "location": "/faq/organization-faq/#what-is-an-organization-on-bitrise", 
            "text": "Organizations are used to seamlessly manage bigger teams and members inside a company.\nIt is a place to gather all the people working on each of your company's\napps and delegate them through creating different groups.", 
            "title": "What is an Organization on Bitrise?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-create-a-new-organization", 
            "text": "Just go to your  account settings page ,\nscroll down and click on the green  New organization  button at the bottom left.\nA popup will appear to guide you through the process.", 
            "title": "How do I create a new Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-add-an-app-to-an-organization", 
            "text": "First, you have to be added to at least one  Group  of the Organization.\nThen, go to the  Add new app page  and select\nthe Organization in the  dropdown at the top left .  You can change this throughout the process of adding the app, or after you finished adding the app,\nchanging the owner is possible through  transferring ownership .", 
            "title": "How do I add an app to an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-migratetransfer-my-existing-apps-to-an-organization", 
            "text": "Once you've created an Organization, you can transfer any of your apps to it by going to\nthe  Team  tab of the app you want to transfer, and clicking the  Transfer ownership  button at the top right.", 
            "title": "How do I migrate/transfer my existing apps to an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#what-are-owners-inside-an-organization", 
            "text": "Organizations can have more than one Owner.\nOwners can  manage billing ,  delete apps  and  change the billing email ,\ncreate, delete and assign  groups  to apps.", 
            "title": "What are \"Owners\" inside an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#what-can-members-of-an-organization-do", 
            "text": "Members are displayed on the  People  tab of the Organization's page.\nOne can be added as a member by including them in a group on the  Groups  tab.\nThese members have the option to add apps to the Organization and view a list of all of the\nOrganization's apps on the  Apps  tab.\nMembers can only access an Organization's app, if they are granted access to the app directly or through a  Group ,\nin respect of their assigned role (Admin, Developer or Tester).", 
            "title": "What can \"Members\" of an Organization do?"
        }, 
        {
            "location": "/faq/organization-faq/#what-are-groups-good-for", 
            "text": "A group is basically a wrapper for members. By creating groups, Owners and Admins can\nadd multiple members to each app's team at once, making it faster and easier to setup new\nprojects on Bitrise. It also make it faster to reassign, remove and change role of multiple members.  Each group is handled as one entity on the app's  Team  tab. They can be added to an app's team,\nthe group's role can be set, and by removing the Group from the app's Team\nyou can revoke the access of every member of that group from the app.\nIt's not possible however to add or delete individual members of a group there, only on the Org's page.  All members of a group have the same role when assigned to an app.", 
            "title": "What are groups good for?"
        }, 
        {
            "location": "/faq/organization-faq/#whats-the-difference-between-a-team-and-an-organization", 
            "text": "Teams are handled per app, Organizations are handled globally.  A Team of an Organization's app can contain members invited directly\nor through the groups assigned to them. Team members with a direct role\ncan only access the app they were invited to and can't add an app to the Organization.\nMembers of a Team always have a role assigned to them (Admin, Developer or Tester).", 
            "title": "What's the difference between a Team and an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#who-are-the-outside-contributors", 
            "text": "Outside contributors are members of an app's Team with a direct role,\ninvited only to an app of an Organization and not to the Organization itself.", 
            "title": "Who are the \"outside contributors\"?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-have-multiple-organizations", 
            "text": "One user can have as many Organizations as they like, but each Organization has to have\nan active Pro subscription to be able to run builds.", 
            "title": "Can I have multiple Organizations?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-have-multiple-pro-subscriptions", 
            "text": "Yes. Each account can subscribe to Pro for their personal account and for as many Organizations as needed.", 
            "title": "Can I have multiple Pro subscriptions?"
        }, 
        {
            "location": "/faq/organization-faq/#what-if-i-cancel-my-pro-plan-for-an-organization", 
            "text": "After the Pro plan expires, builds can't be started for apps owned by the Organization.", 
            "title": "What if I cancel my Pro plan for an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-remove-someone-from-all-of-my-organizations-apps", 
            "text": "If you are an Owner of an Organization, you can remove members and outside contributors\non the Org's  People  tab, with one click. Owners can also remove someone from a group\non the  Groups  tab. In this case the user will be removed from all apps' team that the group is assigned to.", 
            "title": "Can I remove someone from all of my Organization's apps?"
        }, 
        {
            "location": "/faq/organization-faq/#where-can-i-change-the-avatar-for-my-organization", 
            "text": "Once you are on your Organization page, click on the avatar, and you'll see a popup\nto change the color scheme of it. We'll add custom avatar support a bit later.", 
            "title": "Where can I change the avatar for my Organization?"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/", 
            "text": "The Problem\n\u2693\n\n\nA common issue is that you have a project, that has one or more submodules\nor other private repository dependencies.\n\n\nThis means that you have to grant access to all repositories in order to make\nthe build successful.\n\n\nIf your git hosting service supports it, the best, most secure way is to\nregister \nthe same SSH key\n for every repository you have to access during the build,\nas \"Deploymen keys\". Due to technical reasons (true for most git hosting services),\nyou should not use multiple SSH keys, instead use the same SSH key for every repository!\n\n\nIf your git hosting service does not support the use of a single SSH key\nfor multiple repositories\n (for example GitHub does not support this!),\nyou'll have to register the SSH key for a user account.\n\n\nIn this case (e.g. GitHub), there is an easy workaround for the issue.\nSimply by adding a \"bot\" / \"machine\" user with the SSH key to the repositories\nyou can solve the problem. \nAdd the SSH key you would like to use to the user and add the user to the projects\n.\nYou don't have to add the \"bot\" user with read and write permission,\nit is enough to assign read permissions.\nAfter that you can use the SSH key to clone to the repository or any submodule.\nIt's that simple.\n\n\nOn GitHub this is the recommended way to solve this problem,\nthey refer to these kind of users as \"machine\"\nusers - reference:\n\nhttps://developer.github.com/guides/managing-deploy-keys/#machine-users\n.\n\n\nOf course it's not required to use a special \"bot\" / \"machine\" user, you can add the\nSSH key to your own account on the git hosting service, but the best practice is\nto use a machine user for this use case, and grant read only access for this\nmachine user, for those repositories you want to access during the build.\n\n\nOn GitLab and Bitbucket it's possible to register a single SSH key\nas Deploy key to multiple repositories, without the need to create a \"bot\" / \"machine\" user.\n\n\n\n\nUse SSH URLs everywhere\n\n\nMost services support SSH key based authentication \nonly\n for SSH URLs\n(ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs\n(ex: \nhttps://github.com/bitrise-io/bitrise.git\n)!\nThis means, that \nevery private repository you want to use have to be addressed with the SSH url\n.\nIf you have direct private git repo references in your \nPodfile\n you'll have to\nuse the SSH url there as well! Same applies for submodules and every other private\ngit repository url you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\n\nHow to do this when you add a new app\n\u2693\n\n\nThere are three options to grant \nBitrise\n access to your repository:\n\n\n\n\nAuto-add SSH keypair\n: \nDon't use this option if you use submodules.\n\n  This option will add the SSH key only to the main repository, the one you selected\n  in the first section of the Add New App page.\n\n\nGenerate SSH keypair\n: will generate a key for you on the \nBitrise\n website\n  and you will have to copy it manually to the given user.\n  \nThis is the recommended option if you want to use submodules / have to access multiple repositories during your build.\n\n\nUse your own SSH keypair\n: can be used if you also have the private key of the given user.\n  You just have to paste the private key and \nBitrise\n will be able to access the repositories.\n  If you'd want to go with this option, it's important that \nthe SSH key have to be an RSA key, without a passphrase!\n\n  You can find an example of how you can generate a key like that \nhere\n.\n\n\n\n\nWhen you already registered your App on Bitrise.io\n\u2693\n\n\nWhen you've already registered an App, the steps to handle the SSH keys are the same\nas when adding a new app, the only difference is\nthat you'll have to do it on the app's \nSettings\n tab.\n\n\nYou can find the public SSH key of the app in the \nSettings\n of the given\napp on \nBitrise\n. Simply scroll down to the \"SSH settings\" section\nand click \"Show SSH Public Key\".\n\n\nCopy the key to the given user and you are ready to build!\nOr you can also update the given app's SSH key by clicking the \"Change SSH Keypair\" button\nand choosing one of the three options, just like on the \"Add new App\" page.\n\n\nService specific notes / guides\n\u2693\n\n\nGithub\n\u2693\n\n\nDon't add the key to the repository as a Deploy Key!\n\nAdd it to a GiHub User's account instead, who has access to the repositories.\nThe recommended way is to use a \n\"machine\" user\n,\nbut of course you're free to add it to any user account which has\nat least read only access to all of the repositories used during the build.", 
            "title": "Adding projects with submodules or with private CocoaPods repos"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#the-problem", 
            "text": "A common issue is that you have a project, that has one or more submodules\nor other private repository dependencies.  This means that you have to grant access to all repositories in order to make\nthe build successful.  If your git hosting service supports it, the best, most secure way is to\nregister  the same SSH key  for every repository you have to access during the build,\nas \"Deploymen keys\". Due to technical reasons (true for most git hosting services),\nyou should not use multiple SSH keys, instead use the same SSH key for every repository!  If your git hosting service does not support the use of a single SSH key\nfor multiple repositories  (for example GitHub does not support this!),\nyou'll have to register the SSH key for a user account.  In this case (e.g. GitHub), there is an easy workaround for the issue.\nSimply by adding a \"bot\" / \"machine\" user with the SSH key to the repositories\nyou can solve the problem.  Add the SSH key you would like to use to the user and add the user to the projects .\nYou don't have to add the \"bot\" user with read and write permission,\nit is enough to assign read permissions.\nAfter that you can use the SSH key to clone to the repository or any submodule.\nIt's that simple.  On GitHub this is the recommended way to solve this problem,\nthey refer to these kind of users as \"machine\"\nusers - reference: https://developer.github.com/guides/managing-deploy-keys/#machine-users .  Of course it's not required to use a special \"bot\" / \"machine\" user, you can add the\nSSH key to your own account on the git hosting service, but the best practice is\nto use a machine user for this use case, and grant read only access for this\nmachine user, for those repositories you want to access during the build.  On GitLab and Bitbucket it's possible to register a single SSH key\nas Deploy key to multiple repositories, without the need to create a \"bot\" / \"machine\" user.   Use SSH URLs everywhere  Most services support SSH key based authentication  only  for SSH URLs\n(ex:  git@github.com:bitrise-io/bitrise.git ), and  not  for HTTPS URLs\n(ex:  https://github.com/bitrise-io/bitrise.git )!\nThis means, that  every private repository you want to use have to be addressed with the SSH url .\nIf you have direct private git repo references in your  Podfile  you'll have to\nuse the SSH url there as well! Same applies for submodules and every other private\ngit repository url you want to use with the SSH key you register on  Bitrise.io !", 
            "title": "The Problem"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#how-to-do-this-when-you-add-a-new-app", 
            "text": "There are three options to grant  Bitrise  access to your repository:   Auto-add SSH keypair :  Don't use this option if you use submodules. \n  This option will add the SSH key only to the main repository, the one you selected\n  in the first section of the Add New App page.  Generate SSH keypair : will generate a key for you on the  Bitrise  website\n  and you will have to copy it manually to the given user.\n   This is the recommended option if you want to use submodules / have to access multiple repositories during your build.  Use your own SSH keypair : can be used if you also have the private key of the given user.\n  You just have to paste the private key and  Bitrise  will be able to access the repositories.\n  If you'd want to go with this option, it's important that  the SSH key have to be an RSA key, without a passphrase! \n  You can find an example of how you can generate a key like that  here .", 
            "title": "How to do this when you add a new app"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#when-you-already-registered-your-app-on-bitriseio", 
            "text": "When you've already registered an App, the steps to handle the SSH keys are the same\nas when adding a new app, the only difference is\nthat you'll have to do it on the app's  Settings  tab.  You can find the public SSH key of the app in the  Settings  of the given\napp on  Bitrise . Simply scroll down to the \"SSH settings\" section\nand click \"Show SSH Public Key\".  Copy the key to the given user and you are ready to build!\nOr you can also update the given app's SSH key by clicking the \"Change SSH Keypair\" button\nand choosing one of the three options, just like on the \"Add new App\" page.", 
            "title": "When you already registered your App on Bitrise.io"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#service-specific-notes-guides", 
            "text": "", 
            "title": "Service specific notes / guides"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#github", 
            "text": "Don't add the key to the repository as a Deploy Key! \nAdd it to a GiHub User's account instead, who has access to the repositories.\nThe recommended way is to use a  \"machine\" user ,\nbut of course you're free to add it to any user account which has\nat least read only access to all of the repositories used during the build.", 
            "title": "Github"
        }, 
        {
            "location": "/faq/android-x86-emulator/", 
            "text": "A frequent question is whether it's possible to run the Android x86 emulator,\ninstead of the ARM emulators.\n\n\nUnfortunately, as far as we know, none of the public cloud environments expose the required\nhardware virtualization bit required for running the Android x86 emulator.\n\n\nIf you know about any solution, \nplease contact us\n!\n\n\nFor now, the best workaround seems to be \nOracle's Ravello\n ( \na related blog post\n )\nif you need a full emulator (with UI),\nor \nrobolectric\n for unit tests.\n\n\nAnother alternative might be to use a service like \nAWS Device Farm\n,\nwhere you can run the tests on real devices instead of in an emulator.\n\n\nIf you know about any other, \nfeel free to contact us\n!", 
            "title": "Android x86 Emulator"
        }, 
        {
            "location": "/faq/how-to-generate-ssh-keypair/", 
            "text": "If you want to do manual SSH key configuration on \nbitrise.io\n\nyou can generate an appropriate SSH keypair with a simple Command Line / Terminal command:\n\n\nssh-keygen -t rsa -b 4096 -P '' -f ./bitrise-ssh\n\n\n\n\nThis will generate two files in the current directory (the directory where\nyou run the command):\n\n\n\n\nbitrise-ssh\n (private key)\n\n\nbitrise-ssh.pub\n (public key)\n\n\n\n\nYou should copy paste the \npublic key\n to your Git hosting service (GitHub, Bitbucket, etc.),\nand when you register your app on \nbitrise.io\n\nyou'll have to provide the \nprivate key\n.", 
            "title": "How to generate an SSH key pair"
        }, 
        {
            "location": "/faq/grant-access-to-github-organization/", 
            "text": "Steps to grant access for Bitrise.io to a given GitHub Organization:\n\n\n\n\nOpen \nhttps://github.com\n\n\nIn the top right corner click your user / avatar\n\n\nIn the list select \nSettings\n\n\nOn the left side select \nAuthorized applications\n\n\nIn the list click \nBitrise\n\n\nOn the sub page, go to the \nOrganization access\n section,\n   locate the Organization you want to grant access to, and click the \nGrant access\n button.\n\n\n\n\nYou can now go back to \nbitrise.io\n and you\nshould see the organization / repository on the Add New App page.\n\n\nIf there's no \nGrant access\n button for the organization in the \nOrganization access\n section\n\nand instead you see a red cross icon, that means that the access was previously granted but then it was revoked.\nYou can fix this by selecting the organization on the left side, in the\n\nOrganization settings\n section, then on the \nOrganization settings\n\npage select \nThird-party access\n, locate \nBitrise\n, click the \npencil icon\n,\nand click the \nGrant access\n button there.\n\n\n\n\nIn case the repository is a fork of another private repository\n\n\nIn case the repository is a fork of another private repository which belongs to \n(another) organization\n you\nhave to repeat these steps and grant access for Bitrise for the orgianization \nwhich owns the original repository\n.\n\n\nThis is a GitHub limitation, in order to be able to access a private repository fork\n\nyou have to grant access for the service (Bitrise) in both repositories\n;\nin the fork and in the original repository/organization too.", 
            "title": "Grant access to a GitHub Organization"
        }, 
        {
            "location": "/faq/i-cant-see-my-github-organization-repository-on-the-add-new-app-page/", 
            "text": "Most likely you did not grant access to \nbitrise.io\n when you authenticated\nwith GitHub to access the organization (or a repository owned by the organization).\n\n\nTo fix this you should follow this guide: \nGrant access to a GitHub Organization\n.", 
            "title": "I can't see my GitHub organization / repository on the Add New App page"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/", 
            "text": "If you can't see the nice little green/red CI checks status (like the one you can see on our \nBlog,\nabout the Pull Request status feature announcement\n)\non the Pull Request's GitHub page, you should check this list for troubleshooting.\n\n\nMake sure to select a Service credential User who has a connected GitHub account\n\u2693\n\n\nThe first requirement is that the \nService credential User\n of the app on \nbitrise.io\n\nhave to connect his/her GitHub account, or else \nbitrise.io\n\nwon't be able to send the status messages to GitHub.\n\n\n\n\nSet the Service credential User for the app\n\n\nYou can set which Team Member's sercive connections should be used when Bitrise tries to communicate\nwith GitHub or any other connected service (like Bitbucket or Xamarin) API.\nYou can set this user on the \nTeam\n tab of the app, in the \nService credential User\n section.\nDefault is to use the Owner's credentials.\n\n\n\n\nIf you want to manage your connected services on \nbitrise.io\n,\njust open your \nAccount Settings\n page.\nOn the left side you can find the \nConnected Accounts\n section,\nwhere you can connect and disconnect other services (like GitHub, Bitbucket or Xamarin)\nto your \nbitrise.io\n account.\n\n\n\n\nMake sure you connected the correct GitHub account\n\n\nIf you have more than one GitHub account you should also check whether you connected the right one,\nwhich can access the repository.\nYou can check which GitHub user you connected by clicking the \nGitHub\n text\non your \nbitrise.io\n \nAccount Settings\n page,\nit will open the connected GitHub user's page.\n\n\n\n\nIf your builds are triggering, but you don't see the Pull Request / Build status indicator on GitHub\n\u2693\n\n\nIf you have Pull Request testing enabled you should see a green/yellow/red CI check status indicator at every Pull Request on GitHub,\n\nlike the one you can see on our Blog about the Pull Request status feature announcement\n.\n\n\nIf your builds are running fine but you still can't see the status indicator on GitHub:\n\n\n\n\nMake sure that you granted access to your GitHub organization for Bitrise\n.\n  It might be that you did not \ngrant access\n to the GitHub organization\n  (who owns the repository) for Bitrise, so even though everything else is in place,\n  GitHub will still reject the status message \nbitrise.io\n sends to it.\n  See the\n  \nGrant access to a GitHub Organization\n\n  guide for more information.\n\n\nAnother thing might be that the user you specified as the\n  \nService credential User\n\n  doesn't have \nadministrator rights\n on GitHub \nfor the repository\n.\n  \nAdministrator rights are required in order to send status messages to GitHub.\n\n  Usually you face this issue (no access to the organization) when you add your app on \nbitrise.io\n.\n  If you did not select the repository from the GitHub list on the \nAdd New App\n page,\n  but rather copy-pasted your repository's URL, you still need to grant access to the organization to see\n  the build status indicator on GitHub.\n  See the\n  \nGrant access to a GitHub Organization\n\n  guide for more information, and make sure that you selected the right\n  \nService credential User\n\n  for the app on \nbitrise.io\n.\n\n\nIf you renamed or transferred the repository on GitHub\n.\n  GitHub in general is quite good with handling repository rename and transfer,\n  and usually redirects to the right url automatically, but this is not the case with the Status API.\n  Fortunately the fix for this is quite simple: \nGo to the \nSettings\n tab of your app on \nbitrise.io\n\n  and make sure that the \nRepository URL\n is up to date\n, and does not point to the previous location of the repository,\n  but to the current location of the repository.", 
            "title": "GitHub Pull Request / build Status indicator troubleshooting"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/#make-sure-to-select-a-service-credential-user-who-has-a-connected-github-account", 
            "text": "The first requirement is that the  Service credential User  of the app on  bitrise.io \nhave to connect his/her GitHub account, or else  bitrise.io \nwon't be able to send the status messages to GitHub.   Set the Service credential User for the app  You can set which Team Member's sercive connections should be used when Bitrise tries to communicate\nwith GitHub or any other connected service (like Bitbucket or Xamarin) API.\nYou can set this user on the  Team  tab of the app, in the  Service credential User  section.\nDefault is to use the Owner's credentials.   If you want to manage your connected services on  bitrise.io ,\njust open your  Account Settings  page.\nOn the left side you can find the  Connected Accounts  section,\nwhere you can connect and disconnect other services (like GitHub, Bitbucket or Xamarin)\nto your  bitrise.io  account.   Make sure you connected the correct GitHub account  If you have more than one GitHub account you should also check whether you connected the right one,\nwhich can access the repository.\nYou can check which GitHub user you connected by clicking the  GitHub  text\non your  bitrise.io   Account Settings  page,\nit will open the connected GitHub user's page.", 
            "title": "Make sure to select a Service credential User who has a connected GitHub account"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/#if-your-builds-are-triggering-but-you-dont-see-the-pull-request-build-status-indicator-on-github", 
            "text": "If you have Pull Request testing enabled you should see a green/yellow/red CI check status indicator at every Pull Request on GitHub, like the one you can see on our Blog about the Pull Request status feature announcement .  If your builds are running fine but you still can't see the status indicator on GitHub:   Make sure that you granted access to your GitHub organization for Bitrise .\n  It might be that you did not  grant access  to the GitHub organization\n  (who owns the repository) for Bitrise, so even though everything else is in place,\n  GitHub will still reject the status message  bitrise.io  sends to it.\n  See the\n   Grant access to a GitHub Organization \n  guide for more information.  Another thing might be that the user you specified as the\n   Service credential User \n  doesn't have  administrator rights  on GitHub  for the repository .\n   Administrator rights are required in order to send status messages to GitHub. \n  Usually you face this issue (no access to the organization) when you add your app on  bitrise.io .\n  If you did not select the repository from the GitHub list on the  Add New App  page,\n  but rather copy-pasted your repository's URL, you still need to grant access to the organization to see\n  the build status indicator on GitHub.\n  See the\n   Grant access to a GitHub Organization \n  guide for more information, and make sure that you selected the right\n   Service credential User \n  for the app on  bitrise.io .  If you renamed or transferred the repository on GitHub .\n  GitHub in general is quite good with handling repository rename and transfer,\n  and usually redirects to the right url automatically, but this is not the case with the Status API.\n  Fortunately the fix for this is quite simple:  Go to the  Settings  tab of your app on  bitrise.io \n  and make sure that the  Repository URL  is up to date , and does not point to the previous location of the repository,\n  but to the current location of the repository.", 
            "title": "If your builds are triggering, but you don't see the Pull Request / Build status indicator on GitHub"
        }, 
        {
            "location": "/faq/no-builds-are-triggered-automatically/", 
            "text": "If no builds are triggered automatically when you push code into your repository,\nyou should \nmake sure your webhook is properly set on the git hosting\nservice you use (GitHub, Bitbucket, GitLab, ...)\n.\n\n\nYou can find the webhook related setup and troubleshooting guides\nin the \nWebhooks section of the DevCenter\n.\n\n\nIf the webhook is present on the git hosting service, you should\ncheck the \nTroubleshooting section of the Webhooks docs\n.", 
            "title": "No builds are triggered when I push code into the repository"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/", 
            "text": "First of all you have to determine which step(s) consume significant time,\nto identify what can possibly be improved.\n\n\nIf your dependency step (e.g. CocoaPods) is the one which takes a long time then you might be able to speed it up\nby using the Bitrise Build Cache feature.\nYou can find more information at \nUsing the Build Cache\n.\nThis is also true for any step which might include network communication, addressing 3rd party web services,\nwhich might temporarily not be available or might be slow due to high demand.\n\n\nIf the long build time is not related to a dependency step or to a step which accesses a 3rd party service,\nand it's related to an Archive or Test step, which only performs calculations on the Virtual Machine\nand does not access an outside service then you should check this list which explains\nwhy it might take more time on Bitrise.io than on your Mac/PC:\n\n\nLocal build caches\n\u2693\n\n\nLocal build caches on your Mac/PC: most of the tools you use (e.g. Xcode) does generate a lot of local build cache,\nto speed up subsequent builds.\nThese caches help a lot to decrease the build time on your Mac/PC, but these are not available on \nbitrise.io\n.\n\n\nNote: You can test how much these caches improve the build time by running the same step (e.g. Xcode Archive) two times during your build.\nThe second one will be significantly faster than the first one,\nbecause of the available local build caches Xcode generates.\n\n\nOn \nbitrise.io\n every build runs in a clean Virtual Machine.\nNo file is stored after your build finishes, the whole Virtual Machine is destroyed,\nand the next build will start in a clean Virtual Machine again.\n\n\nThe lack of local build caches is important to improve the reliability of your project\n,\nbut it slows down the build process. Why it's important?\nIn your local build caches there might be files which are not under version control.\nThis can result in a situation where although you can build your project on your Mac/PC someone\nwho just git clones it and builds it the first time will have an error.\nYou can find more information about this issue at:\n\nWorks in local but not on Bitrise.io\n.\n\n\nThis issue is eliminated by using clean virtual machines on \nbitrise.io\n,\nwhere only the code and dependencies you specify (which are under version control, and are reproducible) are available.\nIf it works there then it'll work on a brand new Mac/PC too,\nwhen a new colleague joins your team and starts to work on the project. \n\n\nNetwork Resources\n\u2693\n\n\nAdditionally to Local build caches, if your project requires dependencies\nwhich have to be retrieved from the Internet it'll add time to the build process.\n\n\nFor example, when you build your iOS project on your Mac and you use CocoaPods,\nyou usually don't have to run \npod install\n, only when your CocoaPods dependency list changes.\nIf you don't commit your Pods into your repository then this process (to download the required dependencies)\nhave to be performed for every build in a clean environment.\n\n\nPossible solutions:\n\n\n\n\nCommit your dependencies into your repository -\n  read more: \nShould I commit my dependencies into my repository?\n \n\n\nCache your dependencies in Bitrise Build Cache -\n  read more: \nUsing the Build Cache\n\n\n\n\nRaw performance\n\u2693\n\n\nWe always try to improve the overall performance of the build infrastructure,\nbut you'll most likely have more powerful hardware.\n\n\nRight now we use a private vSphere network for hosting the OS X virtual machines,\nand Google Compute Engine for hosting the Linux (Android) virtual machines.\n\n\nCloud environments are fantastic to provide reproducible build environments,\nbut virtualization requires additional resources on top of the resources exposed to the virtual machine / build environment.\nYou can try this on your own Mac/PC: running the same compilation directly on your Mac/PC\nwill be faster than doing it in a Virtual Machine.\n\n\nWe do our best to improve the performance whenever we can, and feel free to reach out to us if you have any suggestion!\n\n\nTips \n Tricks to optimize build times\n\u2693\n\n\nYou can also find a guide \nhere\n\nabout how you can optimize your build times.", 
            "title": "Why my build takes longer on Bitrise than on my Mac?"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#local-build-caches", 
            "text": "Local build caches on your Mac/PC: most of the tools you use (e.g. Xcode) does generate a lot of local build cache,\nto speed up subsequent builds.\nThese caches help a lot to decrease the build time on your Mac/PC, but these are not available on  bitrise.io .  Note: You can test how much these caches improve the build time by running the same step (e.g. Xcode Archive) two times during your build.\nThe second one will be significantly faster than the first one,\nbecause of the available local build caches Xcode generates.  On  bitrise.io  every build runs in a clean Virtual Machine.\nNo file is stored after your build finishes, the whole Virtual Machine is destroyed,\nand the next build will start in a clean Virtual Machine again.  The lack of local build caches is important to improve the reliability of your project ,\nbut it slows down the build process. Why it's important?\nIn your local build caches there might be files which are not under version control.\nThis can result in a situation where although you can build your project on your Mac/PC someone\nwho just git clones it and builds it the first time will have an error.\nYou can find more information about this issue at: Works in local but not on Bitrise.io .  This issue is eliminated by using clean virtual machines on  bitrise.io ,\nwhere only the code and dependencies you specify (which are under version control, and are reproducible) are available.\nIf it works there then it'll work on a brand new Mac/PC too,\nwhen a new colleague joins your team and starts to work on the project.", 
            "title": "Local build caches"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#network-resources", 
            "text": "Additionally to Local build caches, if your project requires dependencies\nwhich have to be retrieved from the Internet it'll add time to the build process.  For example, when you build your iOS project on your Mac and you use CocoaPods,\nyou usually don't have to run  pod install , only when your CocoaPods dependency list changes.\nIf you don't commit your Pods into your repository then this process (to download the required dependencies)\nhave to be performed for every build in a clean environment.  Possible solutions:   Commit your dependencies into your repository -\n  read more:  Should I commit my dependencies into my repository?    Cache your dependencies in Bitrise Build Cache -\n  read more:  Using the Build Cache", 
            "title": "Network Resources"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#raw-performance", 
            "text": "We always try to improve the overall performance of the build infrastructure,\nbut you'll most likely have more powerful hardware.  Right now we use a private vSphere network for hosting the OS X virtual machines,\nand Google Compute Engine for hosting the Linux (Android) virtual machines.  Cloud environments are fantastic to provide reproducible build environments,\nbut virtualization requires additional resources on top of the resources exposed to the virtual machine / build environment.\nYou can try this on your own Mac/PC: running the same compilation directly on your Mac/PC\nwill be faster than doing it in a Virtual Machine.  We do our best to improve the performance whenever we can, and feel free to reach out to us if you have any suggestion!", 
            "title": "Raw performance"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#tips-tricks-to-optimize-build-times", 
            "text": "You can also find a guide  here \nabout how you can optimize your build times.", 
            "title": "Tips &amp; Tricks to optimize build times"
        }, 
        {
            "location": "/troubleshooting/workflow-editor-doesnt-load/", 
            "text": "This can happen if you modified the \nbitrise.yml\n / workflow configuration in a way which crashes the Workflow Editor UI.\n\n\nIf this would happen please \ncontact us\n so we can fix the issue in the UI code,\nthen you can fix the \nbitrise.yml\n through our API.\n\n\nYou can find an example of how the API works \non GitHub\n.\nIn short, you can use a simple \ncurl\n call to download \n to upload an app's config / \nbitrise.yml\n to \nbitrise.io\n.\n\n\nWith the API you can download the \nbitrise.yml\n from \nbitrise.io\n even if it breaks the Workflow Editor UI,\nfix it locally and then upload the fixed \nbitrise.yml\n with another API call.\n\n\nTo download the \nbitrise.yml\n of an app using \ncurl\n:\n\n\ncurl https://www.bitrise.io/api/app/BITRISE_APP_SLUG/config/download.yml?api_token=BITRISE_APP_API_TOKEN\n\n\n\n\n\n\nWhere to get the App Slug and API Token?\n\n\nYou can find both the app's App Slug and the API Token on the \nCode\n tab of the app\non \nbitrise.io\n.\n\n\n\n\nSave the \nbitrise.yml\n into a file, fix it, then you can upload it with another \ncurl\n call.\n\n\nTo upload the \nbitrise.yml\n:\n\n\ncurl -X POST --data-urlencode \napp_config_datastore_yaml=$(cat path/to/bitrise.yml)\n https://www.bitrise.io/api/app/BITRISE_APP_SLUG/config/upload.yml?api_token=BITRISE_APP_API_TOKEN\n\n\n\n\nNote: make sure that you set the right \npath/to/bitrise.yml\n - specify the path of\nthe \nbitrise.yml\n file where you saved the fixed \nbitrise.yml\n!", 
            "title": "Workflow Editor doesn't load"
        }, 
        {
            "location": "/tools/bitrise-tools/", 
            "text": "List of Open Source tools maintained by the Bitrise team.\n\n\n\n\nWhere can I find the repositories?\n\n\nFor historical reasons the core Bitrise CLI tools live in \ngithub.com/bitrise-io\n,\nbut most of our tools, and every new tool we create lives in\nthe \ngithub.com/bitrise-tools\n,\nand the CLI core components (plugins, etc.)\nin the \ngithub.com/bitrise-core\n GitHub organization.\n\n\n\n\nCore, Bitrise CLI tools\n\u2693\n\n\n\n\nbitrise\n -\n  the Bitrise CLI, which is used on \nbitrise.io\n\n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!\n\n\nstepman\n -\n  used for managing the Step Library, including\n  downloading and sharing steps.\n\n\nenvman\n -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.\n\n\n\n\nBitrise CLI plugins\n\u2693\n\n\n\n\nAnalytics plugin\n\n\n\n\nInfrastructure\n\u2693\n\n\n\n\nbitrise-machine\n -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.\n\n\nbitrise-bridge\n -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.\n\n\ncmd-bridge\n -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start \ncmd-bridge\n's server in the environment, and then\n  you can use \ncmd-bridge\n through SSH or another way to send commands to the running\n  \ncmd-bridge\n server, which will perform the commands in its context / the environment\n  it is running in.\n\n\ngarden\n -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).\n\n\n\n\niOS\n\u2693\n\n\n\n\ncodesigndoc\n -\n  Your friendly iOS Code Signing Doctor.\n\n\n\n\nGeneric\n\u2693\n\n\n\n\ndepman\n -\n  Super Simple Dependency Manager\n\n\nreleaseman\n -\n  Your friendly Release Manager\n\n\n\n\nGo\n\u2693\n\n\nGo / golang related tools.\n\n\n\n\ngows\n -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.\n\n\ngoinst\n -\n  Go Install command line tools in an isolated environment.\n\n\n\n\nServer / service\n\u2693\n\n\n\n\nbitrise webhooks\n -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to \nbitrise.io\n's Build Trigger API format, and calls it to start a build.\n\n\nDATapi\n -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.\n\n\nDATapi Ruby Client", 
            "title": "Bitrise Tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#core-bitrise-cli-tools", 
            "text": "bitrise  -\n  the Bitrise CLI, which is used on  bitrise.io \n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!  stepman  -\n  used for managing the Step Library, including\n  downloading and sharing steps.  envman  -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.", 
            "title": "Core, Bitrise CLI tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#bitrise-cli-plugins", 
            "text": "Analytics plugin", 
            "title": "Bitrise CLI plugins"
        }, 
        {
            "location": "/tools/bitrise-tools/#infrastructure", 
            "text": "bitrise-machine  -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.  bitrise-bridge  -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.  cmd-bridge  -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start  cmd-bridge 's server in the environment, and then\n  you can use  cmd-bridge  through SSH or another way to send commands to the running\n   cmd-bridge  server, which will perform the commands in its context / the environment\n  it is running in.  garden  -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).", 
            "title": "Infrastructure"
        }, 
        {
            "location": "/tools/bitrise-tools/#ios", 
            "text": "codesigndoc  -\n  Your friendly iOS Code Signing Doctor.", 
            "title": "iOS"
        }, 
        {
            "location": "/tools/bitrise-tools/#generic", 
            "text": "depman  -\n  Super Simple Dependency Manager  releaseman  -\n  Your friendly Release Manager", 
            "title": "Generic"
        }, 
        {
            "location": "/tools/bitrise-tools/#go", 
            "text": "Go / golang related tools.   gows  -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.  goinst  -\n  Go Install command line tools in an isolated environment.", 
            "title": "Go"
        }, 
        {
            "location": "/tools/bitrise-tools/#server-service", 
            "text": "bitrise webhooks  -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to  bitrise.io 's Build Trigger API format, and calls it to start a build.  DATapi  -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.  DATapi Ruby Client", 
            "title": "Server / service"
        }, 
        {
            "location": "/api/build-trigger/", 
            "text": "With the Build Trigger API you can start a new build of your app with a simple API call.\n\n\nYou can define parameters for the build like what \nbranch\n, \ntag\n or \ngit commit\n to use\nand what \nbuild message\n to present on the Build's details page.\n\n\n\n\nInteractive cURL call configurator\n\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call,\nbased on the parameters you specify in the popup.\n\n\n\n\nHow to start a build by calling the Trigger API?\n\u2693\n\n\nYou have to call your build trigger with a \nPOST\n request with a JSON body.\n\n\n\n\nAPI Token and App Slug\n\n\nWhen you use the Bitrise Trigger API you have to specify the App's \nAPI Token\n and \nApp Slug\n.\nYou can view both and regenerate your App's API Token anytime you want to,\non the \nCode\n tab of the app.\n\n\n\n\nJSON body\n\u2693\n\n\nThe JSON body has to contain at least:\n\n\n\n\na \nhook_info\n object with:\n\n\na \ntype\n key and \nbitrise\n as its value\n\n\nan \napi_token\n key and your \nAPI Token\n as its value\n\n\n\n\n\n\na \nbuild_params\n object, with at least a \ntag\n, \nbranch\n or \nworkflow_id\n parameter specified\n\n\n\n\nA minimal sample JSON body, which specifies \nmaster\n as the \nbranch\n parameter:\n\n\n{\n  \nhook_info\n: {\n    \ntype\n: \nbitrise\n,\n    \napi_token\n: \n...\n\n  },\n  \nbuild_params\n: {\n    \nbranch\n: \nmaster\n\n  }\n}\n\n\n\n\nBuild Params\n\u2693\n\n\nThe following parameters are supported in the \nbuild_params\n object:\n\n\n\n\nbranch\n - \nString\n\n\ntag\n  - \nString\n\n\ncommit_hash\n - \nString\n\n\ncommit_message\n - \nString\n\n\nworkflow_id\n - \nString\n\n\nenvironments\n - \nArray of objects\n\n\n\n\n\n\nGit Clone - parameter priority\n\n\nIf you provide a \ntag\n, the \nbranch\n parameter will be ignored by the \nGit Clone\n step.\nIf you provide a \ncommit_hash\n parameter then both the \ntag\n and the \nbranch\n parameters will be ignored.\nThese will still be logged, will be available for steps and will be visible on the Build's details page,\nbut the \nGit Clone\n step will use the the most specific parameter for checkout.\n\n\n\n\nSpecify Environment Variables\n\u2693\n\n\nYou can define additional \nenvironment variables\n for your build.\n\n\nThese variables will be handled with priority between \nSecrets\n and \nApp Env Vars\n,\nwhich means that you can not overwrite environment variables defined in\nyour build configuration (e.g. App Env Vars), only Secrets.\nFor more information see:\n\nAvailability order of environment variables\n\n\nIt's important that this parameter have to be an \narray of objects\n,\nand that every item of the array have to include\nat least a \nmapped_to\n (the key of the Environment Variable, without a dollar sign (\n$\n))\nand a \nvalue\n property (the value of the variable).\n\n\nExample:\n\n\nenvironments\n:[{\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true}]\n\n\n\n\nWorkflow to be used for the build\n\u2693\n\n\nBy default the Workflow for your Build will be selected based on the\n\nbuild_params\n and your app's \nTrigger Map\n.\nThis is the same as how \nWebhooks\n select the workflow for the build\nautomatically (based on the \nTrigger Map\n), and how you can\ndefine separate Workflows for separate branches, tags or pull requests\nwithout the need to specify the workflow manually for every build.\n\n\nWith the Trigger API you can however \noverwrite\n this selection\nand specify exactly which Workflow you want to use.\n\n\nAll you have to do is add a \nworkflow_id\n parameter to your \nbuild_params\n\nand specify the Workflow you want to use for that specific build.\n\n\nAn example \nbuild_params\n with \nbranch\n and \nworkflow_id\n:\n\n\nbuild_params\n:{\nbranch\n:\nmaster\n,\nworkflow_id\n:\ndeploy\n}'\n\n\n\n\ncurl\n example generator\n\u2693\n\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call, based on the parameters you specify in the popup.\n\n\nA base curl call would look like this (with \nmaster\n specified as the \nbranch\n build parameter):\n\n\ncurl https://www.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\napi_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n}}'\n\n\n\n\nA more advanced example: let's say you want to build the \nmaster\n \nbranch\n\nusing the \ndeployment\n workflow,\nspecify a build message (\ncommit_message\n)\nand set a test environment variable (\nAPI_TEST_ENV\n),\nthe call will look like this:\n\n\ncurl https://www.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\napi_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n,\ncommit_message\n:\nEnvironment in API params test\n,\nworkflow_id\n:\ndeployment\n,\nenvironments\n:[{\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true}]}}'", 
            "title": "Build Trigger API"
        }, 
        {
            "location": "/api/build-trigger/#how-to-start-a-build-by-calling-the-trigger-api", 
            "text": "You have to call your build trigger with a  POST  request with a JSON body.   API Token and App Slug  When you use the Bitrise Trigger API you have to specify the App's  API Token  and  App Slug .\nYou can view both and regenerate your App's API Token anytime you want to,\non the  Code  tab of the app.", 
            "title": "How to start a build by calling the Trigger API?"
        }, 
        {
            "location": "/api/build-trigger/#json-body", 
            "text": "The JSON body has to contain at least:   a  hook_info  object with:  a  type  key and  bitrise  as its value  an  api_token  key and your  API Token  as its value    a  build_params  object, with at least a  tag ,  branch  or  workflow_id  parameter specified   A minimal sample JSON body, which specifies  master  as the  branch  parameter:  {\n   hook_info : {\n     type :  bitrise ,\n     api_token :  ... \n  },\n   build_params : {\n     branch :  master \n  }\n}", 
            "title": "JSON body"
        }, 
        {
            "location": "/api/build-trigger/#build-params", 
            "text": "The following parameters are supported in the  build_params  object:   branch  -  String  tag   -  String  commit_hash  -  String  commit_message  -  String  workflow_id  -  String  environments  -  Array of objects    Git Clone - parameter priority  If you provide a  tag , the  branch  parameter will be ignored by the  Git Clone  step.\nIf you provide a  commit_hash  parameter then both the  tag  and the  branch  parameters will be ignored.\nThese will still be logged, will be available for steps and will be visible on the Build's details page,\nbut the  Git Clone  step will use the the most specific parameter for checkout.", 
            "title": "Build Params"
        }, 
        {
            "location": "/api/build-trigger/#specify-environment-variables", 
            "text": "You can define additional  environment variables  for your build.  These variables will be handled with priority between  Secrets  and  App Env Vars ,\nwhich means that you can not overwrite environment variables defined in\nyour build configuration (e.g. App Env Vars), only Secrets.\nFor more information see: Availability order of environment variables  It's important that this parameter have to be an  array of objects ,\nand that every item of the array have to include\nat least a  mapped_to  (the key of the Environment Variable, without a dollar sign ( $ ))\nand a  value  property (the value of the variable).  Example:  environments :[{ mapped_to : API_TEST_ENV , value : This is the test value , is_expand :true}]", 
            "title": "Specify Environment Variables"
        }, 
        {
            "location": "/api/build-trigger/#workflow-to-be-used-for-the-build", 
            "text": "By default the Workflow for your Build will be selected based on the build_params  and your app's  Trigger Map .\nThis is the same as how  Webhooks  select the workflow for the build\nautomatically (based on the  Trigger Map ), and how you can\ndefine separate Workflows for separate branches, tags or pull requests\nwithout the need to specify the workflow manually for every build.  With the Trigger API you can however  overwrite  this selection\nand specify exactly which Workflow you want to use.  All you have to do is add a  workflow_id  parameter to your  build_params \nand specify the Workflow you want to use for that specific build.  An example  build_params  with  branch  and  workflow_id :  build_params :{ branch : master , workflow_id : deploy }'", 
            "title": "Workflow to be used for the build"
        }, 
        {
            "location": "/api/build-trigger/#curl-example-generator", 
            "text": "You can find an interactive cURL call configurator by clicking on the  Start/Schedule a build \nbutton on your app's  bitrise.io  page\nand switching to  Advanced  mode in the popup.\nAt the bottom of the popup you can find a  curl  call, based on the parameters you specify in the popup.  A base curl call would look like this (with  master  specified as the  branch  build parameter):  curl https://www.bitrise.io/app/APP-SLUG/build/start.json --data '{ hook_info :{ type : bitrise , api_token : APP-API-TOKEN }, build_params :{ branch : master }}'  A more advanced example: let's say you want to build the  master   branch \nusing the  deployment  workflow,\nspecify a build message ( commit_message )\nand set a test environment variable ( API_TEST_ENV ),\nthe call will look like this:  curl https://www.bitrise.io/app/APP-SLUG/build/start.json --data '{ hook_info :{ type : bitrise , api_token : APP-API-TOKEN }, build_params :{ branch : master , commit_message : Environment in API params test , workflow_id : deployment , environments :[{ mapped_to : API_TEST_ENV , value : This is the test value , is_expand :true}]}}'", 
            "title": "curl example generator"
        }
    ]
}