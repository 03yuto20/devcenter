{
    "docs": [
        {
            "location": "/", 
            "text": "Bitrise\n is a \nContinuous Integration\n\nand \nDelivery\n (CI/CD) Platform as a Service (PaaS)\nwith a main focus on mobile app development (\niOS\n, \nAndroid\n, \nXamarin\n, ...). It is a collection of tools and services to help you with the development and automation of your software projects\n\n\nAutomate the testing and deployment of your apps with just a few clicks.\n\n\nRun your builds on bitrise.io\n\u2693\n\n\nYou can run a build of your app on Bitrise by defining a \nWorkflow\n. A \nWorkflow\n consists of one or more build \nSteps\n (open source git repositories\nwhich can be executed with the \nopen source Bitrise CLI\n).\n\nYou can create and share your own build Steps too\n.\nYou are able to define more workflows for the very same app,\nand define \ntriggers\n to specify which workflow should be selected for\neach trigger.\n\n\nThe steps can do anything that can be implemented by command line scripts / programs:\nsend emails, \ntext messages\n,\npass values to each other, \ncreate Xcode archives\n,\ngather system information about the Virtual Machine\nrunning the build, notify other users (e.g. on Slack)\nor even \npublish to iTunes Connect\n, and many more.\nYou can read more at \nBuilds and Workflows\n.\n\n\nWhen you trigger a build a Virtual Machine is assigned to host\nyour build and your defined Workflow (series of build Steps) will be executed, step by step.\n\n\nAfter a build is finished the Virtual Machine is destroyed and you can browse\nthe logs of every step that ran during the workflow.\nYou can read more at \nCode Security\n.\n\n\nBitrise CLI - the open source, offline, automation runner\n\u2693\n\n\nTo run a \nbitrise\n build on your machine, you can install our \nopen source runner\n\nand use the \nbitrise\n command to execute your workflows locally.\n\nNo \nbitrise.io\n account required to use the Bitrise CLI.\n\n\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nYou can find more information about the offline runner\nin the \nBitrise CLI and bitrise.yml\n section of the DevCenter.", 
            "title": "Bitrise DevCenter - What is Bitrise?"
        }, 
        {
            "location": "/#run-your-builds-on-bitriseio", 
            "text": "You can run a build of your app on Bitrise by defining a  Workflow . A  Workflow  consists of one or more build  Steps  (open source git repositories\nwhich can be executed with the  open source Bitrise CLI ). You can create and share your own build Steps too .\nYou are able to define more workflows for the very same app,\nand define  triggers  to specify which workflow should be selected for\neach trigger.  The steps can do anything that can be implemented by command line scripts / programs:\nsend emails,  text messages ,\npass values to each other,  create Xcode archives ,\ngather system information about the Virtual Machine\nrunning the build, notify other users (e.g. on Slack)\nor even  publish to iTunes Connect , and many more.\nYou can read more at  Builds and Workflows .  When you trigger a build a Virtual Machine is assigned to host\nyour build and your defined Workflow (series of build Steps) will be executed, step by step.  After a build is finished the Virtual Machine is destroyed and you can browse\nthe logs of every step that ran during the workflow.\nYou can read more at  Code Security .", 
            "title": "Run your builds on bitrise.io"
        }, 
        {
            "location": "/#bitrise-cli-the-open-source-offline-automation-runner", 
            "text": "To run a  bitrise  build on your machine, you can install our  open source runner \nand use the  bitrise  command to execute your workflows locally. No  bitrise.io  account required to use the Bitrise CLI.  It's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for  any kind of automation  on your machine.  You can find more information about the offline runner\nin the  Bitrise CLI and bitrise.yml  section of the DevCenter.", 
            "title": "Bitrise CLI - the open source, offline, automation runner"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/", 
            "text": "Builds \n Workflows\n\u2693\n\n\nA \nbuild\n is the process specified by the app's \nworkflow\n, which is a collection of \nsteps\n.\nEvery step is an \nopen source\n repository which you can inspect, modify,\nand run with the \nopen source Bitrise CLI\n.\n\n\nThe app's build configuration can be specified as a \nyaml\n (\nbitrise.yml\n) config,\nwhich you can modify in \nbitrise.io\n's\ngraphical Workflow Editor UI (on your app's Bitrise.io page click the \nWorkflows\n tab),\nor \nyaml editor\n directly.\n\n\nOn the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how the CLI, workflows and steps work in the \nBitrise CLI and bitrise.yml\n section.\n\n\nWhen a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.\n\n\nThe build process\n\u2693\n\n\nThere are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of \ntriggers\n,\nthrough different stacks and preparation types to environment variables.\n\n\n\n\nTrigger builds by:\n\n\nclicking the \nBuild\n button on the application's page (manual build trigger)\n\n\nscheduling with a selected branch and frequency (runs when scheduled - you can find this option in the \nBuild\n popup)\n\n\nwebhook\n - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)\n\n\nour \nBuild Trigger API\n\n\n\n\n\n\nEnvironment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available \nStacks\n on your app's \nSettings\n tab,\n   in the \nStack Selector\n section.\n\n\nConcurrency:\n   Builds over your subscription plan's concurrency count will be marked as \non hold\n.\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always \npurchase additional concurrencies\n with the Pro plan\n   to increase the concurrent builds you can run at the same time.\n\n\nWorkflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.\n\n\nCleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and \nthe virtual machine gets destroyed\n,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "Builds & Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#builds-workflows", 
            "text": "A  build  is the process specified by the app's  workflow , which is a collection of  steps .\nEvery step is an  open source  repository which you can inspect, modify,\nand run with the  open source Bitrise CLI .  The app's build configuration can be specified as a  yaml  ( bitrise.yml ) config,\nwhich you can modify in  bitrise.io 's\ngraphical Workflow Editor UI (on your app's Bitrise.io page click the  Workflows  tab),\nor  yaml editor  directly.  On the graphical UI of the Workflow editor, you are able to add, remove, and reorder the build steps.\nSteps represent a block of script execution with predefined input and output variables.\nSteps can be written in various languages, like bash, Go, Ruby, Swift, etc.\nRead more about how the CLI, workflows and steps work in the  Bitrise CLI and bitrise.yml  section.  When a build is running, these scripts will be downloaded and executed in the order you've defined in your workflow,\nwith the input parameters you set. They will produce the predefined outputs set as environment variables.", 
            "title": "Builds &amp; Workflows"
        }, 
        {
            "location": "/getting-started/builds-and-workflows/#the-build-process", 
            "text": "There are a lot of things that can be customized when working with Bitrise.\nThe build process has some mutable dimensions as well,\nfrom several kind of  triggers ,\nthrough different stacks and preparation types to environment variables.   Trigger builds by:  clicking the  Build  button on the application's page (manual build trigger)  scheduling with a selected branch and frequency (runs when scheduled - you can find this option in the  Build  popup)  webhook  - after each code/tag push or pull request to the given branch (runs when push/pull request arrives)  our  Build Trigger API    Environment preparation:\n   Once we've found a suitable machine, a virtual machine will be provisioned and prepared to run the build.\n   Build specific environment variables are preset, so you can use these in your steps.\n   You can find more information about the available  Stacks  on your app's  Settings  tab,\n   in the  Stack Selector  section.  Concurrency:\n   Builds over your subscription plan's concurrency count will be marked as  on hold .\n   They will start whenever your ongoing builds are finished and you have a free build slot.\n   You can always  purchase additional concurrencies  with the Pro plan\n   to increase the concurrent builds you can run at the same time.  Workflow execution:\n   Steps in Workflows are executed in the same order as defined in the Workflow editor of your application,\n   from top to bottom. You can reorder the steps by dragging.\n   The log each step generates will be displayed on the build's details page.  Cleanup:\n   After the execution of the build, there will be a summary of the build\n   created and stored on the Bitrise server and  the virtual machine gets destroyed ,\n   so your code/files woudn't fall into the wrong hands.", 
            "title": "The build process"
        }, 
        {
            "location": "/getting-started/code-security/", 
            "text": "To guarantee the security of your builds we use \nvirtual machines\n for builds.\nEvery build runs in its own, clean virtual machine and we discard the whole virtual machine after the build finishes,\nerasing every file your build uses and every change you make during your build.\n\n\nThis is also true for the Linux/Android stacks, which use Docker containers to run the build.\nThe build itself still gets a full virtual machine where no other Docker container is started,\nonly the one used as the environment of the build. In short we only use Docker containers\nto manage the environment, not for build environment isolation - that's ensured by using\nfull virtual machines for every build.\n\n\nThis way your builds are always protected from changes made by others and from your previous builds,\nno one else can access your code and you can use a stable environment to define your build workflow. Every build is completed in an isolated environment, unrelated to any previous or parallelly running builds.\n\n\nSource code\n\u2693\n\n\nWe don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.\n\n\nCode signing and other files\n\u2693\n\n\nThe files you upload in the Workflow Editor (\nCode Signing \n Files\n section of the editor)\nare stored on \nAmazon S3\n in a way that it's only accessible for the web servers.\n\n\nThe required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using \nAmazon S3 presigned URLs\n.\n\n\nPasswords\n\u2693\n\n\nPasswords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with \nbcrypt algorithm\n, using multiple stretches.", 
            "title": "Code Security"
        }, 
        {
            "location": "/getting-started/code-security/#source-code", 
            "text": "We don't store your source code. The source code is only accessed on the build machines (virtual machines)\nthe way you define it in your Bitrise Configuration (workflow). If you don't have a Git Clone step in your configuration,\nthen the source code won't be touched at all. At the end of the build the whole Virtual Machine is destroyed.", 
            "title": "Source code"
        }, 
        {
            "location": "/getting-started/code-security/#code-signing-and-other-files", 
            "text": "The files you upload in the Workflow Editor ( Code Signing   Files  section of the editor)\nare stored on  Amazon S3  in a way that it's only accessible for the web servers.  The required credentials are not stored in any database, it is only available in the web servers' environment.\nBuild servers can't access the files directly either.\nWhen a build starts the web server generates a read-only,\ntime limited access URL for these files, using  Amazon S3 presigned URLs .", 
            "title": "Code signing and other files"
        }, 
        {
            "location": "/getting-started/code-security/#passwords", 
            "text": "Passwords are stored in a hashed, encrypted form.\nWe are encrypting the passwords with  bcrypt algorithm , using multiple stretches.", 
            "title": "Passwords"
        }, 
        {
            "location": "/getting-started/account-security/", 
            "text": "Enable Two-factor authentication\n\u2693\n\n\nWe provide an extra layer of security if you enable Two-factor authentication (TFA) on your Bitrise account.\n\n\n\n\n\n\nDownload and install \nGoogle Authenticator\n on your phone.\n\n\n\n\n\n\nLog in to \nbitrise.io\n and go to your \nProfile\n.\n\n\n\n\n\n\nClick \nAccount settings\n.\n\n\n\n\n\n\nScroll down and click \nSecurity\n on the left.\n\n\n\n\n\n\nClick on \nEnable\n under \nTwo-factor authentication\n.\n\n\n\n\n\n\nOpen your Google Authenticator and scan the QR-code that appears on your screen.\n\n\n\n\n\n\nEnter the 6-digit code that was generated.\n\n\n\n\nTFA on GitHub, Bitbucket, GitLab and Xamarin\n\n\nWe recommend that you check your connected accounts (GitHub, Bitbucket, GitLab and Xamarin) and enable TFAs if you haven't already.\n\n\n\n\n\n\n\n\nOnce you have activated your TFA and saved your recovery codes, you will receive a confirmation email from \nletsconnect@bitrise.io\n.\n\n\n\n\n\n\nGenerate personal access tokens manually\n\u2693\n\n\nThere are two types of personal access tokens in your \nSecurity\n tab of your profile:\n\n\n\n\n\n\nthe \nauto-generated\n ones, which are generated by Bitrise automatically whenever communicating with the Bitrise API\n\n\n\n\n\n\nthe \nuser-generated\n ones which you can manually generate for yourself\n\n\n\n\n\n\nFollow the steps to create a new token manually!\n\n\n\n\n\n\nIn your \nSecurity\n tab, click on \nGenerate new\n.\n\n\n\n\n\n\nFill out the \nToken description\n field and select the appropriate expiration time (1 hour, 1 day, 1 month or never) for your token.\n\n\n\n\n\n\nClick \nSave \n Continue\n.\n\n\n\n\n\n\nIn the \nPersonal Access token\n pop-up window, you can see your newly generated token. Save it somewhere safe now so that you can use it later.\n\n\n\n\n\n\nClick \nDone\n.\n\n\n\n\n\n\nIn your \nSecurity\n page, now you can see all your tokens with their expiration date and with the option to \nEdit\n or \nRemove\n them.", 
            "title": "Account Security"
        }, 
        {
            "location": "/getting-started/account-security/#enable-two-factor-authentication", 
            "text": "We provide an extra layer of security if you enable Two-factor authentication (TFA) on your Bitrise account.    Download and install  Google Authenticator  on your phone.    Log in to  bitrise.io  and go to your  Profile .    Click  Account settings .    Scroll down and click  Security  on the left.    Click on  Enable  under  Two-factor authentication .    Open your Google Authenticator and scan the QR-code that appears on your screen.    Enter the 6-digit code that was generated.   TFA on GitHub, Bitbucket, GitLab and Xamarin  We recommend that you check your connected accounts (GitHub, Bitbucket, GitLab and Xamarin) and enable TFAs if you haven't already.     Once you have activated your TFA and saved your recovery codes, you will receive a confirmation email from  letsconnect@bitrise.io .", 
            "title": "Enable Two-factor authentication"
        }, 
        {
            "location": "/getting-started/account-security/#generate-personal-access-tokens-manually", 
            "text": "There are two types of personal access tokens in your  Security  tab of your profile:    the  auto-generated  ones, which are generated by Bitrise automatically whenever communicating with the Bitrise API    the  user-generated  ones which you can manually generate for yourself    Follow the steps to create a new token manually!    In your  Security  tab, click on  Generate new .    Fill out the  Token description  field and select the appropriate expiration time (1 hour, 1 day, 1 month or never) for your token.    Click  Save   Continue .    In the  Personal Access token  pop-up window, you can see your newly generated token. Save it somewhere safe now so that you can use it later.    Click  Done .    In your  Security  page, now you can see all your tokens with their expiration date and with the option to  Edit  or  Remove  them.", 
            "title": "Generate personal access tokens manually"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/", 
            "text": "We are always refining our UI and UX, to achieve the best and smoothest experience possible,\nbut at the same time give you enough room for experimentation and customization.\n\n\nBecause of the very reason of us believing that you should be able to do everything you want with Bitrise,\nsome parts may seem a bit complex at first glance.\n\n\nThis guide will help you get your first app up and running on Bitrise. Let's dive in!\n\n\nFirst of all you have to open the \nAdd New App page\n,\neither by clicking \nAdd\n on the \nDashboard\n,\nor selecting \nAdd new App\n in the Account drop down menu (top right corner).\n\n\n1. Code repository setup\n\u2693\n\n\nThe first step of adding an app is to specify where its code is stored.\n\n\nYou can either choose any one of \nGitHub.com\n, \nBitbucket.org\n or \nGitLab.com\n or add an other location manually.\n\n\nGitHub / Bitbucket / GitLab\n\u2693\n\n\nUnder Connect your repository just choose the git hosting service for the repo you want to add to Bitrise.\n(If you haven't connected your GitHub, Bitbucket or GitLab account yet on your profile, click on the green button to do so here.) Now you can see all your repos listed and a Search field in case you have many of them. If you hover on the repository names, you can get a glimpse of their descriptions, too.\nYour personal repos are separated from the ones that belong to an organization or other user.\n\n\nSelect the repository from the list to proceed to the next step.\n\n\n\n\nWhy does Bitrise need write permissions on Github/Bitbucket/GitLab?\n\n\nThere are two things that Bitrise couldn't do without write permissions:\n\n\n\n\nAdding an SSH key to the selected repository\n\n\nRegistering a Webhook for the repository\n\n\n\n\nPlease note, that \nif you want to avoid giving Bitrise write permissions,\nyou can select \nOther / Manual\n instead, and do the setup yourself.\n\n\n\n\nOther / Manual setup option\n\u2693\n\n\nPaste your HTTPS git clone URL where Bitrise can access your code and click on \nNext\n to proceed.\n\n\n2. Setup repository access\n\u2693\n\n\nYou need to specify how Bitrise will be able to access the source code. Depending on whether or not you have admin rights to the repo\n\n\nAuto-add the SSH key Bitrise generated for you\n\u2693\n\n\nThis option is available for GitHub, Bitbucket and GitLab.com repositories,\nif you have your account connected to your Bitrise account.\n\n\nThis is the easieast, fastest way. You can just click on \nAuto add\n\n\nif you have admin rights to the repo\n you selected.\n\n\nCopy the public key Bitrise generated\n\u2693\n\n\nIf you use other repos for your build, you have to copy the \npublic key\n and \nregister it as an account SSH key\n on your git hosting service (\nnot\n as a deployment key).\nYou can also use this option if you don't have admin rights to the repo, or if the repository is not hosted on GitHub, Bitbucket or GitLab.com or if you use submodules and want to use the same SSH key for multiple repositories.\nIf you use submodules or private Cocoapods,\nuse this guide: \nAdding projects with submodules\n\n\nUse your own keypair\n\u2693\n\n\nYou can paste your existing SSH \nprivate key\n on Add own SSH tab.\n\nMake sure it is an RSA private key without a passphrase,\n\notherwise you won't be able to use it on Bitrise.\n\n\nYou can find a guide \nhere\n about\nhow you can generate an SSH key like this.\n\n\nIf you use submodules, private Cocoapods,\nor have to access more than one private repository\nduring the build, you should check this guide: \nAdding projects with submodules\n\n\n3. Validation setup\n\u2693\n\n\nIn this section you have to specify a branch, which will be used in the next step:\nyour repository will be cloned, the specified branch will be checked out,\nand our \nopen source project scanner\n\nwill scan through the repository, and will construct base configuration(s)\nappropriate for your project.\n\n\nYou can choose to configure your project manually.\nThis is only recommended if you can't use the automatic\nproject scanner to generate a good base configuration for you.\nChoose this option only if you really know what you're doing,\nor if you can't use the automatic scanner!\n\n\n4. Validating repository\n\u2693\n\n\nYou don't have to do anything in this section: a validation\nis started automatically based on the setup you have just finished. \nYou can check the progress and the logs of the validation while it runs,\nand the errors and warnings in case the scanner would generate any.\n\n\n5. Project build configuration\n\u2693\n\n\nPlatform selection: We try to detect on validation whether you added an Android, iOS, or Xamarin project,\nor any other project type the \nscanner\n supports.\nIf we succeed, you can either Confirm the settings or Edit them.\nIf we fail to detect it, you have to select one and configure it manually.\n\n\nWe will also try to detect your build configuration automatically, based on your project settings / project\nfiles in the repository.\n\n\n6. Webhook setup\n\u2693\n\n\nTo have Bitrise \nautomatically start a build every time you push code into your repository\n you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nIf we have permission for adding webhooks automatically to the source code hosting service you use, you can add the webhook in this section with a single click or you can skip this step (unrecommended).\n\n\n\n\nError: Webhook registration failed\n\n\nIf you see a message like this, that means that you don't have admin rights to the repo,\nso no webhook could be created. Contact the administrator, register the webhook manually (see link to the guide below)\nor skip this step if you're OK with starting builds manually (not advised).\n\n\n\n\nYou can find the webhook setup guide \nhere\n,\nif you'd have to do this manually.\n\n\n7. Congratulations, you have set up your first app on Bitrise.io!\n\u2693\n\n\nAfter you are done in the \"webhook\" section, a build is triggered automatically\nfor your app, with the base configuration detected and generated by\nthe \"Repository validator / scanner\". At this point you should have\na base working configuration, which you'll be able to improve and change\nto fit your project's development process.", 
            "title": "Create your first App on Bitrise.io"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#1-code-repository-setup", 
            "text": "The first step of adding an app is to specify where its code is stored.  You can either choose any one of  GitHub.com ,  Bitbucket.org  or  GitLab.com  or add an other location manually.", 
            "title": "1. Code repository setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#github-bitbucket-gitlab", 
            "text": "Under Connect your repository just choose the git hosting service for the repo you want to add to Bitrise.\n(If you haven't connected your GitHub, Bitbucket or GitLab account yet on your profile, click on the green button to do so here.) Now you can see all your repos listed and a Search field in case you have many of them. If you hover on the repository names, you can get a glimpse of their descriptions, too.\nYour personal repos are separated from the ones that belong to an organization or other user.  Select the repository from the list to proceed to the next step.   Why does Bitrise need write permissions on Github/Bitbucket/GitLab?  There are two things that Bitrise couldn't do without write permissions:   Adding an SSH key to the selected repository  Registering a Webhook for the repository   Please note, that  if you want to avoid giving Bitrise write permissions,\nyou can select  Other / Manual  instead, and do the setup yourself.", 
            "title": "GitHub / Bitbucket / GitLab"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#other-manual-setup-option", 
            "text": "Paste your HTTPS git clone URL where Bitrise can access your code and click on  Next  to proceed.", 
            "title": "Other / Manual setup option"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#2-setup-repository-access", 
            "text": "You need to specify how Bitrise will be able to access the source code. Depending on whether or not you have admin rights to the repo", 
            "title": "2. Setup repository access"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#auto-add-the-ssh-key-bitrise-generated-for-you", 
            "text": "This option is available for GitHub, Bitbucket and GitLab.com repositories,\nif you have your account connected to your Bitrise account.  This is the easieast, fastest way. You can just click on  Auto add  if you have admin rights to the repo  you selected.", 
            "title": "Auto-add the SSH key Bitrise generated for you"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#copy-the-public-key-bitrise-generated", 
            "text": "If you use other repos for your build, you have to copy the  public key  and  register it as an account SSH key  on your git hosting service ( not  as a deployment key).\nYou can also use this option if you don't have admin rights to the repo, or if the repository is not hosted on GitHub, Bitbucket or GitLab.com or if you use submodules and want to use the same SSH key for multiple repositories.\nIf you use submodules or private Cocoapods,\nuse this guide:  Adding projects with submodules", 
            "title": "Copy the public key Bitrise generated"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#use-your-own-keypair", 
            "text": "You can paste your existing SSH  private key  on Add own SSH tab. Make sure it is an RSA private key without a passphrase, \notherwise you won't be able to use it on Bitrise.  You can find a guide  here  about\nhow you can generate an SSH key like this.  If you use submodules, private Cocoapods,\nor have to access more than one private repository\nduring the build, you should check this guide:  Adding projects with submodules", 
            "title": "Use your own keypair"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#3-validation-setup", 
            "text": "In this section you have to specify a branch, which will be used in the next step:\nyour repository will be cloned, the specified branch will be checked out,\nand our  open source project scanner \nwill scan through the repository, and will construct base configuration(s)\nappropriate for your project.  You can choose to configure your project manually.\nThis is only recommended if you can't use the automatic\nproject scanner to generate a good base configuration for you.\nChoose this option only if you really know what you're doing,\nor if you can't use the automatic scanner!", 
            "title": "3. Validation setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#4-validating-repository", 
            "text": "You don't have to do anything in this section: a validation\nis started automatically based on the setup you have just finished. \nYou can check the progress and the logs of the validation while it runs,\nand the errors and warnings in case the scanner would generate any.", 
            "title": "4. Validating repository"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#5-project-build-configuration", 
            "text": "Platform selection: We try to detect on validation whether you added an Android, iOS, or Xamarin project,\nor any other project type the  scanner  supports.\nIf we succeed, you can either Confirm the settings or Edit them.\nIf we fail to detect it, you have to select one and configure it manually.  We will also try to detect your build configuration automatically, based on your project settings / project\nfiles in the repository.", 
            "title": "5. Project build configuration"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#6-webhook-setup", 
            "text": "To have Bitrise  automatically start a build every time you push code into your repository  you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.  If we have permission for adding webhooks automatically to the source code hosting service you use, you can add the webhook in this section with a single click or you can skip this step (unrecommended).   Error: Webhook registration failed  If you see a message like this, that means that you don't have admin rights to the repo,\nso no webhook could be created. Contact the administrator, register the webhook manually (see link to the guide below)\nor skip this step if you're OK with starting builds manually (not advised).   You can find the webhook setup guide  here ,\nif you'd have to do this manually.", 
            "title": "6. Webhook setup"
        }, 
        {
            "location": "/getting-started/create-your-first-app-on-bitrise/#7-congratulations-you-have-set-up-your-first-app-on-bitriseio", 
            "text": "After you are done in the \"webhook\" section, a build is triggered automatically\nfor your app, with the base configuration detected and generated by\nthe \"Repository validator / scanner\". At this point you should have\na base working configuration, which you'll be able to improve and change\nto fit your project's development process.", 
            "title": "7. Congratulations, you have set up your first app on Bitrise.io!"
        }, 
        {
            "location": "/getting-started/add-your-first-step-to-your-workflow/", 
            "text": "When you've registered an app you can start modifying its Workflow,\nthat is to customize how a build should work.\n\n\nTo edit your App's Workflow you should open the \nWorkflow Editor\n:\n\n\n\n\nAfter \nlogging in\n, select your App on your \nDashboard\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\nIn the Workflow Editor you can see a preset list of Steps based on your app we added to your Workflow.\n\n\nAdd a new Step to the Workflow\n\u2693\n\n\nIf you want to \nadd a new Step\n to the Workflow,\njust click the \n+\n sign button between the Steps you want the new one to be.\n\n\n\n\nThis will show you a list of available Steps in our \nStep Library\n.\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow.\n\n\nYou can \nDrag and Drop\n to reorder your list of Steps. During a build,\nsteps will be executed one by one, in top-to-bottom order.\n\n\nOnce you're happy with your Workflow Save it on the top right!\nThat's all, your next build will automatically use the current, \nsaved\n Workflow!\n\n\n\n\nMultiple Workflows\n\n\nYou can create as many workflows as you like, and then\nspecify which one to use for which build trigger event in the \nTriggers\n section\nof the Workflow Editor.\nYou can read more about Triggers and workflow selection in the\n\nControl what to build when, with the Trigger Map\n guide.", 
            "title": "Add your first Step to your Workflow"
        }, 
        {
            "location": "/getting-started/add-your-first-step-to-your-workflow/#add-a-new-step-to-the-workflow", 
            "text": "If you want to  add a new Step  to the Workflow,\njust click the  +  sign button between the Steps you want the new one to be.   This will show you a list of available Steps in our  Step Library .\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow.  You can  Drag and Drop  to reorder your list of Steps. During a build,\nsteps will be executed one by one, in top-to-bottom order.  Once you're happy with your Workflow Save it on the top right!\nThat's all, your next build will automatically use the current,  saved  Workflow!   Multiple Workflows  You can create as many workflows as you like, and then\nspecify which one to use for which build trigger event in the  Triggers  section\nof the Workflow Editor.\nYou can read more about Triggers and workflow selection in the Control what to build when, with the Trigger Map  guide.", 
            "title": "Add a new Step to the Workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/", 
            "text": "To start editing your workflow you first have to open it\nin the \nWorkflow Editor\n on Bitrise.io:\n\n\n\n\nLog in on \nBitrise.io\n and select your app on the Dashboard\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\nThis is your app's \nWorkflow Editor\n. You can change, delete, add and reorder steps here. Don't forget to \nSave\n or you can \nDiscard\n changes on the top right._\n\n\nChange a step\n\u2693\n\n\nSelect the step you want to change from the list on the left side.\nYou can change the selected Step's inputs and other configs on the right side.\n\n\n\n\nNote\n\n\nSteps are executed top-to-bottom, you can reorder them with \nDrag and Drop\n.\n\n\n\n\nUpgrade a Step to the latest version\n\u2693\n\n\nWhen a new version is available for a Step in your Workflow, you can update it in two ways: \n\n\n\n\nClick the orange dot, our update indicator in the top right of the Step's icon to upgrade the Step to the latest available version\n\n\nOr select the Step and in the right side's \nVersion\n section update to the new version manually.\n\n\n\n\nIn the dropdown you can set a Step to \nalways latest\n. In this case we'll always update it without further notice.\n\n\nYour settings / provided input values for the Step will be kept for the new version.\n\n\n\n\nRemove a step\n\u2693\n\n\nSelect the step on the left side and click on the \ntrash can\n on the right side or delete it at the bottom of the step.\n\n\nAdd a new step\n\u2693\n\n\nIf you want to \nadd a new Step\n to the Workflow,\njust click the \n+\n between the Steps you want the new one to be.\n\n\n\n\nThis will show you a list of available Steps in our \nStep Library\n.\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow and then all you have to do is fill in its required inputs\n(on the right side you'll see which inputs are required - marked with an orange border).\n\n\nYou can also clone a Step by clicking the \nClone icon\n on the right side and then you can \nDrag and Drop\n it to its place. \n\n\nCreate a new Workflow\n\u2693\n\n\nTo create a new Workflow just click on the \n+\n sign \nat the top, where your workflows are listed.\n\n\n\n\nYou can create as many workflows for an app as you like.\n\n\nUsing multiple workflows can be beneficial in case you want to do different\nthings based on which \nbranch\n you push new code.\nTo see how you can control what event should \ntrigger\n\nwhich \nworkflow\n, see: \nControl what to build when, with the Trigger Map\n\n\n\n\nNew workflows are created as a copy of the active workflow when you click the \n+\n button.\n\n\nYou can delete the current active workflow\n with the orange \nDelete\n button\nat the top right corner of the workflow area.\n\n\nStep inputs\n\u2693\n\n\nInserting Environment Variables into Step inputs\n\u2693\n\n\nClick into any input field of a Step and a green \nInsert Variable\n button will appear.\nClick this button and you'll get a full list of available Environment Variables.\nYou can search this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\nEnvironment Variable replace mode\n\u2693\n\n\nUnder every Step input field you can see one of these two indicators:\n\n\n\n\nEnvironment Variables will be replaced in input\n\n\nor \nEnvironment Variables won't be replaced in input\n\n\n\n\nIt's the status of the \nis_expand\n option of the input.\n\nYou can change this only in YAML mode (\nbitrise.yml\n tab of the editor).\n\n\nWhat does this option do?\n\n\n\n\nIf \nenabled\n it'll replace Environment Variables (e.g. \n$HOME\n or \n${HOME}\n)\n  inside the input text with the Environment Variable's value \nbefore\n it would be passed to the Step.\n\n\nIf \ndisabled\n it won't replace anything in the input text, the whole text will be passed to the Step \"as-it-is\".\n\n\n\n\nWhat does this mean?\n For example, if you have \n$HOME\n in the input text\nand you enable this option, it'll replace every occurrence of \n$HOME\n in that input\nwith the value of the \nHOME\n environment variable\n(in this case, the home folder's path, e.g. \n/Users/[user]\n or \n/home/[user]\n).\nIf it's disabled then it won't be replaced,\nthe value you specify for the input will be passed as text (\n$HOME\n),\nand \nthe Step itself might or might not expand\n the value.\n\n\nUsually you should leave this option on the default value, the one defined by the Step for the input\n.\n\n\nIn general you should \nnot\n change this option, but if you have to,\nyou can do that in YML mode, by adding \nis_expand: true\n or \nis_expand: false\n to the input's \nopts\n list. Example:\n\n\n- some_input: My Value\n  opts:\n    is_expand: false\n\n\n\nA practical example / guideline\n\u2693\n\n\nAs a general guideline, this option should almost always be \nenabled\n,\nunless you have a specific reason to disable it.\n\n\nWhat can be a reason to disable it?\n There's pretty much only a single reason:\nif your input includes the \n$\n character (in a password for example),\nand you want to keep the \n$\n character in the input, instead of\nreplacing it with an environment variable.\n\n\nIf you have this expand option enabled and you have a password like \npas$word\n\nit'll most likely result in \npas\n after the value expansion,\nbecause there's no \n$word\n environment variable available (unless you defined it somewhere).\nThere might be other cases when you explicitly want to include the \n$\n character in the input,\nin these cases you should disable the expand option.\n\n\nNote\n: if you want to reference another environment variable,\neven if that one's value includes the \n$\n character, you have to \nenable\n this option,\nor else your reference won't work.\n\nIn a case like this you should disable this option where you specify the value\n with \n$\n in it,\nand enable the option everywhere else, where you reference that environment variable.", 
            "title": "Manage your Bitrise workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#change-a-step", 
            "text": "Select the step you want to change from the list on the left side.\nYou can change the selected Step's inputs and other configs on the right side.   Note  Steps are executed top-to-bottom, you can reorder them with  Drag and Drop .", 
            "title": "Change a step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#upgrade-a-step-to-the-latest-version", 
            "text": "When a new version is available for a Step in your Workflow, you can update it in two ways:    Click the orange dot, our update indicator in the top right of the Step's icon to upgrade the Step to the latest available version  Or select the Step and in the right side's  Version  section update to the new version manually.   In the dropdown you can set a Step to  always latest . In this case we'll always update it without further notice.  Your settings / provided input values for the Step will be kept for the new version.", 
            "title": "Upgrade a Step to the latest version"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#remove-a-step", 
            "text": "Select the step on the left side and click on the  trash can  on the right side or delete it at the bottom of the step.", 
            "title": "Remove a step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#add-a-new-step", 
            "text": "If you want to  add a new Step  to the Workflow,\njust click the  +  between the Steps you want the new one to be.   This will show you a list of available Steps in our  Step Library .\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow and then all you have to do is fill in its required inputs\n(on the right side you'll see which inputs are required - marked with an orange border).  You can also clone a Step by clicking the  Clone icon  on the right side and then you can  Drag and Drop  it to its place.", 
            "title": "Add a new step"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#create-a-new-workflow", 
            "text": "To create a new Workflow just click on the  +  sign  at the top, where your workflows are listed.   You can create as many workflows for an app as you like.  Using multiple workflows can be beneficial in case you want to do different\nthings based on which  branch  you push new code.\nTo see how you can control what event should  trigger \nwhich  workflow , see:  Control what to build when, with the Trigger Map   New workflows are created as a copy of the active workflow when you click the  +  button.  You can delete the current active workflow  with the orange  Delete  button\nat the top right corner of the workflow area.", 
            "title": "Create a new Workflow"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#step-inputs", 
            "text": "", 
            "title": "Step inputs"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#inserting-environment-variables-into-step-inputs", 
            "text": "Click into any input field of a Step and a green  Insert Variable  button will appear.\nClick this button and you'll get a full list of available Environment Variables.\nYou can search this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.", 
            "title": "Inserting Environment Variables into Step inputs"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#environment-variable-replace-mode", 
            "text": "Under every Step input field you can see one of these two indicators:   Environment Variables will be replaced in input  or  Environment Variables won't be replaced in input   It's the status of the  is_expand  option of the input. You can change this only in YAML mode ( bitrise.yml  tab of the editor).  What does this option do?   If  enabled  it'll replace Environment Variables (e.g.  $HOME  or  ${HOME} )\n  inside the input text with the Environment Variable's value  before  it would be passed to the Step.  If  disabled  it won't replace anything in the input text, the whole text will be passed to the Step \"as-it-is\".   What does this mean?  For example, if you have  $HOME  in the input text\nand you enable this option, it'll replace every occurrence of  $HOME  in that input\nwith the value of the  HOME  environment variable\n(in this case, the home folder's path, e.g.  /Users/[user]  or  /home/[user] ).\nIf it's disabled then it won't be replaced,\nthe value you specify for the input will be passed as text ( $HOME ),\nand  the Step itself might or might not expand  the value.  Usually you should leave this option on the default value, the one defined by the Step for the input .  In general you should  not  change this option, but if you have to,\nyou can do that in YML mode, by adding  is_expand: true  or  is_expand: false  to the input's  opts  list. Example:  - some_input: My Value\n  opts:\n    is_expand: false", 
            "title": "Environment Variable replace mode"
        }, 
        {
            "location": "/getting-started/manage-your-bitrise-workflow/#a-practical-example-guideline", 
            "text": "As a general guideline, this option should almost always be  enabled ,\nunless you have a specific reason to disable it.  What can be a reason to disable it?  There's pretty much only a single reason:\nif your input includes the  $  character (in a password for example),\nand you want to keep the  $  character in the input, instead of\nreplacing it with an environment variable.  If you have this expand option enabled and you have a password like  pas$word \nit'll most likely result in  pas  after the value expansion,\nbecause there's no  $word  environment variable available (unless you defined it somewhere).\nThere might be other cases when you explicitly want to include the  $  character in the input,\nin these cases you should disable the expand option.  Note : if you want to reference another environment variable,\neven if that one's value includes the  $  character, you have to  enable  this option,\nor else your reference won't work. In a case like this you should disable this option where you specify the value  with  $  in it,\nand enable the option everywhere else, where you reference that environment variable.", 
            "title": "A practical example / guideline"
        }, 
        {
            "location": "/getting-started/rolling-builds/", 
            "text": "You can cancel running builds or builds on hold - no need to abort them manually! If you turn on the \nRolling Builds\n feature, you can automatically abort the previous builds of your app once a new one is started.\n\n\n\n\nManual and scheduled builds\n\n\nPlease note that manual and scheduled builds are also cancelled\nif you start a new build with the \nRolling builds\n option enabled.\n\n\nAlso, builds running on the same branch will be cancelled even if they run\ndifferent workflows!\n\n\n\n\n\n\nBitrise Start Build\n step\n\n\nThe \nBitrise Start Build step\n allows users to trigger a different workflow as one of the steps of a given workflow. Unfortunately, if the Rolling Builds feature is enabled, the triggered workflow will cancel the previous workflows.\n\n\n\n\nYou can also set which types of triggered builds you wish to abort. Let's see how!\n\n\n\n\n\n\nOpen your \nDashboard\n on \nbitrise.io\n and select your app.\n\n\n\n\n\n\nSelect the \nSettings\n tab from the menubar.\n\n\n\n\n\n\nScroll down to the \nENABLE ROLLING BUILDS\n option and toggle it.\n\n\n\n\n\n\n\n\nSelect the type(s) of builds you wish to abort when a new build is started.\n\n\n\n\nPull Requests\n: will cancel all previous builds for Pull Requests and all related Pushes\n\n\nPushes\n: will cancel all previous builds for Pushes to the same branch\n\n\nRunning builds\n: will also auto-cancel running builds in addition to on-hold ones\n\n\n\n\n\n\n\n\nAnd done! From now on, you don't have to wait for a triggered build to finish if you do not need it!", 
            "title": "Rolling builds"
        }, 
        {
            "location": "/getting-started/Scheduling-Builds/", 
            "text": "You can schedule your builds to run automatically at a specific time of the week so that you can check your logs when it's most convenient for you.\n\n\nFollow the steps to see how you can set it up for your next build!\n\n\n\n\n\n\nLog into \nbitrise.io\n.\n\n\n\n\n\n\nGo to your \nDashboard\n and click on the project whose build you want to schedule.\n\n\n\n\n\n\nClick on \nStart/Schedule a Build\n.\n\n\n\n\n\n\nIn the \nBuild configuration\n pop-up window, toggle the switch to the right to enable \nSchedule this build\n feature.\n\n\n\n\n\n\n\n\nSet the hour and minute in the \nHH/MM\n field.\n\n\n\n\n\n\nOn the timeline, click on the day(s) when you want your build to run.\n\n\n\n\n\n\n\n\nCheck and fill out the rest of the input fields if necessary. You can schedule your build in the advanced version of the \nBuild configuration\n window too.\n\n\n\n\n\n\nClick \nSchedule Build\n at the bottom of the pop-up window.\n\n\n\n\n\n\n\n\nDone\n\n\nNow you're back on your \nBuilds\n board and you can see your scheduled build.\n\n\n\n\nIf you click on \nShow scheduled\n, you can edit/delete your schedules, disable build scheduling by toggling the switch to the left, or immediately trigger the build by clicking on the \nTrigger now\n button.\n\n\n\n\nThat's it! Now you can enjoy the comfort of your automated build!", 
            "title": "Scheduling your builds"
        }, 
        {
            "location": "/getting-started/selective_builds/", 
            "text": "Selective Builds\n\u2693\n\n\nThe Selective Builds setting provides change detection for your builds. Enabling it allows you to only trigger a build of an app if certain files or folders have changed.\n\n\nYou may want to use this setting if:\n\n\n\n\nyou have multiple apps in a single repository\n\n\nmultiple apps share common files in your repository\n\n\n\n\n\n\nA GitHub project is required\n\n\nThe current version of our Selective Builds feature only works with GitHub projects. If your repository is hosted by another git hosting service, the option will not be available.\n\n\n\n\n\n\nService credential user\n\n\nThe appropriate Service credential user must be set on your app's \nTeam\n page. This user must have an admin right for the GitHub repository of the project. \nRead more about setting up the Service credential user\n.\n\n\n\n\n\n\n\n\nClick on your app on your \nDashboard\n.\n\n\n\n\n\n\nClick \nSettings\n in the top navigation bar.\n\n\n\n\n\n\nFind the \nENABLE SELECTIVE BUILDS\n option and toggle the switch on the right.\n\n\n\n\n\n\n\n\nAdd filenames and file paths in the \nADD FILENAME/PATH\n window. You can add multiple files or file paths here. A build will be triggered only if these files are changed.", 
            "title": "Selective builds"
        }, 
        {
            "location": "/getting-started/selective_builds/#selective-builds", 
            "text": "The Selective Builds setting provides change detection for your builds. Enabling it allows you to only trigger a build of an app if certain files or folders have changed.  You may want to use this setting if:   you have multiple apps in a single repository  multiple apps share common files in your repository    A GitHub project is required  The current version of our Selective Builds feature only works with GitHub projects. If your repository is hosted by another git hosting service, the option will not be available.    Service credential user  The appropriate Service credential user must be set on your app's  Team  page. This user must have an admin right for the GitHub repository of the project.  Read more about setting up the Service credential user .     Click on your app on your  Dashboard .    Click  Settings  in the top navigation bar.    Find the  ENABLE SELECTIVE BUILDS  option and toggle the switch on the right.     Add filenames and file paths in the  ADD FILENAME/PATH  window. You can add multiple files or file paths here. A build will be triggered only if these files are changed.", 
            "title": "Selective Builds"
        }, 
        {
            "location": "/getting-started/triggering-builds/triggering-builds/", 
            "text": "If you set up incoming webhooks to Bitrise, you can automatically trigger builds by specifying a trigger event and a workflow. You can specify multiple triggers, and add new triggers or remove existing ones any time you wish.\n\n\nBy default, every new app you add will have two triggers: one that triggers a build every time code is pushed to ANY branch of your repository, and another that triggers a build every time a pull request is opened within your repository. You can change or remove these, of course.\n\n\nYou can manage the triggers in the \nTriggers\n section of the \nWorkflow Editor\n or you can directly edit the bitrise.yml of your app to set them up. In this section of our DevCenter, we cover how to set up and manage triggers on the website UI!", 
            "title": "Triggering builds"
        }, 
        {
            "location": "/getting-started/triggering-builds/trigger-code-push/", 
            "text": "You can set up triggers so that every time code is pushed to the specified branch of your repository, a build is automatically triggered on Bitrise.\n\n\nNote that this requires an incoming webhook set up with the hosting service of your repository. Read more in the \nWebhooks\n section.\n\n\nBy default, every new app you add will have a trigger that triggers a build every time code is pushed to any branch of your repository.\n\n\n\n\n\n\nOpen your app on \nbitrise.io\n.\n\n\n\n\n\n\nOpen the \nWorkflow Editor\n.\n\n\n\n\n\n\nSelect the \nTriggers\n tab.\n\n\n\n\n\n\nSelect the \nPUSH\n option.\n\n\n\n\n\n\n\n\nIn the existing trigger, click the \nPush branch\n option.\n\n\n\n\n+ ADD TRIGGER\n option\n\n\nIf you have an existing trigger set up already, click the \n+ ADD TRIGGER\n option to set up a new one.\n\n\n\n\n\n\n\n\nType in the name of the branch (for example, \nmaster\n). Make sure there are no spelling errors, otherwise the trigger won't work.\n\n\n\n\n\n\nSelect the workflow you wish to trigger (for example, \nprimary\n).\n\n\n\n\n\n\nClick \nSave\n in the top right corner.\n\n\n\n\n\n\nAnd you're done! From now on, if code gets pushed to the selected branch of your app's repository, Bitrise will trigger a build with the selected workflow!", 
            "title": "Triggering builds with code push"
        }, 
        {
            "location": "/getting-started/triggering-builds/trigger-pull-request/", 
            "text": "You can set up a trigger so that every time a pull request is opened from a specified source branch to a specified target branch of your repository, a build is automatically triggered on Bitrise.\n\n\nNote that this requires an incoming webhook set up with the hosting service of your repository. Read more in the \nWebhooks\n section.\n\n\nBy default, every new app you add will have a trigger that triggers a build every time any pull request is opened within your repository.\n\n\n\n\n\n\nOpen your app on \nbitrise.io\n.\n\n\n\n\n\n\nOpen the \nWorkflow Editor\n.\n\n\n\n\n\n\nSelect the \nTriggers\n tab.\n\n\n\n\n\n\nSelect the \nPULL REQUEST\n option.\n\n\n\n\n\n\n\n\nIn the existing trigger, click the \nSOURCE BRANCH\n and \nTARGET BRANCH\n options.\n\n\n\n\n+ ADD TRIGGER\n option\n\n\nIf you have your own trigger set up already, click the \n+ ADD TRIGGER\n option to set up a new one.\n\n\n\n\n\n\n\n\nType the names of the source branch and the target branch. Make sure there are no spelling errors, otherwise the trigger won't work.\n\n\nYou can leave either the source or target branch fields, or both, empty: the trigger will work accordingly. For example, if you leave both empty, as is the default with new apps, every pull request will trigger a build.\n\n\n\n\n\n\nSelect the workflow you wish to trigger (for example, \nprimary\n).\n\n\n\n\n\n\nClick \nSave\n in the top right corner.\n\n\n\n\n\n\nAnd you're done! From now on, if a pull request is opened in your repository, Bitrise will trigger a build with the selected workflow!", 
            "title": "Triggering builds with pull requests"
        }, 
        {
            "location": "/getting-started/triggering-builds/trigger-git-tags/", 
            "text": "You can specify a pattern for your Git Tags to trigger a specific workflow. This is a good way to build and deploy your app in a specific state. And it's very easy to set up!\n\n\nNote that this requires an incoming webhook set up with the hosting service of your repository. Read more in the \nWebhooks\n section.\n\n\n\n\nEnabling Tag Push\n\n\nCertain providers, such as GitLab, require Tag Push events to be specifically enabled in the webhook setup.\n\n\n\n\n\n\n\n\nOpen your app on \nbitrise.io\n.\n\n\n\n\n\n\nOpen the \nWorkflow Editor\n.\n\n\n\n\n\n\nSelect the \nTriggers\n tab.\n\n\n\n\n\n\nSelect the \nTAG\n option.\n\n\n\n\n\n\n\n\nClick \n+ ADD TRIGGER\n.\n\n\n\n\n\n\nIn the \nTAG\n window, add the tag that you wish to trigger a build.\n\n\n\n\n\n\nSelect the workflow you wish to trigger (for example, \nprimary\n).\n\n\n\n\n\n\nClick \nSave\n in the top right corner.\n\n\n\n\n\n\nAnd you're done!", 
            "title": "Triggering builds with Git Tags"
        }, 
        {
            "location": "/getting-started/triggering-builds/status-reporting/", 
            "text": "Bitrise can push back build status reports to your git hosting provider (GitHub/GitLab/Bitbucket). You only need to authenticate Bitrise to communicate towards the git hosting service. Apart from build status reports, this enables other operations, such as auto-registering SSH keys or Webhooks.\n\n\nTo do this, you need to specify a Service Credential User on the \nTeam\n tab of your app on \nbitrise.io\n. You also need to make sure that this user has a connected account with the git hosting service of your choice on \nbitrise.io\n. This account will be used by Bitrise to communicate with the API of the git hosting provider.\n\n\nPlease note that status reports are sent only for automatically triggered builds, such as builds triggered by a code push or a pull request.\n\n\n\n\n\n\nMake sure the account you wish to use is connected to the relevant hosting provider: go to the \nAccount settings\n page of the account and check the \nCONNECTED ACCOUNTS\n menu on the left side.\n\n\n\n\n\n\n\n\nGo to the \nTeam\n tab of your app on \nbitrise.io\n.\n\n\n\n\n\n\nFind the \nService credential User\n menu and select the user with the connected account.\n\n\n\n\n\n\n\n\nClick the \nTest the git connection\n button to make sure the selected user's connection can be used for sending back the build status to the hosting provider.", 
            "title": "Reporting the build status to your git hosting provider"
        }, 
        {
            "location": "/infrastructure/available-stacks/", 
            "text": "The Stack indicates the virtual machine version that we will use to run your build.\nAfter adding your application to Bitrise we will select an appropriate Stack for it,\nbut you can simply change it to a different one on the \nSettings\n tab of your app.\n\n\n\n\nAfter selecting the Stack you want to use you'll see a short description of the stack\nwith an additional link to learn more about that specific Stack (e.g. to see what\ntools are preinstalled, and which versions, on the selected Stack).\n\n\n\n\nThe Stack won't be used until you click the \nSave\n button!\n\n\n\n\nStack status types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStable\n\n\nGenerally available and expected to be supported for the foreseeable future. \nUpdated when an update for the Stack's primary tool is available.\n Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). In case of \nXamarin\n stacks, the Xamarin updates are applied weekly, during the weekends.\n\n\n\n\n\n\nLTS (Long Term Support)\n\n\nNo changes (updates) will be made to the stack, except for absolutely crucial changes (for example which affect security), and Bitrise CLI tool updates. Preinstalled tool versions will remain the same, until the Stack is removed from our collection.\n\n\n\n\n\n\n\n\nStack prepare types\n\u2693\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPre-Booted\n\n\nIf a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an \nOn-Demand\n configuration.\n\n\n\n\n\n\nOn-Demand\n\n\nIf a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration \nwhen your build starts\n. This means that your build will be in \npreparing environment\n state while the related Virtual Machine is created \n booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes. \nThe prepare time (of course) is not counted into the build time, it won't affect how long your build can run.\n\n\n\n\n\n\n\n\nWhat's preinstalled\n\u2693\n\n\nEvery time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself\nor you want to add another tool / system check, feel free to send us a pull request!\n\n\nYou can find every available stack's System Report on GitHub: \nhttps://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "Available Stacks"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-status-types", 
            "text": "Type  Description      Stable  Generally available and expected to be supported for the foreseeable future.  Updated when an update for the Stack's primary tool is available.  Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). In case of  Xamarin  stacks, the Xamarin updates are applied weekly, during the weekends.    LTS (Long Term Support)  No changes (updates) will be made to the stack, except for absolutely crucial changes (for example which affect security), and Bitrise CLI tool updates. Preinstalled tool versions will remain the same, until the Stack is removed from our collection.", 
            "title": "Stack status types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#stack-prepare-types", 
            "text": "Type  Description      Pre-Booted  If a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an  On-Demand  configuration.    On-Demand  If a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration  when your build starts . This means that your build will be in  preparing environment  state while the related Virtual Machine is created   booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes.  The prepare time (of course) is not counted into the build time, it won't affect how long your build can run.", 
            "title": "Stack prepare types"
        }, 
        {
            "location": "/infrastructure/available-stacks/#whats-preinstalled", 
            "text": "Every time we create or update a Stack we create a \"System Report\" for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself\nor you want to add another tool / system check, feel free to send us a pull request!  You can find every available stack's System Report on GitHub:  https://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "What's preinstalled"
        }, 
        {
            "location": "/infrastructure/virtual-machines/", 
            "text": "On \nbitrise.io\n, we have \nmacOS\n and \nLinux\n virtual machines hosted for your builds.\nYou can select from multiple stacks, each with its own list of preinstalled tool versions.\nRead more about available stacks and stack prepare types in the \nAvailable Stacks docs\n.\n\n\n\n\nPasswordless sudo\n\n\nThe user which is used for the builds is configured with \npasswordless sudo\n enabled,\nthis way you are able to install all the extra things you need for your builds and for other automation.\nIf a tool is not preinstalled on your Stack of choice,\nyou can install it yourself - see the \nInstall Any Additional Tool\n guide.\n\n\n\n\nSecurity\n\u2693\n\n\nEvery build runs in its own virtual machine and the virtual machine is rolled back to a saved state,\nthe \"base box\" state, after the build is finished.\nThis way \nyour builds are always protected\n by changes made by others\nand by your previous builds and you can use a \nstable environment\n to define your build workflow,\nsince \nno state persists between builds\n.\n\n\nFor more information about Build/Code Security, see the \nCode Security\n guide.\n\n\nCustomization\n\u2693\n\n\nYou can find the \nmacOS\n base box setup guide and automation scripts we use for building our\nmacOS virtual machine base boxes in our \nOS X Box Bootstrap repository\n.\nThe repository includes every script we use for preparing these base virtual machine images.\n\n\nFor our \nLinux\n machines, check out the \nBitrise Base Docker Image's repository\n.\n\n\n\n\nSystem reports\n\n\nYou can always check our current configurations in the\n\nsystem reports folder of our main repository\n,\nto see what tools and which versions are preinstalled.\n\n\nThese reports have been generated by the scripts, linked in the first lines of the report.\n\n\n\n\nThe repositories used for our virtual machine preparation are open source,\nand pull requests are welcome.\nIf you'd like to have a tool pre-installed in our machines,\nfeel free to add your changes and they will be included in the related Stack(s)\nthe next time the Stack is updated.\n\n\nVirtual machine updates\n\u2693\n\n\nUpdates are always announced in the \n#changelog category of discuss.bitrise.io\n\nand can be seen on \nyour Bitrise Dashboard\n.\nWe will also send you a \nPlatform Updates\n notification about significant changes,\nunless you disable this feature under your \naccount settings page\n.\n\n\nStack updates\n\u2693\n\n\nIn general we do stack updates once a week, during the weekends.\n\n\nMinor patches might be applied during the week in case we detect an issue\nwith the current virtual machine environment.\nThese patches do not change any pre-installed tool version, unless it's really necessary.\n\n\nWe test every stack change as much as we can before it is\nreleased to avoid any changes / updates during the week.\n\n\niOS Simulator version \n SDK support\n\u2693\n\n\nAll the iOS Simulator versions which can be installed\nthrough \nXcode -\n Preferences -\n Components\n are installed and available.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#security", 
            "text": "Every build runs in its own virtual machine and the virtual machine is rolled back to a saved state,\nthe \"base box\" state, after the build is finished.\nThis way  your builds are always protected  by changes made by others\nand by your previous builds and you can use a  stable environment  to define your build workflow,\nsince  no state persists between builds .  For more information about Build/Code Security, see the  Code Security  guide.", 
            "title": "Security"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#customization", 
            "text": "You can find the  macOS  base box setup guide and automation scripts we use for building our\nmacOS virtual machine base boxes in our  OS X Box Bootstrap repository .\nThe repository includes every script we use for preparing these base virtual machine images.  For our  Linux  machines, check out the  Bitrise Base Docker Image's repository .   System reports  You can always check our current configurations in the system reports folder of our main repository ,\nto see what tools and which versions are preinstalled.  These reports have been generated by the scripts, linked in the first lines of the report.   The repositories used for our virtual machine preparation are open source,\nand pull requests are welcome.\nIf you'd like to have a tool pre-installed in our machines,\nfeel free to add your changes and they will be included in the related Stack(s)\nthe next time the Stack is updated.", 
            "title": "Customization"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#virtual-machine-updates", 
            "text": "Updates are always announced in the  #changelog category of discuss.bitrise.io \nand can be seen on  your Bitrise Dashboard .\nWe will also send you a  Platform Updates  notification about significant changes,\nunless you disable this feature under your  account settings page .", 
            "title": "Virtual machine updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#stack-updates", 
            "text": "In general we do stack updates once a week, during the weekends.  Minor patches might be applied during the week in case we detect an issue\nwith the current virtual machine environment.\nThese patches do not change any pre-installed tool version, unless it's really necessary.  We test every stack change as much as we can before it is\nreleased to avoid any changes / updates during the week.", 
            "title": "Stack updates"
        }, 
        {
            "location": "/infrastructure/virtual-machines/#ios-simulator-version-sdk-support", 
            "text": "All the iOS Simulator versions which can be installed\nthrough  Xcode -  Preferences -  Components  are installed and available.", 
            "title": "iOS Simulator version &amp; SDK support"
        }, 
        {
            "location": "/infrastructure/the-environment/", 
            "text": "Hardware\n\u2693\n\n\nWe're still experimenting with new VM providers and VM configurations, but in general, what you can expect:\n\n\n\n\nat least 7.5GB RAM\n\n\nat least 2 CPU cores\n\n\n64 bit CPU\n\n\nat least 10GB free disk space\n\n\n\n\nEnvironment\n\u2693\n\n\nWe use standard \nDocker\n images, published on \nDocker Hub\n,\nand the related \nDockerfile\n (the description file which describes the docker image / environment,\nand which is directly used to build the image) can be found on \nGitHub\n.\n\n\nRight now we have three docker images, built on top of each other:\n\n\n\n\nBitrise Base\n image ( \nGitHub\n / \nDocker Hub\n )\n\n\nincludes all the non-Android tools and environment setup\n\n\nideal to be used for non-Android projects as a base image, if you want to use it locally too, as this is\n  the smallest image\n\n\nRuby\n, \nGo\n, \nPython\n, \ngit\n and the \nbitrise command line tools\n are all preinstalled and ready to use.\n\n\nOS: \nUbuntu 16.04\n, 64 bit\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/bitrise-base/blob/master/Dockerfile\n\n\n\n\n\n\nBase Android\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\nextends the Bitrise Base image\n with Android specific tools and environments.\n\n\nMultiple Android SDK, Build Tool and system image versions are preinstalled, as well as \ngradle\n and \nmaven\n.\n\n\nYou can use the \n$ANDROID_HOME\n environment variable to point to the location of the pre-installed Android SDK\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile\n\n\n\n\n\n\nAndroid NDK\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\nbuilt on the Base Android image\n, extends it with the latest Android NDK.\n\n\nYou can use the \n$ANDROID_NDK_HOME\n environment variable to point to the location of the preinstalled Android NDK, and it's also added to \n$PATH\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n  \nhttps://github.com/bitrise-docker/android-ndk/blob/master/Dockerfile\n\n\n\n\n\n\n\n\nYou can find the pre-installed tools \n System Report\n of this Stack at:\n\nhttps://github.com/bitrise-io/bitrise.io/blob/master/system_reports/linux-docker-android.log\n\n\nDocker \n Virtual Machines\n\u2693\n\n\nEvery build runs in a new VM\n (which is destroyed right after the build),\nnot just in a new container! This allows us to grant you full control over \nDocker\n\nand the whole environment.\n\n\nWhen your build starts on the Docker based Stack we volume mount the \n/var/run/docker.sock\n socket\ninto your container (similar to calling \ndocker run -v /var/run/docker.sock:/var/run/docker.sock ...\n;\nyou can find a description about this access granting method at:\n\nhttps://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/\n).\n\nNote: The \ndocker\n binary have to be installed inside the base Docker image\n(we install Docker in every one of our Docker images so that you don't have to do anything if you use our image,\nor you base your own image on our Docker images),\nbecause docker started to migrate from a single-binary solution to dynamically loaded components,\nand simply sharing the \ndocker\n binary is not sufficient anymore.\n\n\nThis means that you have access to \ndocker\n in your container, and can use other tools which use docker,\nlike \ndocker-compose\n.\nYou can, for example, configure and run tests and other automations on website projects using \ndocker-compose\n.\n\n\nYou can call \ndocker info\n, \ndocker build\n, \ndocker run\n, \ndocker login\n, \ndocker push\n,\netc. exactly how you would on your own machine.\n\n\nShared volumes\n\u2693\n\n\n\n\nWarning\n\n\nImportant Note if you want to run \ndocker\n in your build, and share volumes\n: because of how \ndocker\n handles volume sharing,\nonly those volumes can be shared which are shared with the base docker container (the one your build is running in).\nEverything under \n/bitrise\n can be mounted as a volume, but no other path is guaranteed to work with \n--volume\n mapping.\n\n\n\n\nPractically this means\n that if you use the standard paths and you use relative paths to mount volumes it'll work as expected,\nas the default source code directory is located inside \n/bitrise\n (by default it's \n/bitrise/src\n in our Docker images).\n\nWhat won't work\n is if you change the source code directory to be located \noutside\n of \n/bitrise\n,\nor you want to mount a folder with an absolute path outside of \n/bitrise\n.", 
            "title": "The Android/Linux/Docker environment"
        }, 
        {
            "location": "/infrastructure/the-environment/#hardware", 
            "text": "We're still experimenting with new VM providers and VM configurations, but in general, what you can expect:   at least 7.5GB RAM  at least 2 CPU cores  64 bit CPU  at least 10GB free disk space", 
            "title": "Hardware"
        }, 
        {
            "location": "/infrastructure/the-environment/#environment", 
            "text": "We use standard  Docker  images, published on  Docker Hub ,\nand the related  Dockerfile  (the description file which describes the docker image / environment,\nand which is directly used to build the image) can be found on  GitHub .  Right now we have three docker images, built on top of each other:   Bitrise Base  image (  GitHub  /  Docker Hub  )  includes all the non-Android tools and environment setup  ideal to be used for non-Android projects as a base image, if you want to use it locally too, as this is\n  the smallest image  Ruby ,  Go ,  Python ,  git  and the  bitrise command line tools  are all preinstalled and ready to use.  OS:  Ubuntu 16.04 , 64 bit  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/bitrise-base/blob/master/Dockerfile    Base Android  image (   GitHub  /  Docker Hub  )  extends the Bitrise Base image  with Android specific tools and environments.  Multiple Android SDK, Build Tool and system image versions are preinstalled, as well as  gradle  and  maven .  You can use the  $ANDROID_HOME  environment variable to point to the location of the pre-installed Android SDK  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/android/blob/master/Dockerfile    Android NDK  image (   GitHub  /  Docker Hub  )  built on the Base Android image , extends it with the latest Android NDK.  You can use the  $ANDROID_NDK_HOME  environment variable to point to the location of the preinstalled Android NDK, and it's also added to  $PATH  Related  Dockerfile  where you can see what's preinstalled in this image:\n   https://github.com/bitrise-docker/android-ndk/blob/master/Dockerfile     You can find the pre-installed tools   System Report  of this Stack at: https://github.com/bitrise-io/bitrise.io/blob/master/system_reports/linux-docker-android.log", 
            "title": "Environment"
        }, 
        {
            "location": "/infrastructure/the-environment/#docker-virtual-machines", 
            "text": "Every build runs in a new VM  (which is destroyed right after the build),\nnot just in a new container! This allows us to grant you full control over  Docker \nand the whole environment.  When your build starts on the Docker based Stack we volume mount the  /var/run/docker.sock  socket\ninto your container (similar to calling  docker run -v /var/run/docker.sock:/var/run/docker.sock ... ;\nyou can find a description about this access granting method at: https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/ ). Note: The  docker  binary have to be installed inside the base Docker image\n(we install Docker in every one of our Docker images so that you don't have to do anything if you use our image,\nor you base your own image on our Docker images),\nbecause docker started to migrate from a single-binary solution to dynamically loaded components,\nand simply sharing the  docker  binary is not sufficient anymore.  This means that you have access to  docker  in your container, and can use other tools which use docker,\nlike  docker-compose .\nYou can, for example, configure and run tests and other automations on website projects using  docker-compose .  You can call  docker info ,  docker build ,  docker run ,  docker login ,  docker push ,\netc. exactly how you would on your own machine.", 
            "title": "Docker &amp; Virtual Machines"
        }, 
        {
            "location": "/infrastructure/the-environment/#shared-volumes", 
            "text": "Warning  Important Note if you want to run  docker  in your build, and share volumes : because of how  docker  handles volume sharing,\nonly those volumes can be shared which are shared with the base docker container (the one your build is running in).\nEverything under  /bitrise  can be mounted as a volume, but no other path is guaranteed to work with  --volume  mapping.   Practically this means  that if you use the standard paths and you use relative paths to mount volumes it'll work as expected,\nas the default source code directory is located inside  /bitrise  (by default it's  /bitrise/src  in our Docker images). What won't work  is if you change the source code directory to be located  outside  of  /bitrise ,\nor you want to mount a folder with an absolute path outside of  /bitrise .", 
            "title": "Shared volumes"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/", 
            "text": "You are able to authenticate yourself with your GitHub user against \nBitrise\n. It brings some practical benefits, like logging in with one click and of course you won't have to authorize your GitHub account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsigning up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page by clicking \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nGitHub\n for authenticating yourself with this service.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permission to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nAuthorize application\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with GitHub"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#sign-up", 
            "text": "Go to the Sign up page by clicking  Sign up!  on the landing page of  bitrise.io .   Select  GitHub  for authenticating yourself with this service.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permission to Bitrise to access (read) your repositories.   If you press the  Authorize application  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-github/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/", 
            "text": "You are able to authenticate yourself with your Bitbucket user against \nBitrise\n. It brings some practical benefits, like logging in with one click and of course you won't have to authorize your Bitbucket account when adding repositories hosted by these providers again.\n\n\n\n\nNote\n\n\nIf you'd like to sign up with your email address, please follow the instructions in \nsigning up with email address\n.\n\n\n\n\nSign up\n\u2693\n\n\nGo to the Sign up page by clicking \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\nSelect \nBitbucket\n for authenticating yourself with this service.\n\n\nAuthorize Bitrise\n\u2693\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\nIf you press the \nGrant access\n button, you will be redirected to Bitrise.\n\n\nFinish signup\n\u2693\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\nAfter that, you are ready to roll.\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with Bitbucket"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#sign-up", 
            "text": "Go to the Sign up page by clicking  Sign up!  on the landing page of  bitrise.io .   Select  Bitbucket  for authenticating yourself with this service.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#authorize-bitrise", 
            "text": "You have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.   If you press the  Grant access  button, you will be redirected to Bitrise.", 
            "title": "Authorize Bitrise"
        }, 
        {
            "location": "/signing-up/signing-up-with-bitbucket/#finish-signup", 
            "text": "You will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub  and  Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.   After that, you are ready to roll.  From now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Finish signup"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/", 
            "text": "You can sign up to Bitrise in one step with your email address.\n\n\n\n\n\n\nNote\n\n\nIf you would like to use your GitHub / Bitbucket account, please check out the following devcenter articles:\n\n\n\n\nSigning up with GitHub\n\n\nSigning up with Bitbucket\n\n\n\n\n\n\nSign up\n\u2693\n\n\nYou just have to pick a username, add your email address and choose a password. Click \nSign up with email\n.\n\n\n\n\nAfter you provided your credentials, press \nDone\n.\n\n\nAfter successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!\n\n\n\n\nIf you haven't received a confirmation email, click \nResend confirmation email\n you see at the end of the registration process.", 
            "title": "Signing up with email"
        }, 
        {
            "location": "/signing-up/signing-up-with-email/#sign-up", 
            "text": "You just have to pick a username, add your email address and choose a password. Click  Sign up with email .   After you provided your credentials, press  Done .  After successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!   If you haven't received a confirmation email, click  Resend confirmation email  you see at the end of the registration process.", 
            "title": "Sign up"
        }, 
        {
            "location": "/signing-up/trial-after-signing-up/", 
            "text": "After you have created your account on Bitrise it will start with a \n14-day trial\n of\nthe \nTeam plan\n.\nThis means that you can setup your application and start building it with all the benefits of the paying plan.\n\n\nYou can see the remaining time of your trial in the header.\n\n\n\n\n\n\nTip\n\n\nRead more about \noptimizing your build times\n\nto help you fit into the 10 minute limit for free accounts.\n\n\n\n\nYou can earn extra build minutes with our \nReferral program\n.", 
            "title": "Trial after signing up"
        }, 
        {
            "location": "/signing-up/connecting-apple-dev-account/", 
            "text": "Connecting Your Apple Developer Account to Bitrise\n\u2693\n\n\nYou can authenticate your Apple Developer Account on Bitrise and integrate the Apple Developer Portal with your Bitrise project. This allows you to use our \niOS Auto Provisioning\n step which makes managing Provisioning Profiles for iOS applications a lot easier!\n\n\nAll you need is a \nbitrise.io\n account and a valid Apple Developer Account.\n\n\nAuthenticating your Apple Developer Account on Bitrise\n\u2693\n\n\n\n\n\n\nLog in to \nbitrise.io\n.\n\n\n\n\n\n\nClick on your profile in the upper-right corner of your \nDashboard\n and select \nAccount settings\n from the dropdown menu.\n\n\n\n\n\n\n\n\nOn the menu bar on the left, select \nApple Developer Account\n.\n\n\n\n\n\n\nProvide your credentials in the popup window and click \nStore credentials\n.\n\n\n\n\n\n\n\n\nIf two-factor authentication is enabled on your Apple Developer account, you will be prompted to provide your verification code. In this case, your authentication will expire in 30 days - Bitrise will prompt you before that happens!\n\n\n\n\n\n\nEnabling Apple Developer Portal integration\n\u2693\n\n\nYou can authorize your project to receive Apple Developer Portal data from Bitrise once your Apple Developer Account is connected to your \nbitrise.io\n account.\n\n\n\n\n\n\nOpen your project's page on \nbitrise.io\n.\n\n\n\n\n\n\nSelect the \nTeam\n tab.\n\n\n\n\n\n\nSelect your account in the \nConnected Apple Developer Portal Account\n menu at the bottom of the page.", 
            "title": "Connecting your Apple Developer Account to Bitrise"
        }, 
        {
            "location": "/signing-up/connecting-apple-dev-account/#connecting-your-apple-developer-account-to-bitrise", 
            "text": "You can authenticate your Apple Developer Account on Bitrise and integrate the Apple Developer Portal with your Bitrise project. This allows you to use our  iOS Auto Provisioning  step which makes managing Provisioning Profiles for iOS applications a lot easier!  All you need is a  bitrise.io  account and a valid Apple Developer Account.", 
            "title": "Connecting Your Apple Developer Account to Bitrise"
        }, 
        {
            "location": "/signing-up/connecting-apple-dev-account/#authenticating-your-apple-developer-account-on-bitrise", 
            "text": "Log in to  bitrise.io .    Click on your profile in the upper-right corner of your  Dashboard  and select  Account settings  from the dropdown menu.     On the menu bar on the left, select  Apple Developer Account .    Provide your credentials in the popup window and click  Store credentials .     If two-factor authentication is enabled on your Apple Developer account, you will be prompted to provide your verification code. In this case, your authentication will expire in 30 days - Bitrise will prompt you before that happens!", 
            "title": "Authenticating your Apple Developer Account on Bitrise"
        }, 
        {
            "location": "/signing-up/connecting-apple-dev-account/#enabling-apple-developer-portal-integration", 
            "text": "You can authorize your project to receive Apple Developer Portal data from Bitrise once your Apple Developer Account is connected to your  bitrise.io  account.    Open your project's page on  bitrise.io .    Select the  Team  tab.    Select your account in the  Connected Apple Developer Portal Account  menu at the bottom of the page.", 
            "title": "Enabling Apple Developer Portal integration"
        }, 
        {
            "location": "/adding-a-new-app/", 
            "text": "When adding your app to \nBitrise\n, we will clone your repository to make sure we can access it. Besides cloning your repository we will run our \nproject scanner\n that detects all the supported apps and instantly configure your workflow with all the necessary steps to build and deploy your app.\n\n\n\n\nCurrently we are supporting the following projects out of the box\n\n\n\n\niOS\n\n\nAndroid\n\n\nXamarin\n\n\nFastlane\n\n\n\n\n\n\nTo add a new app to Bitrise go to your \ndashboard\n and press the \nAdd new app\n button.\n\n\n\n\nIn case this is the first application the dashboard will show you the quickstart guide instead of a list of you apps. There you can choose to add your first app right away.\n\n\nLet's check out how you can \nconnect a repository\n!", 
            "title": "Adding a new app"
        }, 
        {
            "location": "/adding-a-new-app/registering-a-test-device/", 
            "text": "Register an iOS device using Safari\n\u2693\n\n\nThe most comfortable way to register your iOS test device on \nbitrise.io\n is to open \nbitrise.io\n with Safari so that we can open your device's Settings and create a temporary profile to get your Unique Device Identifier (UDID). This way you don't have to look for it and manually copy/paste it.\n\n\n\n\n\n\nOpen Safari in \nnon-incognito mode\n on your iOS device and log into \nbitrise.io\n.\n\n\n\n\n\n\nGo to your \nProfile\n.\n\n\n\n\n\n\nClick \nAccount Settings\n.\n\n\n\n\n\n\nClick \nTest devices\n on the left.\n\n\n\n\n\n\nClick \nRegister this device\n.\n\n\n\n\n\n\nIn the pop-up window, click \nAllow\n so that \nbitrise.io\n can show your configuration profile.\n\n\n\n\n\n\nClick \nInstall\n when the \nInstall Profile\n dialog appears.\n\n\n\n\n\n\nEnter your devices's passcode.\n\n\n\n\n\n\nClick \nInstall\n on the \nInstall Profile\n again.\n  Now you can see your UDID and your iOS device name in the \nRegister device\n dialog.\n\n\n\n\n\n\nClick \nRegister device\n.\n\n\n\n\n\n\nRegister this test device to the \nApple Developer Portal\n with the correct provisioning profile added to your device or use our \nAuto Provisioning\n step with enabling profile generation.\n\n\n\n\n\n\nIf you go back to \nTest devices\n, you can see the registered device:\n\n\n\n\nYou can delete the registered device any time if you click on the \nx\n icon.\n\n\nRegister a test device manually\n\u2693\n\n\n\n\n\n\nGo to your \nProfile\n on \nbitrise.io\n.\n\n\n\n\n\n\nClick \nTest devices\n on the left.\n\n\n\n\n\n\nClick on \nRegister manually\n.\n\n\n\n\n\n\nIn the \nRegister device\n dialog, fill out the \nTitle\n field and the \nIdentifier\n field with your device's UDID.\n\n\n\n\n\n\nHit \nRegister Device\n.\n\n\n\n\nHow do I get my device's UDID?\n\n\nYou can get your UDID if you plug your device into a computer, and open iTunes. Under \nSummary\n, you should see a Serial Number. If you click on it, it will reveal your device's \nUDID\n which you can paste into the \nIdentifier\n field on our \nTest Devices\n.\n\n\n\n\n\n\n\n\nRegister this test device to the \nApple Developer Portal\n with the correct provisioning profile added to your device or use our \nAuto Provisioning\n step with enabling profile generation.\n\n\n\n\n\n\nNow you can see your registered test device under \nRegistered test devices\n.   \n\n\nYou can remove this registered device any time if you click the orange \nx\n icon.", 
            "title": "Registering a test device"
        }, 
        {
            "location": "/adding-a-new-app/registering-a-test-device/#register-an-ios-device-using-safari", 
            "text": "The most comfortable way to register your iOS test device on  bitrise.io  is to open  bitrise.io  with Safari so that we can open your device's Settings and create a temporary profile to get your Unique Device Identifier (UDID). This way you don't have to look for it and manually copy/paste it.    Open Safari in  non-incognito mode  on your iOS device and log into  bitrise.io .    Go to your  Profile .    Click  Account Settings .    Click  Test devices  on the left.    Click  Register this device .    In the pop-up window, click  Allow  so that  bitrise.io  can show your configuration profile.    Click  Install  when the  Install Profile  dialog appears.    Enter your devices's passcode.    Click  Install  on the  Install Profile  again.\n  Now you can see your UDID and your iOS device name in the  Register device  dialog.    Click  Register device .    Register this test device to the  Apple Developer Portal  with the correct provisioning profile added to your device or use our  Auto Provisioning  step with enabling profile generation.    If you go back to  Test devices , you can see the registered device:   You can delete the registered device any time if you click on the  x  icon.", 
            "title": "Register an iOS device using Safari"
        }, 
        {
            "location": "/adding-a-new-app/registering-a-test-device/#register-a-test-device-manually", 
            "text": "Go to your  Profile  on  bitrise.io .    Click  Test devices  on the left.    Click on  Register manually .    In the  Register device  dialog, fill out the  Title  field and the  Identifier  field with your device's UDID.    Hit  Register Device .   How do I get my device's UDID?  You can get your UDID if you plug your device into a computer, and open iTunes. Under  Summary , you should see a Serial Number. If you click on it, it will reveal your device's  UDID  which you can paste into the  Identifier  field on our  Test Devices .     Register this test device to the  Apple Developer Portal  with the correct provisioning profile added to your device or use our  Auto Provisioning  step with enabling profile generation.    Now you can see your registered test device under  Registered test devices .     You can remove this registered device any time if you click the orange  x  icon.", 
            "title": "Register a test device manually"
        }, 
        {
            "location": "/adding-a-new-app/connecting-a-repository/", 
            "text": "After you've selected adding a new app, you will find yourself on the \nCreate app\n page.\n\n\nBitrise will give you options to connect any kind of git repository to it. \nGitHub\n and \nBitbucket\n are supported out of the box.\nIf you've already authorized Bitrise, for example, with your GitHub,\nyou will see Bitrise automatically listing all your repositories, so you can just click on the one you'd like to connect.\n\n\n\n\nConnect any git repository to Bitrise\n\n\nYou can connect any private or public git repository to Bitrise.\nWe will automatically create an SSH key that you can use to setup the connection with your provider.\n\n\n\n\n\n\nIf you haven't authorized Bitrise against the provider hosting your repository, it will ask for permission.\n\n\n\n\nIt will then list your repositories as above. If you'd like to connect git repository hosted by other than GitHub or Bitbucket,\nselect the \nOther / Manual\n tab.\n\n\n\n\nYou will have to add the git url of the repository you would like to connect.\n\n\n\n\nUse SSH URLs for private repositories\n\n\nPlease note, that if you are connecting a private repository,\nBitrise will try to clone it through SSH, so it's necessary to provide an SSH URL to your repository here.\n\n\n\n\nBitrise will add an SSH key to your repository at a later step.\nRead more about how to add SSH keys automatically, or manually at \nSSH keys\n.", 
            "title": "Connecting a repository"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/", 
            "text": "SSH keys serve the role of secure transfer between services. In the case of Bitrise, it will ask for your permission to be authorized at your git source provider, e.g. GitHub. Read more about how to \nauthorize Bitrise\n.\n\n\nThe reason behind the need for being authorized, is that Bitrise has to have a working SSH connection to your repository to be able to clone it. There are several ways to make it work. Automatically, by adding it manually, or by using your own key.\n\n\n\n\nUse SSH URLs everywhere\n\n\nMost services support SSH key based authentication \nonly\n for SSH URLs (ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs (ex: \nhttps://github.com/bitrise-io/bitrise.git\n)! This means, that \nevery private repository you want to use have to be addressed with the SSH URL\n. If you have direct private git repo references in your \nPodfile\n you'll have to use the SSH URL there as well! Same applies for \nsubmodules\n and every other private git repository URL you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\n\nAutomatic setup\n\u2693\n\n\nIn case of \nGitHub\n and \nBitbucket\n repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.\n\n\n\n\nAs the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.\n\n\nThe auto-add option will add the generated key as a read-only \ndeploy key\n to your repository, it's the best for your security.\n\n\nManual setup\n\u2693\n\n\nIf you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.\n\n\n\n\nA bot user\n\n\nThere's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories. \nAdd the SSH key you would like to use to the user and add the user to the projects\n. You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.\n\n\n\n\n\n\nWarning\n\n\nDo not\n add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.\n\n\n\n\nGitHub\n\u2693\n\n\n\n\nBitbucket\n\u2693\n\n\n\n\nGitLab\n\u2693\n\n\n\n\nUse your own key\n\u2693\n\n\nThis option can be used if you also have the private key of the given user. You just have to paste the private key and \nBitrise\n will be able to access the repositories.", 
            "title": "Setting up SSH keys"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#automatic-setup", 
            "text": "In case of  GitHub  and  Bitbucket  repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.   As the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.  The auto-add option will add the generated key as a read-only  deploy key  to your repository, it's the best for your security.", 
            "title": "Automatic setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#manual-setup", 
            "text": "If you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.   A bot user  There's an easy way to work around modifying your own profile by adding a \\\"bot\\\" user with the SSH key to the repositories.  Add the SSH key you would like to use to the user and add the user to the projects . You don't have to add the \\\"bot\\\" user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.    Warning  Do not  add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.", 
            "title": "Manual setup"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#github", 
            "text": "", 
            "title": "GitHub"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#bitbucket", 
            "text": "", 
            "title": "Bitbucket"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#gitlab", 
            "text": "", 
            "title": "GitLab"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-ssh-keys/#use-your-own-key", 
            "text": "This option can be used if you also have the private key of the given user. You just have to paste the private key and  Bitrise  will be able to access the repositories.", 
            "title": "Use your own key"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/", 
            "text": "After \nSetting up the SSH key\n for\nyour project, Bitrise will download your code to make sure it can access the repository\nand will run an automatic repository scanner script to find the best initial configuration for your project.\nCurrently Bitrise will detect \niOS\n, \nAndroid\n, \nXamarin\n and \nfastlane\n projects out of the box.\n\n\nYou can configure other types of projects too, but that will require manual\nconfiguration.\n\n\nAutomatic project configuration\n\u2693\n\n\nEnter the name of the default branch of your repository where your project is located. This branch should include the configuration of your project. Once you hit \nNext\n, Bitrise will automatically start the validation of the repository.\n\n\n\n\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the \nSSH key\n you set up.\n\n\nIf the validation is successful, Bitrise will scan your repository and give you a default workflow based on the configuration of the project.\n\n\nManual project configuration\n\u2693\n\n\nIf the validation fails, choose the \nRestart scanning without validation\n option.\n\n\n\n\nIn this case, you have to configure the project manually. Click \nNext\n. You will see the \nValidating Repository\n message again but this time Bitrise only checks that we have access to the specified repository.\n\n\nChoose the project type (for example, Xamarin) and specify the necessary inputs (for example, the path to the Xamarin Solution file). You can also select the stack on which you wish to run your builds.\n\n\n\n\n\n\nRestarting validation\n\n\nYou can restart validation if you want Bitrise to automatically detect your project type. Once you fixed the issue that caused validation to fail for the first time, go to the \nProject build configuration\n window and select the \nDetected\n tab. Choose the \nRestart current validation\n option.", 
            "title": "Setting up configuration"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#automatic-project-configuration", 
            "text": "Enter the name of the default branch of your repository where your project is located. This branch should include the configuration of your project. Once you hit  Next , Bitrise will automatically start the validation of the repository.   During validation Bitrise will make sure it has access to the given branch,\nusing the  SSH key  you set up.  If the validation is successful, Bitrise will scan your repository and give you a default workflow based on the configuration of the project.", 
            "title": "Automatic project configuration"
        }, 
        {
            "location": "/adding-a-new-app/setting-up-configuration/#manual-project-configuration", 
            "text": "If the validation fails, choose the  Restart scanning without validation  option.   In this case, you have to configure the project manually. Click  Next . You will see the  Validating Repository  message again but this time Bitrise only checks that we have access to the specified repository.  Choose the project type (for example, Xamarin) and specify the necessary inputs (for example, the path to the Xamarin Solution file). You can also select the stack on which you wish to run your builds.    Restarting validation  You can restart validation if you want Bitrise to automatically detect your project type. Once you fixed the issue that caused validation to fail for the first time, go to the  Project build configuration  window and select the  Detected  tab. Choose the  Restart current validation  option.", 
            "title": "Manual project configuration"
        }, 
        {
            "location": "/team-management/", 
            "text": "Now that you have set up your app on Bitrise we can start inviting team members! You can select multiple roles for the new members, like: \nadmin\n, \ndeveloper\n, and \nqa/tester\n.\nDifferent roles have different permissions that you can read more about below.\n\n\nTo invite a team member head to the \nTeam tab\n on your application's page. You can invite any user by their username or by their email address. If they are not registered on Bitrise we will send out an invitation email for them. Before granting access to a new user, select their role.\n\n\n\n\nInviting team members\n\n\nYou need to be the app's \nowner\n or an \nadmin\n to be able to add new team members to your app.\n\n\n\n\nOwners\n and \nadmins\n can change the roles of other members by clicking \nChange role\n next to the member's name.\n\n\n\n\nCheck out the different roles and permissions below:\n\n\nOwner\n\u2693\n\n\n\n\nAdmin\n\u2693\n\n\n\n\nDeveloper\n\u2693\n\n\n\n\nTester / QA\n\u2693", 
            "title": "Adding a new team member"
        }, 
        {
            "location": "/team-management/#owner", 
            "text": "", 
            "title": "Owner"
        }, 
        {
            "location": "/team-management/#admin", 
            "text": "", 
            "title": "Admin"
        }, 
        {
            "location": "/team-management/#developer", 
            "text": "", 
            "title": "Developer"
        }, 
        {
            "location": "/team-management/#tester-qa", 
            "text": "", 
            "title": "Tester / QA"
        }, 
        {
            "location": "/team-management/changing-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an application on \nBitrise\n to another user. This can be done in a few seconds by following these quick steps:\n\n\n\n\nLogin with the \ncurrent owner\n of the app\n\n\nOpen the app's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the app is in the team or add her/him if you need to\n\n\nClick the \nTransfer ownership\n button on the top right\n\n\n\n\nFor transferring the ownership, select the new user to transfer the app to:\n\n\n\n\nYou can use the toggle to stay the connected service user. This is important if you are the admin of the given repository on \nGitHub\n, or \nBitbucket\n and the app needs your credentials to work on Bitrise.", 
            "title": "Changing the owner of an app"
        }, 
        {
            "location": "/team-management/organizations/creating-org/", 
            "text": "You can create and manage \nOrganizations\n on \nbitrise.io\n to manage entire teams quickly and effectively. You can set up multiple groups within an organization for different projects - for example, you can have a \nDeveloper\n group and a \nTester\n group assigned to different app. You can also set roles for your group: these roles determine the access rights provided to members of the group.\n\n\nTo run builds as an organization, you need to subscribe to an \nOrganization\n plan.\n\n\nCreating an organization\n\u2693\n\n\nNo need for lengthy preparation when you wish to create an organization on Bitrise: all you really need is an existing Bitrise account - this will be the default owner of the organization - and an organization name. You can set up everything else later!\n\n\n\n\n\n\nLog in to \nbitrise.io\n.\n\n\n\n\n\n\nOn the top menu bar, find the \n+\n symbol and click it.\n\n\n\n\n\n\n\n\nChoose \nAdd organization\n from the dropdown menu.\n\n\nAlternatively, you can create a new organization from:\n  - your \nAccount settings\n page: find the \n+ New Organization\n option on the left.\n  - on the \nApps\n screen: open the dropdown menu above your apps and click \nCreate organization\n.\n\n\n\n\n\n\n\n\nIn the pop-up window, enter the name and the billing email of your organization, and click \nCreate\n.\n\n\n\n\nInvoices\n\n\nBy default, your invoices will be sent to the billing email you set here.\n\n\n\n\n\n\n\n\n\n\nProvide your billing information.\n\n\nYou can skip this step and provide these details at a later date. \nOnly the owner(s) of an organization can modify these.\n\n\n\n\nOrganizations is a premium feature\n\n\nYou need to subscribe to an \nOrganization\n plan to be able to run builds.\n\n\n\n\n\n\n\n\nTransfer apps to your organization.\n\n\nYou can skip this step and transfer your apps or add new apps to your organization at any time.\n\n\n\n\n\n\n\n\nIn the pop-up window, click \nCheck billing\n to immediately set up a subscription plan. You can also add your billing information here.\n\n\nAlternatively, click \nOK\n to finish creating your org.\n\n\n\n\n\n\n\n\nAnd that's it! You can start inviting people to your organization!", 
            "title": "Creating organizations"
        }, 
        {
            "location": "/team-management/organizations/creating-org/#creating-an-organization", 
            "text": "No need for lengthy preparation when you wish to create an organization on Bitrise: all you really need is an existing Bitrise account - this will be the default owner of the organization - and an organization name. You can set up everything else later!    Log in to  bitrise.io .    On the top menu bar, find the  +  symbol and click it.     Choose  Add organization  from the dropdown menu.  Alternatively, you can create a new organization from:\n  - your  Account settings  page: find the  + New Organization  option on the left.\n  - on the  Apps  screen: open the dropdown menu above your apps and click  Create organization .     In the pop-up window, enter the name and the billing email of your organization, and click  Create .   Invoices  By default, your invoices will be sent to the billing email you set here.      Provide your billing information.  You can skip this step and provide these details at a later date.  Only the owner(s) of an organization can modify these.   Organizations is a premium feature  You need to subscribe to an  Organization  plan to be able to run builds.     Transfer apps to your organization.  You can skip this step and transfer your apps or add new apps to your organization at any time.     In the pop-up window, click  Check billing  to immediately set up a subscription plan. You can also add your billing information here.  Alternatively, click  OK  to finish creating your org.     And that's it! You can start inviting people to your organization!", 
            "title": "Creating an organization"
        }, 
        {
            "location": "/team-management/organizations/managing-billing-sub/", 
            "text": "It's very simple to set up a subscription plan for your organization even if you skipped that step when creating the organization. You can also modify your plan and your billing information at any time if you are the owner of the organization.\n\n\nYou can set up a credit card and we'll bill you automatically; for other payment methods, please contact our support.\n\n\n\n\nOrganizations is a premium feature\n\n\nYou need to subscribe to an \nOrganization\n plan to be able to run builds.\n\n\n\n\nAdding or modifying billing info\n\u2693\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\nMake sure it's the right profile\n\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nIf you didn't provide your billing information, do so: click \nAdd credit card\n on the right of the \nBilling information\n menu.\n\n\n\n\n\n\nManual payment\n\n\nIf you do not want to be billed automatically, you do not need to provide a credit card. In this case, contact our support to set up your payment method. This option is available from 5x concurrency on Standard plans or 3x concurrency on Elite plans but only with annual billing.\n\n\n\n\n\n\n\n\nFill out the details.\n\n\n\n\nAccess to billing information\n\n\nOnly the owner(s) of the organization has any access to the organization's billing information.\n\n\n\n\n\n\n\n\nSetting up an organization subscription plan\n\u2693\n\n\nSetting up a subscription plan for an organization requires billing information, including payment details. You can set up a credit card and we'll bill you automatically; for other payment methods, please contact our support.\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\nMake sure it's the right profile\n\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nChoose a subscription plan. You can choose between two Organization plans, billed either monthly or yearly.\n\n\n\n\nStandard\n: $50 a month per concurrency. Includes multiple owner support, group management and 60+ minutes runtime per build.\n\n\nElite\n: $100 a month per concurrency. Includes everything in the Standard plan, as well as super fast build machines and 75+ minutes runtime per build.\n\n\n\n\n\n\nFor more information, check our \npricing\n.", 
            "title": "Managing billing and subscription for organizations"
        }, 
        {
            "location": "/team-management/organizations/managing-billing-sub/#adding-or-modifying-billing-info", 
            "text": "Sign in with an account that is an owner of an organization and open its profile page.   Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.   Make sure it's the right profile  Be aware that your own billing info and your organization's billing info are  SEPARATE . You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!      On the left, select  Billing  from the menu options.     If you didn't provide your billing information, do so: click  Add credit card  on the right of the  Billing information  menu.    Manual payment  If you do not want to be billed automatically, you do not need to provide a credit card. In this case, contact our support to set up your payment method. This option is available from 5x concurrency on Standard plans or 3x concurrency on Elite plans but only with annual billing.     Fill out the details.   Access to billing information  Only the owner(s) of the organization has any access to the organization's billing information.", 
            "title": "Adding or modifying billing info"
        }, 
        {
            "location": "/team-management/organizations/managing-billing-sub/#setting-up-an-organization-subscription-plan", 
            "text": "Setting up a subscription plan for an organization requires billing information, including payment details. You can set up a credit card and we'll bill you automatically; for other payment methods, please contact our support.    Sign in with an account that is an owner of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.   Make sure it's the right profile  Be aware that your own billing info and your organization's billing info are  SEPARATE . You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!      On the left, select  Billing  from the menu options.     Choose a subscription plan. You can choose between two Organization plans, billed either monthly or yearly.   Standard : $50 a month per concurrency. Includes multiple owner support, group management and 60+ minutes runtime per build.  Elite : $100 a month per concurrency. Includes everything in the Standard plan, as well as super fast build machines and 75+ minutes runtime per build.    For more information, check our  pricing .", 
            "title": "Setting up an organization subscription plan"
        }, 
        {
            "location": "/team-management/organizations/managing-invoices/", 
            "text": "Set up an email address so we can send you your invoices - no need to rummage around the site looking for them, we'll deliver them straight to your inbox. However, if you wish to download it manually from the site, you can do that, too, of course! \nYou can find the past invoices on the organization's \nBilling\n page\n - you can read more \nhere\n!\n\n\nSetting up an email address for organization invoices\n\u2693\n\n\nBy default, an organization's invoices will be sent to the email provided when the organization was created. However, the owner(s) of the organization can change it at any time.\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\nMake sure it's the right profile\n\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's information in the settings of your own personal profile.  \n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nLocate the \nInvoice email\n menu and click \nChange email\n.\n\n\n\n\n\n\n\n\nEnter the new email address and click \nSave\n.\n\n\n\n\n\n\nAnd that's it! From now on, your invoices will be sent to the new email address.\n\n\nDownloading organization invoices\n\u2693\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\nMake sure it's the right profile\n\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nLocate the \nPast statements\n menu.\n\n\n\n\n\n\nSelect the invoice you need and click the download icon on the right.", 
            "title": "Managing the invoices of your organizations"
        }, 
        {
            "location": "/team-management/organizations/managing-invoices/#setting-up-an-email-address-for-organization-invoices", 
            "text": "By default, an organization's invoices will be sent to the email provided when the organization was created. However, the owner(s) of the organization can change it at any time.   Sign in with an account that is an owner of an organization and open its profile page.   Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.    Make sure it's the right profile  Be aware that your own billing info and your organization's billing info are  SEPARATE . You CANNOT change your organization's information in the settings of your own personal profile.       On the left, select  Billing  from the menu options.     Locate the  Invoice email  menu and click  Change email .     Enter the new email address and click  Save .    And that's it! From now on, your invoices will be sent to the new email address.", 
            "title": "Setting up an email address for organization invoices"
        }, 
        {
            "location": "/team-management/organizations/managing-invoices/#downloading-organization-invoices", 
            "text": "Sign in with an account that is an owner of an organization and open its profile page.   Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.   Make sure it's the right profile  Be aware that your own billing info and your organization's billing info are  SEPARATE . You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!      On the left, select  Billing  from the menu options.     Locate the  Past statements  menu.    Select the invoice you need and click the download icon on the right.", 
            "title": "Downloading organization invoices"
        }, 
        {
            "location": "/team-management/organizations/org-url/", 
            "text": "Every organization has its own specific URL on Bitrise - you might need this if, for example, you need some assistance from our support. Or you might want to simply add it to your favourites in a browser.\n\n\nIt's all very simple: just navigate to any of your organization's pages. For example, if you go to the \nOverview\n page, the URL will be something like this: \nwww.bitrise.io/organization/9d9838bc0d31fc53#/overview\n. The hex id in the URL is a unique identifier for your organization.", 
            "title": "Finding the URL of your organizations"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/", 
            "text": "Organizations can have multiple \nGroups\n. Groups form the \"backbones\" of organizations: they contain the members of the organizations, they can be assigned to different applications owned by the organizations, with different roles assigned to the different groups. Being a member of an organization means being a member of one of the groups belonging to the organization.\n\n\nFor example, let's say the organization called \nTestOrg\n owns an app called \nTestApp\n. \nTestOrg\n has the following groups:\n\n\n\n\nSenior Developers\n - they are assigned to \nTestApp\n with an \nAdmin\n role. Members of this group can assign other groups to the app or add outside contributors, change app settings, manage roles and workflows.\n\n\nDevelopers\n - they are assigned to \nTestApp\n with a \nDeveloper\n role. Members of this group can run builds, view build logs and view builds.\n\n\nTesters\n - they are assigned to \nTestApp\n with a \nTester / QA\n role. They can only view builds.\n\n\n\n\nCreating groups for organizations\n\u2693\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nFind the \nCreate new Group\n section at the top.\n\n\n\n\n\n\n\n\nEnter a group name in the \nEnter Group name\n window, and click \nCreate\n.\n\n\n\n\n\n\nAdding members to organizations\n\u2693\n\n\nIn practice, adding members to an organization means adding members to a group belonging to an organization. Once you have the groups you need for your organization, adding members to them is very simple.\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nFind the group you need and click the \n+\n sign to the right of the name of the group.\n\n\n\n\n\n\n\n\nEnter a username or an email address.\n\n\n\n\nIf you enter a username, the system will suggest existing Bitrise users that at least partially match your input. Click the user you wish to invite.\n\n\n\n\nIf you enter an email address, click the \nEnter\n symbol on the right to send the invitation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nManaging groups from the \nTeam\n tab\n\n\nFrom the \nTeam\n tab you can also access all the functions to manage groups. You simply have to click \nMANAGE GROUP\n to the right of the group members, and click the action you need in the pop-up window, including removing the group from the app.\n\n\n\n\n\n\nRemoving members from organizations\n\u2693\n\n\nMembers can be removed from the entire organization or from one of the groups belonging to an organization. In practice, this means that a single member can be removed from working on any of the apps belonging to the organization or only from selected apps.\n\n\nRemoving group members\n\u2693\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nFind the group and the group member you are looking for, and click the little \nx\n in the orange square on the right of the username of the member.\n\n\n\n\n\n\n\n\nRemoving members from the entire organization\n\u2693\n\n\nRemoving members from the entire organization removes them from all the groups they are part of in the organization and they can no longer work on any of the apps unless they are invited back, either as a group member or as an outside contributor.\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nPeople\n from the menu options.\n\n\n\n\n\n\nFind the member you are looking for, and click the little \nx\n in the orange square on the right of the username of the member.\n\n\n\n\n\n\n\n\nIn the pop-up window, click \nYes\n.\n\n\n\n\n\n\n\n\nRemoving yourself\n\n\nYou can remove yourself from the organization this way. You will lose all access rights you had to the organization. Only click \nYes\n in the pop-up window if you are certain you wish to do this.\n\n\n\n\n\n\nDeleting groups\n\u2693\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nChoose the group you wish to delete, and click the dropdown menu indicated by the \n...\n symbol.\n\n\n\n\n\n\nClick \nDelete group\n then click \nYes\n in the pop-up window.", 
            "title": "Managing organization members"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#creating-groups-for-organizations", 
            "text": "Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Find the  Create new Group  section at the top.     Enter a group name in the  Enter Group name  window, and click  Create .", 
            "title": "Creating groups for organizations"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#adding-members-to-organizations", 
            "text": "In practice, adding members to an organization means adding members to a group belonging to an organization. Once you have the groups you need for your organization, adding members to them is very simple.    Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Find the group you need and click the  +  sign to the right of the name of the group.     Enter a username or an email address.   If you enter a username, the system will suggest existing Bitrise users that at least partially match your input. Click the user you wish to invite.   If you enter an email address, click the  Enter  symbol on the right to send the invitation.        Managing groups from the  Team  tab  From the  Team  tab you can also access all the functions to manage groups. You simply have to click  MANAGE GROUP  to the right of the group members, and click the action you need in the pop-up window, including removing the group from the app.", 
            "title": "Adding members to organizations"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#removing-members-from-organizations", 
            "text": "Members can be removed from the entire organization or from one of the groups belonging to an organization. In practice, this means that a single member can be removed from working on any of the apps belonging to the organization or only from selected apps.", 
            "title": "Removing members from organizations"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#removing-group-members", 
            "text": "Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Find the group and the group member you are looking for, and click the little  x  in the orange square on the right of the username of the member.", 
            "title": "Removing group members"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#removing-members-from-the-entire-organization", 
            "text": "Removing members from the entire organization removes them from all the groups they are part of in the organization and they can no longer work on any of the apps unless they are invited back, either as a group member or as an outside contributor.    Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  People  from the menu options.    Find the member you are looking for, and click the little  x  in the orange square on the right of the username of the member.     In the pop-up window, click  Yes .     Removing yourself  You can remove yourself from the organization this way. You will lose all access rights you had to the organization. Only click  Yes  in the pop-up window if you are certain you wish to do this.", 
            "title": "Removing members from the entire organization"
        }, 
        {
            "location": "/team-management/organizations/members-organizations/#deleting-groups", 
            "text": "Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Choose the group you wish to delete, and click the dropdown menu indicated by the  ...  symbol.    Click  Delete group  then click  Yes  in the pop-up window.", 
            "title": "Deleting groups"
        }, 
        {
            "location": "/team-management/organizations/org-ownership/", 
            "text": "Organization owners can access and delete all apps linked to the organization, can manage the billing details of an organization and can add or remove other owners. Organization owners are in their own group in the organization and they are managed via membership in this group.\n\n\nEvery organization must have at least one owner.\n\n\nAdding owners to an organization\n\u2693\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nFind the \nOrganization owners\n group.\n\n\n\n\n\n\n\n\nEnter an email address or username. The account in question will become an owner of the organization.\n\n\n\n\n\n\nRemoving owners from an organization\n\u2693\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nFind the \nOrganization owners\n group.\n\n\n\n\n\n\n\n\nFind the account you wish to remove and click the little checkmark on the right.\n\n\n\n\nOrganizations must have at least one owner\n\n\nIf you are trying to remove the only owner of the organization, the system will throw an error message. An organization must have at least one owner.", 
            "title": "Changing the owners of an organization"
        }, 
        {
            "location": "/team-management/organizations/org-ownership/#adding-owners-to-an-organization", 
            "text": "Sign in with an account that is an owner of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Find the  Organization owners  group.     Enter an email address or username. The account in question will become an owner of the organization.", 
            "title": "Adding owners to an organization"
        }, 
        {
            "location": "/team-management/organizations/org-ownership/#removing-owners-from-an-organization", 
            "text": "Sign in with an account that is an owner of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Find the  Organization owners  group.     Find the account you wish to remove and click the little checkmark on the right.   Organizations must have at least one owner  If you are trying to remove the only owner of the organization, the system will throw an error message. An organization must have at least one owner.", 
            "title": "Removing owners from an organization"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/", 
            "text": "Organizations can own several apps, with different (or the same, if that's what you need) groups working on different apps. Apps can be transferred between private accounts and organization accounts any time, quickly and easily.\n\n\nAdding new apps to an organization\n\u2693\n\n\nA new app can be added directly to an organization. You can do this either from the organization's \nAccount settings\n page or from the Dashboard of an account that has either the \nOwner\n or the \nAdmin\n role in the organization.\n\n\n\n\n\n\nGet to the \nCreate New App\n page.\n\n\nThere are three options to get there:\n\n\n\n\n\n\nOn the top menu bar, find the \n+\n symbol and click it, then click the \nAdd App\n option.\n\n\n\n\n\n\n\n\nOpen the \nDashboard\n on \nbitrise.io\n, open the dropdown menu above your app list and select your organization. Click the \n+ Add new app\n button.\n\n\n\n\n\n\n\n\nOpen the \nAccount settings\n page of your organization, and click the \nApps\n option on the menu on the left. Click the \nAdd new app\n button.\n\n\n\n\n\n\n\n\n\n\nOn \nCreate New App\n page, make sure that the organization account is selected in the dropdown menu.\n\n\n\n\n\n\n\n\nProceed with adding a new app as usual! It will be owned by the organization.\n\n\n\n\n\n\nTransferring apps to an organization\n\u2693\n\n\nWhen you create an organization, you get a prompt for transferring apps from the account that you are logged in with to the organization. However, if you skipped that step, you can do it on our website at any time you wish.\n\n\nYou have two options to transfer app ownership.\n- Several apps can be transferred at the same time from the organization profile.\n- Any given app can be transferred from the app's \nTeam\n tab.\n\n\nTransferring apps from the organization profile\n\u2693\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nApps\n from the menu options.\n\n\n\n\n\n\nClick the \nTransfer apps\n button.\n\n\n\n\n\n\n\n\nFind the apps you wish to transfer and toggle the switch on the right. Once you're done, click \nDone\n.\n\n\n\n\n\n\nTransferring an app from the Team tab\n\u2693\n\n\nIt can happen that you need to transfer an application on \nBitrise\n to another user. This can be done in a few seconds by following these quick steps:\n\n\n\n\n\n\nLogin with the \ncurrent owner\n of the app.\n\n\n\n\n\n\nOpen the app's page and go to the \nTeam\n tab.\n\n\n\n\n\n\nMake sure the new owner of the app is in the team or add her/him if you need to.\n\n\n\n\n\n\nClick the \nTransfer ownership\n button on the top right.\n\n\n\n\n\n\nFor transferring the ownership, select the new user to transfer the app to:\n\n\n\n\nThe new user can either be another private account or an organization.\n\n\nAssigning groups to apps\n\u2693\n\n\nThere are two separate ways to assign one or more groups to an app that is owned by an organization.\n\n\n\n\nAssign a group from the \nGroups\n menu of the organization's profile page\n. This way you can add a group to multiple apps simultaneously.\n\n\nAssign a group from the \nTeam\n tab of the app\n. If the groups you need already exist and you only need to assign groups to a single app, this method works perfectly.\n\n\n\n\nAssigning a group from the \nGroups\n menu.\n\u2693\n\n\n\n\n\n\nSign in with an account that is an \nowner\n or an \nadmin\n of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n\n\n\n\nOn the left, select \nGroups\n from the menu options.\n\n\n\n\n\n\nChoose the group you wish to assign, and click the dropdown menu indicated by the \n...\n symbol.\n\n\n\n\n\n\nClick \nAssign group to apps\n.\n\n\n\n\n\n\n\n\nFind the app(s) you need and select the appropriate role for the group. You can check out the role cheatsheet on any app's \nTeam\n tab.\n\n\n\n\n\n\n\n\nAssigning a group from the \nTeam\n tab.\n\u2693\n\n\n\n\n\n\nGo to the app's page on \nbitrise.io\n.\n\n\n\n\n\n\nSelect the \nTeam\n tab.\n\n\n\n\n\n\nFind the \nAdd a group from \nOrgName\n menu.\n\n\n\n\n\n\n\n\nFind the group you wish to add and click the \n+\n symbol.\n\n\n\n\n\n\nSelect the role for the group.\n\n\n\n\n\n\nFor rights of roles, check out the Role Cheatsheet!\n\n\n\n\nCreate a new group\n\n\nIf there are no groups you can assign to the app in this menu, you will see a grey box telling you \nNo groups to show\n. Clicking the link will take you to your organization's \nGroups\n page where you can create the groups you need, including removing the group from the app.\n\n\n\n\n\n\n\n\nManaging groups from the \nTeam\n tab\n\n\nFrom the \nTeam\n tab you can also access all the functions to manage groups. You simply have to click \nMANAGE GROUP\n to the right of the group members, and click the action you need in the pop-up window.\n\n\n    \n\n\n\n\nAdding outside contributors to an app\n\u2693\n\n\nYou can add outside contributors to any application if you have \nAdmin\n or \nOwner\n right to the app. If an organization owns the app, the outside contributor does not have to be part of the organization, of course.\n\n\n\n\n\n\nGo to the app's page on \nbitrise.io\n.\n\n\n\n\n\n\nSelect the \nTeam\n tab.\n\n\n\n\n\n\nFind the \nAdd outside contributors to this app\n menu.\n\n\n\n\n\n\n\n\nEnter a username or an email address.\n\n\nThe email address you enter - if you choose that option - does not have to be associated with an existing Bitrise account.\n\n\n\n\n\n\nSelect a role for the user and then click \nGrant Access\n.\n\n\nFor rights of roles, check out the Role Cheatsheet!\n\n\n\n\n\n\nRemoving a group from an app\n\u2693\n\n\n\n\n\n\nGo to the app's page on \nbitrise.io\n.\n\n\n\n\n\n\nSelect the \nTeam\n tab.\n\n\n\n\n\n\nFind the group you wish to remove, and click the \nMANAGE GROUP\n option next to one of the names of the group members.\n\n\n\n\n\n\nClick \nREMOVE FROM APP\n. Click \nYes\n in the pop-up window.", 
            "title": "Managing the apps of organizations"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#adding-new-apps-to-an-organization", 
            "text": "A new app can be added directly to an organization. You can do this either from the organization's  Account settings  page or from the Dashboard of an account that has either the  Owner  or the  Admin  role in the organization.    Get to the  Create New App  page.  There are three options to get there:    On the top menu bar, find the  +  symbol and click it, then click the  Add App  option.     Open the  Dashboard  on  bitrise.io , open the dropdown menu above your app list and select your organization. Click the  + Add new app  button.     Open the  Account settings  page of your organization, and click the  Apps  option on the menu on the left. Click the  Add new app  button.      On  Create New App  page, make sure that the organization account is selected in the dropdown menu.     Proceed with adding a new app as usual! It will be owned by the organization.", 
            "title": "Adding new apps to an organization"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#transferring-apps-to-an-organization", 
            "text": "When you create an organization, you get a prompt for transferring apps from the account that you are logged in with to the organization. However, if you skipped that step, you can do it on our website at any time you wish.  You have two options to transfer app ownership.\n- Several apps can be transferred at the same time from the organization profile.\n- Any given app can be transferred from the app's  Team  tab.", 
            "title": "Transferring apps to an organization"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#transferring-apps-from-the-organization-profile", 
            "text": "Sign in with an account that is an owner of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Apps  from the menu options.    Click the  Transfer apps  button.     Find the apps you wish to transfer and toggle the switch on the right. Once you're done, click  Done .", 
            "title": "Transferring apps from the organization profile"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#transferring-an-app-from-the-team-tab", 
            "text": "It can happen that you need to transfer an application on  Bitrise  to another user. This can be done in a few seconds by following these quick steps:    Login with the  current owner  of the app.    Open the app's page and go to the  Team  tab.    Make sure the new owner of the app is in the team or add her/him if you need to.    Click the  Transfer ownership  button on the top right.    For transferring the ownership, select the new user to transfer the app to:   The new user can either be another private account or an organization.", 
            "title": "Transferring an app from the Team tab"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#assigning-groups-to-apps", 
            "text": "There are two separate ways to assign one or more groups to an app that is owned by an organization.   Assign a group from the  Groups  menu of the organization's profile page . This way you can add a group to multiple apps simultaneously.  Assign a group from the  Team  tab of the app . If the groups you need already exist and you only need to assign groups to a single app, this method works perfectly.", 
            "title": "Assigning groups to apps"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#assigning-a-group-from-the-groups-menu", 
            "text": "Sign in with an account that is an  owner  or an  admin  of an organization and open its profile page.    Go to your organization's profile page: click  Switch Profile  on the top left corner and select the organization you need.     On the left, select  Groups  from the menu options.    Choose the group you wish to assign, and click the dropdown menu indicated by the  ...  symbol.    Click  Assign group to apps .     Find the app(s) you need and select the appropriate role for the group. You can check out the role cheatsheet on any app's  Team  tab.", 
            "title": "Assigning a group from the Groups menu."
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#assigning-a-group-from-the-team-tab", 
            "text": "Go to the app's page on  bitrise.io .    Select the  Team  tab.    Find the  Add a group from  OrgName  menu.     Find the group you wish to add and click the  +  symbol.    Select the role for the group.    For rights of roles, check out the Role Cheatsheet!   Create a new group  If there are no groups you can assign to the app in this menu, you will see a grey box telling you  No groups to show . Clicking the link will take you to your organization's  Groups  page where you can create the groups you need, including removing the group from the app.     Managing groups from the  Team  tab  From the  Team  tab you can also access all the functions to manage groups. You simply have to click  MANAGE GROUP  to the right of the group members, and click the action you need in the pop-up window.", 
            "title": "Assigning a group from the Team tab."
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#adding-outside-contributors-to-an-app", 
            "text": "You can add outside contributors to any application if you have  Admin  or  Owner  right to the app. If an organization owns the app, the outside contributor does not have to be part of the organization, of course.    Go to the app's page on  bitrise.io .    Select the  Team  tab.    Find the  Add outside contributors to this app  menu.     Enter a username or an email address.  The email address you enter - if you choose that option - does not have to be associated with an existing Bitrise account.    Select a role for the user and then click  Grant Access .  For rights of roles, check out the Role Cheatsheet!", 
            "title": "Adding outside contributors to an app"
        }, 
        {
            "location": "/team-management/organizations/managing-apps/#removing-a-group-from-an-app", 
            "text": "Go to the app's page on  bitrise.io .    Select the  Team  tab.    Find the group you wish to remove, and click the  MANAGE GROUP  option next to one of the names of the group members.    Click  REMOVE FROM APP . Click  Yes  in the pop-up window.", 
            "title": "Removing a group from an app"
        }, 
        {
            "location": "/webhooks/", 
            "text": "Most source code hosting service provides a feature to register webhooks. A webhook is basically an URL which will be called on specified events.\n\n\nTo have Bitrise automatically start a build every time you push code into your repository you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\nSetting up incoming webhooks automatically\n\u2693\n\n\nIf you select \nGitHub\n or \nBitbucket\n as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.\n\n\nSetting up incoming webhooks by hand\n\u2693\n\n\nYou can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's \nCode\n tab.\n\n\n\n\n\n\nCustom webhook support\n\n\nOur webhook processor is Open Sourced\n. If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.\n\n\nYou can also run your own webhook provider behind your own firewall if required.\n\n\n\n\nYou can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:\n\n\n\n\nAdding a GitHub webhook\n\n\nAdding a Bitbucket webhook\n\n\nAdding webhooks for Gitlab\n\n\nAdding webhooks for Visual Studio Online / Visual Studio Team Services\n\n\nAdding webhooks for Slack\n\n\nAdding webhooks for Gogs\n\n\nAdding webhooks for Deveo\n\n\nAdding webhooks for Assembla\n\n\n\n\nSetting up outgoing webhooks\n\u2693\n\n\nYou can also set up outgoing webhooks on Bitrise. With these, Bitrise can notify any selected service about your build events. A build event is:\n\n\n\n\nwhen a build is started\n\n\nwhen a build ends.\n\n\n\n\nTroubleshooting\n\u2693\n\n\nSee the \nWebhook Troubleshooting\n guide\nfor webhook related troubleshooting / debugging notes.", 
            "title": "Adding webhooks"
        }, 
        {
            "location": "/webhooks/#setting-up-incoming-webhooks-automatically", 
            "text": "If you select  GitHub  or  Bitbucket  as the source code provider when you add your app Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. In this case, you can skip this tutorial.", 
            "title": "Setting up incoming webhooks automatically"
        }, 
        {
            "location": "/webhooks/#setting-up-incoming-webhooks-by-hand", 
            "text": "You can manually setup or change your webhooks after you registered your application.\nWe support multiple webhook providers. You can find the supported providers in your application's  Code  tab.    Custom webhook support  Our webhook processor is Open Sourced . If you are looking for a not supported solution, you can create an issue on the GitHub page or create a pull request with the implementation.  You can also run your own webhook provider behind your own firewall if required.   You can find detailed description about the setup on the Code tab or select a provider to check its devcenter article:   Adding a GitHub webhook  Adding a Bitbucket webhook  Adding webhooks for Gitlab  Adding webhooks for Visual Studio Online / Visual Studio Team Services  Adding webhooks for Slack  Adding webhooks for Gogs  Adding webhooks for Deveo  Adding webhooks for Assembla", 
            "title": "Setting up incoming webhooks by hand"
        }, 
        {
            "location": "/webhooks/#setting-up-outgoing-webhooks", 
            "text": "You can also set up outgoing webhooks on Bitrise. With these, Bitrise can notify any selected service about your build events. A build event is:   when a build is started  when a build ends.", 
            "title": "Setting up outgoing webhooks"
        }, 
        {
            "location": "/webhooks/#troubleshooting", 
            "text": "See the  Webhook Troubleshooting  guide\nfor webhook related troubleshooting / debugging notes.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/", 
            "text": "You can specify webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For GitHub, all you have to do is register your \nbitrise-webhooks\n URL as a Webhook in your \nGitHub\n repository.\n\n\nGet the webhook URL for GitHub\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nGitHub\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on GitHub\n\u2693\n\n\n\n\n\n\nNavigate to your GitHub repository and select \nSettings\n.\n\n\n\n\n\n\n\n\nSelect \nAdd webhook\n under Webhooks.\n\n\n\n\n\n\n\n\nPaste the GitHub Webhook URL from Bitrise to the Payload URL.\n\n\n\n\n\n\n\n\nAnd on the same page, select \nLet me select individual events\n.\n\n\n\n\n\n\n\n\nSelect \nPull request\n and \nPush\n. After you are ready press the \nAdd webhook\n button and you are ready to roll!", 
            "title": "Adding a GitHub webhook"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#get-the-webhook-url-for-github", 
            "text": "Navigate to the  Code  tab of your app's page and select  GitHub  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-github-webhook/#set-up-webhook-on-github", 
            "text": "Navigate to your GitHub repository and select  Settings .     Select  Add webhook  under Webhooks.     Paste the GitHub Webhook URL from Bitrise to the Payload URL.     And on the same page, select  Let me select individual events .     Select  Pull request  and  Push . After you are ready press the  Add webhook  button and you are ready to roll!", 
            "title": "Set up webhook on GitHub"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you\ncan set up a webhook at your code hosting service which will automatically\ntrigger a build on Bitrise with the code you push to your repository.\n\n\n\n\nIf you have a Bitbucket webhook already set up for your app ...\n\n\nIf you have a Bitbucket webhook already set up for your app,\nsimply skip to the \ntriggers\n section\nand edit your current one according to the screenshot there.\n\n\n\n\nGet the webhook URL for Bitbucket\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nBitbucket\n from the dropdown at the webhooks section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSetup webhook on Bitbucket\n\u2693\n\n\n\n\n\n\nNavigate to your Bitbucket repository and select \nSettings\n.\n\n\n\n\n\n\n\n\nSelect \nWebhooks\n from the left.\n\n\n\n\n\n\n\n\nSelect \nAdd Webhook\n\n\n\n\n\n\n\n\nPaste the Bitbucket Webhook URL from Bitrise to the \nURL\n and add a \nTitle\n.\n\n\n\n\n\n\n\n\nSelect \nChoose from a full list of triggers\n.\n\n\n\n\n\n\n\n\nSelect Repository \nPush\n and Pull Request \nCreated\n and \nUpdated\n triggers. After you are ready press the \nSave\n button and you are ready to roll!", 
            "title": "Adding a Bitbucket webhook"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#get-the-webhook-url-for-bitbucket", 
            "text": "Navigate to the  Code  tab of your app's page and select  Bitbucket  from the dropdown at the webhooks section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-bitbucket-webhook/#setup-webhook-on-bitbucket", 
            "text": "Navigate to your Bitbucket repository and select  Settings .     Select  Webhooks  from the left.     Select  Add Webhook     Paste the Bitbucket Webhook URL from Bitrise to the  URL  and add a  Title .     Select  Choose from a full list of triggers .     Select Repository  Push  and Pull Request  Created  and  Updated  triggers. After you are ready press the  Save  button and you are ready to roll!", 
            "title": "Setup webhook on Bitbucket"
        }, 
        {
            "location": "/webhooks/adding-a-gitlab-webhook/", 
            "text": "You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For GitLab, all you have to do is register your \nbitrise-webhooks\n URL as a Webhook in your \nGitLab\n repository.\n\n\nGet the webhook URL for GitLab\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nGitLab\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on GitLab\n\u2693\n\n\n\n\n\n\nOpen your project on \nGitLab.com\n\n\n\n\n\n\nGo to \nSettings\n of the project.\n\n\n\n\n\n\nSelect \nIntegrations\n.\n\n\n\n\n\n\n\n\nEnter the bitrise-webhooks URL in the URL field.\n\n\n\n\n\n\n\n\nIn the \nTrigger\n section select:\n\n\n\n\nPush events\n\n\nTag push events\n\n\nMerge request events\n\n\n\n\n\n\n\n\n\n\nClick \nAdd webhook\n.\n\n\n\n\n\n\nThat's all! The next time you push code, push a new tag or create/update a merge request a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Adding a Gitlab webhook"
        }, 
        {
            "location": "/webhooks/adding-a-gitlab-webhook/#get-the-webhook-url-for-gitlab", 
            "text": "Navigate to the  Code  tab of your app's page and select  GitLab  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for GitLab"
        }, 
        {
            "location": "/webhooks/adding-a-gitlab-webhook/#set-up-webhook-on-gitlab", 
            "text": "Open your project on  GitLab.com    Go to  Settings  of the project.    Select  Integrations .     Enter the bitrise-webhooks URL in the URL field.     In the  Trigger  section select:   Push events  Tag push events  Merge request events      Click  Add webhook .    That's all! The next time you push code, push a new tag or create/update a merge request a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Set up webhook on GitLab"
        }, 
        {
            "location": "/webhooks/adding-a-gogs-webhook/", 
            "text": "You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action. For Gogs, all you have to do is register your \nbitrise-webhooks\n URL as a Webhook in your \nGogs\n repository.\n\n\nGet the webhook URL for Gogs\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nGogs\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on Gogs\n\u2693\n\n\n\n\n\n\nOpen your project on your repository's hosting URL.\n\n\n\n\n\n\nGo to \nSettings\n of the project.\n\n\n\n\n\n\nSelect \nWebhooks\n, \nAdd Webhook\n, then \nGogs\n.\n\n\n\n\n\n\n\n\nSpecify the \nbitrise-webhooks\n URL (\n.../h/gogs/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN\n) in the \nPayload URL\n field.\n\n\n\n\n\n\n\n\nSet the \nContent Type\n to \napplication/json\n.\n\n\n\n\n\n\nA Secret is not required at this time.\n\n\n\n\n\n\nSet the trigger to be fired on \nJust the push event\n.\n\n\n\n\n\n\n\n\nClick \nAdd Webhook\n.\n\n\n\n\n\n\nAnd you're done! From now on, every code push to your Gogs repository will trigger a build on Bitrise.", 
            "title": "Adding a Gogs webhook"
        }, 
        {
            "location": "/webhooks/adding-a-gogs-webhook/#get-the-webhook-url-for-gogs", 
            "text": "Navigate to the  Code  tab of your app's page and select  Gogs  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Gogs"
        }, 
        {
            "location": "/webhooks/adding-a-gogs-webhook/#set-up-webhook-on-gogs", 
            "text": "Open your project on your repository's hosting URL.    Go to  Settings  of the project.    Select  Webhooks ,  Add Webhook , then  Gogs .     Specify the  bitrise-webhooks  URL ( .../h/gogs/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN ) in the  Payload URL  field.     Set the  Content Type  to  application/json .    A Secret is not required at this time.    Set the trigger to be fired on  Just the push event .     Click  Add Webhook .    And you're done! From now on, every code push to your Gogs repository will trigger a build on Bitrise.", 
            "title": "Set up webhook on Gogs"
        }, 
        {
            "location": "/webhooks/adding-a-slack-webhook/", 
            "text": "You can register the \nbitrise-webhooks\n URL (\n.../h/slack/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN\n) as either\nan \nOutgoing Webhook\n or\nas a \nslash command\n for your Slack team.\n\n\nOnce the URL is registered check the \nusage\n section below for all the\naccepted and required parameters you can define in the message, and\nfor a couple of examples.\n\n\nUsage - the message format\n\u2693\n\n\nYour message have to be in the format: \nkey:value|key:value|...\n,\nwhere the supported \nkeys\n are:\n\n\nAt least one of these two parameters are required:\n\n\n\n\nb\n or \nbranch\n - example: \nbranch: master\n\n\nw\n or \nworkflow\n - example: \nworkflow: primary\n\n\n\n\nOther, optional parameters:\n\n\n\n\nt\n or \ntag\n - example: \nbranch: master|tag: v1.0\n\n\nc\n or \ncommit\n - example: \nworkflow: primary|commit: eee55509f16e7715bdb43308bb55e8736da4e21e\n\n\nm\n or \nmessage\n - example: \nbranch: master|message: ship it!!\n\n\n\n\nNOTE\n: at least either \nbranch\n or \nworkflow\n have to be specified, and of course\nyou can specify both if you want to. You're free to specify any number of optional parameters.\n\n\nYou can also send environment variables that will be available in your workflow with the format: \nenv[KEY1]:value1|ENV[KEY2]:value2\n\n\nAn example with all parameters included: \nworkflow: primary|b: master|tag: v1.0|commit:eee55509f16e7715bdb43308bb55e8736da4e21e|m: start my build!|ENV[DEVICE_NAME]:iPhone 6S|ENV[DEVICE_UDID]:82667b4079914d4aabed9c216620da5dedab630a", 
            "title": "Adding a Slack webhook"
        }, 
        {
            "location": "/webhooks/adding-a-slack-webhook/#usage-the-message-format", 
            "text": "Your message have to be in the format:  key:value|key:value|... ,\nwhere the supported  keys  are:  At least one of these two parameters are required:   b  or  branch  - example:  branch: master  w  or  workflow  - example:  workflow: primary   Other, optional parameters:   t  or  tag  - example:  branch: master|tag: v1.0  c  or  commit  - example:  workflow: primary|commit: eee55509f16e7715bdb43308bb55e8736da4e21e  m  or  message  - example:  branch: master|message: ship it!!   NOTE : at least either  branch  or  workflow  have to be specified, and of course\nyou can specify both if you want to. You're free to specify any number of optional parameters.  You can also send environment variables that will be available in your workflow with the format:  env[KEY1]:value1|ENV[KEY2]:value2  An example with all parameters included:  workflow: primary|b: master|tag: v1.0|commit:eee55509f16e7715bdb43308bb55e8736da4e21e|m: start my build!|ENV[DEVICE_NAME]:iPhone 6S|ENV[DEVICE_UDID]:82667b4079914d4aabed9c216620da5dedab630a", 
            "title": "Usage - the message format"
        }, 
        {
            "location": "/webhooks/adding-a-visual-studio-webhook/", 
            "text": "You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Visual Studio, all you have to do is register your \nbitrise-webhooks\n URL for\na \nvisualstudio.com\n \nproject\n as a \nService Hooks\n integration.\n\n\nYou can find an official guide\non \nvisualstudio.com 's documentations site\n.\n\n\nGet the webhook URL for Visual Studio\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nVisual Studio Online / Visual Studio Team Services\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on Visual Studio\n\u2693\n\n\n\n\nOpen your \nproject\n on \nvisualstudio.com\n.\n\n\nGo to the \nAdmin/Control panel\n of the \nproject\n.\n\n\n\n\nSelect \nService Hooks\n.\n\n\n\n\n\n\n\n\nClick \nCreate subscription\n.\n\n\n\n\n\n\nCreate a service integration:\n\n\n\n\n\n\nIn the Service list select the \nWeb Hooks\n option.\n\n\n\n\n\n\n\n\nSelect the \nCode pushed\n event as the \nTrigger\n.\n\n\n\n\n\n\n\n\nIn the \nFilters\n section select the \nRepository\n you want to integrate.\n\n\n\n\nYou can leave the other filters on default.\n\n\nClick \nNext\n.\n\n\n\n\nOn the \nAction\n setup form enter the \nbitrise-webhooks\n URL (\n.../h/visualstudio/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN\n) in the \nURL\n field. You can leave every other option on default.\n\n\n\n\n\n\n\n\n\n\n\n\nClick \nFinish\n\n\n\n\n\n\nThat's all! The next time you \npush code\n or \npush a new tag\n\na build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Adding a Visual Studio webhook"
        }, 
        {
            "location": "/webhooks/adding-a-visual-studio-webhook/#get-the-webhook-url-for-visual-studio", 
            "text": "Navigate to the  Code  tab of your app's page and select  Visual Studio Online / Visual Studio Team Services  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Visual Studio"
        }, 
        {
            "location": "/webhooks/adding-a-visual-studio-webhook/#set-up-webhook-on-visual-studio", 
            "text": "Open your  project  on  visualstudio.com .  Go to the  Admin/Control panel  of the  project .   Select  Service Hooks .     Click  Create subscription .    Create a service integration:    In the Service list select the  Web Hooks  option.     Select the  Code pushed  event as the  Trigger .     In the  Filters  section select the  Repository  you want to integrate.   You can leave the other filters on default.  Click  Next .   On the  Action  setup form enter the  bitrise-webhooks  URL ( .../h/visualstudio/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN ) in the  URL  field. You can leave every other option on default.       Click  Finish    That's all! The next time you  push code  or  push a new tag \na build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Set up webhook on Visual Studio"
        }, 
        {
            "location": "/webhooks/adding-assembla-webhook/", 
            "text": "You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Assembla, you only need to add your \nbitrise-webhooks\n URL to your \nAssembla\n space.\n\n\nGet the webhook URL for Assembla\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nAssembla\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on Assembla\n\u2693\n\n\n\n\nOpen your space on \nassembla.com\n or your organisation's assembla domain.\n\n\nGo to the \nWebhooks\n section of the space.\n\n\nSelect \nCreate New Webhook\n.\n\n\nSet \nTitle\n to \nBitRise Webhook\n.\n\n\nSpecify the \nbitrise-webhooks\n URL. (\n.../h/assembla/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN\n) in the \nExternal url\n field\n\n\nSelect \napplication/json\n in the \nContent type\n field.\n\n\n\n\nPaste the following code to \nContent\n:\n\n\n{\nassembla\n: {\nspace\n: \n%{space}\n, \naction\n: \n%{action}\n, \nobject\n: \n%{object}\n}, \nmessage\n: {\ntitle\n: \n%{title}\n, \nbody\n: \n%{body}\n, \nauthor\n: \n%{author}\n}, \ngit\n: {\nrepository_suffix\n: \n%{repository_suffix}\n, \nrepository_url\n: \n%{repository_url}\n, \nbranch\n: \n%{branch}\n, \ncommit_id\n: \n%{commit_id}\n}}\n\n\n\n\n\n\n\nSelect \nCode commits\n and/or \nGit Push\n in the \nPost updates about:\n section.\n\n\n\n\nClick \nAdd\n.\n\n\n\n\nThat's all! The next time you \npush code\n a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Adding an Assembla webhook"
        }, 
        {
            "location": "/webhooks/adding-assembla-webhook/#get-the-webhook-url-for-assembla", 
            "text": "Navigate to the  Code  tab of your app's page and select  Assembla  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Assembla"
        }, 
        {
            "location": "/webhooks/adding-assembla-webhook/#set-up-webhook-on-assembla", 
            "text": "Open your space on  assembla.com  or your organisation's assembla domain.  Go to the  Webhooks  section of the space.  Select  Create New Webhook .  Set  Title  to  BitRise Webhook .  Specify the  bitrise-webhooks  URL. ( .../h/assembla/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN ) in the  External url  field  Select  application/json  in the  Content type  field.   Paste the following code to  Content :  { assembla : { space :  %{space} ,  action :  %{action} ,  object :  %{object} },  message : { title :  %{title} ,  body :  %{body} ,  author :  %{author} },  git : { repository_suffix :  %{repository_suffix} ,  repository_url :  %{repository_url} ,  branch :  %{branch} ,  commit_id :  %{commit_id} }}    Select  Code commits  and/or  Git Push  in the  Post updates about:  section.   Click  Add .   That's all! The next time you  push code  a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Set up webhook on Assembla"
        }, 
        {
            "location": "/webhooks/adding-deveo-webhook/", 
            "text": "You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Deveo, all you have to do is register your \nbitrise-webhooks\n URL for\na \nDeveo\n repository.\n\n\nGet the webhook URL for Deveo\n\u2693\n\n\n\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nDeveo\n from the dropdown menu of the \nIncoming Webhooks\n section.\n\n\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\n\n\n\nSet up webhook on Deveo\n\u2693\n\n\n\n\n\n\nOpen your repository on \napp.deveo.com\n.\n\n\n\n\n\n\nGo to \nHooks\n of the project.\n\n\n\n\n\n\n\n\nAdd a new Repository Hook by clicking the \n+\n button on the right.\n\n\n\n\n\n\nSelect your repository and select the \nWebhook\n service.\n\n\n\n\n\n\n\n\nEnter the \nbitrise-webhooks\n URL (\n.../h/deveo/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN\n in the \nUrl\n field).\n\n\n\n\n\n\nType \njson\n in the \nContent type\n field.\n\n\n\n\n\n\nClick \nSave hook\n.\n\n\n\n\n\n\n\n\nThat's all! The next time you \npush code\n or \npush a new tag\n\na build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Adding a Deveo webhook"
        }, 
        {
            "location": "/webhooks/adding-deveo-webhook/#get-the-webhook-url-for-deveo", 
            "text": "Navigate to the  Code  tab of your app's page and select  Deveo  from the dropdown menu of the  Incoming Webhooks  section.     Copy the webhook URL for the selected service.", 
            "title": "Get the webhook URL for Deveo"
        }, 
        {
            "location": "/webhooks/adding-deveo-webhook/#set-up-webhook-on-deveo", 
            "text": "Open your repository on  app.deveo.com .    Go to  Hooks  of the project.     Add a new Repository Hook by clicking the  +  button on the right.    Select your repository and select the  Webhook  service.     Enter the  bitrise-webhooks  URL ( .../h/deveo/BITRISE-APP-SLUG/BITRISE-APP-API-TOKEN  in the  Url  field).    Type  json  in the  Content type  field.    Click  Save hook .     That's all! The next time you  push code  or  push a new tag \na build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise).", 
            "title": "Set up webhook on Deveo"
        }, 
        {
            "location": "/webhooks/adding-outgoing-webhooks/", 
            "text": "You can configure Bitrise to send build event notifications to any service you would like. A build event is:\n\n\n\n\nwhen a build is started\n\n\nwhen a build ends.\n\n\n\n\nYou can use this notification to share build statuses with your git provider if we don\u2019t support it yet, notify only the right team about build success or failure, or use it to automate your in-house release pipeline.\n\n\nYou can add, remove and edit your webhooks as well.\n\n\nAdding an outgoing webhook\n\u2693\n\n\nYou can set up and configure the webhooks sent by Bitrise on the web UI. Let's see how!\n\n\n\n\n\n\nGo to your app's page on \nbitrise.io\n and open the \nCode\n tab.\n\n\n\n\n\n\nClick \n+ Add webhook\n.\n\n\n\n\n\n\n\n\nEnter the URL of the service where you wish to send the notification in the \nURL\n field.\n\n\n\n\n\n\nSelect either the \nSend me everything\n or the \nSelect individual events\n option.\n\n\n\n\nSend me everything\n: every supported event type will trigger the webhook. Currently, only build events are supported but there will be other options in the future!\n\n\nSelect individual events\n: you can specify the individual events that should trigger the webhook.\n\n\n\n\n\n\n\n\nClick \nCreate Webhook\n.\n\n\n\n\n\n\nAnd you're done! You can modify your webhook at any time by clicking \nEdit\n next to the webhook URL displayed.\n\n\nChecking and resending webhook deliveries\n\u2693\n\n\nYou can check if the notifications were successfully sent or not, and you can check both the payload and the response. The deliveries are marked with appropriate status code, depending on whether the delivery was successful. If it was, you will see a green check mark; if it failed, you will see an orange triangle.\n\n\n\n\n\n\nGo to the \nRecent deliveries\n section of the \nOutgoing Webhooks\n menu.\n\n\n\n\n\n\nClick an outgoing webhook.\n\n\n\n\n\n\n\n\nSelect the \nREQUEST\n tab to see and, if you wish, modify the payload that was sent to the specified URL.\n\n\nAn example payload:\n\n\n{\n  \nbuild_slug\n:\n1234abcd\n,\n  \nbuild_number\n:3,\n  \napp_slug\n:\nabcd1234\n,\n  \ngit\n: {\n    \nprovider\n:\ngithub\n,\n    \nsrc_branch\n:\nfeature/branch\n,\n    \ndst_branch\n:master, # If the build was triggered by a pull request\n    \npull_request_id\n:32 # If the build was triggered by a pull request\n  }\n}\n\n\n\n\n\n\n\n\n\nSelect the \nRESPONSE\n tab to see the response from the service you sent the notification to.\n\n\n\n\n\n\nYou can redeliver any delivery. Open the delivery you need and click \nRedeliver\n.", 
            "title": "Adding outgoing webhooks"
        }, 
        {
            "location": "/webhooks/adding-outgoing-webhooks/#adding-an-outgoing-webhook", 
            "text": "You can set up and configure the webhooks sent by Bitrise on the web UI. Let's see how!    Go to your app's page on  bitrise.io  and open the  Code  tab.    Click  + Add webhook .     Enter the URL of the service where you wish to send the notification in the  URL  field.    Select either the  Send me everything  or the  Select individual events  option.   Send me everything : every supported event type will trigger the webhook. Currently, only build events are supported but there will be other options in the future!  Select individual events : you can specify the individual events that should trigger the webhook.     Click  Create Webhook .    And you're done! You can modify your webhook at any time by clicking  Edit  next to the webhook URL displayed.", 
            "title": "Adding an outgoing webhook"
        }, 
        {
            "location": "/webhooks/adding-outgoing-webhooks/#checking-and-resending-webhook-deliveries", 
            "text": "You can check if the notifications were successfully sent or not, and you can check both the payload and the response. The deliveries are marked with appropriate status code, depending on whether the delivery was successful. If it was, you will see a green check mark; if it failed, you will see an orange triangle.    Go to the  Recent deliveries  section of the  Outgoing Webhooks  menu.    Click an outgoing webhook.     Select the  REQUEST  tab to see and, if you wish, modify the payload that was sent to the specified URL.  An example payload:  {\n   build_slug : 1234abcd ,\n   build_number :3,\n   app_slug : abcd1234 ,\n   git : {\n     provider : github ,\n     src_branch : feature/branch ,\n     dst_branch :master, # If the build was triggered by a pull request\n     pull_request_id :32 # If the build was triggered by a pull request\n  }\n}    Select the  RESPONSE  tab to see the response from the service you sent the notification to.    You can redeliver any delivery. Open the delivery you need and click  Redeliver .", 
            "title": "Checking and resending webhook deliveries"
        }, 
        {
            "location": "/webhooks/trigger-map/", 
            "text": "Now that you have a \nwebhook registered\n,\nthe next step is to define when to build what.\n\n\nWhen you register a webhook for an event or for multiple events (e.g. for \nCode Push\n and\nfor \nPull Request\n events), your source code hosting service will call the webhook\nevery time the related event happens.\n\n\nOn \nbitrise.io\n these webhooks calls are called \"triggers\",\nand can be mapped to different \nWorkflows\n, or not mapped at all.\nIf you don't map a trigger to any workflow, then \nbitrise.io\n won't\nstart a build. If you map it to a workflow, then a build will be started\nwith the selected workflow.\n\n\nIn the following examples we'll use a very simple Bitrise configuration (\nbitrise.yml\n),\nwhich does nothing else just prints the selected workflow's ID:\n\n\n---\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  pull_request_source_branch: \n*\n\n  workflow: primary\n- tag: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - script:\n        inputs:\n        - content: |-\n            #!/bin/bash\n            echo \n$BITRISE_TRIGGERED_WORKFLOW_ID\n\n\n\n\n\nWhat is bitrise.yml?\n\n\nbitrise.yml\n is the representation of your app's configuration.\nIn the workflow editor you can edit it in a visual way through the web UI,\nbut you can always switch to \nbitrise.yml\n mode (left side of the workflow editor)\nto see the configuration in a YAML format, as well as you can edit the configuration\nin YAML format too. It's up to you which solution you prefer, the visual web UI\nor the YAML (\nbitrise.yml\n) representation, and you can switch between the two\nany time (the changes you do in the web UI will be reflected in the \nbitrise.yml\n,\nand vice versa).\n\n\n\n\nThe above example \nbitrise.yml\n will select the \nprimary\n branch for every Code Push (\npush_branch: \n*\n), Tag Push (\ntag: \n*\n)\nand for every Pull Request (\npull_request_target_branch: \n*\n \n \npull_request_source_branch: \n*\n).\n\n\nIf you remove the pull request item\n from the \ntrigger_map\n list, then\nno pull request will trigger a build anymore. Example:\n\n\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n\n\n\nThis configuration will start a build with the \nprimary\n workflow\nfor every code push, but for nothing else (e.g. not for pull requests).\n\n\n\"Components\" of the \ntrigger_map\n\u2693\n\n\nA \ntrigger_map\n is a \nlist of filters\n, and the \nworkflow\n the given\nfilters should select in case of a matching trigger.\n\n\nEvery filter item has to include at least one condition!\n\n\nThis means that you can't have an item which only specifies the \nworkflow\n,\nat least one filter (\npush_branch\n / \npull_request_source_branch\n / \npull_request_target_branch\n / \ntag\n)\nhas to be specified!\n\n\nThe available filters:\n\u2693\n\n\n\n\npush_branch\n : A filter which is matched against Code Push events' \"branch\" parameter\n\n\npull_request_source_branch\n : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)\n\n\npull_request_target_branch\n : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be \nmerged into\n\n\ntag\n : A filter which is matched against Tag Push events' \"tag\" (name) parameter\n\n\npattern\n : \nDEPRECATED\n - this filter was used for both code push and pull request events,\n  in combination with \nis_pull_request_allowed\n. This filter is now deprecated,\n  as the new filters allow better control over event mapping.\n\n\n\n\nIf you define multiple filters in a single item then \nall filters have to match\n\nin order to select that item's workflow.\nFor example:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\nwill only select the \nprimary\n workflow if the pull request's source branch is \ndevelop\n \nAND\n\nthe target branch is \nmaster\n.\n\n\nIf you want to specify filters which should be treated separately, e.g. to\nselect \nprimary\n for pull requests where the source is \ndevelop\n, as well as select\nfor the ones which target \nmaster\n:\n\n\ntrigger_map:\n- pull_request_target_branch: \nmaster\n\n  workflow: primary\n- pull_request_source_branch: \ndevelop\n\n  workflow: primary\n\n\n\nOne last note, which is hopefully not surprising after the previous example:\nyou can't mix and match \npush_branch\n, \ntag\n and the \npull_request_..\n filters \nin the same item\n.\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event \nat the same time\n.\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events.\n\nA single webhook event will never be Code Push, Tag Push and Pull Request at the same time\n,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).\n\n\nOne trigger = one build\n\u2693\n\n\nOne trigger can only select a single workflow / can only start a single build.\n\nThe first item which matches the trigger will select the workflow for the build!\n\n\nIf you want to run more than one workflow\n, you can\n\nChaining workflows\n\nafter each other. \nThe workflows chained this way won't run in parallel\n,\nbut the full chain of workflows will be executed, in the order you chain them.\n\n\nThe order of the items\n also matter: if you'd specify a \npush_branch: master\n item \nafter\n a\n\npush_branch: \n*\n item, the \npush_branch: master\n \nwould never be selected\n\nas every code push event would match \npush_branch: \n*\n first,\nand \nthe first item which matches the trigger will select the workflow for the build!\n\n\nHow to build only a single branch\n\u2693\n\n\nIf you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a \ntrigger_map\n which does not map anything else\nto any workflow, only the branch you want to build.\n\n\nE.g. if you only want to build the \nmaster\n branch on code push:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n\n\n\nOr if you only want to build \nfeature/\n branches:\n\n\ntrigger_map:\n- push_branch: feature/*\n  workflow: primary\n\n\n\nOr the two together:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary\n\n\n\nThis configuration will start a build for every code push which happens on\neither \nmaster\n or on a \nfeature/\n branch, and will use the same workflow for\nboth (\nprimary\n).\n\n\nIf you want to use a different workflow for your \nmaster\n branch, then\nall you have to do is to change the \nworkflow:\n for that trigger map item:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary\n\n\n\nThis configuration will use the workflow \ndeploy\n for every code push on \nmaster\n,\nand the workflow \nprimary\n for every code push on \nfeature/\n branches,\nand \nwill not start a build for anything else\n.\n\n\nA very simple, two-workflow CI/CD setup\n\u2693\n\n\nA base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.\n\n\nIf you have a workflow \nprimary\n for doing the integration tests,\nand \ndeploy\n to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the \nmaster\n branch, which should instead use the \ndeploy\n workflow:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\n\n\nOrder of the items matter!\n\n\nWhen \nbitrise\n receives a webhook event (any kind) it'll match it against\nthe app's \ntrigger_map\n. \nThe first item it matches will select the workflow for the build!\n\n\n\n\nThis means that if you'd specify the \npush_branch: master\n \nafter\n the\n\npush_branch: \n*\n item, \nmaster\n would never be selected as every code push\nevent would match \npush_branch: \n*\n first!\n\n\nDon't start two builds for pull requests from the same repository\n\u2693\n\n\nWhen you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository),\n\nthe source code hosting service will send two webhooks\n,\none for the code push and one for the pull request!\n\n\nAn important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code \nafter\n you merged the pull request.\n\n\nWhether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with \nbitrise\n\nyou can decide whether you want it or not.\n\n\n\n\nPull Request merge is actually a Code Push!\n\n\nSource code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from \nfeature/a\n into \nmaster\n,\nwhen you merge the PR it will generate a code push to \nmaster\n.\n\n\n\n\nAn example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying \nmaster\n:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\nor if you don't want to start a build for pull requests, only for code push events:\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: primary\n\n\n\nThree workflows: test, deploy to staging and deploy to production\n\u2693\n\n\nAnother common CI/CD pattern is to have three workflows:\n\n\n\n\nA Test workflow, which will run for every pull request, every code push on \nfeature/\n branches etc.,\n  to test whether the test can be integrated into a release (branch)\n\n\nA Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:\n\n\nIn case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.\n\n\nIn case of an Android app this can be a deploy to Google Play to a \"beta\" track.\n\n\nIn case of a server code this can be a deploy to e.g. a staging Heroku server.\n\n\n\n\n\n\nA Production deployment workflow, to deploy the app/code into production. Examples:\n\n\nIn case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".\n\n\nIn case of an Android app this can be a deploy to Google Play as a public update of the app.\n\n\nIn case of a server code this can be a deploy to e.g. the production Heroku server.\n\n\n\n\n\n\n\n\nSo, we have three workflows (\nprimary\n (test), \ndeploy-to-staging\n and \ndeploy-to-production\n)\nand we'll specify three triggers, to select the right workflow for the right trigger.\n\n\nThere are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:\n\n\nUsing Tags to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a new tag (with the format \nv*.*.*\n, e.g. \nv1.0.0\n) is pushed\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \nmaster\n branch (e.g. a pull request is merged into the \nmaster\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nUsing a Branch to trigger the production deployment\n\u2693\n\n\ntrigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\nThis trigger map configuration will trigger a build:\n\n\n\n\nwith the \ndeploy-to-production\n workflow if a code push happens on the \nmaster\n branch (e.g. a git flow release branch merged into \nmaster\n)\n\n\nwith the \ndeploy-to-staging\n workflow if a code push happens on the \ndevelop\n branch (e.g. a pull request is merged into the \ndevelop\n branch)\n\n\nwith the \nprimary\n workflow for any other branch and for pull requests\n\n\n\n\nHow to build only pull requests\n\u2693\n\n\nIf all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:\n\n\ntrigger_map:\n- pull_request_target_branch: \n*\n\n  workflow: primary\n\n\n\nThis will select the \nprimary\n workflow for every and any pull request,\nand will not start a build for anything else.\n\n\nIf you'd only want to build pull requests which are targeted to\nbe merged into \nmaster\n, the configuration would look like this:\n\n\ntrigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "Using the Trigger Map to trigger builds"
        }, 
        {
            "location": "/webhooks/trigger-map/#components-of-the-trigger_map", 
            "text": "A  trigger_map  is a  list of filters , and the  workflow  the given\nfilters should select in case of a matching trigger.  Every filter item has to include at least one condition!  This means that you can't have an item which only specifies the  workflow ,\nat least one filter ( push_branch  /  pull_request_source_branch  /  pull_request_target_branch  /  tag )\nhas to be specified!", 
            "title": "\"Components\" of the trigger_map"
        }, 
        {
            "location": "/webhooks/trigger-map/#the-available-filters", 
            "text": "push_branch  : A filter which is matched against Code Push events' \"branch\" parameter  pull_request_source_branch  : A filter which is matched against Pull Request events' \"source branch\"\n  parameter (the branch the pull request was started from)  pull_request_target_branch  : A filter which is matched against Pull Request events' \"target branch\"\n  parameter - the branch the pull request will be  merged into  tag  : A filter which is matched against Tag Push events' \"tag\" (name) parameter  pattern  :  DEPRECATED  - this filter was used for both code push and pull request events,\n  in combination with  is_pull_request_allowed . This filter is now deprecated,\n  as the new filters allow better control over event mapping.   If you define multiple filters in a single item then  all filters have to match \nin order to select that item's workflow.\nFor example:  trigger_map:\n- pull_request_target_branch:  master \n  pull_request_source_branch:  develop \n  workflow: primary  will only select the  primary  workflow if the pull request's source branch is  develop   AND \nthe target branch is  master .  If you want to specify filters which should be treated separately, e.g. to\nselect  primary  for pull requests where the source is  develop , as well as select\nfor the ones which target  master :  trigger_map:\n- pull_request_target_branch:  master \n  workflow: primary\n- pull_request_source_branch:  develop \n  workflow: primary  One last note, which is hopefully not surprising after the previous example:\nyou can't mix and match  push_branch ,  tag  and the  pull_request_..  filters  in the same item .\nThis would effectively mean that the workflow should be selected\nif the event is a Code Push and a Pull Request (or Tag Push) event  at the same time .\nThis is simply not possible, source code hosting services send separate\nwebhooks for Pull Request (pre-merge state), Tags and for Code Push events. A single webhook event will never be Code Push, Tag Push and Pull Request at the same time ,\na single webhook is always related to only one type (Code Push, Tag Push or Pull Request).", 
            "title": "The available filters:"
        }, 
        {
            "location": "/webhooks/trigger-map/#one-trigger-one-build", 
            "text": "One trigger can only select a single workflow / can only start a single build. The first item which matches the trigger will select the workflow for the build!  If you want to run more than one workflow , you can Chaining workflows \nafter each other.  The workflows chained this way won't run in parallel ,\nbut the full chain of workflows will be executed, in the order you chain them.  The order of the items  also matter: if you'd specify a  push_branch: master  item  after  a push_branch:  *  item, the  push_branch: master   would never be selected \nas every code push event would match  push_branch:  *  first,\nand  the first item which matches the trigger will select the workflow for the build!", 
            "title": "One trigger = one build"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-a-single-branch", 
            "text": "If you want to build only a single branch, for every code push, but for nothing else (no push to\nany other branch should trigger a build, nor any pull request or tag), then\nall you have to do is to specify a  trigger_map  which does not map anything else\nto any workflow, only the branch you want to build.  E.g. if you only want to build the  master  branch on code push:  trigger_map:\n- push_branch: master\n  workflow: primary  Or if you only want to build  feature/  branches:  trigger_map:\n- push_branch: feature/*\n  workflow: primary  Or the two together:  trigger_map:\n- push_branch: master\n  workflow: primary\n- push_branch: feature/*\n  workflow: primary  This configuration will start a build for every code push which happens on\neither  master  or on a  feature/  branch, and will use the same workflow for\nboth ( primary ).  If you want to use a different workflow for your  master  branch, then\nall you have to do is to change the  workflow:  for that trigger map item:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch: feature/*\n  workflow: primary  This configuration will use the workflow  deploy  for every code push on  master ,\nand the workflow  primary  for every code push on  feature/  branches,\nand  will not start a build for anything else .", 
            "title": "How to build only a single branch"
        }, 
        {
            "location": "/webhooks/trigger-map/#a-very-simple-two-workflow-cicd-setup", 
            "text": "A base CI/CD setup involves two workflows: one for integration tests,\nand one for distribution.  If you have a workflow  primary  for doing the integration tests,\nand  deploy  to do the deployment / distribution, and you want to\nrun the integration test for code pushes and pull requests on every branch\nexcept the  master  branch, which should instead use the  deploy  workflow:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary   Order of the items matter!  When  bitrise  receives a webhook event (any kind) it'll match it against\nthe app's  trigger_map .  The first item it matches will select the workflow for the build!   This means that if you'd specify the  push_branch: master   after  the push_branch:  *  item,  master  would never be selected as every code push\nevent would match  push_branch:  *  first!", 
            "title": "A very simple, two-workflow CI/CD setup"
        }, 
        {
            "location": "/webhooks/trigger-map/#dont-start-two-builds-for-pull-requests-from-the-same-repository", 
            "text": "When you start a Pull Request from the same repository (not from a fork,\njust from a branch of the repository), the source code hosting service will send two webhooks ,\none for the code push and one for the pull request!  An important note: although it might seem like both builds are the same,\nit most likely isn't! The code push event/build builds the code\nof the branch, without any merging, etc. It builds the exact same state of the code\nwhat you have when you checkout that branch.\nThe Pull Request build on the other hand builds a \"pre-merged\" state of the code,\nwhich is expected to be the state of the code  after  you merged the pull request.  Whether you want to build both or just one of these in case of a pull request\nis up to you and depends on your project's requirements, but with  bitrise \nyou can decide whether you want it or not.   Pull Request merge is actually a Code Push!  Source code hosting services treat the event of \"merge\" as a code push\nevent. For example if you merge a Pull Request from  feature/a  into  master ,\nwhen you merge the PR it will generate a code push to  master .   An example to build only the pull request (\"pre-merged\") events/state,\nin addition to deploying  master :  trigger_map:\n- push_branch: master\n  workflow: deploy\n- pull_request_target_branch:  * \n  workflow: primary  or if you don't want to start a build for pull requests, only for code push events:  trigger_map:\n- push_branch: master\n  workflow: deploy\n- push_branch:  * \n  workflow: primary", 
            "title": "Don't start two builds for pull requests from the same repository"
        }, 
        {
            "location": "/webhooks/trigger-map/#three-workflows-test-deploy-to-staging-and-deploy-to-production", 
            "text": "Another common CI/CD pattern is to have three workflows:   A Test workflow, which will run for every pull request, every code push on  feature/  branches etc.,\n  to test whether the test can be integrated into a release (branch)  A Staging deployment workflow, to deploy the app/code to an internal/testing system. Examples:  In case of an iOS app this can be e.g. an Ad Hoc signed IPA deployed to HockeyApp, where your tester team can\n  download and test it, or a deploy to iTunes Connect / TestFlight for internal testing.  In case of an Android app this can be a deploy to Google Play to a \"beta\" track.  In case of a server code this can be a deploy to e.g. a staging Heroku server.    A Production deployment workflow, to deploy the app/code into production. Examples:  In case of an iOS app this can be an App Store signed IPA deployed to iTunes Connect/TestFlight,\n  enabled for \"external testing\".  In case of an Android app this can be a deploy to Google Play as a public update of the app.  In case of a server code this can be a deploy to e.g. the production Heroku server.     So, we have three workflows ( primary  (test),  deploy-to-staging  and  deploy-to-production )\nand we'll specify three triggers, to select the right workflow for the right trigger.  There are two similar approaches, depending whether you prefer tags of branches for\nproduction deployment:", 
            "title": "Three workflows: test, deploy to staging and deploy to production"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-tags-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- tag: v*.*.*\n  workflow: deploy-to-production\n- push_branch: master\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a new tag (with the format  v*.*.* , e.g.  v1.0.0 ) is pushed  with the  deploy-to-staging  workflow if a code push happens on the  master  branch (e.g. a pull request is merged into the  master  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using Tags to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#using-a-branch-to-trigger-the-production-deployment", 
            "text": "trigger_map:\n- push_branch: master\n  workflow: deploy-to-production\n- push_branch: develop\n  workflow: deploy-to-staging\n- push_branch:  * \n  workflow: primary\n- pull_request_target_branch:  * \n  workflow: primary  This trigger map configuration will trigger a build:   with the  deploy-to-production  workflow if a code push happens on the  master  branch (e.g. a git flow release branch merged into  master )  with the  deploy-to-staging  workflow if a code push happens on the  develop  branch (e.g. a pull request is merged into the  develop  branch)  with the  primary  workflow for any other branch and for pull requests", 
            "title": "Using a Branch to trigger the production deployment"
        }, 
        {
            "location": "/webhooks/trigger-map/#how-to-build-only-pull-requests", 
            "text": "If all you want is to run integration tests for pull requests, and you\ndon't want to do anything else, then you can use a trigger map configuration\nlike this:  trigger_map:\n- pull_request_target_branch:  * \n  workflow: primary  This will select the  primary  workflow for every and any pull request,\nand will not start a build for anything else.  If you'd only want to build pull requests which are targeted to\nbe merged into  master , the configuration would look like this:  trigger_map:\n- pull_request_target_branch: master\n  workflow: primary", 
            "title": "How to build only pull requests"
        }, 
        {
            "location": "/webhooks/troubleshooting/", 
            "text": "First of all, if you registered your app on \nbitrise.io\n a while ago (especially\nif before 2016 Sept.) you should check the webhook URL registered on the git hosting service you use (GitHub, Bitbucket, ...).\n\n\nNew trigger feature\n (like \nskip ci\n or tag based triggering)\n\nare only available if you use the new \nhooks.bitrise.io\n webhook URL!\n\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint for webhooks,\nbut every new project registered should now get the new \nhooks.bitrise.io\n webhook URL automatically.\n\n\nIf your webhook would still be a \nbitrise.io/hooks\n URL, please replace it with the new \nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nDebugging - what happens with webhooks related to un-mapped branches\n\n\nYou can't limit Webhooks by branch in most of the source code hosting services,\nso \nbitrise.io\n will still receive a webhook call for every code push of other branches,\nbut it won't start a build unless it finds a matching filter in the \ntrigger_map\n,\nwhich specifies a \nworkflow\n to be selected for the build.\n\nThis is also true if you use the \nBuild Trigger API\n directly.\n\n\nYou can see all the ignored calls on your \nActivity page on bitrise.io\n.\nThis means that if you think a given event should have started a build but it did not,\nyou should check your \nActivity\n page (or your source code hosting service's Webhook history - more info a bit below)\nto find out why it did not trigger a build.\n\n\nAn ignored build call entry in the Activity list looks like:\n\n\nBuild trigger failed: trigger-pattern (push_branch:) (pr_source_branch:prtest/t1) (pr_target_branch:develop) did not match any defined workflow in trigger_map\nPROJECT-NAME - Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n\n\n\nBitrise also returns the reason to the source code hosting service\n (the service which sent the webhook, e.g. GitHub) too,\nso if your service has a webhook history (e.g. GitHub, Bitbucket, ...)\nyou can see the reason why a given webhook did not trigger a build there too!\n\n\nSimply open the webhook history on your source code hosting service,\nand check the response Bitrise returned. It will be something like:\n\n\n{\nsuccess_responses\n:[],\nfailed_responses\n:[{\nstatus\n:\nerror\n,\nmessage\n:\ntrigger pattern did not match any defined mapping: Run triggered with params: push-branch: , pr-source-branch: prtest/t1, pr-target-branch: develop, but no matching workflow found\n,\nservice\n:\nbitrise\n,\nslug\n:\n...\n,\nbuild_slug\n:\n,\nbuild_number\n:0,\nbuild_url\n:\n,\ntriggered_workflow\n:\n}]}\n\n\n\nThese detailed responses are only generated if you use\nthe new \nhooks.bitrise.io\n webhook URL!\n\nInitially we had a non open source \nbitrise.io/hooks\n endpoint\nfor webhooks, but every new project registered should now get the new\n\nhooks.bitrise.io\n webhook URL automatically. If your webhook\nwould still be a \nbitrise.io/hook\n URL, please replace it with the new\n\nhooks.bitrise.io/\n URL - you can find this on the \nCode\n tab of your app!\n\n\nLocal debugging\n\u2693\n\n\nYou can also test which workflow will be selected for a trigger\nusing our \nopen source, Bitrise CLI\n.\n\n\nTo simulate a code push, you can run:\n\n\nbitrise trigger-check --push-branch master\n\n\n\nTo simulate a Pull Request, you can run:\n\n\nbitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master\n\n\n\nTo simulate a tag push, you can run:\n\n\nbitrise trigger-check --tag 1.0.0\n\n\n\nFor more information and options run:\n\n\nbitrise trigger-check --help", 
            "title": "Webhook Troubleshooting"
        }, 
        {
            "location": "/webhooks/troubleshooting/#local-debugging", 
            "text": "You can also test which workflow will be selected for a trigger\nusing our  open source, Bitrise CLI .  To simulate a code push, you can run:  bitrise trigger-check --push-branch master  To simulate a Pull Request, you can run:  bitrise trigger-check --pr-source-branch=feature/a --pr-target-branch=master  To simulate a tag push, you can run:  bitrise trigger-check --tag 1.0.0  For more information and options run:  bitrise trigger-check --help", 
            "title": "Local debugging"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-procedures/", 
            "text": "Before you distribute your app through \nGoogle Play Store\n, your APK file must be digitally signed.\n\n\nYou can specify the code signing configuration for your project in Android Studio or manually in your Gradle configuration. You can also use the \nsign-apk\n step in your Bitrise Workflow Editor to have your APK signed automatically.\n\n\n\n\nDifferent Android code signing procedures\n\n\n\n\nAndroid code signing with Android Studio\n\n\nAndroid code signing in Gradle\n\n\nAndroid code signing using Bitrise Sign APK step", 
            "title": "Android code signing procedures"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/", 
            "text": "Create a signed APK with the \nSign APK\n step\n\u2693\n\n\nYou can create a signed APK using the \nSign APK step\n in our Bitrise workflow.\n\n\nBitrise Project Scanner provides a \ndeploy workflow\n which contains the \nSign APK step\n. With this step, you can digitally sign your APK as part of your workflow. This step is configured to run if you have already uploaded your keystore file to Bitrise. All you have to do is upload your keystore file in the \nCode signing\n tab of the Workflow Editor.\n\n\nIn this section, we walk you through the code signing steps using our \nandroid-multiple-test-results-sample\n demo app.\n\n\n\n\n\n\nLog into \nbitrise.io\n and click on your app.\n\n\n\n\n\n\nOn your Bitrise \nDashboard\n, click on \nWorkflow\n.\n\n\n\n\n\n\nClick on \nCode signing\n.\n\n\n\n\n\n\nClick or drag-and-drop your keystore file on the \nUpload file\n field of the \nANDROID KEYSTORE FILE\n section.\n\n\n\n\n\n\n\n\nFill out the displayed three input fields: \nkeystore password\n, \nkeystore alias\n and \nprivate key password\n.\n\n\n\n\n\n\n\n\nClick on \nSave metadata\n.\n\n\n\n\nSuccess\n\n\nThe \nSign APK\n step will receive your uploaded files.\n\n\n\n\n\n\n\n\nBitrise uploads your keystore file and assigns an environment variable (\nBITRISEIO_ANDROID_KEYSTORE_URL\n) to the download URL (which is a time-limited, read-only download URL) of the file as the value. You can use this URL to download the keystore file during a build in the future. The \nSign APK\n step in the workflow will track this environment variable and will run if it is set.\n\n\nDownload your files\n\u2693\n\n\nYou can download your files from \nGENERIC FILE STORAGE\n(for example, your keystore file) using the \nFile-downloader\n step:\n\n\n\n\nExample\n\n\nIn this example, we're downloading a keystore file.\n\n\n... \n- file-downloader:\n   inputs:\n   - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n   - destination: \n$HOME/keystores/my_keystore.jks\n #native android#               \n...\n\n\n\n\n\n\nAfter this step, \nmy_keystore.jks\n will be available at \n$HOME/keystores/my_keystore.jks\n.\n\n\nRun your deploy workflow\n\u2693\n\n\nYou can run a workflow \nmanually\n.\n\n\n\n\n\n\nOpen your app's \nBuilds\n page.\n\n\n\n\n\n\nClick on \nStart/Schedule a Build\n.\n\n\n\n\n\n\nIn the popup window, select \ndeploy\n in the Workflow dropdown list.\n\n\n\n\n\n\nClick \nStart Build\n.\n\n\n\n\n\n\nYou can also run it through a \nGIT event\n if you set the trigger map for the workflow.\n\n\n\n\n\n\nClick on the \nTriggers\n tab.\n\n\n\n\n\n\nSet up your event (push/tag/pull) and select \ndeploy\n workflow.\n\n\n\n\n\n\nClick on \nDone\n and then \nSave\n.\n\n\n\n\n\n\nThe next change in your repository that matches any of your trigger map event will start your \ndeploy\n workflow.", 
            "title": "Android code signing using Bitrise Sign APK step"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/#create-a-signed-apk-with-the-sign-apk-step", 
            "text": "You can create a signed APK using the  Sign APK step  in our Bitrise workflow.  Bitrise Project Scanner provides a  deploy workflow  which contains the  Sign APK step . With this step, you can digitally sign your APK as part of your workflow. This step is configured to run if you have already uploaded your keystore file to Bitrise. All you have to do is upload your keystore file in the  Code signing  tab of the Workflow Editor.  In this section, we walk you through the code signing steps using our  android-multiple-test-results-sample  demo app.    Log into  bitrise.io  and click on your app.    On your Bitrise  Dashboard , click on  Workflow .    Click on  Code signing .    Click or drag-and-drop your keystore file on the  Upload file  field of the  ANDROID KEYSTORE FILE  section.     Fill out the displayed three input fields:  keystore password ,  keystore alias  and  private key password .     Click on  Save metadata .   Success  The  Sign APK  step will receive your uploaded files.     Bitrise uploads your keystore file and assigns an environment variable ( BITRISEIO_ANDROID_KEYSTORE_URL ) to the download URL (which is a time-limited, read-only download URL) of the file as the value. You can use this URL to download the keystore file during a build in the future. The  Sign APK  step in the workflow will track this environment variable and will run if it is set.", 
            "title": "Create a signed APK with the Sign APK step"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/#download-your-files", 
            "text": "You can download your files from  GENERIC FILE STORAGE (for example, your keystore file) using the  File-downloader  step:   Example  In this example, we're downloading a keystore file.  ... \n- file-downloader:\n   inputs:\n   - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n   - destination:  $HOME/keystores/my_keystore.jks  #native android#               \n...   After this step,  my_keystore.jks  will be available at  $HOME/keystores/my_keystore.jks .", 
            "title": "Download your files"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/#run-your-deploy-workflow", 
            "text": "You can run a workflow  manually .    Open your app's  Builds  page.    Click on  Start/Schedule a Build .    In the popup window, select  deploy  in the Workflow dropdown list.    Click  Start Build .    You can also run it through a  GIT event  if you set the trigger map for the workflow.    Click on the  Triggers  tab.    Set up your event (push/tag/pull) and select  deploy  workflow.    Click on  Done  and then  Save .    The next change in your repository that matches any of your trigger map event will start your  deploy  workflow.", 
            "title": "Run your deploy workflow"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-with-android-studio/", 
            "text": "You can specify the code signing configuration for your project in \nAndroid Studio\n.\n\n\n\n\n\n\nGo to \nProject navigator\n.\n\n\n\n\n\n\nSelect your project and open \nModule Settings\n.\n\n\n\n\n\n\nFrom \nModules\n, select your module.\n\n\n\n\n\n\nOn the \nSigning\n tab, fill out the signing information. In our example, we used the following values:\n\n\n\n\n\n\nname: release\n\n\n\n\n\n\nkey alias: MyAndroidKey\n\n\n\n\n\n\nkey password: ***\n\n\n\n\n\n\nstore file: /path/to/my/keystore.jks\n\n\n\n\n\n\nstore password: ***\n\n\n\n\n\n\n\n\n\n\nOnce you filled out the signing information, the \nsigningConfigs\n block will be created in your module's \nbuild.gradle\n file.", 
            "title": "Android code signing with Android Studio"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-in-gradle/", 
            "text": "Configure manually in Gradle\n\u2693\n\n\nYou can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process.\n\n\n\n\n\n\nOpen your module-level \nbuild.gradle\n file.\n\n\n\n\n\n\nAdd the \nsigningConfigs\n codeblock to your code and define the following entries specific to your project:\n\nstoreFile\n, \nstorePassword\n, \nkeyAlias\n, and \nkeyPassword\n.\n\n\n\n\n\n\n\n\nSigning configuration in \nbuild.gradle\n\n\nandroid {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file(\n/path/to/my/keystore.jks\n)\n            storePassword '***'\n        }\n    }\n...\n\n\n\n\n\nAbout environment variables\n\u2693\n\n\nYou can avoid having the same keystore path locally and on \nbitrise.io\n by using configuration values and environment variables in the keystore path (\nstoreFile\n) and in the keystore password.\n\n\n\n\nUsing environment variables in keystore path and in keystore password\n\n\nIf your keystore path is \n$HOME/keystores/my_keystore.jks\n, then your \nbuild.gradle\n file looks like this:\n\nandroid {\n   signingConfigs {\n       release {\n           keyAlias 'MyAndroidKey'\n           keyPassword '***'\n           storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n           storePassword '***'\n       }\n   }\n...\n\n\n\n\n\n\nAccessing environment variables in your Gradle config\n\n\nYou can use the \nSystem.getenv(\nENV_KEY\n)\n file to access environment variables in the Gradle config file.\n\n\n\n\n\n\nUsing env vars as \nkeyPassword\n and \nstorePassword\n in the \nCode signing\n tab\n\n\nYour \nbuild.gradle\n will look like this:\n\n\nandroid {\n   signingConfigs {\n       release {\n          keyAlias System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n)\n          keyPassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n)\n          storeFile file(System.getenv(\nHOME\n) + \n/keystores/my_keystore.jks\n)\n          storePassword System.getenv(\nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n)\n       }\n   }\n...\n\nYou get these environment variables when you upload your keystore to the \nGENERIC FILE STORAGE\n field of the \nCode Signing\n tab in your Workflow Editor.\n\n\n\n\n\n\nAttention\n\n\nDo not forget to define the used environment variables on \nbitrise.io\n as well.\n\n\n\n\nWhen you upload a keystore file in the \nAndroid keystore file\n section and you have all the fields filled out, Bitrise will export these environment variables automatically:\n\n\n\n\nBITRISEIO_ANDROID_KEYSTORE_ALIAS\n\n\nBITRISEIO_ANDROID_KEYSTORE_PASSWORD\n\n\nBITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n\n\nBITRISEIO_ANDROID_KEYSTORE_URL", 
            "title": "Android code signing in Gradle"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-in-gradle/#configure-manually-in-gradle", 
            "text": "You can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process.    Open your module-level  build.gradle  file.    Add the  signingConfigs  codeblock to your code and define the following entries specific to your project: storeFile ,  storePassword ,  keyAlias , and  keyPassword .     Signing configuration in  build.gradle  android {\n    signingConfigs {\n        release {\n            keyAlias 'MyAndroidKey'\n            keyPassword '***'\n            storeFile file( /path/to/my/keystore.jks )\n            storePassword '***'\n        }\n    }\n...", 
            "title": "Configure manually in Gradle"
        }, 
        {
            "location": "/code-signing/android-code-signing/android-code-signing-in-gradle/#about-environment-variables", 
            "text": "You can avoid having the same keystore path locally and on  bitrise.io  by using configuration values and environment variables in the keystore path ( storeFile ) and in the keystore password.   Using environment variables in keystore path and in keystore password  If your keystore path is  $HOME/keystores/my_keystore.jks , then your  build.gradle  file looks like this: android {\n   signingConfigs {\n       release {\n           keyAlias 'MyAndroidKey'\n           keyPassword '***'\n           storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n           storePassword '***'\n       }\n   }\n...    Accessing environment variables in your Gradle config  You can use the  System.getenv( ENV_KEY )  file to access environment variables in the Gradle config file.    Using env vars as  keyPassword  and  storePassword  in the  Code signing  tab  Your  build.gradle  will look like this:  android {\n   signingConfigs {\n       release {\n          keyAlias System.getenv( BITRISEIO_ANDROID_KEYSTORE_ALIAS )\n          keyPassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD )\n          storeFile file(System.getenv( HOME ) +  /keystores/my_keystore.jks )\n          storePassword System.getenv( BITRISEIO_ANDROID_KEYSTORE_PASSWORD )\n       }\n   }\n... \nYou get these environment variables when you upload your keystore to the  GENERIC FILE STORAGE  field of the  Code Signing  tab in your Workflow Editor.    Attention  Do not forget to define the used environment variables on  bitrise.io  as well.   When you upload a keystore file in the  Android keystore file  section and you have all the fields filled out, Bitrise will export these environment variables automatically:   BITRISEIO_ANDROID_KEYSTORE_ALIAS  BITRISEIO_ANDROID_KEYSTORE_PASSWORD  BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD  BITRISEIO_ANDROID_KEYSTORE_URL", 
            "title": "About environment variables"
        }, 
        {
            "location": "/code-signing/xamarin-android-code-signing/xamarin-android-code-signing/", 
            "text": "Configure code signing in Xamarin Studio\n\u2693\n\n\nYou can specify the code signing configuration for your Xamarin Android project by creating a signed APK in \nXamarin Studio\n.\n\n\n\n\n\n\nLog into your \nXamarin Studio\n.\n\n\n\n\n\n\nDouble click on your Xamarin Android project to open \nProject Option\n.\n\n\n\n\n\n\nSelect the \nAndroid Package Signing\n in \nBuild group\n.\n\n\n\n\n\n\nSelect your platform in the \nConfiguration - Platform\n.\n\n\n\n\n\n\nCheck the \nSign .APK file using the following keystore details\n.\n\n\n\n\n\n\nFill out the signing information.\n\n\n\n\n\n\nUse the same keystore path locally and on \nbitrise.io\n for Xamarin Android\n\u2693\n\n\n\n\nDo not use environment variables in keystore path\n\n\nYou \ncannot use environment variables\n in your keystore path in your Xamarin project! The keystore path has to be relative to the folder of your Xamarin Android project. You can also use an absolute path.\n\n\n\n\nYou can use the same path on your local machine and on \nbitrise.io\n by putting your keystore into your repository.\n\n\n\n\nAttention\n\n\nDon't forget to gitignore your keystore in your repository.\n\n\n\n\nSince your keystore is gitignored, you have to upload your keystore to the \nGENERIC FILE STORAGE\n of Bitrise and download it to the same location in the build.\n\n\n\n\n\n\nOn the \nDashboard\n, click on your \nWorkflow\n tab.\n\n\n\n\n\n\nClick on \nCode signing\n.\n\n\n\n\n\n\nScroll down to the \nGENERIC FILE STORAGE\n field.\n\n\n\n\n\n\nType your environment variable name here in the first field.\n\n\n\n\nExample\n\n\nIn our example, we use \nXAMARIN_KEYSTORE\n.\n\n\n\n\n\n\n\n\n\n\nUpload your keystore file in the \nUpload file field\n.\n\n\nYour environment variable (for example, \n$BITRISEIO_XAMARIN_KEYSTORE_URL\n) will be automatically available with the download URL of your keystore file.\n\n\n\n\n\n\n\n\nNavigate back to your workflow.\n\n\n\n\n\n\nInsert the \nFile Downloader\n step before the \nXamarin Archive\n step. The \nFile Downloader\n step will get a \nDownload source url\n input.\n\n\n\n\n\n\nType your environment variable, for example, \n$BITRISEIO_XAMARIN_KEYSTORE_URL\n in the \nDownload source url\n field.\n\n\n\n\n\n\nSet your keystore path in the \nDownload destination path\n.\n\n\n\n\n\n\n\n\n\n\nEnsure the same keystore path\n\n\nEnsure that your Bitrise keystore path is the same as your local path relative to your project root. For example, if \nkeystore.jks\nis in your project's root, then your Bitrise keystore path has to be \n$BITRISE_SOURCE_DIR/keystore.jks\n.", 
            "title": "Xamarin Android code signing"
        }, 
        {
            "location": "/code-signing/xamarin-android-code-signing/xamarin-android-code-signing/#configure-code-signing-in-xamarin-studio", 
            "text": "You can specify the code signing configuration for your Xamarin Android project by creating a signed APK in  Xamarin Studio .    Log into your  Xamarin Studio .    Double click on your Xamarin Android project to open  Project Option .    Select the  Android Package Signing  in  Build group .    Select your platform in the  Configuration - Platform .    Check the  Sign .APK file using the following keystore details .    Fill out the signing information.", 
            "title": "Configure code signing in Xamarin Studio"
        }, 
        {
            "location": "/code-signing/xamarin-android-code-signing/xamarin-android-code-signing/#use-the-same-keystore-path-locally-and-on-bitriseio-for-xamarin-android", 
            "text": "Do not use environment variables in keystore path  You  cannot use environment variables  in your keystore path in your Xamarin project! The keystore path has to be relative to the folder of your Xamarin Android project. You can also use an absolute path.   You can use the same path on your local machine and on  bitrise.io  by putting your keystore into your repository.   Attention  Don't forget to gitignore your keystore in your repository.   Since your keystore is gitignored, you have to upload your keystore to the  GENERIC FILE STORAGE  of Bitrise and download it to the same location in the build.    On the  Dashboard , click on your  Workflow  tab.    Click on  Code signing .    Scroll down to the  GENERIC FILE STORAGE  field.    Type your environment variable name here in the first field.   Example  In our example, we use  XAMARIN_KEYSTORE .      Upload your keystore file in the  Upload file field .  Your environment variable (for example,  $BITRISEIO_XAMARIN_KEYSTORE_URL ) will be automatically available with the download URL of your keystore file.     Navigate back to your workflow.    Insert the  File Downloader  step before the  Xamarin Archive  step. The  File Downloader  step will get a  Download source url  input.    Type your environment variable, for example,  $BITRISEIO_XAMARIN_KEYSTORE_URL  in the  Download source url  field.    Set your keystore path in the  Download destination path .      Ensure the same keystore path  Ensure that your Bitrise keystore path is the same as your local path relative to your project root. For example, if  keystore.jks is in your project's root, then your Bitrise keystore path has to be  $BITRISE_SOURCE_DIR/keystore.jks .", 
            "title": "Use the same keystore path locally and on bitrise.io for Xamarin Android"
        }, 
        {
            "location": "/code-signing/ios-code-signing/code-signing/", 
            "text": "To run a build of your iOS app on Bitrise, you will need to provide code signing files in some way. The code signing of iOS projects requires:\n\n\n\n\nSigning certificates\n in a .p12 format\n\n\nProvisioning Profile\n file(s) matching your project (team ID, bundle ID, ...)\n\n\na script, tool or step which installs these files in the build environment.\n\n\n\n\nYou can store your code signing files and create a signed .ipa file for your iOS project (Xcode or Xamarin), or a signed .app or .pkg file for your MacOS project on \nbitrise.io\n. You can manually upload all the required files (Provisoning Profiles and .p12 certificate files) or you can use automatic provisioning to automatically generate and manage Provisioning Profiles from a connected Apple Developer account. We'll show you how to use both options!\n\n\nWe also support using Xcode's \nAutomatically manage signing\n option, with both manual and automatic provisioning.\n\n\niOS code signing procedure\n\u2693\n\n\nThe basic workflow of code signing is pretty straightforward:  \n\n\n\n\n\n\nCollect the required files with our codesigndoc tool\n.\n\n\n\n\n\n\nUpload your code signing files to \nbitrise.io\n. You can upload the files using \ncodesigndoc\n or manually on the website. For Provisioning Profiles, you can use:\n\n\n\n\nmanual provisioning\n\n\nautomatic provisioning\n.\n\n\n\n\n\n\n\n\nUse the \nXcode Archive \n Export for iOS\n or the \nXamarin Archive\n step to create a signed \n.ipa\n:\n\n\n\n\nXcode projects: \nCreate a signed .ipa for Xcode projects\n\n\nXamarin projects: \nCreate a signed .ipa for Xamarin projects\n\n\n\n\n\n\n\n\niOS code signing with third party tools\n\u2693\n\n\nYou can use third party tools to manage code signing on Bitrise, such as \nfastlane match\n\nor \nfastlane sigh\n. However, we recommend using our own steps and tools. \n\n\n\n\nWarning\n\n\nIf you decide to use a third party tool for code signing management,\nplease consult the tool's documentation and issue tracker,\nwe only provide customer support for our own Step (\nCertificate and profile installer\n)\nand tools (\ncodesigndoc\n)!\n\n\n\n\n\n\nCertificate and profile installer\n step\n\n\nEven if you use a third party tool to manage your code signing files,\nand you don't plan to upload any code signing file to bitrise.io,\nyou should keep the \nCertificate and profile installer\n step in your\nWorkflow. This is because certain tools were not designed to work\nin an ephemeral environment, or in a full clean macOS install,\nand the \nCertificate and profile installer\n includes common\nworkarounds for this situation. It's not guaranteed that it will help with\nthe tool of your choice, but it won't cause any issue either.", 
            "title": "iOS code signing on Bitrise"
        }, 
        {
            "location": "/code-signing/ios-code-signing/code-signing/#ios-code-signing-procedure", 
            "text": "The basic workflow of code signing is pretty straightforward:      Collect the required files with our codesigndoc tool .    Upload your code signing files to  bitrise.io . You can upload the files using  codesigndoc  or manually on the website. For Provisioning Profiles, you can use:   manual provisioning  automatic provisioning .     Use the  Xcode Archive   Export for iOS  or the  Xamarin Archive  step to create a signed  .ipa :   Xcode projects:  Create a signed .ipa for Xcode projects  Xamarin projects:  Create a signed .ipa for Xamarin projects", 
            "title": "iOS code signing procedure"
        }, 
        {
            "location": "/code-signing/ios-code-signing/code-signing/#ios-code-signing-with-third-party-tools", 
            "text": "You can use third party tools to manage code signing on Bitrise, such as  fastlane match \nor  fastlane sigh . However, we recommend using our own steps and tools.    Warning  If you decide to use a third party tool for code signing management,\nplease consult the tool's documentation and issue tracker,\nwe only provide customer support for our own Step ( Certificate and profile installer )\nand tools ( codesigndoc )!    Certificate and profile installer  step  Even if you use a third party tool to manage your code signing files,\nand you don't plan to upload any code signing file to bitrise.io,\nyou should keep the  Certificate and profile installer  step in your\nWorkflow. This is because certain tools were not designed to work\nin an ephemeral environment, or in a full clean macOS install,\nand the  Certificate and profile installer  includes common\nworkarounds for this situation. It's not guaranteed that it will help with\nthe tool of your choice, but it won't cause any issue either.", 
            "title": "iOS code signing with third party tools"
        }, 
        {
            "location": "/code-signing/ios-code-signing/collecting-files-with-codesigndoc/", 
            "text": "The open source \ncodesigndoc\n\ntool runs a clean Xcode/Xamarin Studio Archive \non your Mac\n, and analyzes the generated archive file. It collects the code signing settings that Xcode or Xamarin Studio used during the archive process, and prints the list of the required code signing files. You can also search for, export and upload these files using \ncodesigndoc\n.\n\n\nCollecting the files with codesigndoc\n\u2693\n\n\n\n\n\n\nOpen the \nTerminal\n.\n\n\n\n\n\n\nEnter the appropriate one-liner command, depending on your project type.\n\n\n\n\n\n\nFor an \nXcode\n project:\n\n\nbash -l -c \n$(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xcode.sh)\n\n\n\n\n\n\n\nFor a \nXamarin\n project:\n\n\nbash -l -c \n$(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xamarin.sh)\n\n\n\n\n\n\n\n\n\n\n\nOpen your \nFinder.app\n and drag-and-drop your project's \n.xcodeproj\n or \n.xcworkspace\n file into the command line in your \nTerminal\n.\n\n\n\n\n\n\nUploading the files to Bitrise with codesigndoc\n\u2693\n\n\n\n\n\n\nOnce the code signing files are collected, \ncodesigndoc\n will ask if you wish to upload the files to Bitrise:\n\n\nDo you want to upload the provisioning profiles and certificates to Bitrise? [yes/no] :\n\n\n\nIf you wish to upload the files with \ncodesigndoc\n, type \nyes\n and press \nEnter\n.\n\n\n\n\n\n\nProvide your Bitrise access token.\n\n\nPlease copy your personal access token to Bitrise.\n(To acquire a Personal Access Token for your user, sign in with that user on bitrise.io,\ngo to your Account Settings page, and select the Security tab on the left side.) :\n\n\n\n\n\n\n\nSelect the Bitrise project as a target for the collected files:\n\n\nFetching your application list from Bitrise...\nSelect the app which you want to upload the provisioning profiles\nPlease select from the list:\n\n\n\n\n\n\n\nThat's all, you are done!\n\n\nIf you wish to use automatic provisioning with our \niOS Auto Provisioning\n step, you only need to collect the certificate file(s). You can run \ncodesigndoc scan\n with the \n--certs-only\n flag to do that.\n\n\nYou can also install and run \ncodesigndoc\n manually. For more information, check out the \ntool's Readme\n!\n\n\n\n\nTroubleshooting: ensure the correct state of the code\n\n\nYou get the most accurate result if you run \ncodesigndoc\n on the same state of your\nrepository/code which is available after a clean \ngit clone\n, as that will\nbe the state of the code after the build server checks it out (for example,\nyou might have files on your Mac which are in \n.gitignore\n, so it exists\non your Mac but not in the repository or after a \ngit clone\n on a new Mac).\n\n\nSo, for the best results, we recommend you to:\n1. \nDo a clean \ngit clone\n of the repository\n (into a new directory) on your Mac.\n\n\n\n\nRun \ncodesigndoc\n in this directory (not in the directory\n   where you usually work on the project).\n\n\n\n\n\n\n\n\nTroubleshooting: make sure you can export an IPA from Xcode.app\n\n\nIt's also advised to do a full Archive + Export (until you get a signed \n.ipa\n)\nof your project from \nXcode.app\n first, and run \ncodesigndoc\n \nafter that\n.\nThe reason is that \nXcode.app\n might download or update profiles in the background\nduring the IPA export. If you run \ncodesigndoc\n after you exported an \n.ipa\n\nfrom Xcode, \ncodesigndoc\n will able to collect all the files.", 
            "title": "Collecting and exporting code signing files with codesigndoc"
        }, 
        {
            "location": "/code-signing/ios-code-signing/collecting-files-with-codesigndoc/#collecting-the-files-with-codesigndoc", 
            "text": "Open the  Terminal .    Enter the appropriate one-liner command, depending on your project type.    For an  Xcode  project:  bash -l -c  $(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xcode.sh)    For a  Xamarin  project:  bash -l -c  $(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xamarin.sh)      Open your  Finder.app  and drag-and-drop your project's  .xcodeproj  or  .xcworkspace  file into the command line in your  Terminal .", 
            "title": "Collecting the files with codesigndoc"
        }, 
        {
            "location": "/code-signing/ios-code-signing/collecting-files-with-codesigndoc/#uploading-the-files-to-bitrise-with-codesigndoc", 
            "text": "Once the code signing files are collected,  codesigndoc  will ask if you wish to upload the files to Bitrise:  Do you want to upload the provisioning profiles and certificates to Bitrise? [yes/no] :  If you wish to upload the files with  codesigndoc , type  yes  and press  Enter .    Provide your Bitrise access token.  Please copy your personal access token to Bitrise.\n(To acquire a Personal Access Token for your user, sign in with that user on bitrise.io,\ngo to your Account Settings page, and select the Security tab on the left side.) :    Select the Bitrise project as a target for the collected files:  Fetching your application list from Bitrise...\nSelect the app which you want to upload the provisioning profiles\nPlease select from the list:    That's all, you are done!  If you wish to use automatic provisioning with our  iOS Auto Provisioning  step, you only need to collect the certificate file(s). You can run  codesigndoc scan  with the  --certs-only  flag to do that.  You can also install and run  codesigndoc  manually. For more information, check out the  tool's Readme !   Troubleshooting: ensure the correct state of the code  You get the most accurate result if you run  codesigndoc  on the same state of your\nrepository/code which is available after a clean  git clone , as that will\nbe the state of the code after the build server checks it out (for example,\nyou might have files on your Mac which are in  .gitignore , so it exists\non your Mac but not in the repository or after a  git clone  on a new Mac).  So, for the best results, we recommend you to:\n1.  Do a clean  git clone  of the repository  (into a new directory) on your Mac.   Run  codesigndoc  in this directory (not in the directory\n   where you usually work on the project).     Troubleshooting: make sure you can export an IPA from Xcode.app  It's also advised to do a full Archive + Export (until you get a signed  .ipa )\nof your project from  Xcode.app  first, and run  codesigndoc   after that .\nThe reason is that  Xcode.app  might download or update profiles in the background\nduring the IPA export. If you run  codesigndoc  after you exported an  .ipa \nfrom Xcode,  codesigndoc  will able to collect all the files.", 
            "title": "Uploading the files to Bitrise with codesigndoc"
        }, 
        {
            "location": "/code-signing/ios-code-signing/ios-auto-provisioning/", 
            "text": "Manage your code signing files on \nbitrise.io\n. You can use iOS automatic provisioning to automatically generate the required Provisioning Profiles for your project.\n\n\nWith automatic provisioning, the \niOS Auto Provision\n step will manage the Provisioning Profiles. You only have to upload the .p12 certificate files manually to \nbitrise.io\n.\n\n\n\n\nUpload all signing certificates for your project\n\n\nWe strongly recommend uploading \nBOTH\n the development and distribution signing certificates for your project. Without the different types of certificates, you will not be able to generate different types of signed IPAs.\n\n\n\n\nBefore setting up automatic provisioning in your workflow, make sure that:\n\n\n\n\nyou collected the required files with \ncodesigndoc\n. You can also upload the distribution and development certificates with the tool!\n\n\nyou have at least \nAdmin\n role in the developer portal team.\n\n\nyour Apple Developer account is connected to bitrise.io\n.\n\n\nApple Developer Portal integration to your Bitrise project is enabled.\n\n\n\n\n\n\nXcode Automatically manage signing option\n\n\nThe \niOS Auto Provision\n step can automatically manage profiles even if the iOS project uses Xcode's\n\nAutomatically manage signing\n option, introduced in Xcode 8. The step can detect if the provided iOS\nproject uses \nAutomatically manage signing\n option or not. Then it will download the Xcode managed profiles which are needed to sign your project and\nwill install them together with the provided certificates.\n\n\n\n\nOnce you are ready, proceed to uploading your files and setting up your workflow:\n\n\n\n\n\n\nOpen your app on your \nDashboard\n.\n\n\n\n\n\n\nSelect the \nWorkflow Editor\n tab.\n\n\n\n\n\n\nSelect the \nCode Signing\n tab.\n\n\n\n\n\n\nMake sure you have the .p12 certificate files uploaded. If not, add the .p12 files in the \nAdd the private key (.p12) for signing\n field.\n\n\n\n\n\n\nProvisioning Profile file extensions\n\n\nFor a MacOS project, the Provisioning Profile file extension is \n.provisionprofile\n; for an iOS project, the file extension is \n.mobileprovision\n.\n\n\n\n\n\n\n\n\nMake sure that you do \nNOT\n have the \nCertificate and profile installer\n step in your Workflow. If you have both \niOS Auto Provision\n and \nCertificate and profile installer\n steps in your Workflow, your build will fail.\n\n\n\n\n\n\nAdd the \niOS Auto Provision\n step to your app's Workflow. You can check it on the \nWorkflow\n tab of the \nWorkflow Editor\n.\n\n\nPlease note that this step must come \nAFTER\n any dependency installer step in your workflow, such as \nRun CocoaPods install\n or \nCarthage\n. Make sure that you do \nNOT\n modify your Xcode project between the \niOS Auto Provision\n and the \nXcode Archive \n Export for iOS\n steps. For example, do not change the bundle ID after the \niOS Auto Provision\n step.\n\n\n  \n\n\n\n\n\n\nFill the required inputs of the step.\n\n\n\n\nThe Developer Portal team id\n - find this on the \nMembership Details page of your Apple Developer Portal account\n\n\nDistribution type\n - make sure its value matches the value of the \nSelect method for export\n input in the \nXcode Archive \n Export for iOS step\n.\n\n\nScheme\n - you can restrict which targets to process.\n\n\n\n\n\n\n\n\n\n\nTroubleshooting: missing Distribution signing files\n\n\nIf \ncodesigndoc\n does not pick up one or more distribution .p12 files,\nyou can export those manually from the \nKeychain Access\n app, just like you would when you\ntransfer these files between Macs.\n\n\nBut \neven if \ncodesigndoc\n does not find\nall the files, you should upload all the files collected by \ncodesigndoc\n - except the Provisioning Profile files!\n\nThe base files collected by \ncodesigndoc\n are essential for your project's\ncode signing: without those it's not possible to create a signed IPA\nfor the project!", 
            "title": "Managing iOS code signing files - automatic provisioning"
        }, 
        {
            "location": "/code-signing/ios-code-signing/ios-manual-provisioning/", 
            "text": "Manage your code signing files on \nbitrise.io\n. With manual provisioning, you can collect your Provisioning Profiles and .p12 certificates with our \ncodesigndoc\n tool and then upload them manually or by using the tool.\n\n\n\n\nXcode Automatically manage signing option\n\n\nWe support using Xcode's\n\nAutomatically manage signing\n option, introduced in Xcode 8, with your project. In this case, create an IPA of the desired type on your local machine to let Xcode generate the required profiles and then codesigndoc can collect these. If your project changes and Xcode re-generates the profiles, you will need to re-upload these profiles to Bitrise as well.\n\n\n\n\nIf you collected all the necessary files with the codesigndoc tool, proceed to uploading them and setting up your workflow. In this example, we'll be uploading the code signing files manually - however, you can do this with the codesigndoc tool, too!\n\n\n\n\n\n\nOpen your app on your \nDashboard\n.\n\n\n\n\n\n\nSelect the \nWorkflow Editor\n tab.\n\n\n\n\n\n\nSelect the \nCode Signing\n tab.\n\n\n\n\n\n\nMake sure that the Provisioning Profile files and the .p12 files are uploaded. If not, add them in the \nAdd Provisioning Profile(s)\n and the \nAdd the private key (.p12) for signing\n fields, respectively.\n\n\n\n\n\n\nProvisioning Profile file extensions\n\n\nFor a MacOS project, the Provisioning Profile file extension is \n.provisionprofile\n; for an iOS project, the file extension is \n.mobileprovision\n.\n\n\n\n\n\n\n\n\nMake sure you have the \nCertificate and profile installer\n step in your app's Workflow. You can check it on the \nWorkflow\n tab of the \nWorkflow Editor\n.\n\n\nPlease note that these steps must be \nBEFORE\n the steps that archive and export your project (for example, \nXcode Archive \n Export for iOS\n) in your workflow.\n\n\n\n\n\n\n\n\n\n\nTroubleshooting: missing Distribution signing files\n\n\nIf \ncodesigndoc\n does not pick up one or more distribution .p12 files and/or Provisioning Profile(s),\nyou can export those manually (.p12 from \nKeychain Access\n app, Provisioning Profiles from\n\nApple Developer Portal\n), just like you would when you\ntransfer these files between Macs.\n\n\nBut \neven if \ncodesigndoc\n does not find\nall the files, you should upload all the files collected by \ncodesigndoc\n!\n\nThe base files collected by \ncodesigndoc\n are essential for your project's\ncode signing: without those it's not possible to create a signed IPA\nfor the project!", 
            "title": "Managing iOS code signing files - manual provisioning"
        }, 
        {
            "location": "/code-signing/ios-code-signing/create-signed-ipa-for-xcode/", 
            "text": "You can easily create a signed IPA for your Xamarin project with Bitrise. All you need to do is set the relevant inputs of our \nXamarin Archive\n step!\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the required steps in your workflow to manage code your signing files:\n\n\nCertificate and profile installer\n if you uploaded your Provisioning Profiles manually.\n\n\niOS Auto Provisioning\n if you connected your Bitrise account to your Apple Developer account for automatic provisioning.\n\n\n\n\n\n\n\n\n\n\nIf you're all set, proceed to setting up IPA export in your workflow:\n\n\n\n\n\n\nMake sure you have the \nXcode Archive for iOS\n step in the app's Workflow Editor, depending on your project type. Select your step.\n\n\n\n\n\n\nSet the \nSelect method for export\n input of the step to the type of code signing you want to use.\n\n\n\n\nIf you use automatic provisioning, make sure it matches the value of the \nDistribution type\n input of the \niOS Auto Provisioning\n step. The options are:\n\n\n\n\n\n\nauto-detect\n - please note that this option is deprecated and will be removed. We do not recommend using it.\n\n\n\n\n\n\napp-store\n\n\n\n\n\n\nad-hoc\n\n\n\n\n\n\nenterprise\n\n\n\n\n\n\ndevelopment\n.\n\n\n\n\n\n\n\n\n\n\nSave the Workflow, and start a new build.\n\n\n\n\n\n\nThat's all. Xcode will auto select the right signing files based on your project's Bundle ID and\nTeam ID settings, and the Export Method you set.\n\n\nIf you want to sign the IPA with a different team's code signing files (e.g.\nif you use your company's code signing for internal builds, but your client's\ncode signing files for App Store distribution), all you have to do is to set\nthe \nThe Developer Portal team to use for this export\n option as well (in addition\nto the \nSelect method for export\n).", 
            "title": "Creating a signed .ipa for Xcode projects"
        }, 
        {
            "location": "/code-signing/ios-code-signing/create-signed-ipa-for-xamarin/", 
            "text": "You can easily create a signed IPA for your Xamarin project with Bitrise. All you need to do is set the relevant inputs of our \nXamarin Archive\n step!\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the \nCertificate and profile installer\n step in your workflow.\n\n\n\n\n\n\nIf you're all set, proceed to setting up IPA export in your workflow:\n\n\n\n\n\n\nMake sure that you have the \nXamarin Archive\n step in the app's Workflow Editor and select it.\n\n\n\n\n\n\nSet the \nXamarin solution configuration\n input of the step to the Xamarin project Configuration you want to use (for example, \nRelease\n).\n\n\n\n\n\n\nSet the \nXamarin solution platform\n input to \niPhone\n.\n\n\nYou can control the code signing type in your Xamarin project by setting the\ncode signing configurations in Xamarin Studio.\n\n\n\n\n\n\n\n\nIf you wish to use more than one code signing type (for example, to create both Ad-hoc and App Store signed apps), create more than one \nRelease\n configuration in Xamarin Studio. Set the separate configurations to the types you want to use.\n\n\n\n\nTip: copy/clone an existing Release configuration\n\n\nYou can \nCopy\n the existing\n\nRelease\n configuration in Xamarin Studio, to have an identical base configuration,\nwhere you only change the code signing settings. For example,\n\nCopy\n the \nRelease|iPhone\n configuration with the name \nReleaseAppStore\n,\nset the code signing to App Store for this \nReleaseAppStore\n configuration,\nand specify this configuration as the \nXamarin solution configuration\n\ninput of the \nXamarin Archive\n step.\n\n\n\n\n\n\nChanging code signing configurations in a Xamarin project\n\n\nDon't forget to run \ncodesigndoc\n again if you change code signing\nconfigurations in your Xamarin project, or to manually collect\nand upload the signing files required for the configurations\nyou want to use!", 
            "title": "Creating a signed .ipa for Xamarin projects"
        }, 
        {
            "location": "/code-signing/ios-code-signing/resigning-an-ipa/", 
            "text": "During the development of your iOS app you will need multiple types of distributions for different purposes, such as internal testing or deployment to the App Store. The good news is that this does not require setting up two separate workflows on \nbitrise.io\n.\n\n\n\n\nBefore you start\n\n\nYou need to:\n\n\n\n\nupload different types of .p12 certificates (for example, developer and distribution certificates)\n\n\nupload the associated Provisioning Profiles (or managing them automatically with the \niOS Auto Provisioning\n step)\n\n\n\n\n\n\nIf all your code signing files are in place, proceed to setting up your workflow. In this example we'll be setting up a workflow to create two signed .ipa files: one with the \ndevelopment\n and one with the \napp-store\n export method.\n\n\n\n\n\n\nMake sure you have the \nXcode Archive \n Export for iOS\n step in your workflow, and select it.\n\n\nPlease note that this step must come \nAFTER\n either the \nCertificate and profile installer\n or the \niOS Auto Provisioning\n step in your workflow.\n\n\n\n\n\n\nIn the list of input variables, navigate to \nSelect method for export\n and select \ndevelopment\n from the dropdown menu.\n\n\n\n\n\n\n\n\nAdd the \nExport iOS and tvOS Xcode archive\n step to your workflow.\n\n\n\n\n\n\nIn the list of input variables, navigate to \nSelect method for export\n and select \napp-store\n from the dropdown menu.\n\n\n\n\n\n\n\n\nAnd you're done! Feel free to add multiple \nExport iOS and tvOS Xcode archive\n steps to your workflow to create multiple different signed .ipa files if necessary.", 
            "title": "Re-signing an .ipa"
        }, 
        {
            "location": "/code-signing/ios-code-signing/ionic-cordova-code-signing/", 
            "text": "Naturally, Bitrise supports iOS applications built with either \nIonic\n or \nCordova\n. However, the code signing process is slightly different compared to a \"native\" Xcode project.\n\n\nBitrise supports both manual and automatic provisioning for Ionic and Cordova apps as well - and once again, the processes are somewhat different.\n\n\nIonic/Cordova code signing with manual provisioning\n\u2693\n\n\n\n\n\n\nGenerate the native Xcode project locally from your Ionic or Cordova project by calling \ncordova platform add ios\n or \nionic cordova platform add ios\n.\n\n\n\n\n\n\nUse our \ncodesigndoc\n tool to \ncollect the code signing files\n.\n\n\n\n\n\n\nUpload the files to \nbitrise.io\n.\n\n\nYou can do this either on the website UI or with the \ncodesigndoc\n tool itself.\n\n\n\n\n\n\n\n\nMake sure you have the \nCertificate and profile installer\n step in your workflow.\n\n\n\n\n\n\nAdd the \nGenerate cordova build configuration\n step to your Workflow. It must come after the \nCertificate and profile installer\n step.\n\n\n\n\n\n\nFill in the required input for the step. Please note that both the \nCode Signing Identity\n and the \nProvisioning Profile\n are required inputs for iOS apps even though they are not marked as such.\n\n\n\n\n\n\nBuild configuration\n: you can set it to either \ndebug\n or \nrelease\n.\n\n\nCode Sign Identity\n: enter a Developer or a Distribution identity.\n\n\nProvisioning Profile\n: enter the appropriate Provisioning Profile.\n\n\nPackaging Type\n: this controls what type of build is generated by Xcode. Set the type of code signing you need.\n\n\n\n\n\n\n\n\nAdd the \nCordova archive\n or the \nIonic archive\n step to your workflow.\n\n\n\n\n\n\nFill in the required inputs.\n\n\n\n\nThe \nPlatform\n input needs to be set to: \ndevice\n.\n\n\nThe \nBuild command configuration\n input must match the \nBuild configuration\n input of the \nGenerate cordova build configuration\n step.\n\n\n\n\nThis step must come after the \nGenerate cordova build configuration\n step in the workflow.\n\n\n\n\n\n\nRun your build!  \n\n\n\n\n\n\nIonic/Cordova code signing with auto provisioning\n\u2693\n\n\n\n\n\n\nMake sure your .p12 signing certificates are uploaded to \nbitrise.io\n.\n\n\nIf you use \ncodesigndoc\n to collect the files, note that you can tell the tool to export only the certificates, by calling:\n\n\ncodesigndoc scan --certs-only xcode\n\n\n\ncodesigndoc\n can also upload the files to the website, or you can do that manually.\n\n\n\n\n\n\nAdd the \nCordova prepare\n or the \nIonic prepare\n step to your Workflow. These steps call the \nplatform rm\n and \nplatform add\n commands.\n\n\n\n\n\n\nAdd the \niOS Auto Provision\n step to your workflow. Please make sure it's the latest version!\n\n\nThe step will export:\n\n\n\n\nthe project's development team\n\n\nthe installed codesign identity's name\n\n\nthe installed provisioning profile.\n\n\n\n\nThese will be used by the \nGenerate cordova build configuration\n step.\n\n\n\n\nDo not use both code signing steps in your workflow\n\n\nIf you have both the \nCertificate and profile installer\n and the \niOS Auto Provisioning\n steps in your workflow, your build will fail.\n\n\n\n\n\n\n\n\nAdd the \nGenerate cordova build configuration\n step to your Workflow. Configure the step to use the code signing settings exported by the \niOS Auto Prevision\n step:\n\n\n\n\nDevelopment distribution example\n\n\n- generate-cordova-build-configuration:\n    inputs:\n    - development_team: $BITRISE_DEVELOPER_TEAM\n    - package_type: development\n    - code_sign_identity: $BITRISE_DEVELOPMENT_CODESIGN_IDENTITY\n    - provisioning_profile: $BITRISE_DEVELOPMENT_PROFILE\n    - configuration: debug\n\n\n\n\n\n\n\nProduction distribution example\n\n\n- generate-cordova-build-configuration:\n    inputs:\n    - development_team: $BITRISE_DEVELOPER_TEAM\n    - package_type: app-store\n    - code_sign_identity: $BITRISE_PRODUCTION_CODESIGN_IDENTITY\n    - provisioning_profile: $BITRISE_PRODUCTION_PROFILE\n    - configuration: release\n\n\n\n\n\n\n\n\n\nAdd the \nCordova Archive\n or the \nIonic Archive\n step to your workflow.\n\n\n\n\n\n\nFill in the required inputs.\n\n\n\n\nThe \nPlatform\n input needs to be set to: \ndevice\n.\n\n\nThe \nBuild command configuration\n input must match the \nBuild configuration\n input of the \nGenerate cordova build configuration\n step.\n\n\n\n\n\n\n\n\n\n\nSet the \nShould remove platforms as prepare step?\n to \nfalse\n. This is crucial: it ensures the step will not remove and re-add the platform of the native projects generated in the \nCordova prepare\n or the \nIonic prepare\n step.\n\n\n\n\n\n\nRun your build!", 
            "title": "Code signing with Ionic and Cordova projects"
        }, 
        {
            "location": "/code-signing/ios-code-signing/ionic-cordova-code-signing/#ioniccordova-code-signing-with-manual-provisioning", 
            "text": "Generate the native Xcode project locally from your Ionic or Cordova project by calling  cordova platform add ios  or  ionic cordova platform add ios .    Use our  codesigndoc  tool to  collect the code signing files .    Upload the files to  bitrise.io .  You can do this either on the website UI or with the  codesigndoc  tool itself.     Make sure you have the  Certificate and profile installer  step in your workflow.    Add the  Generate cordova build configuration  step to your Workflow. It must come after the  Certificate and profile installer  step.    Fill in the required input for the step. Please note that both the  Code Signing Identity  and the  Provisioning Profile  are required inputs for iOS apps even though they are not marked as such.    Build configuration : you can set it to either  debug  or  release .  Code Sign Identity : enter a Developer or a Distribution identity.  Provisioning Profile : enter the appropriate Provisioning Profile.  Packaging Type : this controls what type of build is generated by Xcode. Set the type of code signing you need.     Add the  Cordova archive  or the  Ionic archive  step to your workflow.    Fill in the required inputs.   The  Platform  input needs to be set to:  device .  The  Build command configuration  input must match the  Build configuration  input of the  Generate cordova build configuration  step.   This step must come after the  Generate cordova build configuration  step in the workflow.    Run your build!", 
            "title": "Ionic/Cordova code signing with manual provisioning"
        }, 
        {
            "location": "/code-signing/ios-code-signing/ionic-cordova-code-signing/#ioniccordova-code-signing-with-auto-provisioning", 
            "text": "Make sure your .p12 signing certificates are uploaded to  bitrise.io .  If you use  codesigndoc  to collect the files, note that you can tell the tool to export only the certificates, by calling:  codesigndoc scan --certs-only xcode  codesigndoc  can also upload the files to the website, or you can do that manually.    Add the  Cordova prepare  or the  Ionic prepare  step to your Workflow. These steps call the  platform rm  and  platform add  commands.    Add the  iOS Auto Provision  step to your workflow. Please make sure it's the latest version!  The step will export:   the project's development team  the installed codesign identity's name  the installed provisioning profile.   These will be used by the  Generate cordova build configuration  step.   Do not use both code signing steps in your workflow  If you have both the  Certificate and profile installer  and the  iOS Auto Provisioning  steps in your workflow, your build will fail.     Add the  Generate cordova build configuration  step to your Workflow. Configure the step to use the code signing settings exported by the  iOS Auto Prevision  step:   Development distribution example  - generate-cordova-build-configuration:\n    inputs:\n    - development_team: $BITRISE_DEVELOPER_TEAM\n    - package_type: development\n    - code_sign_identity: $BITRISE_DEVELOPMENT_CODESIGN_IDENTITY\n    - provisioning_profile: $BITRISE_DEVELOPMENT_PROFILE\n    - configuration: debug    Production distribution example  - generate-cordova-build-configuration:\n    inputs:\n    - development_team: $BITRISE_DEVELOPER_TEAM\n    - package_type: app-store\n    - code_sign_identity: $BITRISE_PRODUCTION_CODESIGN_IDENTITY\n    - provisioning_profile: $BITRISE_PRODUCTION_PROFILE\n    - configuration: release     Add the  Cordova Archive  or the  Ionic Archive  step to your workflow.    Fill in the required inputs.   The  Platform  input needs to be set to:  device .  The  Build command configuration  input must match the  Build configuration  input of the  Generate cordova build configuration  step.      Set the  Should remove platforms as prepare step?  to  false . This is crucial: it ensures the step will not remove and re-add the platform of the native projects generated in the  Cordova prepare  or the  Ionic prepare  step.    Run your build!", 
            "title": "Ionic/Cordova code signing with auto provisioning"
        }, 
        {
            "location": "/code-signing/ios-code-signing/protecting-your-code-signing-files/", 
            "text": "Protecting your code signing files\n\u2693\n\n\nYou can set your code signing files to \nProtected\n mode: this means they cannot be downloaded from your \nbitrise.io\n account. Your builds will be able to use these protected files, of course. But if you make the file protected, no one will be able to reveal it and the only way to overwrite it is by deleting the current one and creating a new one.\n\n\n\n\n\n\nSelect your App on your \nDashboard\n.\n\n\n\n\n\n\nSelect the \nWorkflow\n tab.\n\n\n\n\n\n\nSelect the \nCode Signing\n tab.\n\n\n\n\n\n\nLocate the file you wish to make protected and open the dropdown menu.\n\n\n\n\n\n\n\n\nSelect the \nMake protected\n option.\n\n\n\n\n\n\nA pop-up window will warn you that this change is irreversible once you confirm it. You do not need to separately save your changes.\n\n\nOnce you are done, your only option in the file's dropdown menu will be \nDelete\n.", 
            "title": "Protecting your code signing files"
        }, 
        {
            "location": "/code-signing/ios-code-signing/protecting-your-code-signing-files/#protecting-your-code-signing-files", 
            "text": "You can set your code signing files to  Protected  mode: this means they cannot be downloaded from your  bitrise.io  account. Your builds will be able to use these protected files, of course. But if you make the file protected, no one will be able to reveal it and the only way to overwrite it is by deleting the current one and creating a new one.    Select your App on your  Dashboard .    Select the  Workflow  tab.    Select the  Code Signing  tab.    Locate the file you wish to make protected and open the dropdown menu.     Select the  Make protected  option.    A pop-up window will warn you that this change is irreversible once you confirm it. You do not need to separately save your changes.  Once you are done, your only option in the file's dropdown menu will be  Delete .", 
            "title": "Protecting your code signing files"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/", 
            "text": "You'll need two kinds of files to sign your app: Certificates and Provisioning Profiles.\n\n\nGenerate a Code Signing Certificate\n\u2693\n\n\nThe certificates - development or distribution - are the guarantee that you, the named developer, built this code, that you are a member of the developer program, and that Apple have issued you with a certificate to do so.\n\n\nTo get a certificate, you need to generate a Certificate Signing Request with Keychain Access and send it to Apple. This will create a public/private key for you if you don't have one already. Apple will then verify the information, and create a certificate for you.\n\n\nGenerate a Code Signing Certificate using Xcode\n\u2693\n\n\nFirst you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to step 6.\n\n\n\n\nStart Xcode\n\n\nSelect Xcode \n Preferences from the navigation bar.\n\n\nAt the top of the window select \nAccounts\n.\n\n\nClick on the \n+\n on the lower left corner and select \nAdd Apple ID...\n\n\n\n\nA dialog will appear. Add your Apple ID and your password, then select \nSign in\n. If you don't have an account you can create your Apple ID by selecting \nCreate Apple ID\n.\n\n\n\nSelect your Apple ID and your team from the right side bar, then click on \nView Details...\n.\n\n\nA dialog will appear where you will see your code signing identities and the provisioning profiles.\n\n\n\nUnder the signing identities locate the \niOS Development\n and \niOS Distribution\n profiles. If you have not created them you will see a \nCreate\n button next to them. Simply select it and Xcode will issue and download your code signing identities for you.\n\n\n\n\n\n\nWarning\n\n\nIf you already have Code Signing Identities issued, you will see a \nReset\n button next to them. You can issue new certificates with it, that Xcode will generate and download, however note that this will invalidate your previous certificate, so only do this if you've lost those files or if you know what you are doing!\n\n\n\n\nGenerate a Code Signing Certificate manually\n\u2693\n\n\n\n\nOpen your \nKeychain Access\n app on macOS.\n\n\nSelect \nKeychain Access\n \n \nCertificate Assistant\n \n \nRequest a Certificate From a Certificate Authority...\n\n\nFill in the \nUser's Email Address\n and the \nCommon Name\n and select \nSaved to Disk\n. Click on \nContinue\n and save the generated \ncertSigningRequest\n file locally.\n\n\n\nGo to \nhttps://developer.apple.com\n and log in to your account.\n\n\nSelect \nCertificates, IDs \n Profiles\n from the left sidebar.\n\n\nGo to \nCertificates\n and click on the \n+\n button on the top right corner.\n\n\nSelect \niOS App Development\n and click Continue.\n\n\nOn the next page you see the instructions for creating the \ncertSigningRequest\n file. Click continue.\n\n\nUpload the created \ncertSigningRequest\n to the form and click continue. It will generate your code signing certificate for you.\n\n\nDownload the certificate and double click to install it. Once installed it will be added to your \nKeychain Access\n app.\n\n\n\n\nGenerate a Provisioning Profile\n\u2693\n\n\nProvisioning is the process of preparing and configuring an app to launch on devices and to use app services. Development Provisioning Profiles holds the device identifiers ( UUID ) that is eligible to run your app. Distribution Provisioning Profiles can include App Store profiles, that lets you distribute your app to the App Store and Ad-hoc profiles are good for distributing to your testers.\n\n\nGenerate a Provisioning Profile with Xcode\n\u2693\n\n\nXcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an \nexplicit App ID\n that only matches one unique bundle identifier or a \nwildcard App ID\n that can match multiple ones.\n\n\nXcode will also create a \nTeam Provisioning Profile\n for your project automatically, so you can start deploying to your device automatically.\n\n\nIf you hit any issues you should make sure that the device is eligible, for example if the device doesn't match the deployment target you will get an error.\n\n\nAlso make sure that your app is connected to the correct Team.\n\n\n\n\nSelect your project file from Xcode's project navigator\n\n\nGo to the \nSigning\n section and under the \nTeam\n select your correct team.\n\n\n\n\n\n\n\nNote\n\n\nIf you hit any issues and can't resolve it move to the manual step and set up Provisioning Profiles following the documentation.\n\n\n\n\n\n\nNote\n\n\nTo setup a distribution Provisioning Profile, go ahead with the manual setup.\n\n\n\n\nDownload a Provisioning Profile with Xcode\n\u2693\n\n\nIf you have already created the Provisioning Profile, you can do the following.\n\n\n\n\nStart Xcode\n\n\nSelect Xcode \n Preferences from the navigation bar.\n\n\nAt the top of the window select \nAccounts\n.\n\n\nSelect your Apple ID and your team, then select \nDownload Manual Profiles\n.\n\n\nGo to \n~/Library/MobileDevice/Provisioning Profiles/\n and your profiles should be there.\n\n\n\n\nGenerate a Provisioning Profile manually\n\u2693\n\n\nSetup an App ID\n\u2693\n\n\n\n\nIf you haven't already created an App ID for your project, go to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Identifiers \n App IDs\n\n\nIn the \nApp ID Description\n add a recognizable name for your App ID\n\n\nSelect \nExplicit App ID\n and add your bundle identifier to the field.\n\n\nSelect any additional \nApp Services\n that you need.\n\n\nClick continue.\n\n\n\n\nGenerate a Provisioning Profile\n\u2693\n\n\n\n\nGo to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Provisioning Profiles \n All\n\n\nSelect the \n+\n from the top right corner.\n\n\nFor development select the correct project type under \nDevelopment\n, or for distribution select the correct one under \nDistribution\n and click continue.\n\n\nSelect the App ID you would like to use.\n\n\nSelect the certificates you wish to include in the Provisioning Profile. These certificates will be able to build with this profile; click continue.\n\n\nSelect all the devices you would like to use with this profile and click continue.\n\n\nName your Provisioning Profile and click continue.\n\n\nYour profile is generated. You can download it to your device and double click to install it on your Mac.\n\n\n\n\nDownload a Provisioning Profile\n\u2693\n\n\n\n\nGo to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Provisioning Profiles \n All\n\n\nFind the Provisioning Profile you are looking for from the list or use the search to filter.\n\n\nClick on the selected Provisioning Profile, this will expand the details.\n\n\nIf its status is invalid, you can click on the \nEdit\n button and save again.\n\n\nClick on the \nDownload\n button to download it and double click to install it on your Mac.\n\n\n\n\n[^1]: Screenshots from \nhttps://developer.apple.com/support", 
            "title": "Generating code signing files"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-code-signing-certificate", 
            "text": "The certificates - development or distribution - are the guarantee that you, the named developer, built this code, that you are a member of the developer program, and that Apple have issued you with a certificate to do so.  To get a certificate, you need to generate a Certificate Signing Request with Keychain Access and send it to Apple. This will create a public/private key for you if you don't have one already. Apple will then verify the information, and create a certificate for you.", 
            "title": "Generate a Code Signing Certificate"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-code-signing-certificate-using-xcode", 
            "text": "First you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to step 6.   Start Xcode  Select Xcode   Preferences from the navigation bar.  At the top of the window select  Accounts .  Click on the  +  on the lower left corner and select  Add Apple ID...   A dialog will appear. Add your Apple ID and your password, then select  Sign in . If you don't have an account you can create your Apple ID by selecting  Create Apple ID .  Select your Apple ID and your team from the right side bar, then click on  View Details... .  A dialog will appear where you will see your code signing identities and the provisioning profiles.  Under the signing identities locate the  iOS Development  and  iOS Distribution  profiles. If you have not created them you will see a  Create  button next to them. Simply select it and Xcode will issue and download your code signing identities for you.    Warning  If you already have Code Signing Identities issued, you will see a  Reset  button next to them. You can issue new certificates with it, that Xcode will generate and download, however note that this will invalidate your previous certificate, so only do this if you've lost those files or if you know what you are doing!", 
            "title": "Generate a Code Signing Certificate using Xcode"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-code-signing-certificate-manually", 
            "text": "Open your  Keychain Access  app on macOS.  Select  Keychain Access     Certificate Assistant     Request a Certificate From a Certificate Authority...  Fill in the  User's Email Address  and the  Common Name  and select  Saved to Disk . Click on  Continue  and save the generated  certSigningRequest  file locally.  Go to  https://developer.apple.com  and log in to your account.  Select  Certificates, IDs   Profiles  from the left sidebar.  Go to  Certificates  and click on the  +  button on the top right corner.  Select  iOS App Development  and click Continue.  On the next page you see the instructions for creating the  certSigningRequest  file. Click continue.  Upload the created  certSigningRequest  to the form and click continue. It will generate your code signing certificate for you.  Download the certificate and double click to install it. Once installed it will be added to your  Keychain Access  app.", 
            "title": "Generate a Code Signing Certificate manually"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-provisioning-profile", 
            "text": "Provisioning is the process of preparing and configuring an app to launch on devices and to use app services. Development Provisioning Profiles holds the device identifiers ( UUID ) that is eligible to run your app. Distribution Provisioning Profiles can include App Store profiles, that lets you distribute your app to the App Store and Ad-hoc profiles are good for distributing to your testers.", 
            "title": "Generate a Provisioning Profile"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-provisioning-profile-with-xcode", 
            "text": "Xcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an  explicit App ID  that only matches one unique bundle identifier or a  wildcard App ID  that can match multiple ones.  Xcode will also create a  Team Provisioning Profile  for your project automatically, so you can start deploying to your device automatically.  If you hit any issues you should make sure that the device is eligible, for example if the device doesn't match the deployment target you will get an error.  Also make sure that your app is connected to the correct Team.   Select your project file from Xcode's project navigator  Go to the  Signing  section and under the  Team  select your correct team.    Note  If you hit any issues and can't resolve it move to the manual step and set up Provisioning Profiles following the documentation.    Note  To setup a distribution Provisioning Profile, go ahead with the manual setup.", 
            "title": "Generate a Provisioning Profile with Xcode"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#download-a-provisioning-profile-with-xcode", 
            "text": "If you have already created the Provisioning Profile, you can do the following.   Start Xcode  Select Xcode   Preferences from the navigation bar.  At the top of the window select  Accounts .  Select your Apple ID and your team, then select  Download Manual Profiles .  Go to  ~/Library/MobileDevice/Provisioning Profiles/  and your profiles should be there.", 
            "title": "Download a Provisioning Profile with Xcode"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-provisioning-profile-manually", 
            "text": "", 
            "title": "Generate a Provisioning Profile manually"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#setup-an-app-id", 
            "text": "If you haven't already created an App ID for your project, go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Identifiers   App IDs  In the  App ID Description  add a recognizable name for your App ID  Select  Explicit App ID  and add your bundle identifier to the field.  Select any additional  App Services  that you need.  Click continue.", 
            "title": "Setup an App ID"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#generate-a-provisioning-profile_1", 
            "text": "Go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Provisioning Profiles   All  Select the  +  from the top right corner.  For development select the correct project type under  Development , or for distribution select the correct one under  Distribution  and click continue.  Select the App ID you would like to use.  Select the certificates you wish to include in the Provisioning Profile. These certificates will be able to build with this profile; click continue.  Select all the devices you would like to use with this profile and click continue.  Name your Provisioning Profile and click continue.  Your profile is generated. You can download it to your device and double click to install it on your Mac.", 
            "title": "Generate a Provisioning Profile"
        }, 
        {
            "location": "/code-signing/ios-code-signing/generating-code-signing-files/#download-a-provisioning-profile", 
            "text": "Go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Provisioning Profiles   All  Find the Provisioning Profile you are looking for from the list or use the search to filter.  Click on the selected Provisioning Profile, this will expand the details.  If its status is invalid, you can click on the  Edit  button and save again.  Click on the  Download  button to download it and double click to install it on your Mac.   [^1]: Screenshots from  https://developer.apple.com/support", 
            "title": "Download a Provisioning Profile"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/", 
            "text": "Exporting certificates using Xcode\n\u2693\n\n\n\n\nStart Xcode\n\n\nSelect Xcode \n Preferences from the navigation bar.\n\n\nAt the top of the window select \nAccounts\n.\n\n\nSelect your Apple ID and your team from the right side bar, then click on \nView Details...\n.\n\n\nA dialog will appear where you will see your code signing identities and the provisioning profiles.\n\n\nSelect the certificates and choose \nExport\n from the pop-up menu.\n\n\n\nEnter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it's not necessary.\n\n\nXcode will export the requested certificate in .p12 format.\n\n\n\n\nExporting manually\n\u2693\n\n\n\n\nStart Keychain Access.\n\n\nOn the top left sidebar select \nlogin\n and on the bottom left select \nMy Certificates\n.\n\n\nThis will list all your installed certificates and the associated private key.\n\n\nSelect the one that you would like to export and choose \nExport\n from the pop-up menu.\n\n\n\nEnter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it's not necessary.\n\n\nKeychain Access will export the requested certificate in .p12 format.\n\n\n\n\nExporting Provisioning Profiles\n\u2693\n\n\nExporting using Xcode\n\u2693\n\n\n\n\nStart Xcode\n\n\nSelect Xcode \n Preferences from the navigation bar.\n\n\nAt the top of the window select \nAccounts\n.\n\n\nSelect your Apple ID and your team from the right side bar, then click on \nView Details...\n.\n\n\nA dialog will appear where you will see your code signing identities and the provisioning profiles.\n\n\nLocate the profile that you are looking for under Provisioning Profiles.\n\n\nIf you don't have it installed on the system, click on the \nDownload\n button next to it.\n\n\nChoose \nShow in finder\n from the pop-up menu, that will show you the installed provisioning profile for you.\n\n\n\n\nExporting manually\n\u2693\n\n\n\n\nGo to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Provisioning Profiles \n All\n\n\nFind the Provisioning Profile you are looking for from the list or use the search to filter.\n\n\nClick on the selected Provisioning Profile, this will expand the details.\n\n\nIf its status is invalid, you can click on the \nEdit\n button and save again.\n\n\nClick on the \nDownload\n button to download it and double click to install on your macOS.\n\n\n\n\n\n\nNote\n\n\nYou can also locate all installed Provisioning Profiles at the following path: \n~/Library/MobileDevice/Provisioning Profiles/\n.\n\n\n\n\n[^1]: Screenshots from \nhttps://developer.apple.com/support", 
            "title": "Exporting code signing files without codesigndoc"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/#exporting-certificates-using-xcode", 
            "text": "Start Xcode  Select Xcode   Preferences from the navigation bar.  At the top of the window select  Accounts .  Select your Apple ID and your team from the right side bar, then click on  View Details... .  A dialog will appear where you will see your code signing identities and the provisioning profiles.  Select the certificates and choose  Export  from the pop-up menu.  Enter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it's not necessary.  Xcode will export the requested certificate in .p12 format.", 
            "title": "Exporting certificates using Xcode"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/#exporting-manually", 
            "text": "Start Keychain Access.  On the top left sidebar select  login  and on the bottom left select  My Certificates .  This will list all your installed certificates and the associated private key.  Select the one that you would like to export and choose  Export  from the pop-up menu.  Enter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it's not necessary.  Keychain Access will export the requested certificate in .p12 format.", 
            "title": "Exporting manually"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/#exporting-provisioning-profiles", 
            "text": "", 
            "title": "Exporting Provisioning Profiles"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/#exporting-using-xcode", 
            "text": "Start Xcode  Select Xcode   Preferences from the navigation bar.  At the top of the window select  Accounts .  Select your Apple ID and your team from the right side bar, then click on  View Details... .  A dialog will appear where you will see your code signing identities and the provisioning profiles.  Locate the profile that you are looking for under Provisioning Profiles.  If you don't have it installed on the system, click on the  Download  button next to it.  Choose  Show in finder  from the pop-up menu, that will show you the installed provisioning profile for you.", 
            "title": "Exporting using Xcode"
        }, 
        {
            "location": "/code-signing/ios-code-signing/exporting-code-signing-files/#exporting-manually_1", 
            "text": "Go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Provisioning Profiles   All  Find the Provisioning Profile you are looking for from the list or use the search to filter.  Click on the selected Provisioning Profile, this will expand the details.  If its status is invalid, you can click on the  Edit  button and save again.  Click on the  Download  button to download it and double click to install on your macOS.    Note  You can also locate all installed Provisioning Profiles at the following path:  ~/Library/MobileDevice/Provisioning Profiles/ .   [^1]: Screenshots from  https://developer.apple.com/support", 
            "title": "Exporting manually"
        }, 
        {
            "location": "/code-signing/ios-code-signing/code-signing-ios-frameworks/", 
            "text": "Developing iOS frameworks\n\u2693\n\n\nWhen you are developing an iOS framework you have to distribute a code signed version of your framework, however you don't need to sign it with your \nDistribution\n profile, the \nDeveloper\n profile will be enough.\nAfter distribution the framework will be re-codesigned by the frameworks' consumer during the code signing process.\n^1\n\n\nIf you attempt to build it without code signing Xcode won't produce a \n.framework\n file and you will receive the following error:\n\nCodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 10.2'", 
            "title": "Code signing iOS frameworks"
        }, 
        {
            "location": "/code-signing/ios-code-signing/code-signing-ios-frameworks/#developing-ios-frameworks", 
            "text": "When you are developing an iOS framework you have to distribute a code signed version of your framework, however you don't need to sign it with your  Distribution  profile, the  Developer  profile will be enough.\nAfter distribution the framework will be re-codesigned by the frameworks' consumer during the code signing process. ^1  If you attempt to build it without code signing Xcode won't produce a  .framework  file and you will receive the following error: CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 10.2'", 
            "title": "Developing iOS frameworks"
        }, 
        {
            "location": "/caching/about-caching/", 
            "text": "The caching will tar all the cached directories and dependencies and store them securely in Amazon S3.\nNote that if you store files which are downloaded from a CDN / cloud storage you might not see any improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as downloading\nit from its canonical CDN / cloud storage location.\nHowever Bitrise Caching still might help if you have reliability issues with the resource's, or dependency's canonical download location.\n\n\n\n\nCache Expiring\n\n\nThe Build Cache related to a \nspecific branch\n expires / is auto-deleted after 7 days,\n\nif there's no new build on that branch in the meantime\n.\n\n\nThis means that \nif you do builds on a specific branch every day\n (more frequently than a week),\n\nit'll never expire / will never be deleted automatically\n,\nbut if you don't start a build on that specific branch for more than 7 days then the related cache\nwill be removed, and your next build will run like the first time, when there was no cache for that branch yet.\n\n\n\n\nSetup\n\u2693\n\n\nAll you need to get started is adding two Steps to your Workflow:\n\n\n\n\nOne for downloading the previous cache (if any): \nCache:Pull\n\n\nOne for checking the state of the cache and uploading it if required: \nCache:Push\n\n\n\n\nYou should add the \nCache:Pull\n (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the \nGit Clone\n and the \nCocoaPods\n install steps.\nIf you intend to cache your \n./Pods\n directory you should not pull the cache before the \nGit Clone\n,\nbecause \nGit Clone\n will create the base directory for \n./Pods\n.\nBefore the \nGit Clone\n step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.\n\n\nThe \nCache:Push\n step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of \nCocoaPods\n you should put the \nCache:Push\n step anywhere after the \nCocoaPods\n install,\nbecause that's the step which generates, or updates the directory (\n./Pods\n) which is cached.\n\n\nExample build cache configurations\n\u2693\n\n\nYou can find example build cache configurations / guides at:\n\ndiscuss.bitrise.io/tags/build-cache\n\n\nDownloading and deleting caches\n\u2693\n\n\nYou can download and delete caches, for every branch which generated a cache,\non the \nSettings\n tab of the app, under the \nManage Build Caches\n section.\n\n\n\n\nDelete a single branch's cache\n\n\nIf you only want to delete the cache which is related to a single branch,\nyou should also delete the default branch's cache too!\nFor more detail see the\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\nsection.\n\n\n\n\n\n\nNote\n\n\nYou can see the size of the caches and the last time a given cache was used in the popup.\n\n\n\n\nTechnical notes\n\u2693\n\n\nThe Build Cache feature is split into two parts, the \nBuild Cache API\n and the \nSteps\n.\n\n\nThe \nBuild Cache API\n is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.\n\n\nThe \nSteps\n are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.\n\n\n\n\nAdvanced notes\n\n\n\n\nYou can create your own Cache steps\n\n\nYou can create and use your own Build Cache server and API\n\n\n\n\n\n\nThe cache might or might not be available\n\u2693\n\n\nYou should write your code in a way that it won't fail if the cache can't be accessed.\n\n\nThe cache is downloaded over the internet\n\u2693\n\n\nWhich means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.\n\n\nOne important note: storing a dependency in Bitrise Build Cache might help if you have \nreliability\n\nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited (\nexample: PhantomJS\n).\nCDN servers might have availability issues, like jCenter/Bintray. A few examples: \n#1\n, \n#2\n, \n#3\n.\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but \nit definitely can improve the reliability\n.\n\n\nThe cache is stored as one archive file\n\u2693\n\n\nSo if you have multiple paths you want to cache and any\nof the paths gets updated \nit'll update the whole cache archive\n,\nincluding all the paths you cache.\n\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\u2693\n\n\nThe build on a non default branch, to speed up things,\ncan (read-only) access the \nprimary\n branch's cache, until a successful\nbuild on the new branch. Once a build on the new branch\npushes a cache, new builds on that branch will get the branch's cache.\n\nCaches are stored and available for every branch separately.\n\n\n\n\nDefault branch\n\n\nYou can see which is your \ndefault branch\n on your\n\nbitrise.io\n app's \nSettings\n tab.", 
            "title": "About caching"
        }, 
        {
            "location": "/caching/about-caching/#setup", 
            "text": "All you need to get started is adding two Steps to your Workflow:   One for downloading the previous cache (if any):  Cache:Pull  One for checking the state of the cache and uploading it if required:  Cache:Push   You should add the  Cache:Pull  (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the  Git Clone  and the  CocoaPods  install steps.\nIf you intend to cache your  ./Pods  directory you should not pull the cache before the  Git Clone ,\nbecause  Git Clone  will create the base directory for  ./Pods .\nBefore the  Git Clone  step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.  The  Cache:Push  step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of  CocoaPods  you should put the  Cache:Push  step anywhere after the  CocoaPods  install,\nbecause that's the step which generates, or updates the directory ( ./Pods ) which is cached.", 
            "title": "Setup"
        }, 
        {
            "location": "/caching/about-caching/#example-build-cache-configurations", 
            "text": "You can find example build cache configurations / guides at: discuss.bitrise.io/tags/build-cache", 
            "title": "Example build cache configurations"
        }, 
        {
            "location": "/caching/about-caching/#downloading-and-deleting-caches", 
            "text": "You can download and delete caches, for every branch which generated a cache,\non the  Settings  tab of the app, under the  Manage Build Caches  section.   Delete a single branch's cache  If you only want to delete the cache which is related to a single branch,\nyou should also delete the default branch's cache too!\nFor more detail see the If a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache \nsection.    Note  You can see the size of the caches and the last time a given cache was used in the popup.", 
            "title": "Downloading and deleting caches"
        }, 
        {
            "location": "/caching/about-caching/#technical-notes", 
            "text": "The Build Cache feature is split into two parts, the  Build Cache API  and the  Steps .  The  Build Cache API  is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.  The  Steps  are the place where the \"magic\" happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.   Advanced notes   You can create your own Cache steps  You can create and use your own Build Cache server and API", 
            "title": "Technical notes"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-might-or-might-not-be-available", 
            "text": "You should write your code in a way that it won't fail if the cache can't be accessed.", 
            "title": "The cache might or might not be available"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-downloaded-over-the-internet", 
            "text": "Which means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.  One important note: storing a dependency in Bitrise Build Cache might help if you have  reliability \nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited ( example: PhantomJS ).\nCDN servers might have availability issues, like jCenter/Bintray. A few examples:  #1 ,  #2 ,  #3 .\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but  it definitely can improve the reliability .", 
            "title": "The cache is downloaded over the internet"
        }, 
        {
            "location": "/caching/about-caching/#the-cache-is-stored-as-one-archive-file", 
            "text": "So if you have multiple paths you want to cache and any\nof the paths gets updated  it'll update the whole cache archive ,\nincluding all the paths you cache.", 
            "title": "The cache is stored as one archive file"
        }, 
        {
            "location": "/caching/about-caching/#if-a-build-runs-on-a-branch-which-doesnt-have-a-cache-yet-itll-get-the-maindefault-branchs-cache", 
            "text": "The build on a non default branch, to speed up things,\ncan (read-only) access the  primary  branch's cache, until a successful\nbuild on the new branch. Once a build on the new branch\npushes a cache, new builds on that branch will get the branch's cache. Caches are stored and available for every branch separately.   Default branch  You can see which is your  default branch  on your bitrise.io  app's  Settings  tab.", 
            "title": "If a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache"
        }, 
        {
            "location": "/caching/caching-cocoapods/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-cocoapods-dependencies/193", 
            "title": "Caching Cocoapods"
        }, 
        {
            "location": "/caching/caching-gradle/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-gradle-dependencies/194", 
            "title": "Caching Gradle"
        }, 
        {
            "location": "/caching/caching-maven/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-maven-dependencies/195", 
            "title": "Caching Maven"
        }, 
        {
            "location": "/caching/caching-ruby-gems/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-ruby-gem-dependencies/196", 
            "title": "Caching Ruby GEMs"
        }, 
        {
            "location": "/bitrise-cli/", 
            "text": "Bitrise is a collection of tools and services to help you with the development\nand automation of your software projects, with a main focus on mobile apps.\n\n\nMost of this DevCenter describes things related to \nbitrise.io\n,\nthe hosted automation service, but the heart of Bitrise is the\n\nopen source Bitrise CLI / runner\n,\nwhich is responsible for interpreting the build configuration and executing it.\n\n\nThis open source runner is referred to as \nBitrise CLI\n or \nBitrise\n,\nand \nit's a tool which you can install and run on your own Mac/PC!\n\n\nThis section of the DevCenter is dedicated to this runner (\nBitrise CLI\n) and the\n\nbitrise.yml\n configuration format, \nthe things described here don't even require a\n\nbitrise.io\n account\n, the only requirement is that\nyou install the \nBitrise CLI\n on your Mac/PC.\n\n\n\n\nBitrise CLI on bitrise.io\n\n\nThe CLI you can install is exactly the same as what's used on \nbitrise.io\n.\nWhen a build starts on \nbitrise.io\n, a virtual machine\nis created for the build with the Bitrise CLI preinstalled,\nand once the virtual machine is ready, the build is performed through the Bitrise CLI.\n\n\n\n\nBitrise CLI - the open source, offline, automation runner\n\u2693\n\n\nTo run a Bitrise build on your machine, you can install our \nopen source runner\n\nand use the \nbitrise\n command to execute your \nworkflows\n locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nbitrise.yml - the configuration format\n\u2693\n\n\nThe configuration format of the \nBitrise CLI\n is referred to as \nbitrise.yml\n,\nas that's the expected file name the configuration should be saved with.\n\n\nTechnically the CLI can also accept the configuration in JSON format,\nand the file name can be changed too, but if you save the configuration\ninto a file named \nbitrise.yml\n, you can simply \nbitrise run\n in that directory,\nwithout specifying any configuration path, and the CLI will read the\nconfiguration from \nbitrise.yml\n automatically.\n\n\nStep Library (StepLib)\n\u2693\n\n\nThe StepLib is the collection of the build steps you can use in your\n\nbitrise.yml\n. The steps in the official \nBitrise StepLib\n\nare all open source, \nyou can write your own\n too and then share it with others!\nSee the \nstep-template\n for more information.\n\n\nYou can also create your own Step Library if you want to, but it's usually\neasier to just reference your steps with their \ngit clone\n URL directly\nif you don't want to share it with others.\n\n\n\n\nCustom StepLib support in tools\n\n\nThe Bitrise CLI tools can work with custom step libraries, but other\ntools like the Visual Workflow Editor on \nbitrise.io\n\nmight be limited in functionality for steps not available in the main\n\nBitrise StepLib\n.\n\n\n\n\nIf possible you should share your steps in the\nmain \nBitrise StepLib\n,\nto help others as well as for the extra reliability the StepLib offers.\n\n\nCustom StepLibs can also provide fallbacks (alternative download URLs, caches),\nautomatic and preiodic checks etc. to provide the best reliability, but you get all these for free\nif you use the main Bitrise StepLib.\n\n\nWhy to use the StepLib and Steps instead of ad-hoc build scripts?\n\u2693\n\n\nSame reason why code libraries / dependencies are awesome:\n\n\nYou have a code which can be updated independently from other parts,\nand \nyou can re-use/share\n this between your configurations.\n\n\nShared maintenance\n: when you use Steps created by others you don't have to maintain\nthe codes, but you can contribute to it if you want to, or create and use your own.\n\n\nVersioned\n: If a new version doesn't work for you, \nyou can always go back to a previous one\n.\n\n\nWe frequently push features as Steps instead of building it into the core tools.\nThis allows faster and versioned iterations, and updating the parts independently.\nWe try to maintain compatibility as much as possible, so older versions can work too,\nproviding a way to upgrade when it's appropriate for you.", 
            "title": "Intro"
        }, 
        {
            "location": "/bitrise-cli/#bitrise-cli-the-open-source-offline-automation-runner", 
            "text": "To run a Bitrise build on your machine, you can install our  open source runner \nand use the  bitrise  command to execute your  workflows  locally.\nIt's a great help when you're developing steps, debugging builds,\nor just want to use Bitrise for  any kind of automation  on your machine.", 
            "title": "Bitrise CLI - the open source, offline, automation runner"
        }, 
        {
            "location": "/bitrise-cli/#bitriseyml-the-configuration-format", 
            "text": "The configuration format of the  Bitrise CLI  is referred to as  bitrise.yml ,\nas that's the expected file name the configuration should be saved with.  Technically the CLI can also accept the configuration in JSON format,\nand the file name can be changed too, but if you save the configuration\ninto a file named  bitrise.yml , you can simply  bitrise run  in that directory,\nwithout specifying any configuration path, and the CLI will read the\nconfiguration from  bitrise.yml  automatically.", 
            "title": "bitrise.yml - the configuration format"
        }, 
        {
            "location": "/bitrise-cli/#step-library-steplib", 
            "text": "The StepLib is the collection of the build steps you can use in your bitrise.yml . The steps in the official  Bitrise StepLib \nare all open source,  you can write your own  too and then share it with others!\nSee the  step-template  for more information.  You can also create your own Step Library if you want to, but it's usually\neasier to just reference your steps with their  git clone  URL directly\nif you don't want to share it with others.   Custom StepLib support in tools  The Bitrise CLI tools can work with custom step libraries, but other\ntools like the Visual Workflow Editor on  bitrise.io \nmight be limited in functionality for steps not available in the main Bitrise StepLib .   If possible you should share your steps in the\nmain  Bitrise StepLib ,\nto help others as well as for the extra reliability the StepLib offers.  Custom StepLibs can also provide fallbacks (alternative download URLs, caches),\nautomatic and preiodic checks etc. to provide the best reliability, but you get all these for free\nif you use the main Bitrise StepLib.", 
            "title": "Step Library (StepLib)"
        }, 
        {
            "location": "/bitrise-cli/#why-to-use-the-steplib-and-steps-instead-of-ad-hoc-build-scripts", 
            "text": "Same reason why code libraries / dependencies are awesome:  You have a code which can be updated independently from other parts,\nand  you can re-use/share  this between your configurations.  Shared maintenance : when you use Steps created by others you don't have to maintain\nthe codes, but you can contribute to it if you want to, or create and use your own.  Versioned : If a new version doesn't work for you,  you can always go back to a previous one .  We frequently push features as Steps instead of building it into the core tools.\nThis allows faster and versioned iterations, and updating the parts independently.\nWe try to maintain compatibility as much as possible, so older versions can work too,\nproviding a way to upgrade when it's appropriate for you.", 
            "title": "Why to use the StepLib and Steps instead of ad-hoc build scripts?"
        }, 
        {
            "location": "/bitrise-cli/installation/", 
            "text": "Installing the Bitrise CLI is super simple. It is distributed as a single binary which you can acquire in several ways. All you need to do is download it and make it executable. Let's see how!\n\n\nInstalling the Bitrise CLI with curl\n\u2693\n\n\n\n\n\n\nRun the following command in a bash shell:\n\n\ncurl -fL https://github.com/bitrise-io/bitrise/releases/download/1.16.0/bitrise-$(uname -s)-$(uname -m) \n /usr/local/bin/bitrise`\n\n\n\n\n\nBitrise CLI version\n\n\nYou can check the latest release of the Bitrise CLI on its \nreleases\n page.\n\n\n\n\n\n\n\n\nMake the downloaded binary executable:\n\n\nchmod +x /usr/local/bin/bitrise\n\n\n\n\n\n\n\nRun \nbitrise setup\n. This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call \nbitrise run\n.\n\n\n\n\n\n\nIn any case, \nbitrise setup\n can be called at any time to validate the installation.\n\n\nInstalling the Bitrise CLI with Homebrew\n\u2693\n\n\nIf you have the \nHomebrew\n package manager installed on your Mac, you can use it to install the Bitrise CLI!\n\n\n\n\n\n\nOpen the \nTerminal\n app on your Mac and run:\n\n\nbrew update \n brew install bitrise\n\n\n\n\n\n\n\nRun \nbitrise setup\n. This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call \nbitrise run\n.\n\n\n\n\n\n\nUpdating the Bitrise CLI\n\u2693\n\n\nUpdating the Bitrise CLI is super easy, and it doesn't matter if you installed it with Homebrew or from the GitHub release.\n\n\nSimply run \nbitrise update\n - that's it! The CLI checks for updates once every day and notifies you as soon as there is a new version.", 
            "title": "Install and update the Bitrise CLI"
        }, 
        {
            "location": "/bitrise-cli/installation/#installing-the-bitrise-cli-with-curl", 
            "text": "Run the following command in a bash shell:  curl -fL https://github.com/bitrise-io/bitrise/releases/download/1.16.0/bitrise-$(uname -s)-$(uname -m)   /usr/local/bin/bitrise`   Bitrise CLI version  You can check the latest release of the Bitrise CLI on its  releases  page.     Make the downloaded binary executable:  chmod +x /usr/local/bin/bitrise    Run  bitrise setup . This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call  bitrise run .    In any case,  bitrise setup  can be called at any time to validate the installation.", 
            "title": "Installing the Bitrise CLI with curl"
        }, 
        {
            "location": "/bitrise-cli/installation/#installing-the-bitrise-cli-with-homebrew", 
            "text": "If you have the  Homebrew  package manager installed on your Mac, you can use it to install the Bitrise CLI!    Open the  Terminal  app on your Mac and run:  brew update   brew install bitrise    Run  bitrise setup . This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call  bitrise run .", 
            "title": "Installing the Bitrise CLI with Homebrew"
        }, 
        {
            "location": "/bitrise-cli/installation/#updating-the-bitrise-cli", 
            "text": "Updating the Bitrise CLI is super easy, and it doesn't matter if you installed it with Homebrew or from the GitHub release.  Simply run  bitrise update  - that's it! The CLI checks for updates once every day and notifies you as soon as there is a new version.", 
            "title": "Updating the Bitrise CLI"
        }, 
        {
            "location": "/bitrise-cli/run-your-first-build/", 
            "text": "To run your Bitrise build you only need two things:\n\n\n\n\nThe Bitrise CLI - \ninstallation guide\n\n\nA build configuration (\nbitrise.yml\n)\n\n\n\n\nOnce you have the Bitrise CLI installed (just run \nbitrise setup\n to validate\nthe installation) you just have to create the \nbitrise.yml\n build configuration,\nand you're ready to go!\n\n\nIf you use \nbitrise.io\n, you can download your app's \nbitrise.yml\n right from\n\nbitrise.io\n, and run the build locally. The \nbitrise.yml\n can be found\nin the Workflow Editor of the app on \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\nIf you want to create a \nbitrise.yml\n yourself, simply create a \nbitrise.yml\n file\nin the root of your project. You can use this as the base content of \nbitrise.yml\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\napp:\n  envs:\n  - MY_NAME: My Name\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\nTo run this build open your Terminal / Command Line, \ncd\n into the directory where\nyou saved the \nbitrise.yml\n, and run: \nbitrise run test\n.\n\n\nThat's all, you just ran your first build with the Bitrise CLI!\n\n\nRead on to learn more about how the Bitrise CLI and the \nbitrise.yml\n configuration works,\nyou'll be able to compose and run complex builds in no time!", 
            "title": "Run your first build"
        }, 
        {
            "location": "/bitrise-cli/basics-of-bitrise-yml/", 
            "text": "A bare minimal \nbitrise.yml\n is as simple as:\n\n\nformat_version: 5\n\n\n\nThis configuration is valid, everything else is optional, but does not include anything to execute,\nthere's nothing to \nrun\n.\n\n\nA minimal configuration which you can \nbitrise run\n:\n\n\nformat_version: 5\nworkflows:\n  test:\n\n\n\nThis configuration can be executed with \nbitrise run test\n, and the \nbitrise\n CLI\nwon't give you any errors, but of course there's still nothing declared to do.\n\n\nLet's continue with our example from the previous guide,\nwhich executes a single Script step when you run it with \nbitrise run test\n,\nand talk about what's what in the configuration:\n\n\nformat_version: 5\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\nproject_type: android\napp:\n  envs:\n  - MY_NAME: My Name\nworkflows:\n  test:\n    steps:\n    - script@1.1.5:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\nA quick walk through of this sample configuration:\n\n\n\n\nformat_version\n : this property declares the minimum Bitrise CLI format version.\n  You can get your Bitrise CLI's supported highest format version with: \nbitrise version --full\n.\n  If you set the \nformat_version\n to \n5\n that means that Bitrise CLI versions which\n  don't support the format version \n5\n or higher won't be able to run the configuration.\n  This is important if you use features which are not available in older Bitrise CLI versions.\n\n\ndefault_step_lib_source\n : specifies the source to use when no other source is defined for a step.\n  Read more about it in the \n- script@1.1.5:\n step description.\n\n\nproject_type\n : defines your source project's type. For example, \nandroid\n, \nios\n, \nxamarin\n, and so on\n\n\napp\n - \nenvs\n : the \napp: envs:\n section specifies Environment Variables which will be available for\n  every build, every workflow, every step.\n\n\nworkflows\n : the workflows section is the collection of separate build configurations\n  which you can run with \nbitrise run WORKFLOWID\n.\n  In this example the only workflow is \ntest\n, which you can perform with \nbitrise run test\n.\n  If you'd have a second workflow called \nmain\n, you could run both \nbitrise run test\n and \nbitrise run main\n.\n\n\nsteps:\n : the list of steps which should be executed when the workflow is performed.\n  In this example the \ntest\n workflow includes only a single \nscript\n step. If more than one\n  step is declared, the steps are performed one by one, after each other.\n\n\n- script@1.1.5:\n : a step (reference) to perform. This reference does not have a \"StepLib Source\" declaration,\n  which means that the \ndefault_step_lib_source\n will be used as the StepLib Source.\n  For more information check the \nStep reference section of the Steps guide\n.\n\n\ninputs:\n : the inputs you want to specify for the given step.\n  A step can have many inputs,\n  but \nyou only have to specify those in the \nbitrise.yml\n which you want to set/overwrite.\n\n  For more information see the \nSteps documentation\n.\n\n\n- content:\n : the input we want to set. In this example we only wanted to specify the Content\n  of the Script step, all other inputs are irrelevant.\n\n\necho \nHello ${MY_NAME}!\n : this is the \nvalue\n we specified for the \ncontent\n input.\n\n\n\n\nRead on to learn more about how you can use multiple workflows,\ndefine multiple steps to execute for a given workflow and for\nmore advanced concepts. You'll be able to define your perfect automation\nconfiguration in no time!", 
            "title": "Basics of bitrise.yml"
        }, 
        {
            "location": "/bitrise-cli/workflows/", 
            "text": "A workflow is a collection of steps, environment variables,\nand other configurations for a single \nbitrise run\n.\n\n\nThe only requirement for a workflow is an ID.\n\n\nformat_version: 1.3.1\nworkflows:\n  test:\n\n\n\nIn this configuration we declared one workflow, with the ID \ntest\n.\nYou can define as many workflows as you want to, and run a specific\nworkflow with \nbitrise run WORKFLOWID\n.\n\n\nformat_version: 1.3.1\nworkflows:\n  first:\n  second:\n\n\n\nThis configuration contains two workflows, \nfirst\n and \nsecond\n,\nso you can execute both \nbitrise run first\n and \nbitrise run second\n.\n\n\n\n\nAvailable workflow list\n\n\nYou can list all the available workflows in a \nbitrise.yml\n\nby running \nbitrise run\n or \nbitrise workflows\n in the directory\nof the \nbitrise.yml\n.\n\n\n\n\nAdd steps to a workflow\n\u2693\n\n\nTo add steps to a workflow simply include \nsteps:\n and then the list of steps.\nFor example to run two script steps after each other:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        title: First step\n    - script:\n        title: Second step\n\n\n\nWhen you you run \nbitrise run test\n, the Bitrise CLI will run the two\nscript steps one by one, starting with \nFirst step\n and then\ncontinuing with \nSecond step\n.\n\n\nTo learn more about Build Steps, check the \nSteps\n section.\n\n\nDefine workflow specific parameters / environment variables\n\u2693\n\n\nIn addition to steps, you can also specify environment variables\nfor every workflow.\n\n\nThe environment variables you specify for a given workflow will be used\nwhen the workflow is executed and will be available for every step\nin the workflow.\n\n\nAn example, defining two environment variables (\nENV_VAR_ONE\n and \nENV_VAR_TWO\n)\nfor the \ntest\n workflow:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    envs:\n    - ENV_VAR_ONE: first value\n    - ENV_VAR_TWO: second value\n\n\n\nChaining workflows and reusing workflows\n\u2693\n\n\nIt's also possible to \"chain\" workflows, to run one or more workflow\nbefore and/or after a specific workflow.\n\n\nAn example:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  send-notifications:\n    steps:\n    # send notifications\n\n  setup:\n    steps:\n    # setup steps to run\n\n  test:\n    before_run:\n    - setup\n    envs:\n    - IS_TEST: \ntrue\n\n    steps:\n    # test steps to run\n\n  ci:\n    before_run:\n    - test\n    after_run:\n    - send-notifications\n\n  deploy:\n    before_run:\n    - test\n    steps:\n    # steps to deploy\n    after_run:\n    - send-notifications\n\n\n\nIn the above example, if you run:\n\n\n\n\nbitrise run send-notifications\n : only the steps of the \nsend-notifications\n workflow will be executed\n\n\nbitrise run setup\n : only the steps of the \nsetup\n workflow will be executed\n\n\nbitrise run test\n : first the steps of the \nsetup\n workflow will be executed,\n  then the steps declared in \ntest\n workflow\n\n\nbitrise run ci\n: will execute the steps of the workflows, in the following order:\n\n\nsetup\n\n\ntest\n\n\nci\n (the \nci\n workflow doesn't have any steps, but that's not an issue, it just means\n   that no step will be executed here, the build will continue with the next workflow in the chain)\n\n\nsend-notifications\n\n\n\n\n\n\nbitrise run deploy\n: will execute the steps of the workflows, in the following order:\n\n\nsetup\n\n\ntest\n\n\ndeploy\n\n\nsend-notifications\n\n\n\n\n\n\n\n\nThis means that you can define what a \nsetup\n and \ntest\n should do\nin your project only once, in the \nsetup\n and \ntest\n workflows,\nand then you can resuse those in other workflows.\nThere's no need to duplicate steps between workflows.\n\n\nWhen you chain workflows, technically it's the same as if you'd create\none workflow which would include all steps from all the workflows\nchained after each other. This means that, for example,\none step's outputs will be available for\nevery other step which is executed after that step during the build,\nregardless of whether the other step is\nin the same or in another workflow; if a step is executed\nafter another one during the build, it can access the outputs\nof the previous steps. Just like if both steps would be in a single workflow.\n\n\nNote about workflow environment variables\n\u2693\n\n\nWorkflow specific environment variables are made accessible\n\nwhen the workflow is executed\n, and are available for workflows\nexecuted \nafter\n that workflow, \nbut not in the ones executed before\n that workflow.\n\n\nUsing the example above, if you \nbitrise run ci\n,\nthe \nIS_TEST\n environment variable \nwon't\n be available in the \nsetup\n\nworkflow, as that runs \nbefore\n the \ntest\n workflow,\nbut the environment variable \nwill\n be available for the steps in \ntest\n, \nci\n and\n\nsend-notifications\n workflows.\n\n\nThis is true even if the workflow doesn't have any steps.\nThis can be utilized if you want to create generic workflows,\nwhich can do different things based on environment variables,\nand you specify those environment variables through a \"wrapper\" workflow.\n\n\nExample:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  generic-build:\n    steps:\n    # steps which depend on `BUILD_TYPE` environment variable\n\n  build-alpha:\n    envs:\n    - BUILD_TYPE: alpha\n    after_run:\n    - generic-build\n\n  build-beta:\n    envs:\n    - BUILD_TYPE: beta\n    after_run:\n    - generic-build\n\n\n\nbuild-alpha\n nor \nbuild-beta\n has any steps, the steps are defined in \ngeneric-build\n,\nbut when you \nbitrise run build-alpha\n the \nBUILD_TYPE\n environment variable will be set to \nalpha\n,\nwhile if you \nbitrise run build-beta\n  the \nBUILD_TYPE\n environment variable will be set to \nbeta\n.\n\n\nImportant:\n as noted above, workflow defined environment variables are\nonly available in the workflow it defines it, and the ones \nexecuted after\n that workflow.\nIn the example above \ngeneric-build\n is included as \nafter_run\n workflow,\nso the \nBUILD_TYPE\n environment variable will be available in the steps of \ngeneric-build\n.\nBut if you'd use \nbefore_run\n instead of \nafter_run\n, that would mean that technically\nthe steps of \ngeneric-build\n are processed and executed before processing\nthe \nbuild-alpha\n or \nbuild-beta\n workflows, so the \nBUILD_TYPE\n environment\nvariable would not be available in the step of \ngeneric-build\n.\n\n\nUtility workflows\n\u2693\n\n\nUtility workflows are just a small trick to help you organize your workflows.\n\n\nIf you rely on workflow chaining, you might quickly have tons of small,\nreusable workflows. Finding the right workflow might get tricky.\n\n\nTo help with this, the Bitrise CLI supports a small notation called\n\"utility workflows\".\n\n\nA workflow is considered as a utility workflow if it's ID starts\nwith an underscore character (for example \n_setup\n).\n\n\nUtility workflows are listed at the end of the workflow list if you\nrun \nbitrise run\n or \nbitrise workflows\n, and\n\nutility workflows can't be executed directly with a \nbitrise run\n.\n\n\nThese workflows can still be referenced in \nbefore_run\n and \nafter_run\n\nlists of course, and \nthere's absolutely no other difference\ncompared to a regular workflow\n.\n\n\nUsing the above example where there were five workflows\n(\nci\n, \ndeploy\n, \nsend-notifications\n, \nsetup\n and \ntest\n),\nif you run \nbitrise run\n in the directory of the \nbitrise.yml\n\n(just \nbitrise run\n, without specifying a workflow)\nyou'll get a single list of all five workflows:\n\n\nThe following workflows are available:\n * ci\n * deploy\n * send-notifications\n * setup\n * test\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\n\nYou most likely don't want to run \nsetup\n, \ntest\n nor \nsend-notifications\n\nby itself, only through \nci\n or \ndeploy\n, so if you prefix those\nwith an underscore character to make them utility workflows,\nthe \nbitrise run\n output will better highlight which workflows\nare meant to be executed directly:\n\n\nThe following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n\nNote about utility workflows:\n Utility workflow names start with '_' (example: _my_utility_workflow).\n These workflows can't be triggered directly, but can be used by other workflows\n in the before_run and after_run lists.\n\n\n\nFull spec / list of available properties\n\u2693\n\n\nYou can find the complete list of available properties in the\n\nbitrise.yml format specification / reference\n\ndocs of the CLI.", 
            "title": "Workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#add-steps-to-a-workflow", 
            "text": "To add steps to a workflow simply include  steps:  and then the list of steps.\nFor example to run two script steps after each other:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        title: First step\n    - script:\n        title: Second step  When you you run  bitrise run test , the Bitrise CLI will run the two\nscript steps one by one, starting with  First step  and then\ncontinuing with  Second step .  To learn more about Build Steps, check the  Steps  section.", 
            "title": "Add steps to a workflow"
        }, 
        {
            "location": "/bitrise-cli/workflows/#define-workflow-specific-parameters-environment-variables", 
            "text": "In addition to steps, you can also specify environment variables\nfor every workflow.  The environment variables you specify for a given workflow will be used\nwhen the workflow is executed and will be available for every step\nin the workflow.  An example, defining two environment variables ( ENV_VAR_ONE  and  ENV_VAR_TWO )\nfor the  test  workflow:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    envs:\n    - ENV_VAR_ONE: first value\n    - ENV_VAR_TWO: second value", 
            "title": "Define workflow specific parameters / environment variables"
        }, 
        {
            "location": "/bitrise-cli/workflows/#chaining-workflows-and-reusing-workflows", 
            "text": "It's also possible to \"chain\" workflows, to run one or more workflow\nbefore and/or after a specific workflow.  An example:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  send-notifications:\n    steps:\n    # send notifications\n\n  setup:\n    steps:\n    # setup steps to run\n\n  test:\n    before_run:\n    - setup\n    envs:\n    - IS_TEST:  true \n    steps:\n    # test steps to run\n\n  ci:\n    before_run:\n    - test\n    after_run:\n    - send-notifications\n\n  deploy:\n    before_run:\n    - test\n    steps:\n    # steps to deploy\n    after_run:\n    - send-notifications  In the above example, if you run:   bitrise run send-notifications  : only the steps of the  send-notifications  workflow will be executed  bitrise run setup  : only the steps of the  setup  workflow will be executed  bitrise run test  : first the steps of the  setup  workflow will be executed,\n  then the steps declared in  test  workflow  bitrise run ci : will execute the steps of the workflows, in the following order:  setup  test  ci  (the  ci  workflow doesn't have any steps, but that's not an issue, it just means\n   that no step will be executed here, the build will continue with the next workflow in the chain)  send-notifications    bitrise run deploy : will execute the steps of the workflows, in the following order:  setup  test  deploy  send-notifications     This means that you can define what a  setup  and  test  should do\nin your project only once, in the  setup  and  test  workflows,\nand then you can resuse those in other workflows.\nThere's no need to duplicate steps between workflows.  When you chain workflows, technically it's the same as if you'd create\none workflow which would include all steps from all the workflows\nchained after each other. This means that, for example,\none step's outputs will be available for\nevery other step which is executed after that step during the build,\nregardless of whether the other step is\nin the same or in another workflow; if a step is executed\nafter another one during the build, it can access the outputs\nof the previous steps. Just like if both steps would be in a single workflow.", 
            "title": "Chaining workflows and reusing workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#note-about-workflow-environment-variables", 
            "text": "Workflow specific environment variables are made accessible when the workflow is executed , and are available for workflows\nexecuted  after  that workflow,  but not in the ones executed before  that workflow.  Using the example above, if you  bitrise run ci ,\nthe  IS_TEST  environment variable  won't  be available in the  setup \nworkflow, as that runs  before  the  test  workflow,\nbut the environment variable  will  be available for the steps in  test ,  ci  and send-notifications  workflows.  This is true even if the workflow doesn't have any steps.\nThis can be utilized if you want to create generic workflows,\nwhich can do different things based on environment variables,\nand you specify those environment variables through a \"wrapper\" workflow.  Example:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  generic-build:\n    steps:\n    # steps which depend on `BUILD_TYPE` environment variable\n\n  build-alpha:\n    envs:\n    - BUILD_TYPE: alpha\n    after_run:\n    - generic-build\n\n  build-beta:\n    envs:\n    - BUILD_TYPE: beta\n    after_run:\n    - generic-build  build-alpha  nor  build-beta  has any steps, the steps are defined in  generic-build ,\nbut when you  bitrise run build-alpha  the  BUILD_TYPE  environment variable will be set to  alpha ,\nwhile if you  bitrise run build-beta   the  BUILD_TYPE  environment variable will be set to  beta .  Important:  as noted above, workflow defined environment variables are\nonly available in the workflow it defines it, and the ones  executed after  that workflow.\nIn the example above  generic-build  is included as  after_run  workflow,\nso the  BUILD_TYPE  environment variable will be available in the steps of  generic-build .\nBut if you'd use  before_run  instead of  after_run , that would mean that technically\nthe steps of  generic-build  are processed and executed before processing\nthe  build-alpha  or  build-beta  workflows, so the  BUILD_TYPE  environment\nvariable would not be available in the step of  generic-build .", 
            "title": "Note about workflow environment variables"
        }, 
        {
            "location": "/bitrise-cli/workflows/#utility-workflows", 
            "text": "Utility workflows are just a small trick to help you organize your workflows.  If you rely on workflow chaining, you might quickly have tons of small,\nreusable workflows. Finding the right workflow might get tricky.  To help with this, the Bitrise CLI supports a small notation called\n\"utility workflows\".  A workflow is considered as a utility workflow if it's ID starts\nwith an underscore character (for example  _setup ).  Utility workflows are listed at the end of the workflow list if you\nrun  bitrise run  or  bitrise workflows , and utility workflows can't be executed directly with a  bitrise run .  These workflows can still be referenced in  before_run  and  after_run \nlists of course, and  there's absolutely no other difference\ncompared to a regular workflow .  Using the above example where there were five workflows\n( ci ,  deploy ,  send-notifications ,  setup  and  test ),\nif you run  bitrise run  in the directory of the  bitrise.yml \n(just  bitrise run , without specifying a workflow)\nyou'll get a single list of all five workflows:  The following workflows are available:\n * ci\n * deploy\n * send-notifications\n * setup\n * test\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID  You most likely don't want to run  setup ,  test  nor  send-notifications \nby itself, only through  ci  or  deploy , so if you prefix those\nwith an underscore character to make them utility workflows,\nthe  bitrise run  output will better highlight which workflows\nare meant to be executed directly:  The following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n\nNote about utility workflows:\n Utility workflow names start with '_' (example: _my_utility_workflow).\n These workflows can't be triggered directly, but can be used by other workflows\n in the before_run and after_run lists.", 
            "title": "Utility workflows"
        }, 
        {
            "location": "/bitrise-cli/workflows/#full-spec-list-of-available-properties", 
            "text": "You can find the complete list of available properties in the bitrise.yml format specification / reference \ndocs of the CLI.", 
            "title": "Full spec / list of available properties"
        }, 
        {
            "location": "/bitrise-cli/steps/", 
            "text": "What is a Step\n\u2693\n\n\nA Step encapsulates a \"build task\": the code to perform that task, the inputs/parameters\nyou can define for the task, and the outputs the task generates.\n\n\nFor example the \nGit Clone\n (id: \ngit-clone\n) step performs a \"git clone\"\nof the specified repository, with the inputs you (or the system) specify (e.g.\nthe branch, tag or commit to clone, the local path where the clone should happen, etc.).\n\n\nFrom a technical perspective a Step is a semver \nversioned\n repository\nwhich includes the \ncode\n of the Step and the \ninterface\n definition of the Step.\n\n\nThe \nstep interface definition\n (\nstep.yml\n) includes information like the dependencies of the step,\nthe inputs and outputs of the step, the title and description of the step;\nand other properties like the issue tracker / support URL, or\nthe filter properties which define when the step should be performed or skipped\nand whether a failed step should mark the build as failed.\n\n\nFrom a configuration perspective all you have to know about Bitrise Steps\nis how you can include and configure them in your build configuration (\nbitrise.yml\n).\n\n\nTo include a Step you have to reference it by a \nStep reference/ID\n\nin the \nsteps:\n list of a Workflow.\n\n\nAn example, with a single \nscript\n step, which will be executed when you run \nbitrise run test\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n\n\n\n\n\nList of available steps (step IDs)\n\n\nYou can list all the available steps in the main Bitrise StepLib\nby running \nbitrise step-list\n, or by checking\n\nthe steps/ directory of the main Bitrise StepLib repository\n.\n\n\n\n\nOnce you include a step in your build configuration (\nbitrise.yml\n),\nyou can specify configurations for the step. The most common thing\nyou'll do is to specify values for the step's inputs.\nYou can do this with the \ninputs:\n list property of the step,\ndefining the \nkey\n of the input and the \nvalue\n you want to set.\n\n\nFor example, to specify a simple script to perform for the \nscript\n step,\nyou can specify a value for the \nscript\n step's \ncontent\n input.\n(\nNote: you can list all the inputs of a step with \nbitrise step-info STEP-ID\n)\n\n\nLet's do a simple \"Hello World\" script, using the \nscript\n step:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \necho 'Hello World!'\n\n\n\nWhen you run the \ntest\n workflow of this configuration with \nbitrise run test\n\nyou'll now see that the \nscript\n step prints the text \nHello World\n in its log:\n\n\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-07T17:05:17+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nHello World!\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.30 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\nIf the step doesn't have any required inputs you don't have to specify an input,\nand of course you can specify values for as many inputs as you want to.\n\n\nFor example the \nscript\n step can run Ruby scripts too, not just Bash scripts.\nTo do this, in addition to specifying the script in the \ncontent\n input\nyou also have to specify the \"runner\" input:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\nStep input values are always \nstring\n / text values, as the input id/key and the value\nare passed to the step as environment variables\n(\nmore information\n),\nand the value can be multi line too, using the standard YAML multi line format.\nAn example multi line Bash script:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            set -ex\n            var_to_print='Hello World!'\n            echo \n${var_to_print}\n\n\n\n\n\nWatch out for the indentation!\n\n\nIndentation in the YAML format is very important!\nYou should use two-spaces indentation, and you can't use tabs to indent!\n\n\nIf you use a multi line value, like the one above, it's important that you\nhave to \nindent the value with two spaces\n, compared to the key!\n\n\n\n\nYou can change other properties of the step too, not just the inputs.\nFor example, if you want to \"force\" run the step even if a previous step fails,\nyou can set the \nis_always_run\n property to \ntrue\n:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\nor if you want to specify a better, more descriptive title for the step,\nyou can use the \ntitle\n property:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\nThe Step data you define in bitrise.yml - your diff!\n\u2693\n\n\nYou might already suspect it after the examples above:\nthe step data / infos you specify in the \nbitrise.yml\n are the parameters\nof the step \nyou want to change\n / overwrite.\n\n\nIf you don't specify any input or other step property, only the step (reference/iD),\nthat means that the step should run with the default values (defined by the step's developer).\n\n\nYou could also think about this as a \ndiff\n. The step defines values for the step interface\nproperties, and in the \nbitrise.yml\n you define a \ndiff\n, the things you want to change\nand the values to change to.\n\n\nLet's go through the example above:\n\n\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\nThe \n- script@1.1.3:\n line selects the step, and the properties you define after this\n(with an indentation!)\nare the things you want to overwrite.\n\n\nTo see the step's raw interface definition you can check it in the step library.\nIn these examples we always use the \nmain Bitrise StepLib\n.\nThe step interface definitions can be found in the StepLib's\n\nsteps\n directory\n,\nin this case it's in the \nsteps/script/1.1.3\n directory,\nas we used the \n1.1.3\n version of the \nscript\n step.\nThe \nstep.yml\n in this directory is the step's interface definition\n.\n\n\nCheck the \nstep.yml\n,\nyou can see all the properties defined for this version of the step.\nNow, if you check our example above, all we did is to\nchange the \ntitle\n property (from \nScript\n to \nPrint Hello Ruby\n),\nthe \nis_always_run\n property (from \nfalse\n to \ntrue\n)\nand two inputs of the step, \ncontent\n (from a default, example script content)\nand \nrunner_bin\n (from \n/bin/bash\n to \nruby\n).\n\n\nAll other properties you can see in the step version's \nstep.yml\n will be read\nfrom the \nstep.yml\n, you don't have to define those. You only have to define\n\nthe things you want to change\n, compared to the values specified for the step\nin the step's interface definition (\nstep.yml\n).\n\n\nStep reference/ID format\n\u2693\n\n\nA step reference from the example \nbitrise.yml\n above:\n\n\n- script@1.1.3:\n\n\n\n\n\nthe StepLib source\n\n\nthe Step ID\n\n\nthe Step Version\n\n\n\n\nStep reference format: \n- StepLibSource::StepID@StepVersion:\n\n\nFrom the three components only Step ID is required (e.g. \n- script:\n).\n\nThis example item could alternatively be written as \n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n,\nto include all three components of the step reference.\n\n\nIf the Version is not defined, the latest version of the step will be used.\n\n\nIf the StepLib Source is not defined, the \ndefault_step_lib_source\n will be used.\n\n\nSo, if \ndefault_step_lib_source\n is set to \nhttps://github.com/bitrise-io/bitrise-steplib.git\n,\nand the latest version of the Script step is \n1.1.3\n, all the following references\nwill mean the exact same thing:\n\n\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n\n\n- script@1.1.3:\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script:\n\n\n- script:\n\n\n\n\nBut, if a new version of the \nscript\n step is released (e.g. \n2.0.0\n)\nand you don't include the \n@1.1.3\n version reference component,\nnew builds will use the \"latest version at the time\".\nFor this reason, it's usually a good idea to specify the version of the step,\nso that your build does not break accidentally when a breaking change\nis introduced in a new version of the step.\n\n\nSpecial step sources\n\u2693\n\n\nThere are two special step sources:\n\n\n\n\ngit::\n\n\nand \npath::\n\n\n\n\nWhen you use one of these sources, the step won't be identified through\na Step Library, but through the ID data you specify.\n\n\nFor example, the \nscript\n step's github is at: \nhttps://github.com/bitrise-io/steps-script\n.\nTo reference the \nscript\n step directly through a git reference,\nyou can use the \ngit::\n source, the step's git clone URL,\nand the branch or tag in the repository.\n\n\nExample, to reference the \n1.1.3\n version tag of the script step's repository:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@1.1.3:\n\n\n\nIn general, \nwhenever you can use a step version through a Step Library,\nyou should do that\n, instead of using the \ngit::\n source type,\nbecause features like \nlocal step caching\n or \nnetwork caching\n / alternative\ndownload URLs are only supported for steps shared in a StepLib.\n\n\nBut this type of referencing allows certain things you can't get through\na StepLib. For example the \ngit::\n source type can be used for not-yet-published or\nwork-in-progress states of a step.\nIf you \ndevelop your own Step\n you can use\nthis \ngit::\n source type to test your step \nbefore you would publish it\n\nin a StepLib.\n\n\nExample:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@BRANCH-OR-TAG:\n\n\n\nBRANCH-OR-TAG\n of course have to be a branch or tag which does exist in\nthe step's repository. For example, if you develop your own Step\nand you work on a \nsoon-to-be-released\n branch, you can\nuse that state of the step with:\n\n\n- git::https://github.com/bitrise-io/steps-script.git@soon-to-be-released:\n\n\n\nThe second special source is \npath::\n, which works in a similar way,\nexcept for \nlocal paths\n, and it requires no version information.\n\n\nA good example for this is, again, when you create and work on your own\nStep, you can run the state of the Step (step's code) directly on your Mac/PC,\nwithout even pushing it to the step's repository.\n\n\nBoth absolute and relative (relative to the \nbitrise.yml\n!) local paths are supported, so you can:\n\n\n- path::/path/to/my/step:\n\n\n\nas well as:\n\n\n- path::./relative/path:\n\n\n\nDuring step development it's a best practice to have a \nbitrise.yml\n directly\nin the step's repository, for unit and ad hoc testing. In this case \nthe current directory is the step directory\n,\nand the step can be referenced with:\n\n\n- path::./:\n\n\n\nThis can also be used if you want to include your build steps in your app's source code.\n\nFor example if you store the \nscript\n step's code in your source code repository,\nunder the \nsteps/script\n directory, you can run the version included in your source code\nrepository with:\n\n\n- path::./steps/script:", 
            "title": "Steps"
        }, 
        {
            "location": "/bitrise-cli/steps/#what-is-a-step", 
            "text": "A Step encapsulates a \"build task\": the code to perform that task, the inputs/parameters\nyou can define for the task, and the outputs the task generates.  For example the  Git Clone  (id:  git-clone ) step performs a \"git clone\"\nof the specified repository, with the inputs you (or the system) specify (e.g.\nthe branch, tag or commit to clone, the local path where the clone should happen, etc.).  From a technical perspective a Step is a semver  versioned  repository\nwhich includes the  code  of the Step and the  interface  definition of the Step.  The  step interface definition  ( step.yml ) includes information like the dependencies of the step,\nthe inputs and outputs of the step, the title and description of the step;\nand other properties like the issue tracker / support URL, or\nthe filter properties which define when the step should be performed or skipped\nand whether a failed step should mark the build as failed.  From a configuration perspective all you have to know about Bitrise Steps\nis how you can include and configure them in your build configuration ( bitrise.yml ).  To include a Step you have to reference it by a  Step reference/ID \nin the  steps:  list of a Workflow.  An example, with a single  script  step, which will be executed when you run  bitrise run test :  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:   List of available steps (step IDs)  You can list all the available steps in the main Bitrise StepLib\nby running  bitrise step-list , or by checking the steps/ directory of the main Bitrise StepLib repository .   Once you include a step in your build configuration ( bitrise.yml ),\nyou can specify configurations for the step. The most common thing\nyou'll do is to specify values for the step's inputs.\nYou can do this with the  inputs:  list property of the step,\ndefining the  key  of the input and the  value  you want to set.  For example, to specify a simple script to perform for the  script  step,\nyou can specify a value for the  script  step's  content  input.\n( Note: you can list all the inputs of a step with  bitrise step-info STEP-ID )  Let's do a simple \"Hello World\" script, using the  script  step:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content:  echo 'Hello World!'  When you run the  test  workflow of this configuration with  bitrise run test \nyou'll now see that the  script  step prints the text  Hello World  in its log:  +------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-07T17:05:17+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nHello World!\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.30 sec |\n+---+---------------------------------------------------------------+----------+  If the step doesn't have any required inputs you don't have to specify an input,\nand of course you can specify values for as many inputs as you want to.  For example the  script  step can run Ruby scripts too, not just Bash scripts.\nTo do this, in addition to specifying the script in the  content  input\nyou also have to specify the \"runner\" input:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  Step input values are always  string  / text values, as the input id/key and the value\nare passed to the step as environment variables\n( more information ),\nand the value can be multi line too, using the standard YAML multi line format.\nAn example multi line Bash script:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            set -ex\n            var_to_print='Hello World!'\n            echo  ${var_to_print}   Watch out for the indentation!  Indentation in the YAML format is very important!\nYou should use two-spaces indentation, and you can't use tabs to indent!  If you use a multi line value, like the one above, it's important that you\nhave to  indent the value with two spaces , compared to the key!   You can change other properties of the step too, not just the inputs.\nFor example, if you want to \"force\" run the step even if a previous step fails,\nyou can set the  is_always_run  property to  true :  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  or if you want to specify a better, more descriptive title for the step,\nyou can use the  title  property:  format_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby", 
            "title": "What is a Step"
        }, 
        {
            "location": "/bitrise-cli/steps/#the-step-data-you-define-in-bitriseyml-your-diff", 
            "text": "You might already suspect it after the examples above:\nthe step data / infos you specify in the  bitrise.yml  are the parameters\nof the step  you want to change  / overwrite.  If you don't specify any input or other step property, only the step (reference/iD),\nthat means that the step should run with the default values (defined by the step's developer).  You could also think about this as a  diff . The step defines values for the step interface\nproperties, and in the  bitrise.yml  you define a  diff , the things you want to change\nand the values to change to.  Let's go through the example above:      - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content:  puts 'Hello Ruby!' \n        - runner_bin: ruby  The  - script@1.1.3:  line selects the step, and the properties you define after this\n(with an indentation!)\nare the things you want to overwrite.  To see the step's raw interface definition you can check it in the step library.\nIn these examples we always use the  main Bitrise StepLib .\nThe step interface definitions can be found in the StepLib's steps  directory ,\nin this case it's in the  steps/script/1.1.3  directory,\nas we used the  1.1.3  version of the  script  step.\nThe  step.yml  in this directory is the step's interface definition .  Check the  step.yml ,\nyou can see all the properties defined for this version of the step.\nNow, if you check our example above, all we did is to\nchange the  title  property (from  Script  to  Print Hello Ruby ),\nthe  is_always_run  property (from  false  to  true )\nand two inputs of the step,  content  (from a default, example script content)\nand  runner_bin  (from  /bin/bash  to  ruby ).  All other properties you can see in the step version's  step.yml  will be read\nfrom the  step.yml , you don't have to define those. You only have to define the things you want to change , compared to the values specified for the step\nin the step's interface definition ( step.yml ).", 
            "title": "The Step data you define in bitrise.yml - your diff!"
        }, 
        {
            "location": "/bitrise-cli/steps/#step-referenceid-format", 
            "text": "A step reference from the example  bitrise.yml  above:  - script@1.1.3:   the StepLib source  the Step ID  the Step Version   Step reference format:  - StepLibSource::StepID@StepVersion:  From the three components only Step ID is required (e.g.  - script: ). \nThis example item could alternatively be written as  - https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3: ,\nto include all three components of the step reference.  If the Version is not defined, the latest version of the step will be used.  If the StepLib Source is not defined, the  default_step_lib_source  will be used.  So, if  default_step_lib_source  is set to  https://github.com/bitrise-io/bitrise-steplib.git ,\nand the latest version of the Script step is  1.1.3 , all the following references\nwill mean the exact same thing:   - https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:  - script@1.1.3:  - https://github.com/bitrise-io/bitrise-steplib.git::script:  - script:   But, if a new version of the  script  step is released (e.g.  2.0.0 )\nand you don't include the  @1.1.3  version reference component,\nnew builds will use the \"latest version at the time\".\nFor this reason, it's usually a good idea to specify the version of the step,\nso that your build does not break accidentally when a breaking change\nis introduced in a new version of the step.", 
            "title": "Step reference/ID format"
        }, 
        {
            "location": "/bitrise-cli/steps/#special-step-sources", 
            "text": "There are two special step sources:   git::  and  path::   When you use one of these sources, the step won't be identified through\na Step Library, but through the ID data you specify.  For example, the  script  step's github is at:  https://github.com/bitrise-io/steps-script .\nTo reference the  script  step directly through a git reference,\nyou can use the  git::  source, the step's git clone URL,\nand the branch or tag in the repository.  Example, to reference the  1.1.3  version tag of the script step's repository:  - git::https://github.com/bitrise-io/steps-script.git@1.1.3:  In general,  whenever you can use a step version through a Step Library,\nyou should do that , instead of using the  git::  source type,\nbecause features like  local step caching  or  network caching  / alternative\ndownload URLs are only supported for steps shared in a StepLib.  But this type of referencing allows certain things you can't get through\na StepLib. For example the  git::  source type can be used for not-yet-published or\nwork-in-progress states of a step.\nIf you  develop your own Step  you can use\nthis  git::  source type to test your step  before you would publish it \nin a StepLib.  Example:  - git::https://github.com/bitrise-io/steps-script.git@BRANCH-OR-TAG:  BRANCH-OR-TAG  of course have to be a branch or tag which does exist in\nthe step's repository. For example, if you develop your own Step\nand you work on a  soon-to-be-released  branch, you can\nuse that state of the step with:  - git::https://github.com/bitrise-io/steps-script.git@soon-to-be-released:  The second special source is  path:: , which works in a similar way,\nexcept for  local paths , and it requires no version information.  A good example for this is, again, when you create and work on your own\nStep, you can run the state of the Step (step's code) directly on your Mac/PC,\nwithout even pushing it to the step's repository.  Both absolute and relative (relative to the  bitrise.yml !) local paths are supported, so you can:  - path::/path/to/my/step:  as well as:  - path::./relative/path:  During step development it's a best practice to have a  bitrise.yml  directly\nin the step's repository, for unit and ad hoc testing. In this case  the current directory is the step directory ,\nand the step can be referenced with:  - path::./:  This can also be used if you want to include your build steps in your app's source code. \nFor example if you store the  script  step's code in your source code repository,\nunder the  steps/script  directory, you can run the version included in your source code\nrepository with:  - path::./steps/script:", 
            "title": "Special step sources"
        }, 
        {
            "location": "/bitrise-cli/step-inputs/", 
            "text": "Step inputs are environment items that tell the Bitrise CLI how to run a given step. As discussed in the \nSteps\n section, the default inputs can be found in the \nstep.yml\n file of every step and the user only needs to manually set the inputs they wish to change.\n\n\nStep inputs can be defined in the \nbitrise.yml\n file of the project by setting the \ninputs\n attribute. They have the same syntax as every environment property. It consists of two main parts: a \nKEY: value\n pair and an \nopts\n field. The key and the value are required, the \nopts\n field is optional.\n\n\n- my_key_for_the_env: my value for the env\n  opts:\n    title: An example env var item\n    is_dont_change_value: false\n    category: example\n\n\n\n\n\nmy_key_for_the_env\n: the key of the environment item (required)\n\n\nmy value for the env\n: the value of the item (required)\n\n\nopts\n: optional attributes.\n\n\n\n\nOf course, a step input can have many more attributes - let's take a look at them!\n\n\n\n\ntitle\n, \nsummary\n and \ndescription\n : metadata, for comments, tools and GUI.\n  \nNote: these meta properties can be used for permanent comments. Standard YML comments\n  are not preserved when the YML is normalized, converted to JSON or otherwise\n  generated or transformed. These meta properties are.\n\n\nis_expand\n : can be set to \ntrue\n or \nfalse\n. If set to \ntrue\n, the shell environment variables are expanded/resolved.\n\n\nskip_if_empty\n : can be set to \ntrue\n or \nfalse\n. If set to \ntrue\n, the input will not be used if its value is empty.\n\n\ncategory\n : used to categorize the input.\n\n\nvalue_options\n : list of the available values.\n\n\nis_required\n : can be set to \ntrue\n or \nfalse\n. If set to \ntrue\n, the step requires a non-empty value to be set for the input.\n\n\nis_dont_change_value\n : can be set to \ntrue\n or \nfalse\n. If set to \ntrue\n, the value of the input should not be changed and/or should be hidden on UIs. Mainly used for debug inputs and for \"\nconnection\n\" inputs (set to outputs of other steps, to connect this step with another one).\n\n\nis_template\n : can be set to \ntrue\n or \nfalse\n. If set to \ntrue\n \n,\n the input's value will be evaulated as a Go template.\n\n\n\n\nUsing template expressions for step inputs\n\u2693\n\n\nIf you need a step to use a certain value only in certain circumstances, use template expressions as step inputs. Template expressions are evaluated before the step uses the input. They are written in Go's template language - you can read more about that \nhere\n.\n\n\nSet the \nis_template\n attribute in the \nbitrise.yml\n file of your project to use template expressions.\n\n\n\n\n\n\nOpen the \nbitrise.yml\n file of your project.\n\n\n\n\n\n\nFind the step you need, and then the input of that step in which you wish to use a template expression.\n\n\n\n\n\n\nAdd an \nopts\n field to the \ncontent\n of the step.\n\n\n\n\n\n\nAdd the \nis_template\n attribute to \nopts\n and set its value to \ntrue\n.\n\n\n\n\n\n\nAdd the template expression to the step's \ncontent\n.\n\n\n\n\n\n\nExample\n\n\n- script:\n  title: Template example\n  inputs:\n  - content: |-\n      {{if .IsCI}}\n      echo \nCI mode\n\n      {{else}}\n      echo \nnot CI mode\n\n      {{end}}\n    opts:\n      is_template: true\n\n\n\nCheck out the template utility \non GitHub\n!", 
            "title": "Step inputs"
        }, 
        {
            "location": "/bitrise-cli/step-inputs/#using-template-expressions-for-step-inputs", 
            "text": "If you need a step to use a certain value only in certain circumstances, use template expressions as step inputs. Template expressions are evaluated before the step uses the input. They are written in Go's template language - you can read more about that  here .  Set the  is_template  attribute in the  bitrise.yml  file of your project to use template expressions.    Open the  bitrise.yml  file of your project.    Find the step you need, and then the input of that step in which you wish to use a template expression.    Add an  opts  field to the  content  of the step.    Add the  is_template  attribute to  opts  and set its value to  true .    Add the template expression to the step's  content .    Example  - script:\n  title: Template example\n  inputs:\n  - content: |-\n      {{if .IsCI}}\n      echo  CI mode \n      {{else}}\n      echo  not CI mode \n      {{end}}\n    opts:\n      is_template: true  Check out the template utility  on GitHub !", 
            "title": "Using template expressions for step inputs"
        }, 
        {
            "location": "/bitrise-cli/step-outputs/", 
            "text": "Step outputs are environment items that are the result of running a given step. For example, the \ndeploy-to-bitrise-io\n step generates the \n$BITRISE_PUBLIC_INSTALL_PAGE_URL\n and the \n$BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP\n output variables by default. You can check out the default outputs of a step in the \nWorkflow Editor\n on \nbitrise.io\n or in the \nstep.yml\n file of the step.\n\n\nStep outputs can be defined in the \nbitrise.yml\n file of the project by setting the \noutputs\n attribute. They have the same syntax as every environment property. It consists of two main parts: a \nKEY: value\n pair and an \nopts\n field. The key and the value are required, the \nopts\n field is optional.\n\n\n- my_key_for_the_env: my value for the env\n  opts:\n    title: An example env var item\n    is_dont_change_value: false\n    category: example\n\n\n\nmy_key_for_the_env\n: the key of the environment item (required)\n\nmy value for the env\n: the value of the item (required)\n\nopts\n: optional attributes.\n\n\nExporting step outputs in output aliases\n\u2693\n\n\nThe default outputs of a step cannot be changed by the user in \nbitrise.yml\n. However, you can export the output in a custom environment variable. This is useful, for example, if you have the same step twice in your workflow and you wish to use the generated output of both steps.\n\n\n\n\n\n\nOpen the \nbitrise.yml\n file of your project.\n\n\nYou can do this either on \nbitrise.io\n or locally.\n\n\n\n\n\n\nFind the step you need.\n\n\n\n\n\n\nSet the \noutputs\n attribute: specify the original environment key - the default output that the step generates - and the alias.\n\n\n\n\nExample\n\n\nworkflows:\n  primary:\n  steps:\n  - gradle-runner:\n      outputs:\n      - BITRISE_APK_PATH: ALIAS_APK_PATH\n\n\n\n\n\nIn the example, the value for the \nBITRISE_APK_PATH\n environment variable will be exported under the \nALIAS_APK_PATH\n key.", 
            "title": "Step outputs"
        }, 
        {
            "location": "/bitrise-cli/step-outputs/#exporting-step-outputs-in-output-aliases", 
            "text": "The default outputs of a step cannot be changed by the user in  bitrise.yml . However, you can export the output in a custom environment variable. This is useful, for example, if you have the same step twice in your workflow and you wish to use the generated output of both steps.    Open the  bitrise.yml  file of your project.  You can do this either on  bitrise.io  or locally.    Find the step you need.    Set the  outputs  attribute: specify the original environment key - the default output that the step generates - and the alias.   Example  workflows:\n  primary:\n  steps:\n  - gradle-runner:\n      outputs:\n      - BITRISE_APK_PATH: ALIAS_APK_PATH   In the example, the value for the  BITRISE_APK_PATH  environment variable will be exported under the  ALIAS_APK_PATH  key.", 
            "title": "Exporting step outputs in output aliases"
        }, 
        {
            "location": "/bitrise-cli/step-timeout/", 
            "text": "Ensure that your builds do not exceed the time limit by setting up step timeout for steps that might cause builds to hang.\n\n\nA step timeout, defined in seconds, sets a maximum time a step is allowed to run. If the step exceeds that limit, the workflow moves on to the next step. This is useful if, for example, your builds hang for not immediately obvious reasons - you can set timeouts for the step or steps which are suspected to have caused the problem.\n\n\n\n\n\n\nFind the step in the \nbitrise.yml\n file.\n\n\nDon't forget you can edit the \nbitrise.yml\n file of your project on \nbitrise.io\n: open the \nApps\n page, select your app, click the \nWorkflow Editor\n tab then click \nbitrise.yml\n.\n\n\n\n\n\n\nAdd a \ntimeout\n property before the other step inputs.\n\n\n\n\nExample\n\n\n- xcode-test@1.18.14:\n     timeout: 120\n     inputs:\n     - project_path: \n$BITRISE_PROJECT_PATH\n\n     - scheme: \n$BITRISE_SCHEME\n\n\n\n\n\n\n\n\n\nAnd you're done! In our example, the \nxcode-test\n step will abort after 120 seconds. Check the build logs to see what caused the step to exceed the limit.", 
            "title": "Setting a time limit for steps"
        }, 
        {
            "location": "/bitrise-cli/secrets/", 
            "text": "Secrets can be accessed and used in a similar way as App Env Vars,\nthe main difference is that \nsecrets are not stored as part of the build configuration\n.\n\n\nWhen you run a build locally, with the Bitrise CLI, the secrets are read from\na \n.bitrise.secrets.yml\n file, which is expected to be in the same directory\nwhere the \nbitrise.yml\n is, and where you run the \nbitrise run\n command.\n\n\nIf you want to store your secrets somewhere else, you can specify\nthe location of the secrets file with the \n--inventory\n flag of the \nbitrise run\n command,\ne.g. \nbitrise run my-workflow --inventory /path/to/secrets.yml\n.\n\n\n\n\nMake sure to \ngitignore\n your secrets file!\n\n\nAs a best practice, you should always make sure that the \n.bitrise.secrets.yml\n\nis added to your \n.gitignore\n, so that it will never be committed into your\nrepository! The best is if you \ngitignore\n everything what\nstarts with \n.bitrise\n, which can be done by adding the\nline: \n.bitrise*\n to your \n.gitignore\n file.\n\n\n\n\nThe format of the secrets YAML file is really simple. It have to include\na root \nenvs:\n item and then the list of environment variables.\n\n\nExample:\n\n\nenvs:\n- SECRET_ENV_ONE: first secret value\n- SECRET_ENV_TWO: second secret value\n\n\n\nThe environment variables defined in the secrets file can be used\njust like any other environment variable, so, if you save the above\nexample into a \n.bitrise.secrets.yml\n file, and you have a \nbitrise.yml\n\nfile in the same directory with the content:\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nSECRET_ENV_ONE: ${SECRET_ENV_ONE}\n\n            echo \nSECRET_ENV_TWO: ${SECRET_ENV_TWO}\n\n\n\nYou can just \nbitrise run test\n in the directory, and you'll see that the Script\nstep will print the values specified in the secrets file:\n\n\n...\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-08T18:45:19+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nSECRET_ENV_ONE: first secret value\nSECRET_ENV_TWO: second secret value\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.32 sec |\n+---+---------------------------------------------------------------+----------+\n...\n\n\n\nAs Secrets are the first environment variables processed when you execute\na \nbitrise run\n command, you can use the environment variables everywhere in\nyour \nbitrise.yml\n, for example in \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n),\n\nWorkflow environment variables\n\nand Step inputs too.", 
            "title": "Secrets"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/", 
            "text": "Every input, output and parameter is an Environment Variable\n\u2693\n\n\nEvery step input, step output, secret environment variable, app environment variable and workflow environment variable\n(basically every input and variable in your build config) is an environment variable.\n\n\nThere's nothing special about how Bitrise handles environment variables,\n\nthese are regular environment variable, with the same rules and restrictions as any other environment variable.\n\n\nTo highlight a couple of technical details:\n\n\nThe value of an Environment Variable can only be a String\n\u2693\n\n\nEnvironment Variables can only hold \nString\n values. Even if you set a number or bool, like \n1\n or \ntrue\n as\nthe value of the Environment Variable, that will be a string.\n\n\nParent process can't access  Environment Variables exposed by child processes\n\u2693\n\n\nParent process(es) can't access Environment Variables exposed by child processes.\n\n\nFor example, if you run a \nmy_bash_script.sh\n in your Terminal with \nbash my_bash_script.sh\n,\nand \nmy_bash_script.sh\n sets an environment variable with \nexport MY_VAR=the-value\n,\nyou won't be able to access \nMY_VAR\n in your Terminal after the script is finished,\n\nMY_VAR\n will only be available in \nmy_bash_script.sh\n \nand\n in the processes / scripts\nstarted by \nmy_bash_script.sh\n.\n\n\nIn terms of Bitrise CLI this means that if you \nexport MY_VAR=...\n in a Script step,\n\nMY_VAR\n won't be available in subsequent steps. This is true for the steps too,\nregardless of which language the step is written in.\n\n\nBitrise CLI includes a mechanism for exposing environment variables from Steps\nso that subsequent Steps can also access it, through the Bitrise CLI tool\ncalled \nenvman\n.\n\n\nTo set an environment variable in your script or in your step to make that\navailable in other steps too, you have to do that through \nenvman\n.\n\n\nA simple example:\n\n\nenvman add --key MY_TEST_ENV_KEY --value 'test value for test key'\n\n\n\nYou can find more examples in \nenvman's README\n,\nand in the \nExpose an Environment Variable and use it in another Step\n guide.\n\n\nAvailability order of environment variables\n\u2693\n\n\nEnvironment variables are available \nafter\n the environment variable\nis \"processed\".\n\n\nThere are a few environment variables \nexposed by the Bitrise CLI itself\n,\nthose are available from the start (e.g. \nBITRISE_SOURCE_DIR\n and \nBITRISE_TRIGGERED_WORKFLOW_ID\n).\n\n\nAll other environment variables are \"processed\" / made available \nas the build progresses.\n\n\nThere are two types of environment variables which are processed and\nmade available before the workflow would be executed:\n\nSecrets\n and \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n).\n\n\nAfter these, the processing of the specified Workflow starts, and the\n\nenvironment variables specified for that Workflow\n\nare made available. If the workflow has before or after workflows, when\na specific workflow is processed (right before the first step of the workflow would run)\nthe workflow's environment variables are processed and made available.\n\n\nStep inputs are also environment variables;\nthose are exposed only for the specific step, and right before the Step would start.\n\n\nLast but not least Step outputs are exposed by the specific step,\nso those are available for subsequent steps \nafter the Step finishes\n.\n\n\nThe environment variable processing order:\n\n\n\n\nBitrise CLI exposed environment variables\n\n\nSecrets\n\n\nOne-off environment variables specified for the build through the \nBuild Trigger API\n\n\nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n)\n\n\nWorkflow environment variables\n\n\nStep inputs\n\n\nStep outputs\n\n\n\n\nSo, why does the processing order matter?\n\n\nAn environment variable is only available \nafter\n it is processed and made available.\n\nWhen you reference or use an environment variable, you can only reference/use those which are already processed!\n\n\nA couple of examples:\n\n\n\n\nIn the value of a \nSecret\n environment variable,\n  you can use environment variables exposed by Bitrise CLI,\n  but you can't use any other environment variable (App Env Vars, Workflow Env Vars, ...),\n  as those are not processed when secrets are processed.\n\n\nIn the value of an \nApp Env Var\n, you can use environment variables\n  from \nSecrets\n as well as the Bitrise CLI exposed ones, but you can't use Workflow Env Vars,\n  nor Step inputs.\n\n\nIn a \nWorkflow environment variable\n you can use all the above (\nSecrets\n, \nApp Env Vars\n,\n  Bitrise CLI exposed env vars).\n\n\nAnd finally, in step input values, you can use all other environment variables,\n  including the workflow's environment variables, as well as the outputs\n  of steps which run before the specific step.\n\n\n\n\nEnvironment variables of chained workflows\n\u2693\n\n\nOnce an environment variable of a workflow is processed and made available,\nit is available everywhere else during the build. This means that other workflows\nof the chain \ncan\n use the environment variables of a workflow which is performed \nbefore\n\nthe specific workflow, similar to Step outputs, which are available for every\nother step \nafter\n the step (which generates the outputs) completes.\n\n\nYou can find more information about environment variable availability\nof Workflow env vars in chained workflows in the\n\nWorkflows: Note about workflow environment variables\n\ndocumentation.", 
            "title": "Most important concepts"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#every-input-output-and-parameter-is-an-environment-variable", 
            "text": "Every step input, step output, secret environment variable, app environment variable and workflow environment variable\n(basically every input and variable in your build config) is an environment variable.  There's nothing special about how Bitrise handles environment variables, these are regular environment variable, with the same rules and restrictions as any other environment variable.  To highlight a couple of technical details:", 
            "title": "Every input, output and parameter is an Environment Variable"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#the-value-of-an-environment-variable-can-only-be-a-string", 
            "text": "Environment Variables can only hold  String  values. Even if you set a number or bool, like  1  or  true  as\nthe value of the Environment Variable, that will be a string.", 
            "title": "The value of an Environment Variable can only be a String"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#parent-process-cant-access-environment-variables-exposed-by-child-processes", 
            "text": "Parent process(es) can't access Environment Variables exposed by child processes.  For example, if you run a  my_bash_script.sh  in your Terminal with  bash my_bash_script.sh ,\nand  my_bash_script.sh  sets an environment variable with  export MY_VAR=the-value ,\nyou won't be able to access  MY_VAR  in your Terminal after the script is finished, MY_VAR  will only be available in  my_bash_script.sh   and  in the processes / scripts\nstarted by  my_bash_script.sh .  In terms of Bitrise CLI this means that if you  export MY_VAR=...  in a Script step, MY_VAR  won't be available in subsequent steps. This is true for the steps too,\nregardless of which language the step is written in.  Bitrise CLI includes a mechanism for exposing environment variables from Steps\nso that subsequent Steps can also access it, through the Bitrise CLI tool\ncalled  envman .  To set an environment variable in your script or in your step to make that\navailable in other steps too, you have to do that through  envman .  A simple example:  envman add --key MY_TEST_ENV_KEY --value 'test value for test key'  You can find more examples in  envman's README ,\nand in the  Expose an Environment Variable and use it in another Step  guide.", 
            "title": "Parent process can't access  Environment Variables exposed by child processes"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#availability-order-of-environment-variables", 
            "text": "Environment variables are available  after  the environment variable\nis \"processed\".  There are a few environment variables  exposed by the Bitrise CLI itself ,\nthose are available from the start (e.g.  BITRISE_SOURCE_DIR  and  BITRISE_TRIGGERED_WORKFLOW_ID ).  All other environment variables are \"processed\" / made available  as the build progresses.  There are two types of environment variables which are processed and\nmade available before the workflow would be executed: Secrets  and  App Env Vars  ( app: envs:  in the  bitrise.yml ).  After these, the processing of the specified Workflow starts, and the environment variables specified for that Workflow \nare made available. If the workflow has before or after workflows, when\na specific workflow is processed (right before the first step of the workflow would run)\nthe workflow's environment variables are processed and made available.  Step inputs are also environment variables;\nthose are exposed only for the specific step, and right before the Step would start.  Last but not least Step outputs are exposed by the specific step,\nso those are available for subsequent steps  after the Step finishes .  The environment variable processing order:   Bitrise CLI exposed environment variables  Secrets  One-off environment variables specified for the build through the  Build Trigger API  App Env Vars  ( app: envs:  in the  bitrise.yml )  Workflow environment variables  Step inputs  Step outputs   So, why does the processing order matter?  An environment variable is only available  after  it is processed and made available. When you reference or use an environment variable, you can only reference/use those which are already processed!  A couple of examples:   In the value of a  Secret  environment variable,\n  you can use environment variables exposed by Bitrise CLI,\n  but you can't use any other environment variable (App Env Vars, Workflow Env Vars, ...),\n  as those are not processed when secrets are processed.  In the value of an  App Env Var , you can use environment variables\n  from  Secrets  as well as the Bitrise CLI exposed ones, but you can't use Workflow Env Vars,\n  nor Step inputs.  In a  Workflow environment variable  you can use all the above ( Secrets ,  App Env Vars ,\n  Bitrise CLI exposed env vars).  And finally, in step input values, you can use all other environment variables,\n  including the workflow's environment variables, as well as the outputs\n  of steps which run before the specific step.", 
            "title": "Availability order of environment variables"
        }, 
        {
            "location": "/bitrise-cli/most-important-concepts/#environment-variables-of-chained-workflows", 
            "text": "Once an environment variable of a workflow is processed and made available,\nit is available everywhere else during the build. This means that other workflows\nof the chain  can  use the environment variables of a workflow which is performed  before \nthe specific workflow, similar to Step outputs, which are available for every\nother step  after  the step (which generates the outputs) completes.  You can find more information about environment variable availability\nof Workflow env vars in chained workflows in the Workflows: Note about workflow environment variables \ndocumentation.", 
            "title": "Environment variables of chained workflows"
        }, 
        {
            "location": "/bitrise-cli/create-your-own-step/", 
            "text": "Creating your own Step is as simple as running a \nbitrise\n CLI (v1.6.1+) command and following the guide it prints.\n\n\nPlease make sure that you have at least v1.6.1 of the CLI installed on your Mac/Linux, the step plugin was introduced as a core plugin in that version (related announcement post: \nhttps://discuss.bitrise.io/t/monthly-release-of-bitrise-cli-tools-and-summary-of-updates-may-2017-cli-v1-6-1/1690\n).\n\n\n\n\nIf you don't have the \nbitrise\n CLI installed you can find the installation guide \nhere\n\n\nYou can find the \nstep\n plugin's development discussion thread at \nhttps://discuss.bitrise.io/t/step-create-plugin-quickly-generate-a-new-step/1609\n\n\n\n\nOnce you have the Bitrise CLI installed, to generate a new Bitrise Step all you have to do is:\n\n\n# If this is the very first time you use the CLI / if you just installed the CLI run this:\nbitrise setup\n\n# If you want to update the step plugin to the latest version:\nbitrise plugin update step\n\n# And to generate a new step simply run this command and follow the guide it prints:\nbitrise :step create\n\n\n\nThe generated Step's README also describes how you can run your step locally,\nbefore you'd even commit the code, as well as how you can test and use your step\nin any build by using \nthe \ngit::\n step reference\n, and finally (and optionally)\nhow you can share your step with others through the Bitrise StepLib.\n\n\nIf you'd have any questions visit our \ncommunity discussion site\n or \ncontact us\n!\n\n\nNeed some inspiration for a new step idea?\n Look no further, we have a list! \nThis way please\n :)", 
            "title": "Create your own Step"
        }, 
        {
            "location": "/docker/", 
            "text": "Docker\n is an ideal tool to create, use and share custom environments,\nas well as to provide a lightweight way to do builds in emphemeral environments (where\nthe environment is destroyed after the build, and a new one is created when the next build starts).\n\n\nUnfortunately Docker can only be used to \nrun\n Linux \nguest\n systems right now,\nand since Windows Server 2016 it's now possible to run Windows docker containers (guest system)\nbut only from Windows Server 2016 and on Windows 10 with Anniversary Update.\n\n\nDocker can be installed on Linux, macOS and Windows, but the environment (container)\nit runs can only be Linux (and Windows, on Windows Server 2016 and on Windows 10 with Anniversary Update).\nLinux containers (guest) can run on all platforms where you can install \ndocker\n (Linux, Windows, macOS, ...).\n\n\nThis is why our Android/Linux environment is provided as a docker image, but not our macOS Stacks.\n\n\nOur Linux/Android stacks have full \ndocker\n support, which means that you can run\nany \ndocker\n command during the build, and when a build runs on a Linux/Android\nstack, the build actually runs inside a docker container (but, for security,\nevery Linux/Android build gets its own Virtual Machine too, in which the build\nruns in a docker container).\n\n\nIt is possible to set a custom docker image for your builds if you select the Linux/Android\nstack, on the app's Bitrise.io page, on the \nSettings\n tab,\n\nbut in most cases you should not change this image\n,\ninstead you should run \ndocker\n commands yourself during the build, e.g. using a \nScript\n step.\n\n\nFor more Docker related information see the sub sections.", 
            "title": "Docker support on bitrise.io"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/", 
            "text": "To be able to run your Linux stack builds locally you'll need \ndocker\n.\n\n\nFor Linux just follow the \nofficial install instructions\n.\n\n\nFor Mac you can use \nDocker for Mac\n,\nwhich is probably the easiest way to get started.\n\n\nFor this example we'll use \nthis Bitrise Android sample project\n.\n\n\n\n\nLarge images ahead\n\n\nThe official Bitrise Docker images are quite large, due to the fact that it includes\na wide variety of preinstalled tools. You'll need at \nleast\n 20-25 GB free disk space!\n\n\n\n\nIf you're not familiar with the \nBitrise CLI\n\nyou should try that first. You don't have to master the CLI,\nif you know what \nbitrise run WORKFLOW\n does, that should be enough for this tutorial.\n\n\nTL;DR;\n\u2693\n\n\nIf you're familiar with \ndocker\n and the \nbitrise\n CLI:\n\n\n\n\nInstall \ndocker\n\n\nMake sure you have your \nbitrise.yml\n in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)\n\n\ncd\n into your repository's directory on your Mac/Linux\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a \nnew directory\n,\n  so that the directory will only contain the files which are committed into the repository!\n\n\n\n\n\n\ndocker pull bitriseio/docker-android:latest\n\n\ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\nNote: if you want to just jump into the container and experiment inside, you can replace \n--rm bitriseio/docker-android:latest bitrise run WORKFLOW\n with \n-it bitriseio/docker-android:latest bash\n to start an interactive bash shell inside the container. E.g.: \ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n -it bitriseio/docker-android:latest bash\n.\n\n\n\n\n\n\n\n\nKeep reading if you want to read more details and notes about the process and commands!\n\n\nGetting started\n\u2693\n\n\nOpen your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the\n\nbitriseio/docker-android\n docker image.\nYou can find other official Bitrise docker images \non our Docker Hub page\n.\nFor this example we'll use the \nbitriseio/docker-android\n one.\n\n\nDownloading docker images from the \nDocker Hub\n is quite easy:\n\n\ndocker pull bitriseio/docker-android:latest\n\n\n\nBe prepared, this can take quite a bit of time, as this image is over 10 GB.\n\nIf the download would fail or hang, you can restart it any time by running\nthe same command again.\n\n\nOnce the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration (\nbitrise.yml\n).\n\n\n\n\nbitrise.yml\n\n\nYou can download your project's \nbitrise.yml\n from the \nWorkflow Editor\n\non \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\n\n\nIn your Terminal / Command Line go to (\ncd\n) the root directory\nof \nyour repository\n, and make sure your \nbitrise.yml\n is at this location.\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a new directory,\nso that the directory will only contain the files which are committed into the repository!\n\nIt's a frequent reproducibility issue that you try to run the commands in your\nnormal working directory, where you most likely have files which are not\ncommitted into your repository, e.g. files which are in \n.gitignore\n.\n\n\nRun your builds\n\u2693\n\n\nThe only thing left to do is to actually run a build:\n\n\ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\n\nNote\n\n\nIf you want to just jump into the container and experiment inside, you can replace \n--rm bitriseio/docker-android:latest bitrise run WORKFLOW\n with \n-it bitriseio/docker-android:latest bash\n to start an interactive bash shell inside the container.\nE.g.: \ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n -it bitriseio/docker-android:latest bash\n.\nAfter this, if you want to, you can run \nbitrise run WORKFLOW\n, which will run the workflow inside the container.\nTo exit from the container just run \nexist\n.\n\n\n\n\nDon't forget to replace \nWORKFLOW\n with the actual ID of your workflow in your \nbitrise.yml\n,\nwith something like \nprimary\n!\n\n\nThis command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available \ninside\n the\ncontainer at the path \n/bitrise/src\n.\n\n\nThe \n--env CI=false\n flag sets the environment variable \nCI\n to \nfalse\n - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the \nGit Clone\n step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a \n--volume\n).\n\n\nThe \n--rm\n flag tells docker to discard the container after the \ndocker run\n\ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the \ndocker run ..\n commands are the files stored at the shared \n--volume\n\n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the \n--rm\n flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container - \nNote: simply running the command again \nwill not\n use the same container,\nbut \nwill create a new one\n!\n\n\nThe \n--privileged\n flag allows access control of the host (!) from the docker container,\nso you should never use this flag unless you trust the docker image you will use!\nThis flag is required for allowing VPNs to work (to change network configs\nof the host) for example.\n\n\nThe \n--volume \n/var/run/docker.sock:/var/run/docker.sock\n flag exposes the\ndocker socket from the host for the container - this is required\nif you want to run other docker containers from whithin the container,\nor if you want to run any \ndocker\n command during your build / inside the container.", 
            "title": "How to run your build locally in Docker"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#tldr", 
            "text": "If you're familiar with  docker  and the  bitrise  CLI:   Install  docker  Make sure you have your  bitrise.yml  in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)  cd  into your repository's directory on your Mac/Linux  If you try to reproduce an issue, you should  git clone  your repository into a  new directory ,\n  so that the directory will only contain the files which are committed into the repository!    docker pull bitriseio/docker-android:latest  docker run --privileged --env CI=false --volume  $(pwd):/bitrise/src  --volume  /var/run/docker.sock:/var/run/docker.sock  --rm bitriseio/docker-android:latest bitrise run WORKFLOW  Note: if you want to just jump into the container and experiment inside, you can replace  --rm bitriseio/docker-android:latest bitrise run WORKFLOW  with  -it bitriseio/docker-android:latest bash  to start an interactive bash shell inside the container. E.g.:  docker run --privileged --env CI=false --volume  $(pwd):/bitrise/src  --volume  /var/run/docker.sock:/var/run/docker.sock  -it bitriseio/docker-android:latest bash .     Keep reading if you want to read more details and notes about the process and commands!", 
            "title": "TL;DR;"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#getting-started", 
            "text": "Open your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the bitriseio/docker-android  docker image.\nYou can find other official Bitrise docker images  on our Docker Hub page .\nFor this example we'll use the  bitriseio/docker-android  one.  Downloading docker images from the  Docker Hub  is quite easy:  docker pull bitriseio/docker-android:latest  Be prepared, this can take quite a bit of time, as this image is over 10 GB. If the download would fail or hang, you can restart it any time by running\nthe same command again.  Once the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration ( bitrise.yml ).   bitrise.yml  You can download your project's  bitrise.yml  from the  Workflow Editor \non  bitrise.io , under the  bitrise.yml  section.   In your Terminal / Command Line go to ( cd ) the root directory\nof  your repository , and make sure your  bitrise.yml  is at this location.  If you try to reproduce an issue, you should  git clone  your repository into a new directory,\nso that the directory will only contain the files which are committed into the repository! \nIt's a frequent reproducibility issue that you try to run the commands in your\nnormal working directory, where you most likely have files which are not\ncommitted into your repository, e.g. files which are in  .gitignore .", 
            "title": "Getting started"
        }, 
        {
            "location": "/docker/run-your-build-locally-in-docker/#run-your-builds", 
            "text": "The only thing left to do is to actually run a build:  docker run --privileged --env CI=false --volume  $(pwd):/bitrise/src  --volume  /var/run/docker.sock:/var/run/docker.sock  --rm bitriseio/docker-android:latest bitrise run WORKFLOW   Note  If you want to just jump into the container and experiment inside, you can replace  --rm bitriseio/docker-android:latest bitrise run WORKFLOW  with  -it bitriseio/docker-android:latest bash  to start an interactive bash shell inside the container.\nE.g.:  docker run --privileged --env CI=false --volume  $(pwd):/bitrise/src  --volume  /var/run/docker.sock:/var/run/docker.sock  -it bitriseio/docker-android:latest bash .\nAfter this, if you want to, you can run  bitrise run WORKFLOW , which will run the workflow inside the container.\nTo exit from the container just run  exist .   Don't forget to replace  WORKFLOW  with the actual ID of your workflow in your  bitrise.yml ,\nwith something like  primary !  This command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available  inside  the\ncontainer at the path  /bitrise/src .  The  --env CI=false  flag sets the environment variable  CI  to  false  - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the  Git Clone  step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a  --volume ).  The  --rm  flag tells docker to discard the container after the  docker run \ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the  docker run ..  commands are the files stored at the shared  --volume \n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the  --rm  flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container -  Note: simply running the command again  will not  use the same container,\nbut  will create a new one !  The  --privileged  flag allows access control of the host (!) from the docker container,\nso you should never use this flag unless you trust the docker image you will use!\nThis flag is required for allowing VPNs to work (to change network configs\nof the host) for example.  The  --volume  /var/run/docker.sock:/var/run/docker.sock  flag exposes the\ndocker socket from the host for the container - this is required\nif you want to run other docker containers from whithin the container,\nor if you want to run any  docker  command during your build / inside the container.", 
            "title": "Run your builds"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/", 
            "text": "Have a question or suggestion? Join the discussion!\n\n\nYou can find this guide's discussion topic at:\n\ndiscuss.bitrise.io/t/69\n\n\n\n\nThere are two ways to use \ndocker\n on \nbitrise.io\n:\n\n\n\n\nRun \ndocker\n commands yourself, e.g. with a \nScript\n step\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\nThe first option is strongly preferred, you should not change the base environment docker image (on the \nSettings\n tab on bitrise.io)\nunless you really have to!\n Running the \ndocker\n commands yourself during the build is way more flexible,\nand provides an overall better control.\n\n\nRun docker commands during the build\n\u2693\n\n\nThis is the preferred way of using docker\n, both locally and on \nbitrise.io\n.\n\n\nAll you have to do is:\n\n\n\n\nAdd a \nScript\n step to your workflow\n\n\nAnd in the \nScript\n step run the \ndocker\n (or \ndocker-compose\n, etc.) command you want to\n\n\nAdditionally, if you want to run the build on \nbitrise.io\n, make sure that you select\n   a Linux/Android stack for the app; those stacks have \ndocker\n preinstalled and ready to use our of the box.\n\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nRunning docker hello-world\n\u2693\n\n\nFollowing the official \"getting started\" guide for example, to run the \"hello world\" docker image\nyour bitrise build configuration yml can be as simple as:\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run hello-world\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker run hello-world\n\n\n\nBuild and run a Dockerfile\n\u2693\n\n\nA bit more complex example, using your own \nDockerfile\n in your repository to define the docker environment:\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker build -t bitrise-minimal-sample .\n            docker run --rm bitrise-minimal-sample\n\n\n\nThis workflow will:\n\n\n\n\nGit Clone your repository\n\n\nAnd then run \ndocker build -t bitrise-minimal-sample .\n and \ndocker run --rm bitrise-minimal-sample\n in the repository's root.\n\n\n\n\nIf you have a \nDockerfile\n like this in the root of the repository:\n\n\nFROM alpine:3.3\n\nCMD cat /etc/alpine-release\n\n\n\nThe output will be something like:\n\n\n+------------------------------------------------------------------------------+\n| (2) docker run hello-world                                                   |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-11-21T14:28:23Z                                                   |\n+------------------------------------------------------------------------------+\n|                                                                              |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---\n 6c2aa2137d97\nStep 2 : CMD cat /etc/alpine-release\n ---\n Running in 507cfb961cc7\n ---\n 02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | docker run hello-world                                        | 4.24 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nUsing docker-compose\n\u2693\n\n\nThe previous example could be even shorter using \ndocker-compose\n.\n\n\nFor example, if you have a \ndocker-compose.yml\n like this in your repository root (where the \nDockerfile\n is):\n\n\nversion: '2'\nservices:\n  sample-app:\n    build: .\n\n\n\nYou can replace the\n\n\ndocker build -t bitrise-minimal-sample .\ndocker run --rm bitrise-minimal-sample\n\n\n\nlines with a single \ndocker-compose\n call:\n\n\ndocker-compose run --rm sample-app\n\n\n\nDocker compose will build and run the image automatically, you don't have to specify a \n-t\n tag - the \nservices\n\nname will be used by \ndocker-compose\n to tag the image automatically.\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\nUsing bitrise.io custom docker image option\n\u2693\n\n\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\n\n\nCustom Android docker image\n\n\nCreating and maintaining your own Android Docker image can be quite time consuming!\n\nIf what you need is just to install a couple of additional tools, you should do that with e.g. a Script step instead!\n\nFor more information see the \nInstall Any Additional Tool\n guide.\n\nYou should only use your own Android docker image if you really have to!\n\n\n\n\nIf you want to run your build in a custom docker environment,\n\nyou should base your own docker image on one of our base Docker images\n, as those have every base tool pre-installed,\nthe standard bitrise directories created, the Environments (like \n$BITRISE_DEPLOY_DIR\n) set,\nand are pre-cached on the build virtual machines.\n\nIf you decide to create your own Docker image please read this guide, from start to finish!\n\n\nFeel free to send Pull Request for our images if you think we missed something, which would be useful for everyone who uses our images!\n\n\nThe bare-minimum base image can be found at:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-bitrise-base/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/bitrise-base\n\n\n\n\nAndroid base image, built on the bare-minimum base image, adding Android specific tools and Envs:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-android/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android\n\n\n\n\nAndroid NDK image, built on the Android base image, adding a pre-installed Android NDK and Envs:\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/android-ndk/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android-ndk\n\n\n\n\nAs you can see, if you want to base your own image on one of our available images you can do that by specifying\nit at the very top of your \nDockerfile\n with a \nFROM bitriseio/IMAGE-ID:latest\n,\nfor example: \nFROM bitriseio/docker-bitrise-base:latest\n\n\n\n\nDon't use the \n-alpha\n images for your builds\n\n\nFor every docker image we have on Docker Hub we have a \n-alpha\n post fixed version too.\nthe \n-alpha\n ones are rebuilt frequently and are \nnot precached on \nbitrise.io\n,\nso you should avoid those. The only purpose of the \n-alpha\n images is to provide\nready to use test environments for us, before we would publish a non \n-alpha\n version.\n\n\n\n\nImportant\n: you have to use the \nDocker Hub ID\n of the image you want to use as\nthe base image (ex: \nbitriseio/docker-android\n, \nbitriseio/android-ndk\n or \nbitriseio/docker-bitrise-base\n).\n\n\nYou can find an example project which extends our Android image by\ninstalling additional SDKs at: \nhttps://github.com/viktorbenei/docker-bitrise-android-ext\n\n\nCreate the Docker Image, to be able to use it on bitrise.io\n\u2693\n\n\nYou can create it any way you want to and push it into any Docker registry.\nThe only requirement is that it have to be a \npublic\n image, private images are not (yet) supported.\n\n\nWe'll show a quick example with GitHub and Docker Hub, using Docker Hub's\nautomatic builds (it'll automatically create a new Docker image for you every time you change your Dockerfile on GitHub).\n\n\nWhat you need for this guide:\n\n\n\n\nGitHub account\n\n\nDocker Hub account\n\n\n\n\nFirst, you have to create a new repository on GitHub, and add at least a \nDockerfile\n, with a \nFROM bitriseio/IMAGE-ID:latest\n\nstatement at the top of the \nDockerfile\n, like the one you can see at:\n\nhttps://github.com/viktorbenei/docker-bitrise-android-ext/blob/master/Dockerfile#L1\n\n(\ndon't forget to commit \n push it!\n).\n\n\n\n\nWhich image to use?\n\n\n\n\nIf you don't need the Android tools you should base your image on\n   the \nbitrise-base\n (\nbitriseio/docker-bitrise-base\n) image\n   and install just the things you need.\n\n\nIf you need the Android tools then you should use\n   the \nandroid\n (\nbitriseio/docker-android\n) image\n   or the \nbitrise-base\n (\nbitriseio/docker-bitrise-base\n) image.\n\n\nYou should only use the \nandroid-ndk\n (\nbitriseio/android-ndk\n) image\n   as the base image if you actually need the NDK.\n\n\n\n\nFrom a performance perspective: you should install the least amount of tools in your image,\nas it'll make your image smaller, which means faster download \n build start.\n\n\n\n\nYou now have the description of your image. Go to \nDocker Hub\n, click \nCreate\n in the top menu and select \nCreate Automated Build\n.\nIf you haven't linked your GitHub account to your Docker Hub account you'll have to do it now.\nOnce the link between GitHub and Docker Hub is established you'll see a list of your GitHub repositories.\nSelect the repository you just created (the one with the \nDockerfile\n in its root), and follow the guide.\n\n\nCongratulation! You now have a fully automatic Docker image creation, based on your GitHub repository!\nThis means that every time you change the repository, commit \n push the change Docker Hub will pick up the new \nDockerfile\n and will build a Docker image for you.\n\n\nOne more thing you should do is to Link your image to our base image you use, so that every time our base image is updated your image will update as well.\n\n\nThis is especially important if you base your Docker image on one of our Android images.\nThose images are quite large, and if we have to do a change in the base Docker image and you don't build a new image,\n\nyour image will require the old base image, which won't be pre-cached\n on the build Virtual Machines anymore!\nThis means that to \ndocker pull\n your image it won't be enough to download just the diffs anymore,\n\nthe whole image will have to be pulled\n which might even result in errors like \"no space left on the device\" -\nto \ndocker pull\n the base Android image, if no cache is available, it already requires ~10GB disk space, and the Android NDK image is even larger!\n\n\nLink your image to one of ours\n: you can do this on DockerHub, on the \nBuild Settings\n tab,\nunder the \nRepository Links\n section. Just specify the ID of our Docker image (ex: \nbitriseio/docker-android\n),\nsave the link and the next time the specified image is updated your image will be re-built as well (using the \nDockerfile\n in \nyour\n repository).\n\n\nUse your own (public) Docker image for your builds\n\u2693\n\n\nOnce you have your own Docker image and you verified that it can be \ndocker pull\n-ed,\nyou can set its ID on the \nSettings\n tab of your app on \nbitrise.io\n,\nin the \nStack Selector\n section.\n\n\nYou just have to copy paste the ID of your image (e.g. \nbitriseio/docker-bitrise-base\n)\ninto the \nDocker image to use\n field and click the \nSave\n button.\nYour next build will use the image you specified.\n\n\n\n\nHave a question or suggestion? Join the discussion!\n\n\nYou can find this guide's discussion topic at:\n\ndiscuss.bitrise.io/t/69", 
            "title": "Use your own Docker image"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#run-docker-commands-during-the-build", 
            "text": "This is the preferred way of using docker , both locally and on  bitrise.io .  All you have to do is:   Add a  Script  step to your workflow  And in the  Script  step run the  docker  (or  docker-compose , etc.) command you want to  Additionally, if you want to run the build on  bitrise.io , make sure that you select\n   a Linux/Android stack for the app; those stacks have  docker  preinstalled and ready to use our of the box.   You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Run docker commands during the build"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#running-docker-hello-world", 
            "text": "Following the official \"getting started\" guide for example, to run the \"hello world\" docker image\nyour bitrise build configuration yml can be as simple as:  ---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch:  * \n  workflow: primary\n- pull_request_source_branch:  * \n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run hello-world\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker run hello-world", 
            "title": "Running docker hello-world"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#build-and-run-a-dockerfile", 
            "text": "A bit more complex example, using your own  Dockerfile  in your repository to define the docker environment:  ---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch:  * \n  workflow: primary\n- pull_request_source_branch:  * \n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker build -t bitrise-minimal-sample .\n            docker run --rm bitrise-minimal-sample  This workflow will:   Git Clone your repository  And then run  docker build -t bitrise-minimal-sample .  and  docker run --rm bitrise-minimal-sample  in the repository's root.   If you have a  Dockerfile  like this in the root of the repository:  FROM alpine:3.3\n\nCMD cat /etc/alpine-release  The output will be something like:  +------------------------------------------------------------------------------+\n| (2) docker run hello-world                                                   |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-11-21T14:28:23Z                                                   |\n+------------------------------------------------------------------------------+\n|                                                                              |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---  6c2aa2137d97\nStep 2 : CMD cat /etc/alpine-release\n ---  Running in 507cfb961cc7\n ---  02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | docker run hello-world                                        | 4.24 sec |\n+---+---------------------------------------------------------------+----------+  You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Build and run a Dockerfile"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#using-docker-compose", 
            "text": "The previous example could be even shorter using  docker-compose .  For example, if you have a  docker-compose.yml  like this in your repository root (where the  Dockerfile  is):  version: '2'\nservices:\n  sample-app:\n    build: .  You can replace the  docker build -t bitrise-minimal-sample .\ndocker run --rm bitrise-minimal-sample  lines with a single  docker-compose  call:  docker-compose run --rm sample-app  Docker compose will build and run the image automatically, you don't have to specify a  -t  tag - the  services \nname will be used by  docker-compose  to tag the image automatically.  You can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the  Bitrise CLI : https://github.com/bitrise-samples/minimal-docker", 
            "title": "Using docker-compose"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#using-bitriseio-custom-docker-image-option", 
            "text": "Use a Linux/Android stack and set the environment docker image for the app ( Settings  tab)    Custom Android docker image  Creating and maintaining your own Android Docker image can be quite time consuming! If what you need is just to install a couple of additional tools, you should do that with e.g. a Script step instead! \nFor more information see the  Install Any Additional Tool  guide. You should only use your own Android docker image if you really have to!   If you want to run your build in a custom docker environment, you should base your own docker image on one of our base Docker images , as those have every base tool pre-installed,\nthe standard bitrise directories created, the Environments (like  $BITRISE_DEPLOY_DIR ) set,\nand are pre-cached on the build virtual machines. If you decide to create your own Docker image please read this guide, from start to finish!  Feel free to send Pull Request for our images if you think we missed something, which would be useful for everyone who uses our images!  The bare-minimum base image can be found at:   Docker Hub:  https://hub.docker.com/r/bitriseio/docker-bitrise-base/  GitHub:  https://github.com/bitrise-docker/bitrise-base   Android base image, built on the bare-minimum base image, adding Android specific tools and Envs:   Docker Hub:  https://hub.docker.com/r/bitriseio/docker-android/  GitHub:  https://github.com/bitrise-docker/android   Android NDK image, built on the Android base image, adding a pre-installed Android NDK and Envs:   Docker Hub:  https://hub.docker.com/r/bitriseio/android-ndk/  GitHub:  https://github.com/bitrise-docker/android-ndk   As you can see, if you want to base your own image on one of our available images you can do that by specifying\nit at the very top of your  Dockerfile  with a  FROM bitriseio/IMAGE-ID:latest ,\nfor example:  FROM bitriseio/docker-bitrise-base:latest   Don't use the  -alpha  images for your builds  For every docker image we have on Docker Hub we have a  -alpha  post fixed version too.\nthe  -alpha  ones are rebuilt frequently and are  not precached on  bitrise.io ,\nso you should avoid those. The only purpose of the  -alpha  images is to provide\nready to use test environments for us, before we would publish a non  -alpha  version.   Important : you have to use the  Docker Hub ID  of the image you want to use as\nthe base image (ex:  bitriseio/docker-android ,  bitriseio/android-ndk  or  bitriseio/docker-bitrise-base ).  You can find an example project which extends our Android image by\ninstalling additional SDKs at:  https://github.com/viktorbenei/docker-bitrise-android-ext", 
            "title": "Using bitrise.io custom docker image option"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#create-the-docker-image-to-be-able-to-use-it-on-bitriseio", 
            "text": "You can create it any way you want to and push it into any Docker registry.\nThe only requirement is that it have to be a  public  image, private images are not (yet) supported.  We'll show a quick example with GitHub and Docker Hub, using Docker Hub's\nautomatic builds (it'll automatically create a new Docker image for you every time you change your Dockerfile on GitHub).  What you need for this guide:   GitHub account  Docker Hub account   First, you have to create a new repository on GitHub, and add at least a  Dockerfile , with a  FROM bitriseio/IMAGE-ID:latest \nstatement at the top of the  Dockerfile , like the one you can see at: https://github.com/viktorbenei/docker-bitrise-android-ext/blob/master/Dockerfile#L1 \n( don't forget to commit   push it! ).   Which image to use?   If you don't need the Android tools you should base your image on\n   the  bitrise-base  ( bitriseio/docker-bitrise-base ) image\n   and install just the things you need.  If you need the Android tools then you should use\n   the  android  ( bitriseio/docker-android ) image\n   or the  bitrise-base  ( bitriseio/docker-bitrise-base ) image.  You should only use the  android-ndk  ( bitriseio/android-ndk ) image\n   as the base image if you actually need the NDK.   From a performance perspective: you should install the least amount of tools in your image,\nas it'll make your image smaller, which means faster download   build start.   You now have the description of your image. Go to  Docker Hub , click  Create  in the top menu and select  Create Automated Build .\nIf you haven't linked your GitHub account to your Docker Hub account you'll have to do it now.\nOnce the link between GitHub and Docker Hub is established you'll see a list of your GitHub repositories.\nSelect the repository you just created (the one with the  Dockerfile  in its root), and follow the guide.  Congratulation! You now have a fully automatic Docker image creation, based on your GitHub repository!\nThis means that every time you change the repository, commit   push the change Docker Hub will pick up the new  Dockerfile  and will build a Docker image for you.  One more thing you should do is to Link your image to our base image you use, so that every time our base image is updated your image will update as well.  This is especially important if you base your Docker image on one of our Android images.\nThose images are quite large, and if we have to do a change in the base Docker image and you don't build a new image, your image will require the old base image, which won't be pre-cached  on the build Virtual Machines anymore!\nThis means that to  docker pull  your image it won't be enough to download just the diffs anymore, the whole image will have to be pulled  which might even result in errors like \"no space left on the device\" -\nto  docker pull  the base Android image, if no cache is available, it already requires ~10GB disk space, and the Android NDK image is even larger!  Link your image to one of ours : you can do this on DockerHub, on the  Build Settings  tab,\nunder the  Repository Links  section. Just specify the ID of our Docker image (ex:  bitriseio/docker-android ),\nsave the link and the next time the specified image is updated your image will be re-built as well (using the  Dockerfile  in  your  repository).", 
            "title": "Create the Docker Image, to be able to use it on bitrise.io"
        }, 
        {
            "location": "/docker/use-your-own-docker-image/#use-your-own-public-docker-image-for-your-builds", 
            "text": "Once you have your own Docker image and you verified that it can be  docker pull -ed,\nyou can set its ID on the  Settings  tab of your app on  bitrise.io ,\nin the  Stack Selector  section.  You just have to copy paste the ID of your image (e.g.  bitriseio/docker-bitrise-base )\ninto the  Docker image to use  field and click the  Save  button.\nYour next build will use the image you specified.   Have a question or suggestion? Join the discussion!  You can find this guide's discussion topic at: discuss.bitrise.io/t/69", 
            "title": "Use your own (public) Docker image for your builds"
        }, 
        {
            "location": "/xamarin/", 
            "text": "With \nXamarin\n integration you can now build your\niOS and Android Xamarin applications on \nBitrise\n.\n\n\nWe have listed a couple of tutorials to help you get started, but if you get stuck,\nfeel free to \ncontact us\n!\n\n\nXamarin tutorials\n\u2693\n\n\nHighlighted\n:\nA great overview and a detailed \"getting started\" tutorial: check out \nJames Montemagno\n's\nvideo session about setting up Xamarin apps on Bitrise here: \nhttps://www.youtube.com/watch?v=1UeNajpjIXY\n\n\nGetting Started\n\u2693\n\n\n\n\nConnect your Xamarin account to Bitrise\n \n\n\nCreating your first App on Bitrise\n\n\nRestore NuGet packages and Xamarin Components\n\n\n\n\nCode Signing\n\u2693\n\n\n\n\niOS code signing\n\n\nAndroid code signing\n \n\n\n\n\nAdvanced\n\u2693\n\n\n\n\nDeploy your Xamarin app\n\n\nAdd Unit Test to your Xamarin app\n\n\nRun your tests in the Xamarin Test Cloud\n\n\nAdd custom sources to NuGet\n \n\n\nBuild with FAKE (F# Make)\n\n\n\n\n\n\nCommunity created tutorials\n\n\nFor more, community created tutorials, see the Xamarin section on the\n\nCommunity Created Tutorials\n page.", 
            "title": "About Xamarin"
        }, 
        {
            "location": "/xamarin/#xamarin-tutorials", 
            "text": "Highlighted :\nA great overview and a detailed \"getting started\" tutorial: check out  James Montemagno 's\nvideo session about setting up Xamarin apps on Bitrise here:  https://www.youtube.com/watch?v=1UeNajpjIXY", 
            "title": "Xamarin tutorials"
        }, 
        {
            "location": "/xamarin/#getting-started", 
            "text": "Connect your Xamarin account to Bitrise    Creating your first App on Bitrise  Restore NuGet packages and Xamarin Components", 
            "title": "Getting Started"
        }, 
        {
            "location": "/xamarin/#code-signing", 
            "text": "iOS code signing  Android code signing", 
            "title": "Code Signing"
        }, 
        {
            "location": "/xamarin/#advanced", 
            "text": "Deploy your Xamarin app  Add Unit Test to your Xamarin app  Run your tests in the Xamarin Test Cloud  Add custom sources to NuGet    Build with FAKE (F# Make)    Community created tutorials  For more, community created tutorials, see the Xamarin section on the Community Created Tutorials  page.", 
            "title": "Advanced"
        }, 
        {
            "location": "/xamarin/connect-your-xamarin-account-to-bitrise/", 
            "text": "A connected Xamarin account is required if you use Xamarin Components\nfor example, which requires Xamarin authentication.\n\n\nTo connect your Xamarin account to your Bitrise.io account,\nopen your \nAccount Settings page on bitrise.io\n,\nand click the toggle in the left sidebar where you see \nXamarin\n.\n\n\nHere you can type in your username and password.\nPlease note that \nwe won't store your username or password\n,\nwe send an authentication request with these information to the Xamarin\nserver and store only the returned authentication token.\n\n\nIf you'd want to remove the connection just turn off the toggle.\n\n\nActivating the Xamarin connection for an App on Bitrise.io\n\u2693\n\n\nTo select/activate a Xamarin account connection for an App,\ngo to the app's page on \nbitrise.io\n, select the \nTeam\n tab,\nand set the \nbitrise.io\n user in the \nService credential User\n section.", 
            "title": "Connect your Xamarin account to Bitrise"
        }, 
        {
            "location": "/xamarin/connect-your-xamarin-account-to-bitrise/#activating-the-xamarin-connection-for-an-app-on-bitriseio", 
            "text": "To select/activate a Xamarin account connection for an App,\ngo to the app's page on  bitrise.io , select the  Team  tab,\nand set the  bitrise.io  user in the  Service credential User  section.", 
            "title": "Activating the Xamarin connection for an App on Bitrise.io"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/", 
            "text": "To restore your \nNuGet\n packages or \nXamarin Components\n\nsimply navigate to the app on \nbitrise.io\n,\nand select the \nWorkflow\n tab to open the Workflow Editor.\n\n\nRestore Nuget packages\n\u2693\n\n\nAdd the \nNuGet Restore\n step to your workflow, after the \nGit Clone\n step.\nBy default the step will use the same solution file that you have provided when you added your app,\nbut you can simply modify it if you need to.\n\n\nRestore Xamarin Components\n\u2693\n\n\nAdd the \nXamarin Components Restore\n step, after the \nXamarin User Management\n step.\n\n\nXamarin Components requires Xamarin authentication - for more information\nplease see the \nConnect your Xamarin account to Bitrise\n guide!", 
            "title": "Restore NuGet packages and Xamarin Components"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/#restore-nuget-packages", 
            "text": "Add the  NuGet Restore  step to your workflow, after the  Git Clone  step.\nBy default the step will use the same solution file that you have provided when you added your app,\nbut you can simply modify it if you need to.", 
            "title": "Restore Nuget packages"
        }, 
        {
            "location": "/xamarin/restore-nuget-packages-and-xamarin-components/#restore-xamarin-components", 
            "text": "Add the  Xamarin Components Restore  step, after the  Xamarin User Management  step.  Xamarin Components requires Xamarin authentication - for more information\nplease see the  Connect your Xamarin account to Bitrise  guide!", 
            "title": "Restore Xamarin Components"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/", 
            "text": "After successfully adding your Xamarin application we will create a default workflow (build configuration) for you.\nThis workflow includes a \nDeploy to bitrise.io\n step by default.\n\n\nBuilding the default workflow will checkout your git repository,\narchive your application and move all the generated applications ( \nipa\n / \napk\n ) to the deployment folder.\nAfter the archive the \nDeploy to bitrise.io\n step will upload these files to Bitrise.\n\n\nWe will not just upload your application,\nbut send out an email to your team as well.\nThey can simply open the email from their mobile device and install the application from there.\nAlso you can send out the build to any tester by providing their email address.\n\n\nBut what if you are already using or want to use another deployment service?\n\u2693\n\n\nBesides the default Bitrise deployment we have \ndozens of other services integrated\n to Bitrise.\nYou can simply modify your workflow and add the ones you would like to,\nlike \nHockeyApp\n, \nAppaloosa\n\nor \nTestFairy\n -\njust filter by the \ndeploy\n tag in the list to see all the available deployment steps.\n\n\nSimply add the integration Step you want to use instead of the \nDeploy to bitrise.io\n step or after that\n(but in any case after the \nXamarin Archive\n step, as that's the step which generates the\ndeployable artifact - \n.ipa\n, \n.apk\n, ...), and fill out the parameters of the step.\n\n\nThe next time you start a build your app will be deployed to the service of your choice!\n\n\nCode signing\n\u2693\n\n\nXamarin.Android\n\u2693\n\n\nFor Xamarin Android project code signing see the \nCreate signed APK on bitrise.io\n tutorial.\n\n\nXamarin.iOS\n\u2693\n\n\nWork in progress\n - this section will be updated soon.\n\n\nRight now the best way to get started with Xamarin.iOS code signing\nis to run \ncodesigndoc\n\nand upload the files it generates, or to manually upload the code signing\nfiles you use locally.\n\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.", 
            "title": "Deploy your Xamarin app"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#but-what-if-you-are-already-using-or-want-to-use-another-deployment-service", 
            "text": "Besides the default Bitrise deployment we have  dozens of other services integrated  to Bitrise.\nYou can simply modify your workflow and add the ones you would like to,\nlike  HockeyApp ,  Appaloosa \nor  TestFairy  -\njust filter by the  deploy  tag in the list to see all the available deployment steps.  Simply add the integration Step you want to use instead of the  Deploy to bitrise.io  step or after that\n(but in any case after the  Xamarin Archive  step, as that's the step which generates the\ndeployable artifact -  .ipa ,  .apk , ...), and fill out the parameters of the step.  The next time you start a build your app will be deployed to the service of your choice!", 
            "title": "But what if you are already using or want to use another deployment service?"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#code-signing", 
            "text": "", 
            "title": "Code signing"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#xamarinandroid", 
            "text": "For Xamarin Android project code signing see the  Create signed APK on bitrise.io  tutorial.", 
            "title": "Xamarin.Android"
        }, 
        {
            "location": "/xamarin/deploy-your-xamarin-app/#xamarinios", 
            "text": "Work in progress  - this section will be updated soon.  Right now the best way to get started with Xamarin.iOS code signing\nis to run  codesigndoc \nand upload the files it generates, or to manually upload the code signing\nfiles you use locally.  Code signing files can be uploaded to  bitrise.io \nin the app's Workflow Editor, under the  Code signing   Files  section of the editor.", 
            "title": "Xamarin.iOS"
        }, 
        {
            "location": "/xamarin/add-unit-test-to-your-xamarin-app/", 
            "text": "Work in progress\n\n\nPrevious, outdated tutorial can be found at: \nhttp://bitrise.readme.io/v1.0/docs/add-unit-test-to-your-xamarin-app\n .", 
            "title": "Add UITest to your Xamarin app"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/", 
            "text": "To add \nXamarin Test Cloud\n to your Xamarin application,\ngo to your app's \nWorkflow\n tab on \nbitrise.io\n to open the Workflow Editor.\n\n\nXamarin Test Cloud for iOS apps\n\u2693\n\n\nIn the Workflow Editor \nadd\n\nthe \nXamarin Test Cloud for iOS\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use\n\n\n\n\nXamarin Test Cloud for Android apps\n\u2693\n\n\nIn the Workflow Editor \nadd\n\nadd the \nXamarin Test Cloud for Android\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use", 
            "title": "Run your tests in the Xamarin Test Cloud"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/#xamarin-test-cloud-for-ios-apps", 
            "text": "In the Workflow Editor  add \nthe  Xamarin Test Cloud for iOS  step to the workflow.\nAfter adding the step you should set the following parameters:   Path to Xamarin UITest Project : The relative path to your test project  (relative to the repository's root directory)  User email : Your Xamarin user's email address  Api key : Your Xamarin Test Cloud API key  Device selection id : The device id that you would like to use", 
            "title": "Xamarin Test Cloud for iOS apps"
        }, 
        {
            "location": "/xamarin/run-your-tests-in-the-xamarin-test-cloud/#xamarin-test-cloud-for-android-apps", 
            "text": "In the Workflow Editor  add \nadd the  Xamarin Test Cloud for Android  step to the workflow.\nAfter adding the step you should set the following parameters:   Path to Xamarin UITest Project : The relative path to your test project  (relative to the repository's root directory)  User email : Your Xamarin user's email address  Api key : Your Xamarin Test Cloud API key  Device selection id : The device id that you would like to use", 
            "title": "Xamarin Test Cloud for Android apps"
        }, 
        {
            "location": "/xamarin/add-custom-sources-to-nuget/", 
            "text": "If you are using third-party NuGet packages in your application\nyou have to add these sources to your NuGet package sources.\n\n\nSimply add a new \nScript\n step to your workflow with the following bash script as the content:\n\n\n#!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL\n\n\n\n\n\nWarning\n\n\nDon't forget to update the \nNAME_FOR_SOURCE\n and \nSOURCE_URL\n parameters,\nand make sure to place the \nScript\n step before the \nNuGet Restore Step\n.\n\n\n\n\nCustom NuGet source with credentials\n\u2693\n\n\nIf you need to set credentials for your NuGet source you can modify the \nScript\n above in the following way:\n\n\n#!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL -UserName NUGET_USERNAME -Password NUGET_PASSWORD", 
            "title": "Add custom sources to NuGet"
        }, 
        {
            "location": "/xamarin/add-custom-sources-to-nuget/#custom-nuget-source-with-credentials", 
            "text": "If you need to set credentials for your NuGet source you can modify the  Script  above in the following way:  #!/bin/bash\nset -ex\n\nnuget sources add -Name NAME_FOR_SOURCE -Source SOURCE_URL -UserName NUGET_USERNAME -Password NUGET_PASSWORD", 
            "title": "Custom NuGet source with credentials"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/", 
            "text": "Having more time to be creative is the key to great inventions.\nWe believe that giving developers the chance to work without distractions is the most important thing that can lead to extraordinary creations.\nOur mission is to provide a platform that lets you concentrate on the process of creation,\ninstead of the administrative tasks that get in the way of it.\n\n\nThat's why we created Bitrise. But we're not alone in this!\nWe love how \nFelix Krause\n sought to solve this problem by\ncreating \nfastlane\n. So by the combined force of earth, water, fire and wind\u2026\nwe integrated the whole \nfastlane toolkit\n - booyah! How cool is that!\n\n\n\n\nBitrise offline CLI\n\n\nWe have an open source, offline CLI, which can be used in a similar way as \nfastlane\n.\nIf you're interested, you can find the CLI's website \nhere\n,\nand its GitHub repository \nhere\n.\nYou can use this CLI to run your bitrise configurations locally, which can\ninclude runing \nfastlane\n too as part of the build, as described below ;)\n\n\n\n\nWhat is fastlane?\n\u2693\n\n\nfastlane\n lets you define and run your deployment pipelines for different environments.\nIt helps you unify and automate your app's release process.\n\nfastlane\n connects all \nfastlane tools\n and third party tools, like CocoaPods and xctool.\n\n\nfastlane\n is a collection of ruby gems that cover the most usual tasks required during iOS app development\nand upload or update to the App Store.\n\n\nHow to get started?\n\u2693\n\n\nUsing \nfastlane\n for your workflow is easy as pie. Just \nadd the \nFastlane\n step to your\nworkflow\n,\nafter the \nGit Clone\n step (and any other dependency step).\n\n\n\n\nNote\n\n\nYou should also add/keep the \nCertificate and profile installer\n step in the workflow,\nto download your \n.p12 Certificates\n and \nProvisioning Profiles\n uploaded to \nbitrise.io\n\nand to install them. \nEven if you don't upload your files to \nbitrise.io\n\nand instead you use a fastlane tool to manage your code signing files you should\nstill keep this step in the workflow\n. Read more about \niOS Code Signing using\nthird party tools\n.\n\n\n\n\nWith adding the \nfastlane\n step we ensure that you are running on the latest \nfastlane\n version,\nas it is pre-installed on all our VMs.\nInside the step you can set the \nfastlane\n action and we will run it automatically every time you push a new code change.\n\n\nFor more configuration options see the \nFastlane\n step's description in the Workflow Editor!\n\n\n\n\nNote\n\n\nIf you want to use \nbitrise.io\n to store your code signing files,\nyou should just follow the \niOS Code Signing guide here\n.\n\n\n\n\nWhat's next?\n\u2693\n\n\nfastlane\n's greatness comes from its ability to define different lanes for your different deployment needs - hence the name.\nYou can combine this with Bitrise and run separate lanes for separate branches, automatically.\nFor example you can run a lane for every code push onto the \nmaster\n branch to update your\nscreenshots and metadata on the App Store and to release the distribution version,\nand a separate lane for the \ndevelop\n branch to deploy your test releases\nand all the others to ensure that nobody has broken anything.\nYou can simply clone the workflow as many times as you want to,\nand use the \nTrigger\n feature of \nbitrise.io\n to define\nwhich Workflow to be selected for this branch / tag / pull request.\nYou can find more information about the Triggers feature in the\n\nControl what to build when, with the Trigger Map\n guide.\n\n\nWe hope that you are as happy as we are to have this amazing tool inside Bitrise. Go ahead and try it out!\n\n\nAnd as always, happy building!", 
            "title": "fastlane tools integration"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#what-is-fastlane", 
            "text": "fastlane  lets you define and run your deployment pipelines for different environments.\nIt helps you unify and automate your app's release process. fastlane  connects all  fastlane tools  and third party tools, like CocoaPods and xctool.  fastlane  is a collection of ruby gems that cover the most usual tasks required during iOS app development\nand upload or update to the App Store.", 
            "title": "What is fastlane?"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#how-to-get-started", 
            "text": "Using  fastlane  for your workflow is easy as pie. Just  add the  Fastlane  step to your\nworkflow ,\nafter the  Git Clone  step (and any other dependency step).   Note  You should also add/keep the  Certificate and profile installer  step in the workflow,\nto download your  .p12 Certificates  and  Provisioning Profiles  uploaded to  bitrise.io \nand to install them.  Even if you don't upload your files to  bitrise.io \nand instead you use a fastlane tool to manage your code signing files you should\nstill keep this step in the workflow . Read more about  iOS Code Signing using\nthird party tools .   With adding the  fastlane  step we ensure that you are running on the latest  fastlane  version,\nas it is pre-installed on all our VMs.\nInside the step you can set the  fastlane  action and we will run it automatically every time you push a new code change.  For more configuration options see the  Fastlane  step's description in the Workflow Editor!   Note  If you want to use  bitrise.io  to store your code signing files,\nyou should just follow the  iOS Code Signing guide here .", 
            "title": "How to get started?"
        }, 
        {
            "location": "/fastlane/fastlane-tools-integration/#whats-next", 
            "text": "fastlane 's greatness comes from its ability to define different lanes for your different deployment needs - hence the name.\nYou can combine this with Bitrise and run separate lanes for separate branches, automatically.\nFor example you can run a lane for every code push onto the  master  branch to update your\nscreenshots and metadata on the App Store and to release the distribution version,\nand a separate lane for the  develop  branch to deploy your test releases\nand all the others to ensure that nobody has broken anything.\nYou can simply clone the workflow as many times as you want to,\nand use the  Trigger  feature of  bitrise.io  to define\nwhich Workflow to be selected for this branch / tag / pull request.\nYou can find more information about the Triggers feature in the Control what to build when, with the Trigger Map  guide.  We hope that you are as happy as we are to have this amazing tool inside Bitrise. Go ahead and try it out!  And as always, happy building!", 
            "title": "What's next?"
        }, 
        {
            "location": "/fastlane/how-to-configure-fastlane-match-for-bitrise/", 
            "text": "If you want to use \nfastlane match\n\nin your \nbitrise.io\n build you only have to do three things:\n\n\n\n\nMake sure that a single SSH key can be used to \ngit clone\n both your main repository (the one\n   you register on \nbitrise.io\n) and the \nmatch\n repository.\n   You can find more info \nin this guide\n.\n\n\nAdd an environment variable \nMATCH_PASSWORD\n, as\n   \ndescribed in \nmatch\n's docs\n,\n   to specify the \nEncryption password\n you used for \nmatch\n.\n   On \nbitrise.io\n you should add this as a \nSecret Environment Variable\n,\n   in the \nWorkflow Editor\n.\n   \nMake sure to \ndisable\n the \nReplace variables in input?\n option of the environment\n   variable, to not to cause issues when the value includes the \n$\n (dollar) sign, which is used\n   for environment variable expansion.\n\n   \n\n\nMake sure to use \nmatch\n's \nreadonly\n mode, or else \nmatch\n will try to connect\n   to the Apple Developer Portal, which requires further authorization (providing additional\n   username and password for Apple Dev Portal login)!\n\n\nIf you use \nmatch\n in your \nFastfile\n or \nfastlane\n config: \nmatch(app_identifier: \nmy.domain\n, type: \nappstore\n, readonly: true)\n\n\nIf you use it as a command line tool: \nmatch development --readonly\n\n\nMore info in \nmatch\n's \nofficial readme / docs\n\n\n\n\n\n\n\n\nThat's all, you can now enjoy the utility of \nmatch\n, automated with \nbitrise.io\n \ud83d\ude80", 
            "title": "How to configure fastlane match for Bitrise"
        }, 
        {
            "location": "/tutorials/community-created/", 
            "text": "If you write a tutorial or blog post about Bitrise feel free to\n\nadd it to this list yourself\n\nor \ncontact us\n and we'll add it for you!\n\n\nEnglish\n\u2693\n\n\nGetting Started\n\u2693\n\n\n\n\nHow to implement mobile continuous integration(CI) and delivery(CD) using bitrise.io\n\n\n\n\niOS\n\u2693\n\n\n\n\nLet's automate Swift builds with Bitrise\n\n\nThe Road to Bitrise\n - \nswitching from Jenkins\n\n\nBitrise and Carthage - a simple guide about how to use Carthage on Bitrise\n\n\n\n\nAndroid\n\u2693\n\n\n\n\nSeamless Android Builds With Bitrise. Offload Your System\n\n\nHow to automate Android build process on Bitrise CI (part 1)\n\n\nHow to automate Android build process on Bitrise CI (part 2)\n\n\nHow to Connect Physical Devices to Bitrise.io\n - \nOpen STF\n integration\n\n\n\n\nXamarin\n\u2693\n\n\n\n\njfarrell.net\n tutorial series\n\n\nWelcome to Bitrise\n\n\nGetting Started with Bitrise\n\n\nUnderstanding Workflows\n\n\n\n\n\n\nXamarin project setup on Bitrise.io\n - \nyoutube video\n\n\nXamarin Continuous Integration with Bitrise.io\n - \nXamarin project setup guide with Code Signing notes\n\n\n(Xamarin) Continuous Integration and Deployment with Bitrise\n - \ngetting started guide\n\n\nMotz Codes Live: Continuous Integration \n Deployment for Xamarin with Bitrise\n - \nyoutube video, detailed guide\n\n\n\n\nReact Native\n\u2693\n\n\n\n\nTesting in React Native\u200a\u2014\u200aJest \n Detox\n\n\nHow to automate your React Native deployment workflow using Bitrise\n\n\nContinuous Integration for React Native Apps With Fastlane and Bitrise (iOS)\n\n\nSnowflake: React Native app Continuous Integration with Bitrise.io\n - \ndetailed setup guide with youtube videos\n\n\nBitrise + CodePush + React Native = Ideal Mobile CI Setup?\n\n\n\n\nCordova\n\u2693\n\n\n\n\nHow to build Cordova-based Android project on bitrise.io\n\n\n\n\nmacOS app\n\u2693\n\n\n\n\nContinuous happiness for Mac\n - \nbuild your Mac projects on Bitrise\n\n\n\n\nOther\n\u2693\n\n\n\n\nImproved Continuous Integration With Bitrise \u2013 R\u00e9my Chantenay (Travelex)\n\n\nI was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.\n\n\nThe Trials of Mobile Automation at InVision\n - \nChatOps with Slack and Bitrise\n\n\nHow to send commit changes by email once CI build passes?\n\n\nContinuous integration made easy with Bitrise\n - \nintro to Step development\n\n\nHow to Create Bitrise Step in Go \u2013 Flutter Example\n - \nStep development in Golang\n\n\n\n\nJapanese\n\u2693\n\n\n\n\nReactNative \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Bitrise \u3067\u30d3\u30eb\u30c9\u3059\u308b\n - \nBuild ReactNative app with Bitrise\n\n\nbitrise + deploygate\u3067titanium\u30a2\u30d7\u30ea\u8a55\u4fa1\u74b0\u5883\u3092\u4f5c\u308b\n - \nTitanium, Bitrise and deploygate\n\n\nBitrise\u3067iTunesConnect\u306b\u81ea\u52d5\u3067ipa\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\niOS\u30ea\u30ea\u30fc\u30b9\u624b\u9806\n - \nAutomate the deployment of iOS apps to iTunesConnect\n\n\nBitrise\u306eScheduled Build\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u304c\u8a70\u307e\u308b\u554f\u984c\u3092\u6539\u5584\u3059\u308b\n - \nUse Bitrise's Scheduled Build to optimize build times\n\n\nBITRISE\u3092\u7528\u3044\u305fAndroid\u30a2\u30d7\u30ea\u306e\u81ea\u52d5\u914d\u5e03\n - \nAutomatic distribution of Android apps using Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nDetailed introduction guide\n\n\niOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy iOS apps to Deploygate\n\n\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy Android apps to Deploygate\n\n\nBITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n - \nSlideShare\n\n\nCircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f\n - \nMigrating a CircleCI configuration to Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2\n - \nNotes about using Bitrise for iOS Continuous Integration\n\n\n\u4ffa\u7684Bitrise\u6d3b\u7528\u8853\n\n\niOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nSlideShare\n\n\nBitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b\n - \nBitrise + fastlane, automate testing \n deployment (to Crashlytics) of iOS apps\n\n\nXcode iOS CI Tutorial Bitrise\u7de8 -Amarron Blog\n\n\nfastlane\u3068Bitrise\u3067iOS\u30a2\u30d7\u30ea\u306eCI\u59cb\u3081\u307e\u3057\u305f\n - \nCI with Bitrise and fastlane\n\n\n\n\nPortuguese\n\u2693\n\n\n\n\nComo implementar mobile continuous integration(CI) e delivery(CD) usando bitrise.io\n\n\n\n\nPersian\n\u2693\n\n\n\n\n\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise\n - \nVideo tutorial about CI/CD with Bitrise", 
            "title": "Community Created Tutorials"
        }, 
        {
            "location": "/tutorials/community-created/#english", 
            "text": "", 
            "title": "English"
        }, 
        {
            "location": "/tutorials/community-created/#getting-started", 
            "text": "How to implement mobile continuous integration(CI) and delivery(CD) using bitrise.io", 
            "title": "Getting Started"
        }, 
        {
            "location": "/tutorials/community-created/#ios", 
            "text": "Let's automate Swift builds with Bitrise  The Road to Bitrise  -  switching from Jenkins  Bitrise and Carthage - a simple guide about how to use Carthage on Bitrise", 
            "title": "iOS"
        }, 
        {
            "location": "/tutorials/community-created/#android", 
            "text": "Seamless Android Builds With Bitrise. Offload Your System  How to automate Android build process on Bitrise CI (part 1)  How to automate Android build process on Bitrise CI (part 2)  How to Connect Physical Devices to Bitrise.io  -  Open STF  integration", 
            "title": "Android"
        }, 
        {
            "location": "/tutorials/community-created/#xamarin", 
            "text": "jfarrell.net  tutorial series  Welcome to Bitrise  Getting Started with Bitrise  Understanding Workflows    Xamarin project setup on Bitrise.io  -  youtube video  Xamarin Continuous Integration with Bitrise.io  -  Xamarin project setup guide with Code Signing notes  (Xamarin) Continuous Integration and Deployment with Bitrise  -  getting started guide  Motz Codes Live: Continuous Integration   Deployment for Xamarin with Bitrise  -  youtube video, detailed guide", 
            "title": "Xamarin"
        }, 
        {
            "location": "/tutorials/community-created/#react-native", 
            "text": "Testing in React Native\u200a\u2014\u200aJest   Detox  How to automate your React Native deployment workflow using Bitrise  Continuous Integration for React Native Apps With Fastlane and Bitrise (iOS)  Snowflake: React Native app Continuous Integration with Bitrise.io  -  detailed setup guide with youtube videos  Bitrise + CodePush + React Native = Ideal Mobile CI Setup?", 
            "title": "React Native"
        }, 
        {
            "location": "/tutorials/community-created/#cordova", 
            "text": "How to build Cordova-based Android project on bitrise.io", 
            "title": "Cordova"
        }, 
        {
            "location": "/tutorials/community-created/#macos-app", 
            "text": "Continuous happiness for Mac  -  build your Mac projects on Bitrise", 
            "title": "macOS app"
        }, 
        {
            "location": "/tutorials/community-created/#other", 
            "text": "Improved Continuous Integration With Bitrise \u2013 R\u00e9my Chantenay (Travelex)  I was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.  The Trials of Mobile Automation at InVision  -  ChatOps with Slack and Bitrise  How to send commit changes by email once CI build passes?  Continuous integration made easy with Bitrise  -  intro to Step development  How to Create Bitrise Step in Go \u2013 Flutter Example  -  Step development in Golang", 
            "title": "Other"
        }, 
        {
            "location": "/tutorials/community-created/#japanese", 
            "text": "ReactNative \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Bitrise \u3067\u30d3\u30eb\u30c9\u3059\u308b  -  Build ReactNative app with Bitrise  bitrise + deploygate\u3067titanium\u30a2\u30d7\u30ea\u8a55\u4fa1\u74b0\u5883\u3092\u4f5c\u308b  -  Titanium, Bitrise and deploygate  Bitrise\u3067iTunesConnect\u306b\u81ea\u52d5\u3067ipa\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9 iOS\u30ea\u30ea\u30fc\u30b9\u624b\u9806  -  Automate the deployment of iOS apps to iTunesConnect  Bitrise\u306eScheduled Build\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u304c\u8a70\u307e\u308b\u554f\u984c\u3092\u6539\u5584\u3059\u308b  -  Use Bitrise's Scheduled Build to optimize build times  BITRISE\u3092\u7528\u3044\u305fAndroid\u30a2\u30d7\u30ea\u306e\u81ea\u52d5\u914d\u5e03  -  Automatic distribution of Android apps using Bitrise  iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f  -  Detailed introduction guide  iOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy iOS apps to Deploygate  Android\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046  -  Using Bitrise to deploy Android apps to Deploygate  BITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059  -  SlideShare  CircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f  -  Migrating a CircleCI configuration to Bitrise  iOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2  -  Notes about using Bitrise for iOS Continuous Integration  \u4ffa\u7684Bitrise\u6d3b\u7528\u8853  iOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f  -  SlideShare  Bitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b  -  Bitrise + fastlane, automate testing   deployment (to Crashlytics) of iOS apps  Xcode iOS CI Tutorial Bitrise\u7de8 -Amarron Blog  fastlane\u3068Bitrise\u3067iOS\u30a2\u30d7\u30ea\u306eCI\u59cb\u3081\u307e\u3057\u305f  -  CI with Bitrise and fastlane", 
            "title": "Japanese"
        }, 
        {
            "location": "/tutorials/community-created/#portuguese", 
            "text": "Como implementar mobile continuous integration(CI) e delivery(CD) usando bitrise.io", 
            "title": "Portuguese"
        }, 
        {
            "location": "/tutorials/community-created/#persian", 
            "text": "\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise  -  Video tutorial about CI/CD with Bitrise", 
            "title": "Persian"
        }, 
        {
            "location": "/tutorials/hipchat-message/", 
            "text": "You can send \nHipChat\n messages during your build.\n\n\nYou can, for example, send a \nHipChat\n message with the Build's \nbitrise.io\n URL,\nthe build's status (at the point where you include the HipChat step - usually it's best to\nmake it the very last step of the Workflow) and with the Public Install Page for the app.\n\n\nTo do this all you have to do is:\n\n\n\n\nadd a \nSend HipChat message\n step to your app's Workflow, after the \nDeploy to Bitrise.io step\n,\n\n\nfill out the required inputs (authentication token, the room's ID you want to send the message to,\n   color of the message, ...),\n\n\nand in the \nMessage\n input field you can include environment variables\n   defined by Bitrise and by the steps which run before the HipChat Message step.\n\n\n\n\n\n\nNote\n\n\nIf you click into any Step input field, an \nInsert Variable\n button will appear.\nWith this you can insert environment variables defined by Bitrise\n(for example the App's title, the Build's unique ID or the Build's URL on Bitrise)\nand environment variables exported by Steps which ran before this step\n(for example an Xcode Build's status or the generated IPA path).\n\n\n\n\nFill out the HipChat steps' required input fields, and for the HipChat Message\nstep's \nMessage\n input include the build's url with the \n$BITRISE_BUILD_URL\n environment variable,\nthe build's status at that point with the \n$BITRISE_BUILD_STATUS\n variable,\nand the related Public Install Page URL with \n$BITRISE_PUBLIC_INSTALL_PAGE_URL\n.\n\n\nAn example \nMessage\n input:\n\n\nYour build's details can be found at: $BITRISE_BUILD_URL,\nand the Public Install page at: $BITRISE_PUBLIC_INSTALL_PAGE_URL\n\nBuild status: $BITRISE_BUILD_STATUS\n\n\n\nThat's all. Once you configure your Workflow this way and start a new build,\nyou'll be notified about the build and deploy on HipChat,\nincluding both the build's details url and the app's Public Install Page url.", 
            "title": "HipChat message with build status and details"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/", 
            "text": "How to upload files to bitrise's \nGeneric File Storage\n?\n\u2693\n\n\n\n\nOpen your app on \nbitrise.io\n\n\nGo to \nWorkflow\n tab, to open the \nWorkflow Editor\n\n\nOn the left side of \nWorkflow Editor\n select \nCode signing \n Files\n\n\nScroll down to \nGeneric File Storage\n section and click on \n+ Add another File\n\n\nEnter your uniqe id and select your file you want to upload\n\n\n\n\n\n\nNote\n\n\nBitrise will upload your file and assign an environment variable (\nBITRISEIO_[the ID you specify]_URL\n)\nto the file's download url. A \ntime limited, read only download URL\n will\nbe set as the value of this Environment Variable\nfor every build. You can use this URL to download the file during a build._\n\n\n\n\nHow to use files uploaded to Bitrise's \nGeneric File Storage\n?\n\u2693\n\n\nYou can refer the file's read-only download url with the environment variable (\nBITRISEIO_[the ID you specify]_URL\n) you defined at upload.\n\n\nSome steps have built-in support for downloading the file from a specified URL.\nThese steps can use \nBITRISEIO_[the ID you specify]_URL\n as input value directly.\n\nExample: the \ncertificate-and-profile-installer\n step's \ncertificate_url\n\n\ninput\n.\n\n\nOther steps might require local file paths, and don't support URLs directly as the input value.\nIf that's the case you can use the \nFile Downloader\n or\nthe generic \nScript\n step to download your file, and (optionally) export the downloaded file's path as an environment variable.\n\n\nExample to download a file using the \nFile Downloader\n step\n\u2693\n\n\nAssuming the file's Generic File Storage url is assigned to \nBITRISEIO_MY_FILE_ID_URL\n, the script step would look like:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: \n$BITRISEIO_MY_FILE_ID_URL\n\n    - destination: \n$BITRISE_SOURCE_DIR/path/to/store/the/file\n\n...\n\n\n\nYou can set the location as an \nApp Env Var\n instead of specifying it\ndirectly for the \ndestination\n input. That way you can refer the file\nthrough the environment variable in other steps, you won't have to\nspecify the path every time.\n\n\nFor example, if you specify the \nBITRISEIO_MY_FILE_LOCAL_PATH\n as an \nApp Env Var\n,\nyou can use it as the download destination like:\n\n\n...\n- file-downloader:\n    inputs:\n    - source: \n$BITRISEIO_MY_FILE_ID_URL\n\n    - destination: \n$BITRISEIO_MY_FILE_LOCAL_PATH\n\n...\n\n\n\nAnd then in subsequent steps you can use the same \n$BITRISEIO_MY_FILE_LOCAL_PATH\n env var\nas the file path.\n\n\nExample to download a file and export the file's path, using a \nScript\n step\n\u2693\n\n\nAssuming the file's Generic File Storage url is assigned to \nBITRISEIO_MY_FILE_ID_URL\n, the script step would look like:\n\n\n- script:\n    inputs:\n    - content: |\n        #!/bin/bash\n        set -ex\n\n        # specify local download path\n        file_local_path=download/path/to/my/file\n\n        # download the file\n        wget -O \n$file_local_path\n \n$BITRISEIO_MY_FILE_ID_URL\n\n        echo \nfile downloaded to: $file_local_path\n\n\n        # OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\n        envman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value \n$file_local_path\n\n\n\nIn subsequent steps you can refer the downloaded file's path with \n$BITRISEIO_MY_FILE_LOCAL_PATH\n.\nAlternatively you can set the location as an \nApp Env Var\n for example, and\nsimply download it to that path instead of defining the path\ninside the Script.", 
            "title": "How to use the Generic File Storage"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#how-to-upload-files-to-bitrises-generic-file-storage", 
            "text": "Open your app on  bitrise.io  Go to  Workflow  tab, to open the  Workflow Editor  On the left side of  Workflow Editor  select  Code signing   Files  Scroll down to  Generic File Storage  section and click on  + Add another File  Enter your uniqe id and select your file you want to upload    Note  Bitrise will upload your file and assign an environment variable ( BITRISEIO_[the ID you specify]_URL )\nto the file's download url. A  time limited, read only download URL  will\nbe set as the value of this Environment Variable\nfor every build. You can use this URL to download the file during a build._", 
            "title": "How to upload files to bitrise's Generic File Storage?"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#how-to-use-files-uploaded-to-bitrises-generic-file-storage", 
            "text": "You can refer the file's read-only download url with the environment variable ( BITRISEIO_[the ID you specify]_URL ) you defined at upload.  Some steps have built-in support for downloading the file from a specified URL.\nThese steps can use  BITRISEIO_[the ID you specify]_URL  as input value directly. Example: the  certificate-and-profile-installer  step's  certificate_url  input .  Other steps might require local file paths, and don't support URLs directly as the input value.\nIf that's the case you can use the  File Downloader  or\nthe generic  Script  step to download your file, and (optionally) export the downloaded file's path as an environment variable.", 
            "title": "How to use files uploaded to Bitrise's Generic File Storage?"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#example-to-download-a-file-using-the-file-downloader-step", 
            "text": "Assuming the file's Generic File Storage url is assigned to  BITRISEIO_MY_FILE_ID_URL , the script step would look like:  ...\n- file-downloader:\n    inputs:\n    - source:  $BITRISEIO_MY_FILE_ID_URL \n    - destination:  $BITRISE_SOURCE_DIR/path/to/store/the/file \n...  You can set the location as an  App Env Var  instead of specifying it\ndirectly for the  destination  input. That way you can refer the file\nthrough the environment variable in other steps, you won't have to\nspecify the path every time.  For example, if you specify the  BITRISEIO_MY_FILE_LOCAL_PATH  as an  App Env Var ,\nyou can use it as the download destination like:  ...\n- file-downloader:\n    inputs:\n    - source:  $BITRISEIO_MY_FILE_ID_URL \n    - destination:  $BITRISEIO_MY_FILE_LOCAL_PATH \n...  And then in subsequent steps you can use the same  $BITRISEIO_MY_FILE_LOCAL_PATH  env var\nas the file path.", 
            "title": "Example to download a file using the File Downloader step"
        }, 
        {
            "location": "/tutorials/how-to-use-the-generic-file-storage/#example-to-download-a-file-and-export-the-files-path-using-a-script-step", 
            "text": "Assuming the file's Generic File Storage url is assigned to  BITRISEIO_MY_FILE_ID_URL , the script step would look like:  - script:\n    inputs:\n    - content: |\n        #!/bin/bash\n        set -ex\n\n        # specify local download path\n        file_local_path=download/path/to/my/file\n\n        # download the file\n        wget -O  $file_local_path   $BITRISEIO_MY_FILE_ID_URL \n        echo  file downloaded to: $file_local_path \n\n        # OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\n        envman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value  $file_local_path  In subsequent steps you can refer the downloaded file's path with  $BITRISEIO_MY_FILE_LOCAL_PATH .\nAlternatively you can set the location as an  App Env Var  for example, and\nsimply download it to that path instead of defining the path\ninside the Script.", 
            "title": "Example to download a file and export the file's path, using a Script step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/", 
            "text": "You can do this in quite a few ways, these are probably the easiest ones:\n\n\n\n\nuse the \nZIP resource archive downloader\n step for downloading and extracting a ZIP file\n\n\nuse the \nFile Downloader\n step to download a single file\n\n\nuse a \nScript\n Step\n\n\n\n\n\n\nStore the resources file on \nbitrise.io\n\n\nYou can store the resources file on \nbitrise.io\n.\nIn the Workflow Editor select the \"Code signing \n Files\" section,\nand upload the archive file in the \"Generic File Storage\" section.\nBitrise will automatically generate a (time limited, expiring) download URL\nfor the files you upload here, and will expose the download URL\nas an Environment Variable.\n\n\n\n\nUsing the \nZIP resource archive downloader\n step\n\u2693\n\n\nIf you have your resources on your server in a zip archive, all you have to do\nis to add the \nZIP resource archive downloader\n Step to your Workflow,\nspecify the URL of the ZIP and the destination where the zip's content should be uncompressed.\n\n\nThe \nsource code of your app\n will be (by default) downloaded into the folder\ndefined in the \n$BITRISE_SOURCE_DIR\n environment variable.\n\n\nIf you want to place the content of your ZIP archive into a folder called \nmyresource\n\ninside your app's source code directory, you can define the extract target folder\n(of the \nZIP resource archive downloader\n step) as \n${BITRISE_SOURCE_DIR}/myresource\n,\nor \n./myresource\n (as the default working directory is the source code directory).\n\n\nSingle file - using the \nFile Downloader\n step\n\u2693\n\n\nIf you only want to download a single file, you can of course ZIP it up and\nuse the \nZIP resource archive downloader\n step as described in the previous section,\nbut there's also a step for single file downloads.\n\n\nThe \nFile Downloader\n step can be used for this use case. Works very similarly as the\n\nZIP resource archive downloader\n step, except it does not require a ZIP file,\nit simply downloads the specified file to the location you set.\n\n\n...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_my_file_id_URL\n    - destination: \n$BITRISE_SOURCE_DIR/path/to/store/the/file\n\n...\n\n\n\nThe \"manual\" way\n\u2693\n\n\nIf you want to control the whole download process, you can use the \nScript\n step\nand write your own download code, something like this:\n\n\n#!/bin/bash\nset -ex\n# Download your resource\ncurl -fo \ndownload/path\n \nhttps://url/of/your/resource\n\n# Uncompress it\nunzip -u \ndownload/path\n -d \nuncompress/target/path\n\n\n\nIf you'd need an additional tool to download or uncompress the resources file,\nplease see the \nInstall Any Additional Tool\n guide.", 
            "title": "Download or replace project resources"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#using-the-zip-resource-archive-downloader-step", 
            "text": "If you have your resources on your server in a zip archive, all you have to do\nis to add the  ZIP resource archive downloader  Step to your Workflow,\nspecify the URL of the ZIP and the destination where the zip's content should be uncompressed.  The  source code of your app  will be (by default) downloaded into the folder\ndefined in the  $BITRISE_SOURCE_DIR  environment variable.  If you want to place the content of your ZIP archive into a folder called  myresource \ninside your app's source code directory, you can define the extract target folder\n(of the  ZIP resource archive downloader  step) as  ${BITRISE_SOURCE_DIR}/myresource ,\nor  ./myresource  (as the default working directory is the source code directory).", 
            "title": "Using the ZIP resource archive downloader step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#single-file-using-the-file-downloader-step", 
            "text": "If you only want to download a single file, you can of course ZIP it up and\nuse the  ZIP resource archive downloader  step as described in the previous section,\nbut there's also a step for single file downloads.  The  File Downloader  step can be used for this use case. Works very similarly as the ZIP resource archive downloader  step, except it does not require a ZIP file,\nit simply downloads the specified file to the location you set.  ...\n- file-downloader:\n    inputs:\n    - source: $BITRISEIO_my_file_id_URL\n    - destination:  $BITRISE_SOURCE_DIR/path/to/store/the/file \n...", 
            "title": "Single file - using the File Downloader step"
        }, 
        {
            "location": "/tutorials/download-or-replace-project-resources/#the-manual-way", 
            "text": "If you want to control the whole download process, you can use the  Script  step\nand write your own download code, something like this:  #!/bin/bash\nset -ex\n# Download your resource\ncurl -fo  download/path   https://url/of/your/resource \n# Uncompress it\nunzip -u  download/path  -d  uncompress/target/path  If you'd need an additional tool to download or uncompress the resources file,\nplease see the  Install Any Additional Tool  guide.", 
            "title": "The \"manual\" way"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/", 
            "text": "An efficient CI/CD Workflow for iOS development\n\u2693\n\n\nTo achieve an efficient workflow for rapid iOS app development you have to specify the\nautomation scenarios and the triggers to start specific scenarios.\n\n\nAdditionally you most likely want to minimize the number of tools, configurations and\nmanual steps required to achieve your automated development workflow.\n\n\nTo make the whole process as easy as possible (and still flexible enough to support a\nbroad range of tasks you might want to perform as part of your automation) was one of\nthe fundamental principles when we started \nBitrise.io\n.\n\n\nRequirements\n\u2693\n\n\nGit\n is the most popular modern\n\nDistributed Version Control System (DVCS)\n at the moment,\nits branching system provides the flexibility to efficiently organize your app's code repository.\n\n\nThrough \nhooks\n \ngit\n is ideal to be the trigger of your automation scenarios, \nno other tools required\n.\n\n\nWell, actually there's one more thing: you have to organize your git repository\nbranches in a way which is easy to manage and also which can be used to identify\nwhat automation scenario should be performed when a change happens on a specific branch.\n\n\nLet's do it!\n\u2693\n\n\nThe most popular git branching model which fulfills these requirements is\n\nGitflow\n.\nYou can use other branching models but we'll use Gitflow jargon to describe the concepts.\n\n\nA very minimalistic summary of how Gitflow works:\n\n\n\n\nYou have two fixed, main branches:\n\n\nmaster\n : it should only contain the code of release versions\n\n\ndevelop\n : it's the root branch for development, the integration or synchronization branch for developers\n\n\n\n\n\n\nYou work on \nfeature\n branches:\n\n\nAlways start the feature branch from the \ndevelop\n branch.\n\n\nOnce a feature (issue / task) is finished you close the related feature branch, merging\n  the feature's code back to the integration \ndevelop\n branch.\n\n\n\n\n\n\nOnce you're ready for a release, you merge from \ndevelop\n to \nmaster\n (through a Gitflow \nrelease\n)\n\n\n\n\nWith this model you can always see the active tasks (\nfeature\n branches), the latest \"staging\" or \"beta\" code (\ndevelop\n branch) and the released versions (\nmaster\n branch).\n\n\nYour branches have separate meanings / purposes, which make this branching model a naturally good fit for automation.\n\n\nSo with a branching model like Gitflow and through \nwebhooks\n,\nyou can define and automate three main scenarios:\n\n\n\n\nChange on a \nfeature\n branch: while a feature is under active development you mostly\n   want to continuously \ntest the code\n, checking whether it still fulfills\n   the defined tests, so when it's finished and you merge it back to the \ndevelop\n branch,\n   it won't break anything.\n\n\nChange on \ndevelop\n branch: this is the main integration point of finished features / tasks.\n   If you or your team works on multiple features simultaneously, those independent features might introduce\n   conflicting changes, so you want to always \ntest\n the code changes on \ndevelop\n to detect these breaking changes.\n   If the tests do pass, you or your testers might want to give a manual spin for that particular version\n   of the app, so you configure an \nautomatic deployment\n which should make the version accessible\n   for those use are in charge of testing the new versions.\n   It's also a good idea to \nnotify the testers\n when a new test version is available.\n\n\nEverything worked, your app is rock solid, was tested both automatically with unit and other tests\n   and manually by your internal testers, and now it's ready for prime time.\n   Fantastic! Now you can create a \nrelease\n, which in Gitflow will merge the code from \ndevelop\n into\n   the \nmaster\n branch. As always, just to be absolutely sure, you want to run\n   your \nautomatic tests\n one last time.\n   If it passes you want to \nbuild the release version of the App\n,\n   \ndeploy it\n for your external beta testers / your project manager / anyone who agreed\n   to test your precious app before the App Store submission.\n   And of course you don't want to forget to \ninvite your testers\n, do you?\n\n\n\n\nThe beauty of Gitflow (or a similar branching model) is that if you use an automation service\nlike \nBitrise\n you can define these scenarios,\nconnect to the related branches and you'll never have to do these tasks manually.\n\n\nYou can just work on your code\n, organized into branches and that's all.\n\nEverything else will happen automatically\n, based on which branch changed.\n\n\nGit + Bitrise\n\u2693\n\n\nBitrise is built specifically to help you with this kind of automation.\nTo achieve an automated workflow like the one described in the previous section this is all what you have to do:\n\n\n\n\nRegister your App's repository\n on \nBitrise\n\n   (\nDon't forget to setup a \nwebhook\n!\n If you connect your repository through\n   our GitHub or Bitbucket integration options, Bitrise will do this automatically for you).\n\n\nPrepare your App's \nPrimary Workflow\n to include the \ntests\n you would like to run on every code change.\n\n\nCreate a \nnew Workflow for your develop branch\n and add the \ndeployment\n\n   and \nnotification\n steps you would like to use.\n   For example, you can use Bitrise's built in App Deployment system\n   and send email and Slack notifications when a test build is available -\n   you can find dozens of Steps in our library or you can just add \nscript\n steps\n   and do anything you want to.\n\n\nCreate another \nWorkflow for your master branch\n and configure it for\n   the \ndeployment\n of release versions, \nnotifying\n your beta testers or project manager,\n   maybe even \nSend a Text message\n.\n\n\n\n\nThat's all, no other setup is required\n.\nYou can customize your Workflows the way you want and you can\n\ncontrol everything with nothing but your code repository!\n\n\n\n\nNote\n\n\nYou can create unlimited number of Workflows\nso if you have a more complex branching model\nyou can configure your automations to support the way you work.\n\n\n\n\nWe have a great amount of Steps you can choose from\nand \nall of these Steps are open source\n,\nso if you want to modify one or create a brand new Step you can do that too!", 
            "title": "Efficient Continuous Integration and Deployment Workflow for iOS development"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#an-efficient-cicd-workflow-for-ios-development", 
            "text": "To achieve an efficient workflow for rapid iOS app development you have to specify the\nautomation scenarios and the triggers to start specific scenarios.  Additionally you most likely want to minimize the number of tools, configurations and\nmanual steps required to achieve your automated development workflow.  To make the whole process as easy as possible (and still flexible enough to support a\nbroad range of tasks you might want to perform as part of your automation) was one of\nthe fundamental principles when we started  Bitrise.io .", 
            "title": "An efficient CI/CD Workflow for iOS development"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#requirements", 
            "text": "Git  is the most popular modern Distributed Version Control System (DVCS)  at the moment,\nits branching system provides the flexibility to efficiently organize your app's code repository.  Through  hooks   git  is ideal to be the trigger of your automation scenarios,  no other tools required .  Well, actually there's one more thing: you have to organize your git repository\nbranches in a way which is easy to manage and also which can be used to identify\nwhat automation scenario should be performed when a change happens on a specific branch.", 
            "title": "Requirements"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#lets-do-it", 
            "text": "The most popular git branching model which fulfills these requirements is Gitflow .\nYou can use other branching models but we'll use Gitflow jargon to describe the concepts.  A very minimalistic summary of how Gitflow works:   You have two fixed, main branches:  master  : it should only contain the code of release versions  develop  : it's the root branch for development, the integration or synchronization branch for developers    You work on  feature  branches:  Always start the feature branch from the  develop  branch.  Once a feature (issue / task) is finished you close the related feature branch, merging\n  the feature's code back to the integration  develop  branch.    Once you're ready for a release, you merge from  develop  to  master  (through a Gitflow  release )   With this model you can always see the active tasks ( feature  branches), the latest \"staging\" or \"beta\" code ( develop  branch) and the released versions ( master  branch).  Your branches have separate meanings / purposes, which make this branching model a naturally good fit for automation.  So with a branching model like Gitflow and through  webhooks ,\nyou can define and automate three main scenarios:   Change on a  feature  branch: while a feature is under active development you mostly\n   want to continuously  test the code , checking whether it still fulfills\n   the defined tests, so when it's finished and you merge it back to the  develop  branch,\n   it won't break anything.  Change on  develop  branch: this is the main integration point of finished features / tasks.\n   If you or your team works on multiple features simultaneously, those independent features might introduce\n   conflicting changes, so you want to always  test  the code changes on  develop  to detect these breaking changes.\n   If the tests do pass, you or your testers might want to give a manual spin for that particular version\n   of the app, so you configure an  automatic deployment  which should make the version accessible\n   for those use are in charge of testing the new versions.\n   It's also a good idea to  notify the testers  when a new test version is available.  Everything worked, your app is rock solid, was tested both automatically with unit and other tests\n   and manually by your internal testers, and now it's ready for prime time.\n   Fantastic! Now you can create a  release , which in Gitflow will merge the code from  develop  into\n   the  master  branch. As always, just to be absolutely sure, you want to run\n   your  automatic tests  one last time.\n   If it passes you want to  build the release version of the App ,\n    deploy it  for your external beta testers / your project manager / anyone who agreed\n   to test your precious app before the App Store submission.\n   And of course you don't want to forget to  invite your testers , do you?   The beauty of Gitflow (or a similar branching model) is that if you use an automation service\nlike  Bitrise  you can define these scenarios,\nconnect to the related branches and you'll never have to do these tasks manually.  You can just work on your code , organized into branches and that's all. Everything else will happen automatically , based on which branch changed.", 
            "title": "Let's do it!"
        }, 
        {
            "location": "/tutorials/efficient-continuous-integration-and-deployment-workflow-for-ios/#git-bitrise", 
            "text": "Bitrise is built specifically to help you with this kind of automation.\nTo achieve an automated workflow like the one described in the previous section this is all what you have to do:   Register your App's repository  on  Bitrise \n   ( Don't forget to setup a  webhook !  If you connect your repository through\n   our GitHub or Bitbucket integration options, Bitrise will do this automatically for you).  Prepare your App's  Primary Workflow  to include the  tests  you would like to run on every code change.  Create a  new Workflow for your develop branch  and add the  deployment \n   and  notification  steps you would like to use.\n   For example, you can use Bitrise's built in App Deployment system\n   and send email and Slack notifications when a test build is available -\n   you can find dozens of Steps in our library or you can just add  script  steps\n   and do anything you want to.  Create another  Workflow for your master branch  and configure it for\n   the  deployment  of release versions,  notifying  your beta testers or project manager,\n   maybe even  Send a Text message .   That's all, no other setup is required .\nYou can customize your Workflows the way you want and you can control everything with nothing but your code repository!   Note  You can create unlimited number of Workflows\nso if you have a more complex branching model\nyou can configure your automations to support the way you work.   We have a great amount of Steps you can choose from\nand  all of these Steps are open source ,\nso if you want to modify one or create a brand new Step you can do that too!", 
            "title": "Git + Bitrise"
        }, 
        {
            "location": "/tutorials/vpn-configuration/", 
            "text": "Do you require a VPN connection for your build, to be able to connect to your server,\neither to \ngit clone\n your repository or to access a private API?\nIf yes, then this tutorial is for you!\n\n\nTechnical infos\n\u2693\n\n\nConnecting to a VPN, in short, works like this:\n\n\n\n\nthe build starts\n\n\nyou install \n configure the VPN components you need\n\n\nyou start the VPN\n\n\nyou proceed with the build\n\n\n\n\nObviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN \nbefore\n the \nGit Clone\n step, but in general\nyou can configure \n connect to the VPN anywhere in your Workflow, \nbefore\n you'd use the\nconnection.\n\n\nYou can choose other VPN tools, not just the one shown here (\nstrongswan\n),\nthis is just one example setup which works on \nbitrise.io\n.\n\n\nOne important note\n: when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to \nnot to restart / abort\n existing SSH sessions!\nThe \nbitrise.io\n workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!\n\n\nExample\n\u2693\n\n\nThis is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a \nScript Step\n in your \nbitrise\n\nconfiguration (\nbitrise.yml\n / Workflow).\n\n\n#!/usr/bin/env bash\nset -e\n\necho \nWAN IP\n\n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase \n$OSTYPE\n in\n  linux*)\n    echo \nConfiguring for Linux\n\n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo \nInstalling Strongswan...\n\n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo \nConfiguring for Mac OS\n\n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo \nInstalling OpenSSL...\n\n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo \nInstalling Strongswan...\n\n    brew install strongswan\n\n    ;;\n  *)\n    echo \nUnknown operative system: $OSTYPE, exiting\n\n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval \necho \\\n$(cat $1)\\\n\n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, see examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho \nDownloading ipsec.conf...\n\nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho \nDownloading ipsec.secrets...\n\nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho \nDownloading server.crt...\n\nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho \nRendering config templates\n\nrender_template $temp_dir/ipsec.conf.template \n $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template \n $temp_dir/ipsec.secrets\n\necho \nInstalling configuration\n\n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho \nStarting ipsec\n\nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho \nStatus ipsec\n\nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho \nInitiating VPN connection\n\nsudo ipsec up myconnection\n\nsleep 1\n\ncase \n$OSTYPE\n in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo \nRestarting ipsec\n\n    sudo ipsec restart\n\n    sleep 1\n\n    echo \nInitiating VPN connection\n\n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo \nDisabling IPv6 and forcing DNS settings\n\n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off \n$main_interface\n\n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers \n$main_interface\n 10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Configure and connect to your VPN"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#technical-infos", 
            "text": "Connecting to a VPN, in short, works like this:   the build starts  you install   configure the VPN components you need  you start the VPN  you proceed with the build   Obviously, if you require a VPN connection in order to access your code repository,\nyou have to connect to the VPN  before  the  Git Clone  step, but in general\nyou can configure   connect to the VPN anywhere in your Workflow,  before  you'd use the\nconnection.  You can choose other VPN tools, not just the one shown here ( strongswan ),\nthis is just one example setup which works on  bitrise.io .  One important note : when you choose your VPN tool and do the setup/configuration,\nyou have to be careful to  not to restart / abort  existing SSH sessions!\nThe  bitrise.io  workers will abort the build\nif the SSH connection between the build's Control/Master machine and\nthe Build virtual machine terminates!", 
            "title": "Technical infos"
        }, 
        {
            "location": "/tutorials/vpn-configuration/#example", 
            "text": "This is an example script which you can either save into your repository and run\nit from there, or just copy paste its content into a  Script Step  in your  bitrise \nconfiguration ( bitrise.yml  / Workflow).  #!/usr/bin/env bash\nset -e\n\necho  WAN IP \n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http://httpbin.org/ip\n\ncase  $OSTYPE  in\n  linux*)\n    echo  Configuring for Linux \n\n    # Variables\n    etc_dir=/etc\n    etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n    # Install strongswan\n    echo  Installing Strongswan... \n    sudo apt-get install -y strongswan\n\n    ;;\n  darwin*)\n    echo  Configuring for Mac OS \n\n    # Variables\n    etc_dir=/usr/local/etc\n    etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n    # Install Strongswan using homebrew\n    echo  Installing OpenSSL... \n    # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n    brew install openssl\n    echo  Installing Strongswan... \n    brew install strongswan\n\n    ;;\n  *)\n    echo  Unknown operative system: $OSTYPE, exiting \n    exit 1\n    ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n  eval  echo \\ $(cat $1)\\ \n}\n\n# Create a temporary directory to hold files\ntemp_dir=/tmp/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, see examples at https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1Examples and https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples\necho  Downloading ipsec.conf... \nwget https://www.example.com/ipsec.conf.template -O $temp_dir/ipsec.conf.template\n# IPsec credentials file, see documentation at https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets\necho  Downloading ipsec.secrets... \nwget https://www.example.com/ipsec.secrets.template -O $temp_dir/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho  Downloading server.crt... \nwget https://www.example.com/server.crt -O $temp_dir/server.crt\n\necho  Rendering config templates \nrender_template $temp_dir/ipsec.conf.template   $temp_dir/ipsec.conf\nrender_template $temp_dir/ipsec.secrets.template   $temp_dir/ipsec.secrets\n\necho  Installing configuration \n$etc_sudo cp $temp_dir/ipsec.conf $etc_dir/ipsec.conf\n$etc_sudo cp $temp_dir/ipsec.secrets $etc_dir/ipsec.secrets\n$etc_sudo cp $temp_dir/server.crt $etc_dir/ipsec.d/ocspcerts/server.crt\n\n# Start the ipsec service\necho  Starting ipsec \nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho  Status ipsec \nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho  Initiating VPN connection \nsudo ipsec up myconnection\n\nsleep 1\n\ncase  $OSTYPE  in\n  linux*)\n    ;;\n  darwin*)\n    # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n    echo  Restarting ipsec \n    sudo ipsec restart\n\n    sleep 1\n\n    echo  Initiating VPN connection \n    sudo ipsec up myconnection\n\n    sleep 1\n\n    # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0/0)\n    # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n    echo  Disabling IPv6 and forcing DNS settings \n    # Fetch main interface\n    main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '/\\(1\\)/ {print $2}')\n    # Completely disable IPv6\n    sudo networksetup -setv6off  $main_interface \n    # Switch 10.0.0.1 with your DNS server\n    sudo networksetup -setdnsservers  $main_interface  10.0.0.1\n    ;;\n  *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection \ud83c\udf89", 
            "title": "Example"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/", 
            "text": "This tutorial helps you create a basic static website project (e.g. a Blog) with \nMiddleman\n,\nconnect and deploy it with Bitrise.\n\n\n1. Create and clone a repository on Github\n\u2693\n\n\nTo create a new repository on Github, \nclick here\n.\nYou need to sign in with your Github account, or sign up if you don't have one yet.\nOnce you created your repository, clone it.\n\n\n2. Install Middleman\n\u2693\n\n\nMiddleman is distributed using the RubyGems package manager.\nThis means you will need both the Ruby language runtime installed and RubyGems to begin using Middleman.\n\n\nMacOS comes prepackaged with Ruby, however, some of the Middleman's dependencies need to be compiled\nduring installation and on macOS that requires Xcode.\nXcode can be installed via the \nMac App Store\n.\nAlternately you can just install the Xcode Command Line Tools, that should be enough\nif you don't want to install the full Xcode.app.\n\n\nOnce you have Ruby and Xcode (Command Line Tools), execute the following from the command line:\n\n\ngem install middleman\n\n\n\nThis will install Middleman, its dependencies and the command-line tools for using Middleman.\n\n\n3. Create a Middleman project\n\u2693\n\n\nTo create a Middleman project, navigate to the root folder of your repository and execute the following from the command line:\n\n\nmiddleman init my_new_project\n\n\n\nOnce the setup is finished, commit and push your changes.\n\n\n4. Connect your repository with Bitrise\n\u2693\n\n\nTo connect your repository with Bitrise, visit the \nBitrise\n site.\nYou need to sign in with your Bitrise account, or sign up if you don't have one yet.\nOnce you're signed in, select \nAdd new App\n in the top dropdown menu.\n\n\nIn the first step, you need to select the provider, where you store your code, in this case, GitHub.\n\n\nIn the second step, you will see a list of all your repositories on GitHub. Select the one you just created.\n\n\nIn the third step, you will get an alert, since the repository you are connecting is not an Xcode project.\nSelect \"Configure Manually\", then enter the branch name \"master\".\n\n\n5. Prepare your Workflow\n\u2693\n\n\nOnce you created your project, select it in the \nDashboard\n\nand select the \nWorkflow\n tab from the top menu.\nWe are going to add a bash script that will be executed on each build.\nFirst, delete all the automatically created steps (if any).\nNext, we need to add new steps.\nYou can add new steps by clicking on the \n+\n sign button between steps / in the step list and selecting the step\nfrom the step list popup. Add the following steps to your Workflow, in this order:\n\n\n\n\nActivate SSH key\n - unless you used the public, non SSH URL of the repository during the Add New App process\n\n\nGit Clone Repository\n\n\nScript\n\n\n\n\nSelect the \nScript\n step and add the following lines:\n\n\n#!/bin/bash\nset -ex\nbundle install\nbundle exec middleman build --verbose\n\n\n\nThe above code installs the dependencies specified in your \nGemfile\n, and runs a Middleman build on the virtual machine.\n\n\n6. Deploy to Amazon S3: Add an Amazon S3 bucket sync to your Workflow steps\n\u2693\n\n\nNow we are going to add and customize an Amazon S3 bucket sync to the Workflow steps.\nClick on the \nAdd new Step\n button and select \nAmazon S3 bucket sync\n from the step list.\n\n\nSelect the step to customize it.\n\n\n\n\nEnter your AWS access key\n\n\nYour AWS secret key\n\n\nAnd enter a name for your S3 bucket.\n\n\nFor your local path, enter the following: \n$BITRISE_SOURCE_DIR/build/\n\n\n\n\nThis will select the \ncontents\n of the build folder in the project source path on the virtual machine.\nIt will be uploaded on every build.\n\n\nFor access control, enter \npublic-read\n or \nprivate\n, as advised.\n\n\n\n\nAlternative deploy destinations\n\n\nYou can of course use \nHeroku\n, GitHub pages or any other service\nas your deployment target.\nYou can find a more complex setup, deploying to \nHeroku\n,\n\non our Blog\n\n\n\n\n7. Run build manually\n\u2693\n\n\nOnce the configuration of your Workflow is complete,\nyou can run a build manually by clicking on the \nStart/Schedule a build\n button on the app's page (where you see the\n\nBuilds\n, \nWorkflow\n, \nTeam\n, ... tabs).\n\n\n8. Run builds automatically\n\u2693\n\n\nIf you chose GitHub when adding your repository, each code change (commit) on GitHub will automatically trigger a Bitrise build.\nOtherwise you can find more information about how you can setup a Webhook, to trigger builds\nautomatically for code push, pull request and tags \nhere\n.", 
            "title": "Auto deploy your Middleman blog / static website"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#1-create-and-clone-a-repository-on-github", 
            "text": "To create a new repository on Github,  click here .\nYou need to sign in with your Github account, or sign up if you don't have one yet.\nOnce you created your repository, clone it.", 
            "title": "1. Create and clone a repository on Github"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#2-install-middleman", 
            "text": "Middleman is distributed using the RubyGems package manager.\nThis means you will need both the Ruby language runtime installed and RubyGems to begin using Middleman.  MacOS comes prepackaged with Ruby, however, some of the Middleman's dependencies need to be compiled\nduring installation and on macOS that requires Xcode.\nXcode can be installed via the  Mac App Store .\nAlternately you can just install the Xcode Command Line Tools, that should be enough\nif you don't want to install the full Xcode.app.  Once you have Ruby and Xcode (Command Line Tools), execute the following from the command line:  gem install middleman  This will install Middleman, its dependencies and the command-line tools for using Middleman.", 
            "title": "2. Install Middleman"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#3-create-a-middleman-project", 
            "text": "To create a Middleman project, navigate to the root folder of your repository and execute the following from the command line:  middleman init my_new_project  Once the setup is finished, commit and push your changes.", 
            "title": "3. Create a Middleman project"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#4-connect-your-repository-with-bitrise", 
            "text": "To connect your repository with Bitrise, visit the  Bitrise  site.\nYou need to sign in with your Bitrise account, or sign up if you don't have one yet.\nOnce you're signed in, select  Add new App  in the top dropdown menu.  In the first step, you need to select the provider, where you store your code, in this case, GitHub.  In the second step, you will see a list of all your repositories on GitHub. Select the one you just created.  In the third step, you will get an alert, since the repository you are connecting is not an Xcode project.\nSelect \"Configure Manually\", then enter the branch name \"master\".", 
            "title": "4. Connect your repository with Bitrise"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#5-prepare-your-workflow", 
            "text": "Once you created your project, select it in the  Dashboard \nand select the  Workflow  tab from the top menu.\nWe are going to add a bash script that will be executed on each build.\nFirst, delete all the automatically created steps (if any).\nNext, we need to add new steps.\nYou can add new steps by clicking on the  +  sign button between steps / in the step list and selecting the step\nfrom the step list popup. Add the following steps to your Workflow, in this order:   Activate SSH key  - unless you used the public, non SSH URL of the repository during the Add New App process  Git Clone Repository  Script   Select the  Script  step and add the following lines:  #!/bin/bash\nset -ex\nbundle install\nbundle exec middleman build --verbose  The above code installs the dependencies specified in your  Gemfile , and runs a Middleman build on the virtual machine.", 
            "title": "5. Prepare your Workflow"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#6-deploy-to-amazon-s3-add-an-amazon-s3-bucket-sync-to-your-workflow-steps", 
            "text": "Now we are going to add and customize an Amazon S3 bucket sync to the Workflow steps.\nClick on the  Add new Step  button and select  Amazon S3 bucket sync  from the step list.  Select the step to customize it.   Enter your AWS access key  Your AWS secret key  And enter a name for your S3 bucket.  For your local path, enter the following:  $BITRISE_SOURCE_DIR/build/   This will select the  contents  of the build folder in the project source path on the virtual machine.\nIt will be uploaded on every build.  For access control, enter  public-read  or  private , as advised.   Alternative deploy destinations  You can of course use  Heroku , GitHub pages or any other service\nas your deployment target.\nYou can find a more complex setup, deploying to  Heroku , on our Blog", 
            "title": "6. Deploy to Amazon S3: Add an Amazon S3 bucket sync to your Workflow steps"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#7-run-build-manually", 
            "text": "Once the configuration of your Workflow is complete,\nyou can run a build manually by clicking on the  Start/Schedule a build  button on the app's page (where you see the Builds ,  Workflow ,  Team , ... tabs).", 
            "title": "7. Run build manually"
        }, 
        {
            "location": "/tutorials/auto-deploy-middleman-project/#8-run-builds-automatically", 
            "text": "If you chose GitHub when adding your repository, each code change (commit) on GitHub will automatically trigger a Bitrise build.\nOtherwise you can find more information about how you can setup a Webhook, to trigger builds\nautomatically for code push, pull request and tags  here .", 
            "title": "8. Run builds automatically"
        }, 
        {
            "location": "/tutorials/build-with-fake/", 
            "text": "To add support for your \nFAKE\n build scripts,\nopen your app's \nWorkflow Editor on bitrise.io\n\nand add a \nScript\n step to your workflow.\n\n\nBelow you can find an example script content to perform a build with FAKE,\n\nmake sure you fill out the parameters at the top of the script\n!\n\n\n#!/bin/bash\nset -ex\n\n# Fill out these parameters:\n# You should use the same directory that you set in your build script for the FAKE dll\noutput_directory=tools\nfake_build_script=build.fsx\nfake_target_name=\nfake_option_flags=\n\n# ---\n\nfake_exe=\n${output_directory}/FAKE/tools/fake.exe\n\n\nif [ ! -f \n${fake_exe}\n ]; then\n  printf \n\\e[34mInstalling FAKE\\e[0m\\n\n\n  nuget install FAKE -OutputDirectory \n${output_directory}\n -ExcludeVersion -NoCache -NonInteractive\nfi\n\ncommand=(\nmono\n \n${fake_exe}\n)\n\nif [ -n \n$fake_build_script\n ] ; then\n  command+=(\n${fake_build_script}\n)\nfi\n\nif [ -n \n$fake_target_name\n ] ; then\n  command+=(\n${fake_target_name}\n)\nfi\n\nif [ -n \n$fake_option_flags\n ] ; then\n  command+=(\n${fake_option_flags}\n)\nfi\n\nprintf \n\\e[34mExecuting ${fake_build_script}\\e[0m\\n\n\n$(IFS=' '; echo \n${command[*]}\n)\n\n\n\nYou should update the \noutput_directory\n and \nfake_build_script\n variables for your needs and you are ready to go!\n\n\n\n\nNote\n\n\nYou should set the \noutput_directory\n to the same directory where your build script will search for the FAKE dlls.", 
            "title": "Build with FAKE (F# Make)"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/", 
            "text": "Bitrise has an integrated App Deployment system you can use for App and other build artifact file distribution.\n\n\nWith this you can distribute your iOS and Android app, over the air, for your testers (\neven for those who don't have a Bitrise account\n)\nor you can just use it for archiving your App and other build artifact files (these files will\nbe available on the related Build's details page).\n\n\nHow does it work?\n\u2693\n\n\nIf you want to distribute your iOS App through Bitrise all you need in your App's Workflow,\nis an \nXcode Archive\n step to generate the iOS app IPA,\nand a \nDeploy to Bitrise.io\n step to distribute it.\n\n\nFor Android apps, use the \nGradle Runner\n step to generate the APK, and use the\n\nDeploy to Bitrise.io\n step to deploy it.\n\n\nFor Xamarin apps use the \nXamarin Archive step\n to create the iOS/Android app,\nand use the \nDeploy to Bitrise.io\n step to deploy it. \n\n\nFor any other project type, just use the step(s) or script(s) which\ncan generate the app, and use the \nDeploy to Bitrise.io\n step to deploy it.\n\n\nOne important thing if you use custom steps/scripts\n: the \nDeploy to Bitrise.io\n\nstep by default deploys apps from the \n$BITRISE_DEPLOY_DIR\n directory, so make sure that you\nmove the generated app there, or set the \nDeploy directory or file path\n input\nof the \nDeploy to Bitrise.io step\n to point to the location of the app file.\n\n\nIf the app file (\n.ipa\n / \n.apk\n) is available, the \nDeploy to Bitrise.io\n step will\nupload it for the Build and \nit will be listed on the Build's details page\n.\nDepending on the \nnotification settings\n you set for the \nDeploy to Bitrise.io\n step,\nBitrise.io will also send emails for the Team of the app.\n\n\nFor each deployed app you'll see an information and notifications card on the Build's page,\nwhere you can check the details of the App (title, bundle id, version number, size, etc.)\nand you can download or install the App right from the Build's page.\n\n\nIf you built your iOS App\n with a Development or Ad-Hock Provisioning Profile,\nan additional section will be presented with a list of allowed device identifiers (UDID).\n\n\nIf you or a team member of your App's team register a device for\nhis/her Bitrise account (you can do this on your \nAccount Settings page\n in the \nTest Devices\n section)\nand the device's identifier can be found in the Provisioning Profile,\nthen instead of just presenting the identifier in the list you'll see the user who registered the device and the device's name.\n\n\nVisiting the Build page from an iOS device (which you registered for your account)\nand you'll see an \nInstall\n button instead of the \nDownload\n button.\nWith this \nyou can install the App on your device directly from Bitrise\n.\n\n\nFor Android apps you don't have to register your test devices\n,\nas Android apps don't have per-device install restrictions. You'll, however,\nhave to enable the \n\"Unknown Sources\"\n option in Android to be able to\ninstall the app/apk from outside of the Google Play Store.\n\n\nPublic App install page\n\u2693\n\n\nIf you enable the \nPublic install page\n option (of the \nDeploy to Bitrise.io\n step)\nfor the App, then a \nlong, random URL\n will be available for you,\nwhich you \ncan be sent even to people who are not registered on Bitrise.io\n.\n\n\nOpening this link you'll see a base description of the\nApp (title, version, size, supported devices) and an \nInstall\n\nbutton if you visit the page from an iOS or Android device (depending on the app's\nplatform of course).\n\n\nYou can share this page with anyone, even if they don't have a Bitrise account,\nbut \nyou have to make it sure that they'll actually be able to install it\n -\nif you don't use an Enterprise Provisioning Profile to build your App,\nyou have to add every device identifier (UDID) to the Provisioning Profile (just like you do on your Mac),\nthe iOS App can't be installed on any other device, only on the ones which were\nincluded in the Provisioning Profile the build was signed with.\n\n\nYou can enable or disable the App's public install page any time from the related Build page\n\nand \nyou can also set the default state\n (enabled or disabled) \nin your App's Workflow\n\n(select the \nDeploy to Bitrise.io\n step and set the \nEnable public page for the App?\n to \nfalse\n\nif you don't want to automatically enable this feature).\n\n\nIf you disable the Public install page for the App, then only your App's team members will be able to install the App from Bitrise,\nfrom the Build's detail page!\n\n\nNotifications and install invites\n\u2693\n\n\nOn the Build's page you can send install invites for your testers.\nYou can either send invites for a group of your team (testers, developers, admins or owner) or\n(if the \nPublic install page\n option is enabled) you can send install invites to any email address.\n\n\nKeep in mind that the install invite email contains the URL of the Public install page.\n\nIf you invite someone who's not in your App's team and then disable the Public install page,\nthey won't be able to access the install page!\nThose who are in your App's team will be redirected to the Build's page if the Public install page is disabled.\n\n\nYou can specify the list of groups and emails for automatic install invite notification\n in the App's Workflow.\nSimilarly to the Public page option just select the \nDeploy to Bitrise.io\n step in your Workflow\nand specify the list of groups and emails to automatically notify in the \nNotify: User Groups\n and \nNotify: Emails\n options.\n\n\nKeep in mind that if you disable the \nPublic install page\n option,\nBitrise won't send install invite emails for the emails you specify,\nonly to those who are in the App's Team,\nbecause in this case only your team members can access the App (on the Build's page).", 
            "title": "Bitrise OTA App Deployment"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#how-does-it-work", 
            "text": "If you want to distribute your iOS App through Bitrise all you need in your App's Workflow,\nis an  Xcode Archive  step to generate the iOS app IPA,\nand a  Deploy to Bitrise.io  step to distribute it.  For Android apps, use the  Gradle Runner  step to generate the APK, and use the Deploy to Bitrise.io  step to deploy it.  For Xamarin apps use the  Xamarin Archive step  to create the iOS/Android app,\nand use the  Deploy to Bitrise.io  step to deploy it.   For any other project type, just use the step(s) or script(s) which\ncan generate the app, and use the  Deploy to Bitrise.io  step to deploy it.  One important thing if you use custom steps/scripts : the  Deploy to Bitrise.io \nstep by default deploys apps from the  $BITRISE_DEPLOY_DIR  directory, so make sure that you\nmove the generated app there, or set the  Deploy directory or file path  input\nof the  Deploy to Bitrise.io step  to point to the location of the app file.  If the app file ( .ipa  /  .apk ) is available, the  Deploy to Bitrise.io  step will\nupload it for the Build and  it will be listed on the Build's details page .\nDepending on the  notification settings  you set for the  Deploy to Bitrise.io  step,\nBitrise.io will also send emails for the Team of the app.  For each deployed app you'll see an information and notifications card on the Build's page,\nwhere you can check the details of the App (title, bundle id, version number, size, etc.)\nand you can download or install the App right from the Build's page.  If you built your iOS App  with a Development or Ad-Hock Provisioning Profile,\nan additional section will be presented with a list of allowed device identifiers (UDID).  If you or a team member of your App's team register a device for\nhis/her Bitrise account (you can do this on your  Account Settings page  in the  Test Devices  section)\nand the device's identifier can be found in the Provisioning Profile,\nthen instead of just presenting the identifier in the list you'll see the user who registered the device and the device's name.  Visiting the Build page from an iOS device (which you registered for your account)\nand you'll see an  Install  button instead of the  Download  button.\nWith this  you can install the App on your device directly from Bitrise .  For Android apps you don't have to register your test devices ,\nas Android apps don't have per-device install restrictions. You'll, however,\nhave to enable the  \"Unknown Sources\"  option in Android to be able to\ninstall the app/apk from outside of the Google Play Store.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#public-app-install-page", 
            "text": "If you enable the  Public install page  option (of the  Deploy to Bitrise.io  step)\nfor the App, then a  long, random URL  will be available for you,\nwhich you  can be sent even to people who are not registered on Bitrise.io .  Opening this link you'll see a base description of the\nApp (title, version, size, supported devices) and an  Install \nbutton if you visit the page from an iOS or Android device (depending on the app's\nplatform of course).  You can share this page with anyone, even if they don't have a Bitrise account,\nbut  you have to make it sure that they'll actually be able to install it  -\nif you don't use an Enterprise Provisioning Profile to build your App,\nyou have to add every device identifier (UDID) to the Provisioning Profile (just like you do on your Mac),\nthe iOS App can't be installed on any other device, only on the ones which were\nincluded in the Provisioning Profile the build was signed with.  You can enable or disable the App's public install page any time from the related Build page \nand  you can also set the default state  (enabled or disabled)  in your App's Workflow \n(select the  Deploy to Bitrise.io  step and set the  Enable public page for the App?  to  false \nif you don't want to automatically enable this feature).  If you disable the Public install page for the App, then only your App's team members will be able to install the App from Bitrise,\nfrom the Build's detail page!", 
            "title": "Public App install page"
        }, 
        {
            "location": "/tutorials/deploy/bitrise-app-deployment/#notifications-and-install-invites", 
            "text": "On the Build's page you can send install invites for your testers.\nYou can either send invites for a group of your team (testers, developers, admins or owner) or\n(if the  Public install page  option is enabled) you can send install invites to any email address.  Keep in mind that the install invite email contains the URL of the Public install page. \nIf you invite someone who's not in your App's team and then disable the Public install page,\nthey won't be able to access the install page!\nThose who are in your App's team will be redirected to the Build's page if the Public install page is disabled.  You can specify the list of groups and emails for automatic install invite notification  in the App's Workflow.\nSimilarly to the Public page option just select the  Deploy to Bitrise.io  step in your Workflow\nand specify the list of groups and emails to automatically notify in the  Notify: User Groups  and  Notify: Emails  options.  Keep in mind that if you disable the  Public install page  option,\nBitrise won't send install invite emails for the emails you specify,\nonly to those who are in the App's Team,\nbecause in this case only your team members can access the App (on the Build's page).", 
            "title": "Notifications and install invites"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/", 
            "text": "Would you like to \nbeta test\n and \ndeploy\n your app to 1 or thousands of users?\n\nAppaloosa\n helps you distribute your mobile apps privately,\ncollect feedback and analyse your deployment's efficiency. \nCheck it out!\n\n\nWhat is Appaloosa?\n\u2693\n\n\nAppaloosa is a simple and secure enterprise App Store.\nThey help mobile \n digital teams build, test and deploy their apps privately.\n\n\nYou can manage your apps on Android, iOS and Windows Phone, all in the same place.\nAppaloosa also provides a native app store to increase your users' engagement.\nThey will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps. \n\n\nAppaloosa also gives you great insight on the efficiency of your deployment\nwith download and usage stats as well as feedbacks and ratings from the users.\n\n\nThey are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations\nas well as a RESTful API. \nGet in touch\n for more details.\nPlus your mobile apps can be targeted to groups of users or distributed to all collaborators.\n\n\nBuild with Bitrise, Deploy to Appaloosa\n\u2693\n\n\nTo deploy your app on Appaloosa, simply add the Appaloosa step to your application's workflow.\nIf you don't already have an account on Appaloosa, it will be created on the go.\n\n\n\n\n\n\nAs a \nregistered user\n you simply need your \nstore id\n and \nAPI Key\n.\n\n\nAs an \nunregistered user\n, an \nemail address\n is enough.\n\n\nOptionally you can provide a \ndescription\n, \nscreenshot\n urls (up to 5) and, if registered, \ngroup ids\n.\n\n\n\n\nWith Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest!", 
            "title": "Publish your app to Appaloosa"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/#what-is-appaloosa", 
            "text": "Appaloosa is a simple and secure enterprise App Store.\nThey help mobile   digital teams build, test and deploy their apps privately.  You can manage your apps on Android, iOS and Windows Phone, all in the same place.\nAppaloosa also provides a native app store to increase your users' engagement.\nThey will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps.   Appaloosa also gives you great insight on the efficiency of your deployment\nwith download and usage stats as well as feedbacks and ratings from the users.  They are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations\nas well as a RESTful API.  Get in touch  for more details.\nPlus your mobile apps can be targeted to groups of users or distributed to all collaborators.", 
            "title": "What is Appaloosa?"
        }, 
        {
            "location": "/tutorials/deploy/publish-your-app-to-appaloosa/#build-with-bitrise-deploy-to-appaloosa", 
            "text": "To deploy your app on Appaloosa, simply add the Appaloosa step to your application's workflow.\nIf you don't already have an account on Appaloosa, it will be created on the go.    As a  registered user  you simply need your  store id  and  API Key .  As an  unregistered user , an  email address  is enough.  Optionally you can provide a  description ,  screenshot  urls (up to 5) and, if registered,  group ids .   With Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest!", 
            "title": "Build with Bitrise, Deploy to Appaloosa"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/", 
            "text": "If you are looking for a deployment service that also gives you lots of insights\nabout your application, then \nTestFairy\n is a great service to check out.\n\n\nWhat is TestFairy?\n\u2693\n\n\nWhen testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side.\nTestFairy solves this problem by providing a video of everything that happened on the mobile device,\nincluding detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more.\nTo get these insights on iOS you need to \nintegrate their iOS SDK into your app\n.\n\n\nUpload your app to TestFairy through Bitrise\n\u2693\n\n\nTo deploy your app on the TestFairy platform you just simply need to add the \nTestFairy\n step\nto your app's workflow (on \nbitrise.io\n).\n\n\n\n\nThe only required parameter you have to add is your API Key on TestFairy.\nTo get it you should navigate to your \naccount preferences\n on TestFairy\nand find the key under your API Key menu.\n\n\n\n\nNote\n\n\nYou can also enable or disable the email notifications and set the tester groups you would like to notify.\nThere's an option to make your users always upgrade to the latest build by enabling Auto update in the step,\nand you can also start recording video and set the length of it.\n\n\n\n\nReady to go!\n\u2693\n\n\nThere's nothing else you need to do,\nsimply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code.", 
            "title": "Deploy to TestFairy with Bitrise"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#what-is-testfairy", 
            "text": "When testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side.\nTestFairy solves this problem by providing a video of everything that happened on the mobile device,\nincluding detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more.\nTo get these insights on iOS you need to  integrate their iOS SDK into your app .", 
            "title": "What is TestFairy?"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#upload-your-app-to-testfairy-through-bitrise", 
            "text": "To deploy your app on the TestFairy platform you just simply need to add the  TestFairy  step\nto your app's workflow (on  bitrise.io ).   The only required parameter you have to add is your API Key on TestFairy.\nTo get it you should navigate to your  account preferences  on TestFairy\nand find the key under your API Key menu.   Note  You can also enable or disable the email notifications and set the tester groups you would like to notify.\nThere's an option to make your users always upgrade to the latest build by enabling Auto update in the step,\nand you can also start recording video and set the length of it.", 
            "title": "Upload your app to TestFairy through Bitrise"
        }, 
        {
            "location": "/tutorials/deploy/deploy-to-testfairy-with-bitrise/#ready-to-go", 
            "text": "There's nothing else you need to do,\nsimply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code.", 
            "title": "Ready to go!"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/", 
            "text": "What are Gradle tasks and how can I get the list of available tasks in my project?\n\u2693\n\n\nA \ngradle\n task is a process you can run with \ngradle\n.\nYou can run these tasks by running \ngradle TASK-TO-RUN\n in your Command Line / Terminal.\n\n\nA standard Android Gradle project includes a lot of tasks by default, things like:\n\n\n\n\nandroidDependencies - Displays the Android dependencies of the project.\n\n\nassemble - Assembles all variants of all applications and secondary packages.\n\n\nassembleAndroidTest - Assembles all the Test applications.\n\n\nclean - Deletes the build directory\n\n\n\n\nYou can get the base task list by calling \ngradle tasks\n in your Android app's directory,\nor to see all the available tasks you can call \ngradle tasks --all\n.\n\n\nRunning \ngradle tasks\n you'll get a list of available Gradle tasks in the format:\n\n\n$ gradle task\n\n:tasks\n\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nAndroid tasks\n-------------\nandroidDependencies - Displays the Android dependencies of the project.\nsigningReport - Displays the signing info for each variant.\nsourceSets - Prints out all the source sets defined in this project.\n\nBuild tasks\n-----------\nassemble - Assembles all variants of all applications and secondary packages.\nassembleAndroidTest - Assembles all the Test applications.\nassembleDebug - Assembles all Debug builds.\nassembleRelease - Assembles all Release builds.\n...\n\n\n\nYou can run any of the tasks on bitrise from a \nScript\n step by calling \ngradle task-name-to-run\n (for example: \ngradle assemle\n)\nor by using our \nGradle Runner\n step (\nhttps://github.com/bitrise-io/steps-gradle-runner\n)\nand specifying the task as the value of the \ngradle_task\n input.\n\n\nInstead of running \ngradle\n directly, you should run the gradle commands through \ngradlew\n (the Gradle Wrapper)!\n\nThe \nGradle Runner\n step does this, and as you can see it in the related input description of the step:\n\n\n\n\nUsing a Gradle Wrapper (gradlew) is strongly suggested, as the wrapper is what makes sure\nthat the right Gradle version is installed and used for the build.\n\n\nYou can find more information about the Gradle Wrapper (gradlew),\nand about how you can generate one (if you would not have one already)\n\nin the official guide at: \nhttps://docs.gradle.org/current/userguide/gradle_wrapper.html\n.\n\n\n\n\nHow to install an additional Android SDK package\n\u2693\n\n\nThe preferred way to do this is to use the \nInstall missing Android tools\n step.\nPlease only use a Script solution if you really have to, as you'll have to update\nthe Script if the Android tools change (which did happen).\n\n\nAll you have to do is to add a \nScript\n step to your workflow,\nand use the Android \nsdkmanager\n tool to install the additional packages you want to.\n\n\nAs an example, to install the Android SDK v18 and the related \nbuild-tools\n v18.0.1,\nyou can add a \nScript\n step (can be the very first step in the Workflow)\nwith the following content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\nsdkmanager \nplatforms;android-18\n\nsdkmanager \nbuild-tools;18.0.1\n\n\n\nYou can get the full list of available packages\n by running:\n\nsdkmanager --list --include_obsolete --verbose\n.\nYou can run this on your own machine if you have \n$ANDROID_HOME/tools/bin\n in your \n$PATH\n.\nIf not then you can run it with \n/PATH/TO/ANDROID-SDK-HOME/tools/bin/sdkmanager ...\n.\n\n\nEnable Gradle debug options\n\u2693\n\n\nIf your Gradle build fails and you can't find any information in the logs you can try to call it with\n\n--stacktrace --debug\n flags (ex: \ngradle ... --stacktrace --debug\n) to get more detailed logs.\n\n\nIn most cases \n--stacktrace\n should be enough, and the \nGradle Runner\n step includes\nthis flag by default.\n\n\nRun a bitrise Android build on your Mac/PC, with Docker\n\u2693\n\n\nYou can run your build on your Mac/PC, inside the same \ndocker\n container you use on \nbitrise.io\n,\nto fully test your build in an identical environment! You can find the detailed guide here:\n\nHow to run your build locally in Docker\n\n\nMemory (RAM) limit\n\u2693\n\n\nYou can specify the amount allowed RAM for the JVM by adding two \nEnvironment Variables\n to your Workflow,\ne.g. as \nApp Env Var\ns:\n\n\n\n\nGRADLE_OPTS: '-Dorg.gradle.jvmargs=\n-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError\n'\n\n\n_JAVA_OPTIONS: \n-Xms512m -Xmx1024m\n\n\n\n\nThis method can be used to limit the allowed RAM the Gradle JVM process can use,\nwhich can be useful in case there's not enough RAM available in the system.\n\n\nEmulators\n\u2693\n\n\nYou can find and use our Android emulator steps to create \n boot emulators:\n\nhttp://www.bitrise.io/integrations\n.\n\n\nFirst you have to create an emulator with a \nCreate Android emulator\n step,\nwhere you can set the Android version and a couple of other parameters for the new emulator,\nthen you can boot this emulator with the \nStart Android emulator\n step,\nwhich makes sure that the emulator is booted and ready for subsequent steps.\n\n\nEmulator with Google APIs\n\u2693\n\n\nInstead of using a Script step to create an android emulator please use the \nCreate Android emulator\n step!\nThere are simply too many edge cases to cover here, as well as the commands and working configurations change quite frequently.\n\n\nThe section below is kept here for referencing purposes, and might be outdated.\n\n\nNote about Android SDK versions:\n at this time there are lots of known issues reported for Android Emulators\nwith Android SDK version 22 \n 23 when combined with Google Play services\n(see \n1\n\nand \n2\n).\nThe script above creates an emulator with SDK version 21, which should work properly with Google Play services.\n\n\nThere are possible workarounds for newer versions\n(see \n1\n\nand \n2\n),\nbut that requires some customization in your project.\n\n\nInstalling / Using Java version X\n\u2693\n\n\n\n\nJava 8 is now pre-installed\n\n\nJava 8 is now the pre-installed Java version on the Bitrise.io Linux Stack.\nThis section is kept here for future reference, in case you'd need another Java version.\n\n\n\n\nIf you'd need a Java / JDK version which is not preinstalled on the Android stacks,\nyou can follow this guide to install it. This example will install Java/JDK 8,\nplease adapt it to the version you need.\n\n\nIf your build requires JDK 8, you can install and activate it with a \nScript\n step:\n\n\n#!/bin/bash\nset -ex\n\nadd-apt-repository -y ppa:openjdk-r/ppa\napt-get update -qq\napt-get install -y openjdk-8-jdk\nupdate-java-alternatives -s /usr/lib/jvm/java-1.8.0-openjdk-amd64\necho \ndone\n\n\n\nThat's all, just add the \nScript\n step to the Workflow with the content above,\nand start a new build. \nThis \nScript\n step can be the very first step in the Workflow,\nas it does not depend on anything else.", 
            "title": "Android tips and tricks"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#what-are-gradle-tasks-and-how-can-i-get-the-list-of-available-tasks-in-my-project", 
            "text": "A  gradle  task is a process you can run with  gradle .\nYou can run these tasks by running  gradle TASK-TO-RUN  in your Command Line / Terminal.  A standard Android Gradle project includes a lot of tasks by default, things like:   androidDependencies - Displays the Android dependencies of the project.  assemble - Assembles all variants of all applications and secondary packages.  assembleAndroidTest - Assembles all the Test applications.  clean - Deletes the build directory   You can get the base task list by calling  gradle tasks  in your Android app's directory,\nor to see all the available tasks you can call  gradle tasks --all .  Running  gradle tasks  you'll get a list of available Gradle tasks in the format:  $ gradle task\n\n:tasks\n\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nAndroid tasks\n-------------\nandroidDependencies - Displays the Android dependencies of the project.\nsigningReport - Displays the signing info for each variant.\nsourceSets - Prints out all the source sets defined in this project.\n\nBuild tasks\n-----------\nassemble - Assembles all variants of all applications and secondary packages.\nassembleAndroidTest - Assembles all the Test applications.\nassembleDebug - Assembles all Debug builds.\nassembleRelease - Assembles all Release builds.\n...  You can run any of the tasks on bitrise from a  Script  step by calling  gradle task-name-to-run  (for example:  gradle assemle )\nor by using our  Gradle Runner  step ( https://github.com/bitrise-io/steps-gradle-runner )\nand specifying the task as the value of the  gradle_task  input.  Instead of running  gradle  directly, you should run the gradle commands through  gradlew  (the Gradle Wrapper)! \nThe  Gradle Runner  step does this, and as you can see it in the related input description of the step:   Using a Gradle Wrapper (gradlew) is strongly suggested, as the wrapper is what makes sure\nthat the right Gradle version is installed and used for the build.  You can find more information about the Gradle Wrapper (gradlew),\nand about how you can generate one (if you would not have one already) \nin the official guide at:  https://docs.gradle.org/current/userguide/gradle_wrapper.html .", 
            "title": "What are Gradle tasks and how can I get the list of available tasks in my project?"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#how-to-install-an-additional-android-sdk-package", 
            "text": "The preferred way to do this is to use the  Install missing Android tools  step.\nPlease only use a Script solution if you really have to, as you'll have to update\nthe Script if the Android tools change (which did happen).  All you have to do is to add a  Script  step to your workflow,\nand use the Android  sdkmanager  tool to install the additional packages you want to.  As an example, to install the Android SDK v18 and the related  build-tools  v18.0.1,\nyou can add a  Script  step (can be the very first step in the Workflow)\nwith the following content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\nsdkmanager  platforms;android-18 \nsdkmanager  build-tools;18.0.1  You can get the full list of available packages  by running: sdkmanager --list --include_obsolete --verbose .\nYou can run this on your own machine if you have  $ANDROID_HOME/tools/bin  in your  $PATH .\nIf not then you can run it with  /PATH/TO/ANDROID-SDK-HOME/tools/bin/sdkmanager ... .", 
            "title": "How to install an additional Android SDK package"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#enable-gradle-debug-options", 
            "text": "If your Gradle build fails and you can't find any information in the logs you can try to call it with --stacktrace --debug  flags (ex:  gradle ... --stacktrace --debug ) to get more detailed logs.  In most cases  --stacktrace  should be enough, and the  Gradle Runner  step includes\nthis flag by default.", 
            "title": "Enable Gradle debug options"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#run-a-bitrise-android-build-on-your-macpc-with-docker", 
            "text": "You can run your build on your Mac/PC, inside the same  docker  container you use on  bitrise.io ,\nto fully test your build in an identical environment! You can find the detailed guide here: How to run your build locally in Docker", 
            "title": "Run a bitrise Android build on your Mac/PC, with Docker"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#memory-ram-limit", 
            "text": "You can specify the amount allowed RAM for the JVM by adding two  Environment Variables  to your Workflow,\ne.g. as  App Env Var s:   GRADLE_OPTS: '-Dorg.gradle.jvmargs= -Xmx2048m -XX:+HeapDumpOnOutOfMemoryError '  _JAVA_OPTIONS:  -Xms512m -Xmx1024m   This method can be used to limit the allowed RAM the Gradle JVM process can use,\nwhich can be useful in case there's not enough RAM available in the system.", 
            "title": "Memory (RAM) limit"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#emulators", 
            "text": "You can find and use our Android emulator steps to create   boot emulators: http://www.bitrise.io/integrations .  First you have to create an emulator with a  Create Android emulator  step,\nwhere you can set the Android version and a couple of other parameters for the new emulator,\nthen you can boot this emulator with the  Start Android emulator  step,\nwhich makes sure that the emulator is booted and ready for subsequent steps.", 
            "title": "Emulators"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#emulator-with-google-apis", 
            "text": "Instead of using a Script step to create an android emulator please use the  Create Android emulator  step!\nThere are simply too many edge cases to cover here, as well as the commands and working configurations change quite frequently.  The section below is kept here for referencing purposes, and might be outdated.  Note about Android SDK versions:  at this time there are lots of known issues reported for Android Emulators\nwith Android SDK version 22   23 when combined with Google Play services\n(see  1 \nand  2 ).\nThe script above creates an emulator with SDK version 21, which should work properly with Google Play services.  There are possible workarounds for newer versions\n(see  1 \nand  2 ),\nbut that requires some customization in your project.", 
            "title": "Emulator with Google APIs"
        }, 
        {
            "location": "/tips-and-tricks/android-tips-and-tricks/#installing-using-java-version-x", 
            "text": "Java 8 is now pre-installed  Java 8 is now the pre-installed Java version on the Bitrise.io Linux Stack.\nThis section is kept here for future reference, in case you'd need another Java version.   If you'd need a Java / JDK version which is not preinstalled on the Android stacks,\nyou can follow this guide to install it. This example will install Java/JDK 8,\nplease adapt it to the version you need.  If your build requires JDK 8, you can install and activate it with a  Script  step:  #!/bin/bash\nset -ex\n\nadd-apt-repository -y ppa:openjdk-r/ppa\napt-get update -qq\napt-get install -y openjdk-8-jdk\nupdate-java-alternatives -s /usr/lib/jvm/java-1.8.0-openjdk-amd64\necho  done  That's all, just add the  Script  step to the Workflow with the content above,\nand start a new build.  This  Script  step can be the very first step in the Workflow,\nas it does not depend on anything else.", 
            "title": "Installing / Using Java version X"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/", 
            "text": "If you want to skip a specific commit, to not to start a build,\nall you have to do is to include either \n[skip ci]\n or \n[ci skip]\n\nin the commit message.\n\n\nFor example, the commit message:\n\n\nThis is not important, please [skip ci]\n\n\n\nwon't start a build, nor will:\n\n\nI just changed the README\n\n[ci skip]\n\n\n\n\n\nOnly the head/last commit message is checked!\n\n\nIf you push more than one commit\n, only the last (\"head\") commit's\nmessage will be checked for the skip ci pattern!\n\n\n\n\nIf you'd decide that you still want to start a build you'll have to\neither rebase that commit (e.g. just change its commit message), or push another commit.\n\n\n\n\nYou can push an empty commit\n\n\nGit allows to create and push empty commits, so if you'd decide that you\nstill want to build a skipped build you can do \ngit commit --allow-empty -m \nI decided to run this\n\non the related branch and push the commit.\n\n\n\n\nPull Requests\n\u2693\n\n\nSkip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.\n\n\nIn short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can \nfetch\n through \ngit\n (if you add the related \nrefs/\n to your git \nfetch\n config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through \ngit\n directly.\n\n\n\n\nWhat's the commit message of a Pull Request?\n\n\nIn any case this means that \nthe Pull Request itself\n is treated as a (virtual) commit,\nwhere \nthe commit message is the title + description of the Pull Request\n and\nnot the commit(s) of the pull request!\n\n\n\n\nThis means that, \nif you want to skip a pull request\n, you have to include the Skip CI\npattern \nin the Pull Request's title or description\n, and not in the commit's message!\n\n\nOnce you decide to not to skip the Pull Request / more commits in the pull request\n\nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Skip a Build (skip ci)"
        }, 
        {
            "location": "/tips-and-tricks/skip-a-build/#pull-requests", 
            "text": "Skip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.  In short, what you have to know is that Pull Requests are virtual/temporary \"commits\" / \"branches\".\nIn case of GitHub there's actually a pull request related \"virtual branch\" (ref), which, if you know\nits name, you can  fetch  through  git  (if you add the related  refs/  to your git  fetch  config).\nThis \"branch\" (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through  git  directly.   What's the commit message of a Pull Request?  In any case this means that  the Pull Request itself  is treated as a (virtual) commit,\nwhere  the commit message is the title + description of the Pull Request  and\nnot the commit(s) of the pull request!   This means that,  if you want to skip a pull request , you have to include the Skip CI\npattern  in the Pull Request's title or description , and not in the commit's message!  Once you decide to not to skip the Pull Request / more commits in the pull request \nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/", 
            "text": "For this example we'll attach the OS X \nsystem.log\n to the Build as an Artifact,\nbut this works for any file, even for ones that you generate during the build,\nyou just have to replace the example path we use (\n/var/log/system.log\n) with the path you want to deploy.\nYou can of course use Environment Variables in the path too, like \n$HOME/\n.\n\n\nDeployed Artifacts appear on the Build's page, in the Artifacts \n Apps section,\nand anyone who has access to the Build page can download it from there.\n\n\nTo do this:\n\n\n\n\nAdd a new \nDeploy to Bitrise.io\n step to your workflow, to any point you want to (can be the very last step in the workflow, but of course if you want to deploy a file which is generated during the build you should add the step \nafter\n the file is generated and available).\n\n\nChange the \nDeploy directory or file path\n input of the Step to: \n/var/log/system.log\n\n\n\n\nA YAML configuration example of the step \n input:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: \n/var/log/system.log\n\n\n\nThat's all, your next build will attach the OS X system log file\nto your build - you'll see it at the top of the Build's page.\n\n\n\n\nBy default the \nDeploy to Bitrise.io\n will always run\n\n\nBy default the \nDeploy to Bitrise.io\n will always run,\neven if a previous step fails, \nso you can deploy failed step/tool logs too.\n\n\n\n\nDeploy a directory\n\u2693\n\n\nThe \nDeploy to Bitrise.io\n step accepts both file and directory path as its input,\nbut by default \nit does not deploy files recursively\n, from sub directories\nif you specify a directory as it's \ndeploy_path\n input.\n\n\nIf you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.\n\n\nIn this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.\n\n\nAn example configuration:\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'\n\n\n\nNote: as every input's, \nis_compress\n's value have to be a \nstring\n, that's why \ntrue\n is surrounded with quotes.\n\n\n\n\nUsing more than one \nDeploy to Bitrise.io\n step\n\n\nYou can use as many \nDeploy to Bitrise.io\n steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Attach any file as an Artifact to the Build"
        }, 
        {
            "location": "/tips-and-tricks/attach-any-file-to-build/#deploy-a-directory", 
            "text": "The  Deploy to Bitrise.io  step accepts both file and directory path as its input,\nbut by default  it does not deploy files recursively , from sub directories\nif you specify a directory as it's  deploy_path  input.  If you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \"Compress\" option of the step.  In this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.  An example configuration:      - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'  Note: as every input's,  is_compress 's value have to be a  string , that's why  true  is surrounded with quotes.   Using more than one  Deploy to Bitrise.io  step  You can use as many  Deploy to Bitrise.io  steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Deploy a directory"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/", 
            "text": "You can expose Environment Variables from one Step,\nto make it available for every other Step performed after the Step during the build.\nAn example might be that you want to generate a\nrelease note which you want to use in a message or deploy step.\nExposing environment variables is really easy,\nyou just have to use \nenvman\n if you want to make it available for every other Step.\n\n\nA very simple example might be:\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\nYou can call \nenvman\n in any Step, including a script step,\nor even in your own script (stored in your repository) if you call it from a \nbitrise\n build.\n\n\nEnvman can be used in a couple of ways.\nYou can specify the value as the \n--value\n parameter (you can see this in the previous example),\npipe the value:\n\n\necho 'hi' | envman add --key MY_RELEASE_NOTE\n\n\n\nor read the value from a file:\n\n\nenvman add --key MY_RELEASE_NOTE --valuefile ./some/file/path\n\n\n\nYou can read more about how \nenvman\n can\nbe used on it's \nGitHub page\n.\n\n\n\n\nEnv Var value size limit\n\n\nEnvironment Variable values set through \nenvman\n are limited to 10KB by default.\nThis is done in order to prevent issues with common tools.\nDifferent tools have different environment size constraints,\ne.g. \nBash\n will start to fail on OS X once the environments set\nexceed ~120KB (\nin total, not a single variable!\n).\n\n\nFor larger data you should use files or other solutions,\nand use environment variables to point to the file / to the\nID or location of where the data is stored.\n\n\n\n\nOnce the environment variable is exposed you can use it like\nany other environment variable. In \nbash\n you can reference\nthe previous example environment as: \n$MY_RELEASE_NOTE\n.\n\n\nYou can of course use these exposed environment variables in the inputs of other Steps.\nFor example the \nHockeyApp Deploy\n step has a \nnotes\n input,\nyou can reference the previous example variable by inserting \n$MY_RELEASE_NOTE\n into the input,\nlike: \nThe Release Note: $MY_RELEASE_NOTE\n,\nwhich will be resolved as \nThe Release Note: This is the release note\n (if you used\nthe first example to set the value of \nMY_RELEASE_NOTE\n).\n\n\nA simple example, exposing the release note and then using it in another \nScript step\n,\nand in a \nSlack step\n:\n\n\nformat_version: 1.1.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  example:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            envman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nMy Release Note: $MY_RELEASE_NOTE\n\n    - slack:\n        inputs:\n        - channel: ...\n        - webhook_url: ...\n        - message: \nRelease Notes: $MY_RELEASE_NOTE\n\n\n\nCopy an environment variable to another key\n\u2693\n\n\nIf you want to expose the value of an environment variable to be accessible\nthrough another environment variable key, you can simply expose the value with a new key.\n\n\nFor example, if you want to copy the value of the \nBITRISE_BUILD_NUMBER\n environment variable\nand make it available under the environment variable key \nMY_BUILD_NUMBER\n, you just have to\nread the current value and expose it under the new key.\n\n\nTo modify the first example here, which exposed a fix value:\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\nsimply reference/read the value of the other environment variable in the \nenvman add ...\n command.\n\n\nTo expose the value of \nBITRISE_BUILD_NUMBER\n under the key \nMY_BUILD_NUMBER\n:\n\n\nenvman add --key MY_BUILD_NUMBER --value \n${BITRISE_BUILD_NUMBER}\n\n\n\nAfter this, subsequent steps can get the value of \nBITRISE_BUILD_NUMBER\n from the\n\nMY_BUILD_NUMBER\n environment variable.\n\n\nNote: if you change the value of \nBITRISE_BUILD_NUMBER\n after this, the\nvalue of \nMY_BUILD_NUMBER\n won't be modified, that will still hold the original value!\n\n\nOverwrite an Environment Variable if another one is set\n\u2693\n\n\nE.g. if a custom environment variable is set through the Build Trigger API.\n\n\nThe best way to do this, to make sure that no matter what, you overwrite the other env var,\nis to use a Script step, as described above, and check whether the custom env var is set.\n\n\nAs an example, if you want to overwrite the \nPROJECT_SCHEME\n environment variable,\nif, let's say, a \nAPI_PROJECT_SCHEME\n env var is set, just drop in a \nScript\n step (can be the very first one\nin the workflow), with the content:\n\n\n#!/bin/bash\nset -ex\nif [ ! -z \n$API_PROJECT_SCHEME\n ] ; then\n  envman add --key PROJECT_SCHEME --value \n$API_PROJECT_SCHEME\n\nfi\n\n\n\nThis script will check whether the \nAPI_PROJECT_SCHEME\n env var is defined,\nand if it is, then its value will be assigned to the \nPROJECT_SCHEME\n environment variable,\noverwriting the original value of \nPROJECT_SCHEME\n.\n\n\nAlternative solution: use Workflow Env Vars\n\u2693\n\n\nAlternatively you can set environment variables for Workflows too.\nThe Env Vars you set for a workflow will overwrite the env var\nif defined as an App Env Var or Secret Env Var.\n\n\nAn example workflow which defined an environment variable, and then runs another workflow\nwhich can use those env vars:\n\n\nworkflows:\n\n  deploy-alpha:\n    envs:\n    - ENV_TYPE: alpha\n    after_run:\n    - _deploy\n\n  _deploy:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nENV_TYPE: $ENV_TYPE\n\n\n\nIf you run the \ndeploy-alpha\n workflow, that will set the \nENV_TYPE\n env var to \nalpha\n,\nthen it will run the \n_deploy\n workflow, which can use that environment variable -\nin this example it will simply print its value (the printed text will be: \nENV_TYPE: alpha\n).", 
            "title": "Expose an Environment Variable and use it in another Step"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#copy-an-environment-variable-to-another-key", 
            "text": "If you want to expose the value of an environment variable to be accessible\nthrough another environment variable key, you can simply expose the value with a new key.  For example, if you want to copy the value of the  BITRISE_BUILD_NUMBER  environment variable\nand make it available under the environment variable key  MY_BUILD_NUMBER , you just have to\nread the current value and expose it under the new key.  To modify the first example here, which exposed a fix value:  envman add --key MY_RELEASE_NOTE --value  This is the release note  simply reference/read the value of the other environment variable in the  envman add ...  command.  To expose the value of  BITRISE_BUILD_NUMBER  under the key  MY_BUILD_NUMBER :  envman add --key MY_BUILD_NUMBER --value  ${BITRISE_BUILD_NUMBER}  After this, subsequent steps can get the value of  BITRISE_BUILD_NUMBER  from the MY_BUILD_NUMBER  environment variable.  Note: if you change the value of  BITRISE_BUILD_NUMBER  after this, the\nvalue of  MY_BUILD_NUMBER  won't be modified, that will still hold the original value!", 
            "title": "Copy an environment variable to another key"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#overwrite-an-environment-variable-if-another-one-is-set", 
            "text": "E.g. if a custom environment variable is set through the Build Trigger API.  The best way to do this, to make sure that no matter what, you overwrite the other env var,\nis to use a Script step, as described above, and check whether the custom env var is set.  As an example, if you want to overwrite the  PROJECT_SCHEME  environment variable,\nif, let's say, a  API_PROJECT_SCHEME  env var is set, just drop in a  Script  step (can be the very first one\nin the workflow), with the content:  #!/bin/bash\nset -ex\nif [ ! -z  $API_PROJECT_SCHEME  ] ; then\n  envman add --key PROJECT_SCHEME --value  $API_PROJECT_SCHEME \nfi  This script will check whether the  API_PROJECT_SCHEME  env var is defined,\nand if it is, then its value will be assigned to the  PROJECT_SCHEME  environment variable,\noverwriting the original value of  PROJECT_SCHEME .", 
            "title": "Overwrite an Environment Variable if another one is set"
        }, 
        {
            "location": "/tips-and-tricks/expose-environment-variable/#alternative-solution-use-workflow-env-vars", 
            "text": "Alternatively you can set environment variables for Workflows too.\nThe Env Vars you set for a workflow will overwrite the env var\nif defined as an App Env Var or Secret Env Var.  An example workflow which defined an environment variable, and then runs another workflow\nwhich can use those env vars:  workflows:\n\n  deploy-alpha:\n    envs:\n    - ENV_TYPE: alpha\n    after_run:\n    - _deploy\n\n  _deploy:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo  ENV_TYPE: $ENV_TYPE  If you run the  deploy-alpha  workflow, that will set the  ENV_TYPE  env var to  alpha ,\nthen it will run the  _deploy  workflow, which can use that environment variable -\nin this example it will simply print its value (the printed text will be:  ENV_TYPE: alpha ).", 
            "title": "Alternative solution: use Workflow Env Vars"
        }, 
        {
            "location": "/tips-and-tricks/dont-mark-build-failed-if-step-fails/", 
            "text": "To do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\nAll you have to do is: add an \nis_skippable: true\n flag to the Step.\n\n\nAn example \nscript\n step which, although fails, it won't \"break\" the build:\n\n\n- script:\n    is_skippable: true\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nFailing Step.\n\n        exit 1\n        # exit 1 would mark this step as Failed, but it won't break the Build\n        #  because of the is_skippable: true flag / property\n\n\n\nYou can find more examples on \nGitHub\n.", 
            "title": "Don't mark the Build as failed if a given step would fail (ignore the error of the Step)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/", 
            "text": "Disable a Step\n\u2693\n\n\nIf you don't want to remove the Step from your Workflow and you don't want to\nduplicate the Workflow either (which is the preferred way if you want to experiment with new things;\nyou can just create a \"backup\" clone of your original Workflow)\nthen you can simply disable a Step by specifying \nrun_if: false\n .\n\n\nExample:\n\n\n- script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nThis will never run, because of run_if:false\n\n\n\nRun a Step only in CI environment, skip it for local builds\n\u2693\n\n\nThis is quite similar to how you \ncompletely disable a step\n,\nbut instead of specifying \nfalse\n\nas the \nrun_if\n expression, you specify \n.IsCI\n, which will only be true in CI mode.\n\n\nThis method can be useful to debug builds locally, where you don't want to run\nspecific steps on your own Mac/PC. Lots of Steps have this \nrun_if\n flag set by default,\nfor example the \nGit Clone\n step is configured with \nrun_if: .IsCI\n in the step's\ndefault configuration (\nstep.yml\n), because the most common use case when you\nrun a build locally is that you already have the code on your Mac/PC\nand so you don't want to do a \nGit Clone\n. Of course you can change the \nrun_if\n\nproperty of any step, so you can specify a \nrun_if: true\n for the \nGit Clone\n\nstep if you want to run it locally too.\n\n\n\n\nNote\n\n\nCI mode can be enabled on your own Mac/PC by setting the \nCI\n environment to \ntrue\n\n(e.g. with \nexport CI=true\n in your Bash Terminal), or by running\n\nbitrise run\n with the \n--ci\n flag: \nbitrise --ci run ...\n._\n\n\n\n\nRun a Step only if the Build failed\n\u2693\n\n\nTo do this you have to switch to \nbitrise.yml\n mode\n(open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n\nto switch to the interactive \nbitrise.yml\n editor).\n\n\nYou have to add two properties to the Step you \nonly\n want to run when\nthe Build failed (at that point, when the Step would run):\n\n\n\n\nis_always_run: true\n (this enables the Step to be considered to run even if a previous Step failed)\n\n\nrun_if: .IsBuildFailed\n (you can find more examples of the \nrun_if\n template at: \nhttps://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml\n).\n\n\n\n\nAn example \nscript\n step, which will only run if the Build failed:\n\n\n- script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nBuild Failed!\n\n\n\n\n\nA \nrun_if\n can be any valid \nGo\n template\n\n\nA \nrun_if\n can be any valid \nGo template\n, as long as it evaluates to \ntrue\n or \nfalse\n (or any of the String representation, e.g. \nTrue\n, \nt\n, \nyes\n or \ny\n are all considered to be \ntrue\n). If the template evaluates to \ntrue\n the Step will run, otherwise it won't.\n\n\n\n\nAn example \nrun_if\n to check a \ncustom environment variable\n (you\ncan expose environment variables from your scripts too,\nusing \nenvman\n):\n\n\nrun_if: |-\n  {{enveq \nCUSTOM_ENV_VAR_KEY\n \ntest value to test against\n}}\n\n\n\nThis \nrun_if\n will skip the step in every case when the value of \nCUSTOM_ENV_VAR_KEY\n\nis not \ntest value to test against\n.", 
            "title": "Enable/Disable a step (optionally, based on a condition)"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#disable-a-step", 
            "text": "If you don't want to remove the Step from your Workflow and you don't want to\nduplicate the Workflow either (which is the preferred way if you want to experiment with new things;\nyou can just create a \"backup\" clone of your original Workflow)\nthen you can simply disable a Step by specifying  run_if: false  .  Example:  - script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  This will never run, because of run_if:false", 
            "title": "Disable a Step"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#run-a-step-only-in-ci-environment-skip-it-for-local-builds", 
            "text": "This is quite similar to how you  completely disable a step ,\nbut instead of specifying  false \nas the  run_if  expression, you specify  .IsCI , which will only be true in CI mode.  This method can be useful to debug builds locally, where you don't want to run\nspecific steps on your own Mac/PC. Lots of Steps have this  run_if  flag set by default,\nfor example the  Git Clone  step is configured with  run_if: .IsCI  in the step's\ndefault configuration ( step.yml ), because the most common use case when you\nrun a build locally is that you already have the code on your Mac/PC\nand so you don't want to do a  Git Clone . Of course you can change the  run_if \nproperty of any step, so you can specify a  run_if: true  for the  Git Clone \nstep if you want to run it locally too.   Note  CI mode can be enabled on your own Mac/PC by setting the  CI  environment to  true \n(e.g. with  export CI=true  in your Bash Terminal), or by running bitrise run  with the  --ci  flag:  bitrise --ci run ... ._", 
            "title": "Run a Step only in CI environment, skip it for local builds"
        }, 
        {
            "location": "/tips-and-tricks/disable-a-step-by-condition/#run-a-step-only-if-the-build-failed", 
            "text": "To do this you have to switch to  bitrise.yml  mode\n(open the Workflow Editor on bitrise.io -  left side: click on  bitrise.yml \nto switch to the interactive  bitrise.yml  editor).  You have to add two properties to the Step you  only  want to run when\nthe Build failed (at that point, when the Step would run):   is_always_run: true  (this enables the Step to be considered to run even if a previous Step failed)  run_if: .IsBuildFailed  (you can find more examples of the  run_if  template at:  https://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml ).   An example  script  step, which will only run if the Build failed:  - script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo  Build Failed!   A  run_if  can be any valid  Go  template  A  run_if  can be any valid  Go template , as long as it evaluates to  true  or  false  (or any of the String representation, e.g.  True ,  t ,  yes  or  y  are all considered to be  true ). If the template evaluates to  true  the Step will run, otherwise it won't.   An example  run_if  to check a  custom environment variable  (you\ncan expose environment variables from your scripts too,\nusing  envman ):  run_if: |-\n  {{enveq  CUSTOM_ENV_VAR_KEY   test value to test against }}  This  run_if  will skip the step in every case when the value of  CUSTOM_ENV_VAR_KEY \nis not  test value to test against .", 
            "title": "Run a Step only if the Build failed"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/", 
            "text": "If you create a new iOS app on \nbitrise.io\n\nthe generated default workflow wil include our \nXcode Archive\n step.\nThis step can manage to archive and export your iOS app.\n\n\nA bit of history and technical info\n\u2693\n\n\nIf the step is used with \nXcode 6\n it'll generate the following (legacy) command to export\nthe \nipa\n of your app (you can see it in the step's log):\n\n\nxcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/Users/vagrant/deploy/ios-simple-objc.ipa\n \\\n    -exportProvisioningProfile \nXyz\n\n\n\nBack in the days of Xcode 6 this was everything you had to do; just specify the format to be \nipa\n\nand set the required paths and the Provisioning Profile to be used for code signing the \nipa\n.\n\n\nXcode 7\n introduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as \ndeprecated\n, and you'd get\nthe following warning if you'd use the old parameters instead of the new \n-exportOptionsPlist\n parameter: \n\n\nxcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated\n\n\n\nThe export command's \nnew version\n expects a Plist file (\n-exportOptionsPlist\n),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:\n\n\nxcodebuild -exportArchive \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi\n \\\n    -exportOptionsPlist \n/Users/vagrant/deploy/export_options.plist\n\n\n\nBy default the \nXcode Archive\n step generates the minimal sufficient Plist file,\nwith only the export \nmethod\n defined in it (unless you specify the \nexport_options_path\n input,\nwe'll get back to this a bit later):\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\ndevelopment\n/string\n\n\n/dict\n\n\n/plist\n\n\n\nAbout the Xcode Archive step generated export options\n\u2693\n\n\nThe default \ngenerated\n export options Plist file only specifies\nthe \nexport method\n (\napp-store\n, \nad-hoc\n, \nenterprise\n or \ndevelopment\n)\nbased on the provisioning profile embedded in the \n.xcarchive\n (which is generated by the \nxcodebuild archive\n\ncommand, also performed by the \nXcode Archive\n step, right before the \nxcodebuild -exportArchive\n command).\n\n\nThe embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith \nXcode Archive\n step's \nforce_code_sign_identity\n and \nforce_provisioning_profile\n inputs.\nYou can find more information about these options in the \niOS Code Signing\n article.\n\n\nEvery other export option which can be defined in the Plist is optional.\n\n\nUse your own export options\n\u2693\n\n\nIn case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use. \n\n\n\n\nAvailable export options\n\n\nYou can get a list of all available options by calling \nxcodebuild -h\n -\ncheck the \nAvailable keys for -exportOptionsPlist:\n section of the printed help.\n\n\n\n\nThese are the options you can select in Xcode when you export the ipa manually.\n\n\nThe \nrecommanded\n way is to \nput this generated plist file in your project's repository\n.\nThen you can set \nXcode Archive\n step's \nexport_options_path\n input\nto the path of your plist file (e.g. \n./path/to/export-options.plist\n).\n\n\nDisable bitcode in ipa\n\u2693\n\n\nBy default uploadBitcode export options is set to YES\n, unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.\n\n\nYour export options plist should look like:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\napp-store\n/string\n\n    \nkey\nuploadBitcode\n/key\n\n    \nfalse/\n\n\n/dict\n\n\n/plist\n\n\n\n\n\nCode Signing note\n\n\nOf course, if you set the \nmethod\n to \napp-store\n then you have to upload / use\nan App Store code signing Identity \n Provisioning Profile (it have to be\navailable in the system).\n\n\n\n\nRelated issues:\n\u2693\n\n\nERROR ITMS-90635: Invalid Mach-O Format\n\u2693\n\n\nTransporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...\n\n\n\nThis error occurs if you have different \nENABLE_BITCODE\n settings\nin your (sub)projects, including the projects generated by CocoaPods for example.\n\n\nIf you use CocoaPods you can \noverride the \nENABLE_BITCODE\n in the pod projects\n by adding\nthe following section to your \nPodfile\n:\n\n\nFor CocoaPods 1.0+:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend\n\n\n\nFor CocoaPods 0.39 and below:\n\n\npost_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "Xcode Archive: export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#a-bit-of-history-and-technical-info", 
            "text": "If the step is used with  Xcode 6  it'll generate the following (legacy) command to export\nthe  ipa  of your app (you can see it in the step's log):  xcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive  \\\n    -exportPath  /Users/vagrant/deploy/ios-simple-objc.ipa  \\\n    -exportProvisioningProfile  Xyz  Back in the days of Xcode 6 this was everything you had to do; just specify the format to be  ipa \nand set the required paths and the Provisioning Profile to be used for code signing the  ipa .  Xcode 7  introduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as  deprecated , and you'd get\nthe following warning if you'd use the old parameters instead of the new  -exportOptionsPlist  parameter:   xcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated  The export command's  new version  expects a Plist file ( -exportOptionsPlist ),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:  xcodebuild -exportArchive \\\n    -archivePath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive  \\\n    -exportPath  /var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi  \\\n    -exportOptionsPlist  /Users/vagrant/deploy/export_options.plist  By default the  Xcode Archive  step generates the minimal sufficient Plist file,\nwith only the export  method  defined in it (unless you specify the  export_options_path  input,\nwe'll get back to this a bit later):  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string development /string  /dict  /plist", 
            "title": "A bit of history and technical info"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#about-the-xcode-archive-step-generated-export-options", 
            "text": "The default  generated  export options Plist file only specifies\nthe  export method  ( app-store ,  ad-hoc ,  enterprise  or  development )\nbased on the provisioning profile embedded in the  .xcarchive  (which is generated by the  xcodebuild archive \ncommand, also performed by the  Xcode Archive  step, right before the  xcodebuild -exportArchive  command).  The embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith  Xcode Archive  step's  force_code_sign_identity  and  force_provisioning_profile  inputs.\nYou can find more information about these options in the  iOS Code Signing  article.  Every other export option which can be defined in the Plist is optional.", 
            "title": "About the Xcode Archive step generated export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#use-your-own-export-options", 
            "text": "In case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use.    Available export options  You can get a list of all available options by calling  xcodebuild -h  -\ncheck the  Available keys for -exportOptionsPlist:  section of the printed help.   These are the options you can select in Xcode when you export the ipa manually.  The  recommanded  way is to  put this generated plist file in your project's repository .\nThen you can set  Xcode Archive  step's  export_options_path  input\nto the path of your plist file (e.g.  ./path/to/export-options.plist ).", 
            "title": "Use your own export options"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#disable-bitcode-in-ipa", 
            "text": "By default uploadBitcode export options is set to YES , unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.  Your export options plist should look like:  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple Computer//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string app-store /string \n     key uploadBitcode /key \n     false/  /dict  /plist   Code Signing note  Of course, if you set the  method  to  app-store  then you have to upload / use\nan App Store code signing Identity   Provisioning Profile (it have to be\navailable in the system).", 
            "title": "Disable bitcode in ipa"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#related-issues", 
            "text": "", 
            "title": "Related issues:"
        }, 
        {
            "location": "/tips-and-tricks/xcodebuild-export-options/#error-itms-90635-invalid-mach-o-format", 
            "text": "Transporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...  This error occurs if you have different  ENABLE_BITCODE  settings\nin your (sub)projects, including the projects generated by CocoaPods for example.  If you use CocoaPods you can  override the  ENABLE_BITCODE  in the pod projects  by adding\nthe following section to your  Podfile :  For CocoaPods 1.0+:  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend  For CocoaPods 0.39 and below:  post_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "ERROR ITMS-90635: Invalid Mach-O Format"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/", 
            "text": "If you need something you can't find a Step for, you can always install \n use tools with scripts or Script steps.\n\n\nJust add a \nScript\n step to your Workflow, and either write your script there, or run a script from your repository.\n\n\nPasswordless \nsudo\n is enabled on all of our build virtual machines, so you can freely use \nsudo\n if you need it.\n\n\nOnce you have a working script, \nyou can also transform it into a Step\n and optionally share it with others (through our StepLib).\nYou can find a template and more information about how you can create your own Step at: \nhttps://github.com/bitrise-steplib/step-template\n\n\nStep by step setup\n\u2693\n\n\n\n\nOpen your app on Bitrise.io\n\n\nOpen the app's Workflow Editor (on the \nWorkflow\n tab -\n click \nManage Workflows\n)\n\n\nSelect a Workflow\n\n\nClick on the \n+\n sign (you can see this between every step), where you want to insert your Script step\n\n\nIn the step list search for \"script\", and click the \nAdd to Workflow\n button on the \"Script\" step item.\n\n\nNow that you have the Script step in your workflow, you just have to select it and write your script into the \nScript content\n input (on the right side of the Workflow Editor).\n\n\n\n\nNote: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.\n\n\nIf you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at \npath/to/script.sh\n you can run it with this \nScript content\n:\n\n\nbash ./path/to/script.sh\n\n\n\nOr, in a more robust form (which is better if you want to extend the content in the future):\n\n\n#!/bin/bash\nset -ex\nbash ./path/to/script.sh\n\n\n\nThe \nset -ex\n line is recommended for every multi-line Bash script, to make your scripts easier to debug.\n\n\nYou can of course run non Bash scripts too, e.g. a Ruby script:\n\n\n#!/bin/bash\nset -ex\nruby ./path/to/script.rb\n\n\n\nExamples\n\u2693\n\n\nAt this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!\n\n\nbrew\n on macOS\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on macOS, using \nbrew\n:\n\n\n#!/bin/bash\nset -ex\nbrew install cmake\n\n\n\nActually, the whole Script content could be as short as:\n\n\nbrew install cmake\n\n\n\nWhich is exactly how you would use \nbrew\n on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.\n\n\napt-get\n on Linux\n\u2693\n\n\nE.g. to install \ncmake\n with a script step, on Linux, using \napt-get\n:\n\n\n#!/bin/bash\nset -ex\nsudo apt-get install -y cmake\n\n\n\n\n\nDon't forget the \n-y\n flag for \napt-get\n!\n\n\nIf you don't add the \n-y\n (\"yes\") flag to the \napt-get\n command, \napt-get\n will\npresent a prompt which you have to accept or deny \nmanually\n.\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for \napt-get\n. To prevent this issue,\nand to auto accept the prompt, just use the \n-y\n flag, as shown in the example.\n\n\n\n\nAdvanced option: use \ndeps\n in \nbitrise.yml\n\u2693\n\n\nInstead of installing your tool inside the Script step, you can use the \ndeps\n option\nof the \nbitrise.yml\n. If you declare \ndeps\n \nfor a given Step\n,\nthe \nBitrise CLI\n\nwill check if that tool is installed, and will install it for you if required.\n\n\n\n\nAvailable dependency managers\n\n\nThis method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.\n\n\n\n\nAn example, installing \ncmake\n with either \napt-get\n (where \napt-get\n is available),\nor with \nbrew\n (on macOS):\n\n\ndeps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake\n\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake\n\n\n\nAn advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated \nbinary name\n. If that matches the package name (like in case of \ncmake\n) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with \nbin_name\n. An example is AWS CLI, where the package name in both\npackage managers is \nawscli\n, but the binary itself is \naws\n.\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws\n\n\n\nConditional execution\n\u2693\n\n\nAdditionally, you can use Environment Variables in your scripts too.\nAs an example, using the \nPR\n environment variable\n(but you can use any \nAvailable Environment Variable\n,\nlike the ones exposed by previous steps in the Workflow),\nto run different scripts in case of a Pull Request and a non Pull Request build:\n\n\n#!/bin/bash\nset -ex\n\nif [[ \n$PR\n == \ntrue\n ]] ; then\n  echo \n=\n Pull Request mode/build!\n\n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo \n=\n Not Pull Request mode/build!\n\n  bash ./path/to/not-pull-request.sh\nfi\n\n\n\nNote: if you \ndon't\n want to run any part of the Step/script based on a variable (like \n$PR\n),\nyou don't have to implement the check in the script. You can use the \nrun_if\n expression in\nthe \nbitrise.yml\n directly to declare in which case(s) the Step should run. Additionally,\n\nrun_if\n can be added to any step, not just to Script steps.\nYou can find more information about \nrun_if\n expressions\nin \nthis guide\n.", 
            "title": "Install Any Additional Tool"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#step-by-step-setup", 
            "text": "Open your app on Bitrise.io  Open the app's Workflow Editor (on the  Workflow  tab -  click  Manage Workflows )  Select a Workflow  Click on the  +  sign (you can see this between every step), where you want to insert your Script step  In the step list search for \"script\", and click the  Add to Workflow  button on the \"Script\" step item.  Now that you have the Script step in your workflow, you just have to select it and write your script into the  Script content  input (on the right side of the Workflow Editor).   Note: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.  If you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at  path/to/script.sh  you can run it with this  Script content :  bash ./path/to/script.sh  Or, in a more robust form (which is better if you want to extend the content in the future):  #!/bin/bash\nset -ex\nbash ./path/to/script.sh  The  set -ex  line is recommended for every multi-line Bash script, to make your scripts easier to debug.  You can of course run non Bash scripts too, e.g. a Ruby script:  #!/bin/bash\nset -ex\nruby ./path/to/script.rb", 
            "title": "Step by step setup"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#examples", 
            "text": "At this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!", 
            "title": "Examples"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#brew-on-macos", 
            "text": "E.g. to install  cmake  with a script step, on macOS, using  brew :  #!/bin/bash\nset -ex\nbrew install cmake  Actually, the whole Script content could be as short as:  brew install cmake  Which is exactly how you would use  brew  on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.", 
            "title": "brew on macOS"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#apt-get-on-linux", 
            "text": "E.g. to install  cmake  with a script step, on Linux, using  apt-get :  #!/bin/bash\nset -ex\nsudo apt-get install -y cmake   Don't forget the  -y  flag for  apt-get !  If you don't add the  -y  (\"yes\") flag to the  apt-get  command,  apt-get  will\npresent a prompt which you have to accept or deny  manually .\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for  apt-get . To prevent this issue,\nand to auto accept the prompt, just use the  -y  flag, as shown in the example.", 
            "title": "apt-get on Linux"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#advanced-option-use-deps-in-bitriseyml", 
            "text": "Instead of installing your tool inside the Script step, you can use the  deps  option\nof the  bitrise.yml . If you declare  deps   for a given Step ,\nthe  Bitrise CLI \nwill check if that tool is installed, and will install it for you if required.   Available dependency managers  This method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.   An example, installing  cmake  with either  apt-get  (where  apt-get  is available),\nor with  brew  (on macOS):  deps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake  A minimal  bitrise.yml  for demonstration:  format_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake  An advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated  binary name . If that matches the package name (like in case of  cmake ) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with  bin_name . An example is AWS CLI, where the package name in both\npackage managers is  awscli , but the binary itself is  aws .  A minimal  bitrise.yml  for demonstration:  format_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws", 
            "title": "Advanced option: use deps in bitrise.yml"
        }, 
        {
            "location": "/tips-and-tricks/install-additional-tools/#conditional-execution", 
            "text": "Additionally, you can use Environment Variables in your scripts too.\nAs an example, using the  PR  environment variable\n(but you can use any  Available Environment Variable ,\nlike the ones exposed by previous steps in the Workflow),\nto run different scripts in case of a Pull Request and a non Pull Request build:  #!/bin/bash\nset -ex\n\nif [[  $PR  ==  true  ]] ; then\n  echo  =  Pull Request mode/build! \n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo  =  Not Pull Request mode/build! \n  bash ./path/to/not-pull-request.sh\nfi  Note: if you  don't  want to run any part of the Step/script based on a variable (like  $PR ),\nyou don't have to implement the check in the script. You can use the  run_if  expression in\nthe  bitrise.yml  directly to declare in which case(s) the Step should run. Additionally, run_if  can be added to any step, not just to Script steps.\nYou can find more information about  run_if  expressions\nin  this guide .", 
            "title": "Conditional execution"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/", 
            "text": "You can improve your build times with the following tips.\n\n\nFeel free to suggest other ways of optimization!\n\n\nInclude your dependencies in your repository\n\u2693\n\n\nIncluding your dependencies (like CocoaPods) in your repository can speed up your builds.\nOnce the \ngit clone\n of your repository is done, everything will be in place to do your build.\n\n\nFor example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow\nif you include your \nPods\n directory \nand\n the CocoaPods generated \n.xcworkspace\n file in your repository.\n\n\nYou can read more about the pros \n cons of including your dependencies in your repository at:\n\nShould I commit my dependencies into my repository?\n\n\nUse the Build Cache\n\u2693\n\n\nIn some cases using the \nBuild Cache\n feature can also help to speed up your builds.\nNote: the efficiency of the Build Cache depends on the size of the files you want to cache,\nas well as on the number of files you want to cache.\nFor more information see the \nBuild Cache documentation\n.\n\n\nTurn off the \"Clean build\" option of Xcode steps\n\u2693\n\n\nAll of our Xcode steps (Xcode Test, Xcode Archive and Xcode Analyze) have a \"Do a clean Xcode build ...?\" option.\nYou can usually turn off this option without causing any issues.\n\n\nBy turning off \"clean build\" you can speed up subsequent Xcode steps.\nThe first one will still have to do a full, clean build, because there's no build cache at the time it runs\n(as every build runs in a brand new, clean Virtual Machine, as descibed in \nCode Security\n),\nbut subsequent Xcode steps can use the build cache of the previous Xcode step(s), reducing the compilation time of the step.\n\n\nOther\n\u2693\n\n\nFeel free to suggest other ways of optimization!\n\n\n\n\nGuarding Against Long Compiles\n\n\nStay updated with Swift compiling tips", 
            "title": "Optimize your build times"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#include-your-dependencies-in-your-repository", 
            "text": "Including your dependencies (like CocoaPods) in your repository can speed up your builds.\nOnce the  git clone  of your repository is done, everything will be in place to do your build.  For example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow\nif you include your  Pods  directory  and  the CocoaPods generated  .xcworkspace  file in your repository.  You can read more about the pros   cons of including your dependencies in your repository at: Should I commit my dependencies into my repository?", 
            "title": "Include your dependencies in your repository"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#use-the-build-cache", 
            "text": "In some cases using the  Build Cache  feature can also help to speed up your builds.\nNote: the efficiency of the Build Cache depends on the size of the files you want to cache,\nas well as on the number of files you want to cache.\nFor more information see the  Build Cache documentation .", 
            "title": "Use the Build Cache"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#turn-off-the-clean-build-option-of-xcode-steps", 
            "text": "All of our Xcode steps (Xcode Test, Xcode Archive and Xcode Analyze) have a \"Do a clean Xcode build ...?\" option.\nYou can usually turn off this option without causing any issues.  By turning off \"clean build\" you can speed up subsequent Xcode steps.\nThe first one will still have to do a full, clean build, because there's no build cache at the time it runs\n(as every build runs in a brand new, clean Virtual Machine, as descibed in  Code Security ),\nbut subsequent Xcode steps can use the build cache of the previous Xcode step(s), reducing the compilation time of the step.", 
            "title": "Turn off the \"Clean build\" option of Xcode steps"
        }, 
        {
            "location": "/tips-and-tricks/optimize-your-build-times/#other", 
            "text": "Feel free to suggest other ways of optimization!   Guarding Against Long Compiles  Stay updated with Swift compiling tips", 
            "title": "Other"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/", 
            "text": "Storing the build configuration (\nbitrise.yml\n) in your repository can be a great idea.\nIt has its own PROs and CONs of course, so you have to decide it yourself\nwhether this solution is a good fit for your project or not.\n\n\nThings to keep in mind!\n\u2693\n\n\nYou can find a discussion about what are the advantages and\ndisadvantages of this approach \non GitHub\n.\nTo highlight a few things to keep in mind if you'd want to store and use\nthe \nbitrise.yml\n from your repository:\n\n\nTrigger Map is better to be managed on bitrise.io\n\u2693\n\n\nYou can of course store the \ntrigger_map\n (or \nTriggers\n on the web UI)\nin your repository (in \nbitrise.yml\n), but if you do that you'll lose\nthe ability to \nignore\n patterns. This is because \nbitrise.io\n\nhave to evaluate the Trigger map \nbefore\n the repository would be cloned\nin order to be able to avoid starting a build based on the Trigger map.\n\n\nThe source code is never stored on \nbitrise.io\n,\n(see \nCode Security - Source code\n for more information),\nso if you store the trigger map in your repository, the only way to check it\nis to clone it first. Even if you prepare your \ntrigger_map\n in your repository to ignore\npatterns, \nbitrise.io\n will start a build to clone\nthe repository, before it could abort it.\n\n\nIn contrast, if you specify the Trigger Map on \nbitrise.io\n,\nyou can ignore patterns in a way that it won't even start a build.\n\n\nYou can't change the build configuration of a commit\n\u2693\n\n\nIf you use the \nbitrise.yml\n from the repository, that means that when you\nrebuild a specific commit, it will use the same \nbitrise.yml\n every time,\nthe one stored in the repository for that git commit.\n\n\nThe only way to change the configuration\n is to checkout the related\nbranch, change the \nbitrise.yml\n, commit the changes,\npush and start a \nnew\n build (rebuild of a commit won't work,\nthat will always get the same \nbitrise.yml\n, the one stored at the commit).\n\n\nIf you store your build configuration on \nbitrise.io\n\nyou can always rebuild any commit with a new build configuration,\n\nthe configuration is not tied to the commit / state of the repository\n.\nYou can simply change a parameter and hit \"rebuild\", the new build\nwill use the latest configuration from \nbitrise.io\n.\n\n\nYou can't edit the configuration in the Workflow Editor on bitrise.io\n\u2693\n\n\nThe Workflow Editor on \nbitrise.io\n can only be used\nto visualize and edit the configuration stored on \nbitrise.io\n.\n\n\nThe \noffline workflow editor\n\nof course can be used, so this is probably not a huge issue - and we're\nworking on it to make it as streamlined as possible - but might\nmake it harder to get started (as you have to install the Bitrise CLI\nlocally).\n\n\nPull Requests can run builds with any custom configuration\n\u2693\n\n\nWhen someone sends a Pull Request they can modify the \nbitrise.yml\n\nin your repository any way they like it. A recent trend for example\nis to send pull requests which run a bitcoin miner, as long as\nthat's possible. This can make \nyour\n builds to queue, until you\nabort the related build or it hits the build time limit.\n\n\nExample to use bitrise.yml from the repository\n\u2693\n\n\nThere are quite a few ways to accomplish this, as all you need is:\n\n\n\n\nDefine a \"wrapper\" build config on \nbitrise.io\n,\n   which defines how and from where your \nbitrise.yml\n will be retrieved.\n   E.g. you could store the \nbitrise.yml\n in a \nGitHub Gist\n\n   too, not just in your repository. In this example we'll use the configuration\n   from the repository, so the \"wrapper\" configuration on \nbitrise.io\n\n   will define how the repository should be retrieved. Note: this also allows\n   more customization, for example if the repository have to be accessed through\n   a VPN, you can configure that in the \"wrapper\" config and it will work.\n\n\nRun the build configuration (\nbitrise.yml\n) with the \nBitrise CLI\n.\n   This is the same runner which runs any other build on the \nbitrise.io\n\n   build virtual machines, so it's always preinstalled and ready to be used.\n\n\n\n\nThe example here is really simple to setup, should work in most cases (unless\nyou need a VPN for cloning the repository for example), but \nit also requires\nyou to maintain the Trigger Map on \nbitrise.io\n instead\nof in the repository\n, as that is the recommended solution.\n\n\nStep by step:\n\n\n\n\nCreate an app on \nbitrise.io\n, or if you already have it registered\n   open it.\n\n\nGo to the \nWorkflow\n tab to open the Workflow Editor.\n\n\nIn the Workflow Editor switch to \nbitrise.yml\n mode\n\n\nIn the \nbitrise.yml\n mode:\n\n\nIf you already have a configuration which you want to use, download the \nbitrise.yml\n first,\n  and save it into the \nroot\n of your repository.\n  \nThere's a button to quickly download the current \nbitrise.yml\n.\n\n\nOnce you're ready to replace your configuration on bitrise.io,\n  copy the \nbitrise.yml content for bitrise.io\n from below and paste\n  it into the editor on \nbitrise.io\n (in \nbitrise.yml\n mode of the editor)\n\n\n\n\n\n\nSave the changes.\n\n\n\n\n\n\nAfter downloading the original bitrise.yml from bitrise.io\n\n\nThe original \nbitrise.yml\n you downloaded from \nbitrise.io\n\nmost likely includes the steps to retrieve your repository.\nThese steps will be redundant, as you will define how the repository should be accessed\nin the \"wrapper\" config on \nbitrise.io\n,\nso go ahead and remove the \nactivate-ssh-key\n and \ngit-clone\n\nsteps from it before you would commit it into your repository.\n\n\n\n\nbitrise.yml content for bitrise.io\n\u2693\n\n\n---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch: \n*\n\n  workflow: ci\n- pull_request_target_branch: \n*\n\n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo\n\n\n\n\nHow this works:\n\u2693\n\n\nThis setup splits the build configuration into two parts:\n\n\n\n\nThe \"wrapper\" config on \nbitrise.io\n which\n   \ndefines how the repository have to be retrieved\n (e.g. through a Git Clone),\n   which workflows are exposed for \nbitrise.io\n builds,\n   and defines the automatic \nTrigger mapping\n.\n\n\nYour build configuration (\nbitrise.yml\n), stored in your repository,\n   which \ndefines what should happen during the builds.\n\n\n\n\nThis \"wrapper\" configuration\n\ndefines a common workflow \n_run_from_repo\n,\nwhich will activate an SSH key (if specified), Git Clone the repository,\nand then switch to use the \nbitrise.yml\n from the repository\nby running \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n.\n\n\nThis common workflow (\n_run_from_repo\n) is then used through other workflows, like\n\nci\n and \nanother-workflow\n, using the \nafter_run\n\n\nworkflow chaining\n\nmechanism. Those workflows do not have any steps, the only thing\nthe \nci\n and \nanother-workflow\n workflows do is running the\ncommon \n_run_from_repo\n workflow.\n\n\nThe trick is \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n.\nThe \nBITRISE_TRIGGERED_WORKFLOW_ID\n environment variable is set to the\n\n\"entry\"\n workflow, \nthe one which started the build.\n\nSo, by running the \nci\n workflow, the \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\ncommand will be the same as \nbitrise run \nci\n.\n\n\nThis makes it super simple and quick to expose workflows from your \nbitrise.yml\n (stored in your\nrepository) to \nbitrise.io\n, all you have to do is:\n\n\n\n\nDefine the workflow in your \nbitrise.yml\n (in your repository).\n\n\nClone the \nci\n workflow (or the \nanother-workflow\n) with a name matching the workflow\n   in your \nbitrise.yml\n (in your repository), or create a new empty workflow\n   with a matching name and add the \n_run_from_repo\n as an \nafter_run\n workflow.\n   \nNote: in the Workflow Editor UI you can quickly clone a workflow by\n   selecting the workflow, then clicking the \"add new workflow\" (\n+\n) button.\n\n\n\n\nStep by step usage guide of the wrapper config:\n\u2693\n\n\nFor example, to add a new \ndeploy\n workflow and to expose it for \nbitrise.io\n builds,\nonce you \nprepared your wrapper config on bitrise.io\n:\n\n\n\n\nCreate a \ndeploy\n workflow \nin your \nbitrise.yml\n (in your repository, and don't forget to commit and push\n   the \nbitrise.yml\n changes!)\n\n\nThen create a new workflow with the same name (\ndeploy\n) \non \nbitrise.io\n\n\nMake sure that the \ndeploy\n workflow on \nbitrise.io\n has\n   the \n_run_from_repo\n as an \nafter_run\n workflow.\n\n\nDefine \nTriggers\n for the \ndeploy\n workflow \non \nbitrise.io\n\n   if you want to automate the triggering of that workflow.\n\n\n\n\nFollowing the steps above, for example to run \ndeploy\n for every code push on \nmaster\n you should\nhave a configuration like this \non \nbitrise.io\n:\n\n\n---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch: \nmaster\n\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: ci\n- pull_request_target_branch: \n*\n\n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\n  deploy:\n    after_run:\n    - _run_from_repo\n\n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo\n\n\n\n\nThis configuration will run the \ndeploy\n workflow \nfrom your repository\n for every\ncode push on the \nmaster\n branch, the \nci\n workflow \nfrom your repository\n for\nevery code push on other branches as well as for Pull Requests,\nand it will never run \nanother-workflow\n automatically, but you will be able\nto start manual builds with \nanother-workflow\n, which will invoke\nthe \nanother-workflow\n workflow \nfrom the \nbitrise.yml\n in your repository\n.", 
            "title": "Use bitrise.yml from repository"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#things-to-keep-in-mind", 
            "text": "You can find a discussion about what are the advantages and\ndisadvantages of this approach  on GitHub .\nTo highlight a few things to keep in mind if you'd want to store and use\nthe  bitrise.yml  from your repository:", 
            "title": "Things to keep in mind!"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#trigger-map-is-better-to-be-managed-on-bitriseio", 
            "text": "You can of course store the  trigger_map  (or  Triggers  on the web UI)\nin your repository (in  bitrise.yml ), but if you do that you'll lose\nthe ability to  ignore  patterns. This is because  bitrise.io \nhave to evaluate the Trigger map  before  the repository would be cloned\nin order to be able to avoid starting a build based on the Trigger map.  The source code is never stored on  bitrise.io ,\n(see  Code Security - Source code  for more information),\nso if you store the trigger map in your repository, the only way to check it\nis to clone it first. Even if you prepare your  trigger_map  in your repository to ignore\npatterns,  bitrise.io  will start a build to clone\nthe repository, before it could abort it.  In contrast, if you specify the Trigger Map on  bitrise.io ,\nyou can ignore patterns in a way that it won't even start a build.", 
            "title": "Trigger Map is better to be managed on bitrise.io"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#you-cant-change-the-build-configuration-of-a-commit", 
            "text": "If you use the  bitrise.yml  from the repository, that means that when you\nrebuild a specific commit, it will use the same  bitrise.yml  every time,\nthe one stored in the repository for that git commit.  The only way to change the configuration  is to checkout the related\nbranch, change the  bitrise.yml , commit the changes,\npush and start a  new  build (rebuild of a commit won't work,\nthat will always get the same  bitrise.yml , the one stored at the commit).  If you store your build configuration on  bitrise.io \nyou can always rebuild any commit with a new build configuration, the configuration is not tied to the commit / state of the repository .\nYou can simply change a parameter and hit \"rebuild\", the new build\nwill use the latest configuration from  bitrise.io .", 
            "title": "You can't change the build configuration of a commit"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#you-cant-edit-the-configuration-in-the-workflow-editor-on-bitriseio", 
            "text": "The Workflow Editor on  bitrise.io  can only be used\nto visualize and edit the configuration stored on  bitrise.io .  The  offline workflow editor \nof course can be used, so this is probably not a huge issue - and we're\nworking on it to make it as streamlined as possible - but might\nmake it harder to get started (as you have to install the Bitrise CLI\nlocally).", 
            "title": "You can't edit the configuration in the Workflow Editor on bitrise.io"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#pull-requests-can-run-builds-with-any-custom-configuration", 
            "text": "When someone sends a Pull Request they can modify the  bitrise.yml \nin your repository any way they like it. A recent trend for example\nis to send pull requests which run a bitcoin miner, as long as\nthat's possible. This can make  your  builds to queue, until you\nabort the related build or it hits the build time limit.", 
            "title": "Pull Requests can run builds with any custom configuration"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#example-to-use-bitriseyml-from-the-repository", 
            "text": "There are quite a few ways to accomplish this, as all you need is:   Define a \"wrapper\" build config on  bitrise.io ,\n   which defines how and from where your  bitrise.yml  will be retrieved.\n   E.g. you could store the  bitrise.yml  in a  GitHub Gist \n   too, not just in your repository. In this example we'll use the configuration\n   from the repository, so the \"wrapper\" configuration on  bitrise.io \n   will define how the repository should be retrieved. Note: this also allows\n   more customization, for example if the repository have to be accessed through\n   a VPN, you can configure that in the \"wrapper\" config and it will work.  Run the build configuration ( bitrise.yml ) with the  Bitrise CLI .\n   This is the same runner which runs any other build on the  bitrise.io \n   build virtual machines, so it's always preinstalled and ready to be used.   The example here is really simple to setup, should work in most cases (unless\nyou need a VPN for cloning the repository for example), but  it also requires\nyou to maintain the Trigger Map on  bitrise.io  instead\nof in the repository , as that is the recommended solution.  Step by step:   Create an app on  bitrise.io , or if you already have it registered\n   open it.  Go to the  Workflow  tab to open the Workflow Editor.  In the Workflow Editor switch to  bitrise.yml  mode  In the  bitrise.yml  mode:  If you already have a configuration which you want to use, download the  bitrise.yml  first,\n  and save it into the  root  of your repository.\n   There's a button to quickly download the current  bitrise.yml .  Once you're ready to replace your configuration on bitrise.io,\n  copy the  bitrise.yml content for bitrise.io  from below and paste\n  it into the editor on  bitrise.io  (in  bitrise.yml  mode of the editor)    Save the changes.    After downloading the original bitrise.yml from bitrise.io  The original  bitrise.yml  you downloaded from  bitrise.io \nmost likely includes the steps to retrieve your repository.\nThese steps will be redundant, as you will define how the repository should be accessed\nin the \"wrapper\" config on  bitrise.io ,\nso go ahead and remove the  activate-ssh-key  and  git-clone \nsteps from it before you would commit it into your repository.", 
            "title": "Example to use bitrise.yml from the repository"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#bitriseyml-content-for-bitriseio", 
            "text": "---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch:  * \n  workflow: ci\n- pull_request_target_branch:  * \n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run  ${BITRISE_TRIGGERED_WORKFLOW_ID} \n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo", 
            "title": "bitrise.yml content for bitrise.io"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#how-this-works", 
            "text": "This setup splits the build configuration into two parts:   The \"wrapper\" config on  bitrise.io  which\n    defines how the repository have to be retrieved  (e.g. through a Git Clone),\n   which workflows are exposed for  bitrise.io  builds,\n   and defines the automatic  Trigger mapping .  Your build configuration ( bitrise.yml ), stored in your repository,\n   which  defines what should happen during the builds.   This \"wrapper\" configuration \ndefines a common workflow  _run_from_repo ,\nwhich will activate an SSH key (if specified), Git Clone the repository,\nand then switch to use the  bitrise.yml  from the repository\nby running  bitrise run  ${BITRISE_TRIGGERED_WORKFLOW_ID} .  This common workflow ( _run_from_repo ) is then used through other workflows, like ci  and  another-workflow , using the  after_run  workflow chaining \nmechanism. Those workflows do not have any steps, the only thing\nthe  ci  and  another-workflow  workflows do is running the\ncommon  _run_from_repo  workflow.  The trick is  bitrise run  ${BITRISE_TRIGGERED_WORKFLOW_ID} .\nThe  BITRISE_TRIGGERED_WORKFLOW_ID  environment variable is set to the \"entry\"  workflow,  the one which started the build. \nSo, by running the  ci  workflow, the  bitrise run  ${BITRISE_TRIGGERED_WORKFLOW_ID} \ncommand will be the same as  bitrise run  ci .  This makes it super simple and quick to expose workflows from your  bitrise.yml  (stored in your\nrepository) to  bitrise.io , all you have to do is:   Define the workflow in your  bitrise.yml  (in your repository).  Clone the  ci  workflow (or the  another-workflow ) with a name matching the workflow\n   in your  bitrise.yml  (in your repository), or create a new empty workflow\n   with a matching name and add the  _run_from_repo  as an  after_run  workflow.\n    Note: in the Workflow Editor UI you can quickly clone a workflow by\n   selecting the workflow, then clicking the \"add new workflow\" ( + ) button.", 
            "title": "How this works:"
        }, 
        {
            "location": "/tips-and-tricks/use-bitrise-yml-from-repository/#step-by-step-usage-guide-of-the-wrapper-config", 
            "text": "For example, to add a new  deploy  workflow and to expose it for  bitrise.io  builds,\nonce you  prepared your wrapper config on bitrise.io :   Create a  deploy  workflow  in your  bitrise.yml  (in your repository, and don't forget to commit and push\n   the  bitrise.yml  changes!)  Then create a new workflow with the same name ( deploy )  on  bitrise.io  Make sure that the  deploy  workflow on  bitrise.io  has\n   the  _run_from_repo  as an  after_run  workflow.  Define  Triggers  for the  deploy  workflow  on  bitrise.io \n   if you want to automate the triggering of that workflow.   Following the steps above, for example to run  deploy  for every code push on  master  you should\nhave a configuration like this  on  bitrise.io :  ---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch:  master \n  workflow: deploy\n- push_branch:  * \n  workflow: ci\n- pull_request_target_branch:  * \n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run  ${BITRISE_TRIGGERED_WORKFLOW_ID} \n  deploy:\n    after_run:\n    - _run_from_repo\n\n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo  This configuration will run the  deploy  workflow  from your repository  for every\ncode push on the  master  branch, the  ci  workflow  from your repository  for\nevery code push on other branches as well as for Pull Requests,\nand it will never run  another-workflow  automatically, but you will be able\nto start manual builds with  another-workflow , which will invoke\nthe  another-workflow  workflow  from the  bitrise.yml  in your repository .", 
            "title": "Step by step usage guide of the wrapper config:"
        }, 
        {
            "location": "/faq/available-environment-variables/", 
            "text": "Interactive available Environment Variables list\n\u2693\n\n\nIn the \nWorkflow Editor\n on \nbitrise.io\n\nyou can click into any input field of a Step and a green \nInsert Variable\n button will appear.\n\n\nClick this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\nThis is an interactive list, which includes Environment Variables generated by previous Steps!\nThis means, that if you click into an input of the third Step of your Workflow,\nthe list will include all the Environment Variables (outputs) generated by the first and second Steps,\nbut not the ones which will be generated by the fourth, fifth, ... Steps.\n\n\nExposed by the Bitrise CLI\n\u2693\n\n\nThese Environment Variables are available everywhere, even if you run the build on your own Mac\n(using the \nBitrise CLI\n):\n\n\n\n\nBITRISE_TRIGGERED_WORKFLOW_ID\n : the Workflow's ID which was triggered, either with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_TRIGGERED_WORKFLOW_TITLE\n : the Workflow's title (if you provided one) which was triggered,\n  either with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_BUILD_STATUS\n : current status of the build - \n0\n if there are no failed steps yet,\n  \n1\n if there's at least one failed step\n\n\nBITRISE_SOURCE_DIR\n : path of source / base workdir. By default it's the directory where \nbitrise\n runs\n  (e.g. your repository root), unless you provide a different value.\n  Can be overwritten during the build, which will change the working directory for subsequent Steps in the build.\n\n\nBITRISE_DEPLOY_DIR\n : directory to store artifacts / files for deploy.\n  It's a temporary directory created by \nbitrise\n CLI by default, and can be overwritten before starting \nbitrise\n CLI.\n  \nThe content of this directory can be attached to the \nbitrise.io\n build page, as artifacts,\n  with the \nDeploy to Bitrise.io\n step for example.\n\n\nCI\n : indicates whether \nbitrise\n CLI is running in CI (Continuous Integration) mode. Value can be \ntrue\n or \nfalse\n.\n\n\nPR\n : indicates whether \nbitrise\n CLI is running in PR (Pull Request) mode. Value can be \ntrue\n or \nfalse\n.\n\n\n\n\nExposed by Bitrise.io\n\u2693\n\n\nThese environments are available for builds running on \nbitrise.io\n Virtual Machines:\n\n\n\n\nBITRISE_BUILD_NUMBER\n : build number of the build on \nbitrise.io\n\n\nBITRISE_APP_TITLE\n : app title on \nbitrise.io\n\n\nBITRISE_APP_URL\n : app URL on \nbitrise.io\n\n\nBITRISE_APP_SLUG\n : app slug on \nbitrise.io\n\n\nBITRISE_BUILD_URL\n : build's URL on \nbitrise.io\n\n\nBITRISE_BUILD_SLUG\n : build's slug on \nbitrise.io\n\n\nBITRISE_BUILD_TRIGGER_TIMESTAMP\n : triggered at timestamp of the build\n\n\nGIT_REPOSITORY_URL\n : git repository URL\n\n\nBITRISE_GIT_BRANCH\n : the branch which triggered the build (if any)\n\n\nBITRISEIO_GIT_BRANCH_DEST\n : Used only with builds triggered by Pull Requests - the destination/target branch of the Pull Request that triggered the build\n\n\nBITRISE_GIT_TAG\n : tag which triggered the build (if any)\n\n\nBITRISE_GIT_COMMIT\n : commit hash which triggered the build (if any)\n\n\nBITRISE_GIT_MESSAGE\n : commit message - or the message you specified if you triggered the build manually\n\n\nBITRISEIO_GIT_REPOSITORY_OWNER\n : the owner of the Git repository of the project (for example, \nbitrise-team\n)\n\n\nBITRISEIO_GIT_REPOSITORY_SLUG\n : the slug of the Git repository of the project (for example, \nbitrise-blog\n)\n\n\nBITRISE_PULL_REQUEST\n : Pull Request ID, which triggered the build (if any)\n\n\nBITRISEIO_PULL_REQUEST_REPOSITORY_URL\n : The repository URL from where the Pull Request is sent\n\n\nBITRISEIO_PULL_REQUEST_MERGE_BRANCH\n : The pre-merge branch - if the Git hosting provider supports and provides the pre-merged state of a Pull Request on a special \"merge branch\"\n\n\nBITRISEIO_PULL_REQUEST_HEAD_BRANCH\n : The Pull Request \"head branch\", if the Git hosting provider system supports \n provides this. This special git ref should point to the source of the Pull Request\n\n\nBITRISE_PROVISION_URL\n : Provisioning Profile(s) URL - the ones uploaded to \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_URL\n : Certificate / Identity URL - the one uploaded to \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_PASSPHRASE\n : Certificate / Identity's password / passphrase,\n  the one specified on \nbitrise.io\n.\n  Pipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_IO\n : indicates that the build is running in a bitrise.io environment. Value is set to \ntrue\n by bitrise.io when it starts a build.", 
            "title": "Available Environment Variables"
        }, 
        {
            "location": "/faq/available-environment-variables/#interactive-available-environment-variables-list", 
            "text": "In the  Workflow Editor  on  bitrise.io \nyou can click into any input field of a Step and a green  Insert Variable  button will appear.  Click this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.  This is an interactive list, which includes Environment Variables generated by previous Steps!\nThis means, that if you click into an input of the third Step of your Workflow,\nthe list will include all the Environment Variables (outputs) generated by the first and second Steps,\nbut not the ones which will be generated by the fourth, fifth, ... Steps.", 
            "title": "Interactive available Environment Variables list"
        }, 
        {
            "location": "/faq/available-environment-variables/#exposed-by-the-bitrise-cli", 
            "text": "These Environment Variables are available everywhere, even if you run the build on your own Mac\n(using the  Bitrise CLI ):   BITRISE_TRIGGERED_WORKFLOW_ID  : the Workflow's ID which was triggered, either with  bitrise run  or  bitrise trigger  BITRISE_TRIGGERED_WORKFLOW_TITLE  : the Workflow's title (if you provided one) which was triggered,\n  either with  bitrise run  or  bitrise trigger  BITRISE_BUILD_STATUS  : current status of the build -  0  if there are no failed steps yet,\n   1  if there's at least one failed step  BITRISE_SOURCE_DIR  : path of source / base workdir. By default it's the directory where  bitrise  runs\n  (e.g. your repository root), unless you provide a different value.\n  Can be overwritten during the build, which will change the working directory for subsequent Steps in the build.  BITRISE_DEPLOY_DIR  : directory to store artifacts / files for deploy.\n  It's a temporary directory created by  bitrise  CLI by default, and can be overwritten before starting  bitrise  CLI.\n   The content of this directory can be attached to the  bitrise.io  build page, as artifacts,\n  with the  Deploy to Bitrise.io  step for example.  CI  : indicates whether  bitrise  CLI is running in CI (Continuous Integration) mode. Value can be  true  or  false .  PR  : indicates whether  bitrise  CLI is running in PR (Pull Request) mode. Value can be  true  or  false .", 
            "title": "Exposed by the Bitrise CLI"
        }, 
        {
            "location": "/faq/available-environment-variables/#exposed-by-bitriseio", 
            "text": "These environments are available for builds running on  bitrise.io  Virtual Machines:   BITRISE_BUILD_NUMBER  : build number of the build on  bitrise.io  BITRISE_APP_TITLE  : app title on  bitrise.io  BITRISE_APP_URL  : app URL on  bitrise.io  BITRISE_APP_SLUG  : app slug on  bitrise.io  BITRISE_BUILD_URL  : build's URL on  bitrise.io  BITRISE_BUILD_SLUG  : build's slug on  bitrise.io  BITRISE_BUILD_TRIGGER_TIMESTAMP  : triggered at timestamp of the build  GIT_REPOSITORY_URL  : git repository URL  BITRISE_GIT_BRANCH  : the branch which triggered the build (if any)  BITRISEIO_GIT_BRANCH_DEST  : Used only with builds triggered by Pull Requests - the destination/target branch of the Pull Request that triggered the build  BITRISE_GIT_TAG  : tag which triggered the build (if any)  BITRISE_GIT_COMMIT  : commit hash which triggered the build (if any)  BITRISE_GIT_MESSAGE  : commit message - or the message you specified if you triggered the build manually  BITRISEIO_GIT_REPOSITORY_OWNER  : the owner of the Git repository of the project (for example,  bitrise-team )  BITRISEIO_GIT_REPOSITORY_SLUG  : the slug of the Git repository of the project (for example,  bitrise-blog )  BITRISE_PULL_REQUEST  : Pull Request ID, which triggered the build (if any)  BITRISEIO_PULL_REQUEST_REPOSITORY_URL  : The repository URL from where the Pull Request is sent  BITRISEIO_PULL_REQUEST_MERGE_BRANCH  : The pre-merge branch - if the Git hosting provider supports and provides the pre-merged state of a Pull Request on a special \"merge branch\"  BITRISEIO_PULL_REQUEST_HEAD_BRANCH  : The Pull Request \"head branch\", if the Git hosting provider system supports   provides this. This special git ref should point to the source of the Pull Request  BITRISE_PROVISION_URL  : Provisioning Profile(s) URL - the ones uploaded to  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.  BITRISE_CERTIFICATE_URL  : Certificate / Identity URL - the one uploaded to  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.  BITRISE_CERTIFICATE_PASSPHRASE  : Certificate / Identity's password / passphrase,\n  the one specified on  bitrise.io .\n  Pipe character ( | ) separated list, in case more than one value is provided.  BITRISE_IO  : indicates that the build is running in a bitrise.io environment. Value is set to  true  by bitrise.io when it starts a build.", 
            "title": "Exposed by Bitrise.io"
        }, 
        {
            "location": "/faq/how-to-change-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an Application on \nBitrise\n\nto another User or to an Organization.\nThis can be done in a few seconds by following these quick steps:\n\n\n\n\nLogin with the \ncurrent Owner\n of the App on \nbitrise.io\n\n\nOpen the App's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the App is in the team or add her/him if you need to.\n   In case if you want to transfer the ownership to an Organization,\n   you have to be part of the Organization.\n\n\nClick the \nTransfer ownership\n button next to your name\n\n\nAfter selecting the new owner from the dropdown, click on the purple button that says\n   \nTransfer ownership to \nUsername\n, and you are done!\n\n\n\n\n\n\nGood to know: Do you want to remain the connected services user?\n\n\nIf you enable the \nDo you want to remain the connected services user?\n option in the Transfer popup,\nthen during the transfer you'll be explicitly marked as the \"connected services\" user for the app.\n\n\nThe \"connected services\" user specifies which Team Member's service connections / accounts\nconnected to his/her Bitrise user should be used when Bitrise tries to communicate\nwith another service (GitHub, Bitbucket, ...), for example to send back build status information,\nor to register a new SSH key automatically.\n\n\nAdmins of an app can change this any time on the \nSettings\n tab of the app.", 
            "title": "How to change the owner of an app"
        }, 
        {
            "location": "/faq/organization-faq/", 
            "text": "What is an Organization on Bitrise?\n\u2693\n\n\nOrganizations are used to seamlessly manage bigger teams and members inside a company.\nIt is a place to gather all the people working on each of your company's\napps and delegate them through creating different groups.\n\n\nHow do I create a new Organization?\n\u2693\n\n\nJust go to your \naccount settings page\n,\nscroll down and click on the green \nNew organization\n button at the bottom left.\nA popup will appear to guide you through the process.\n\n\nHow do I add an app to an Organization?\n\u2693\n\n\nFirst, you have to be added to at least one \nGroup\n of the Organization.\nThen, go to the \nAdd new app page\n and select\nthe Organization in the \ndropdown at the top left\n.\n\n\nYou can change this throughout the process of adding the app, or after you finished adding the app,\nchanging the owner is possible through \ntransferring ownership\n.\n\n\nHow do I migrate/transfer my existing apps to an Organization?\n\u2693\n\n\nOnce you've created an Organization, you can transfer any of your apps to it by going to\nthe \nTeam\n tab of the app you want to transfer, and clicking the \nTransfer ownership\n button at the top right.\n\n\nWhat are \"Owners\" inside an Organization?\n\u2693\n\n\nOrganizations can have more than one Owner.\nOwners can \nmanage billing\n, \ndelete apps\n and \nchange the billing email\n,\ncreate, delete and assign \ngroups\n to apps.\n\n\nWhat can \"Members\" of an Organization do?\n\u2693\n\n\nMembers are displayed on the \nPeople\n tab of the Organization's page.\nOne can be added as a member by including them in a group on the \nGroups\n tab.\nThese members have the option to add apps to the Organization and view a list of all of the\nOrganization's apps on the \nApps\n tab.\nMembers can only access an Organization's app, if they are granted access to the app directly or through a \nGroup\n,\nin respect of their assigned role (Admin, Developer or Tester).\n\n\nWhat are groups good for?\n\u2693\n\n\nA group is basically a wrapper for members. By creating groups, Owners and Admins can\nadd multiple members to each app's team at once, making it faster and easier to setup new\nprojects on Bitrise. It also make it faster to reassign, remove and change role of multiple members.\n\n\nEach group is handled as one entity on the app's \nTeam\n tab. They can be added to an app's team,\nthe group's role can be set, and by removing the Group from the app's Team\nyou can revoke the access of every member of that group from the app.\nIt's not possible however to add or delete individual members of a group there, only on the Org's page.\n\n\nAll members of a group have the same role when assigned to an app.\n\n\nWhat's the difference between a Team and an Organization?\n\u2693\n\n\nTeams are handled per app, Organizations are handled globally.\n\n\nA Team of an Organization's app can contain members invited directly\nor through the groups assigned to them. Team members with a direct role\ncan only access the app they were invited to and can't add an app to the Organization.\nMembers of a Team always have a role assigned to them (Admin, Developer or Tester).\n\n\nWho are the \"outside contributors\"?\n\u2693\n\n\nOutside contributors are members of an app's Team with a direct role,\ninvited only to an app of an Organization and not to the Organization itself.\n\n\nCan I have multiple Organizations?\n\u2693\n\n\nOne user can have as many Organizations as they like, but each Organization has to have\nan active Pro subscription to be able to run builds.\n\n\nCan I have multiple Pro subscriptions?\n\u2693\n\n\nYes. Each account can subscribe to Pro for their personal account and for as many Organizations as needed.\n\n\nWhat if I cancel my Pro plan for an Organization?\n\u2693\n\n\nAfter the Pro plan expires, builds can't be started for apps owned by the Organization.\n\n\nCan I remove someone from all of my Organization's apps?\n\u2693\n\n\nIf you are an Owner of an Organization, you can remove members and outside contributors\non the Org's \nPeople\n tab, with one click. Owners can also remove someone from a group\non the \nGroups\n tab. In this case the user will be removed from all apps' team that the group is assigned to.\n\n\nWhere can I change the avatar for my Organization?\n\u2693\n\n\nOnce you are on your Organization page, click on the avatar, and you'll see a popup\nto change the color scheme of it. We'll add custom avatar support a bit later.", 
            "title": "Organization FAQ"
        }, 
        {
            "location": "/faq/organization-faq/#what-is-an-organization-on-bitrise", 
            "text": "Organizations are used to seamlessly manage bigger teams and members inside a company.\nIt is a place to gather all the people working on each of your company's\napps and delegate them through creating different groups.", 
            "title": "What is an Organization on Bitrise?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-create-a-new-organization", 
            "text": "Just go to your  account settings page ,\nscroll down and click on the green  New organization  button at the bottom left.\nA popup will appear to guide you through the process.", 
            "title": "How do I create a new Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-add-an-app-to-an-organization", 
            "text": "First, you have to be added to at least one  Group  of the Organization.\nThen, go to the  Add new app page  and select\nthe Organization in the  dropdown at the top left .  You can change this throughout the process of adding the app, or after you finished adding the app,\nchanging the owner is possible through  transferring ownership .", 
            "title": "How do I add an app to an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#how-do-i-migratetransfer-my-existing-apps-to-an-organization", 
            "text": "Once you've created an Organization, you can transfer any of your apps to it by going to\nthe  Team  tab of the app you want to transfer, and clicking the  Transfer ownership  button at the top right.", 
            "title": "How do I migrate/transfer my existing apps to an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#what-are-owners-inside-an-organization", 
            "text": "Organizations can have more than one Owner.\nOwners can  manage billing ,  delete apps  and  change the billing email ,\ncreate, delete and assign  groups  to apps.", 
            "title": "What are \"Owners\" inside an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#what-can-members-of-an-organization-do", 
            "text": "Members are displayed on the  People  tab of the Organization's page.\nOne can be added as a member by including them in a group on the  Groups  tab.\nThese members have the option to add apps to the Organization and view a list of all of the\nOrganization's apps on the  Apps  tab.\nMembers can only access an Organization's app, if they are granted access to the app directly or through a  Group ,\nin respect of their assigned role (Admin, Developer or Tester).", 
            "title": "What can \"Members\" of an Organization do?"
        }, 
        {
            "location": "/faq/organization-faq/#what-are-groups-good-for", 
            "text": "A group is basically a wrapper for members. By creating groups, Owners and Admins can\nadd multiple members to each app's team at once, making it faster and easier to setup new\nprojects on Bitrise. It also make it faster to reassign, remove and change role of multiple members.  Each group is handled as one entity on the app's  Team  tab. They can be added to an app's team,\nthe group's role can be set, and by removing the Group from the app's Team\nyou can revoke the access of every member of that group from the app.\nIt's not possible however to add or delete individual members of a group there, only on the Org's page.  All members of a group have the same role when assigned to an app.", 
            "title": "What are groups good for?"
        }, 
        {
            "location": "/faq/organization-faq/#whats-the-difference-between-a-team-and-an-organization", 
            "text": "Teams are handled per app, Organizations are handled globally.  A Team of an Organization's app can contain members invited directly\nor through the groups assigned to them. Team members with a direct role\ncan only access the app they were invited to and can't add an app to the Organization.\nMembers of a Team always have a role assigned to them (Admin, Developer or Tester).", 
            "title": "What's the difference between a Team and an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#who-are-the-outside-contributors", 
            "text": "Outside contributors are members of an app's Team with a direct role,\ninvited only to an app of an Organization and not to the Organization itself.", 
            "title": "Who are the \"outside contributors\"?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-have-multiple-organizations", 
            "text": "One user can have as many Organizations as they like, but each Organization has to have\nan active Pro subscription to be able to run builds.", 
            "title": "Can I have multiple Organizations?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-have-multiple-pro-subscriptions", 
            "text": "Yes. Each account can subscribe to Pro for their personal account and for as many Organizations as needed.", 
            "title": "Can I have multiple Pro subscriptions?"
        }, 
        {
            "location": "/faq/organization-faq/#what-if-i-cancel-my-pro-plan-for-an-organization", 
            "text": "After the Pro plan expires, builds can't be started for apps owned by the Organization.", 
            "title": "What if I cancel my Pro plan for an Organization?"
        }, 
        {
            "location": "/faq/organization-faq/#can-i-remove-someone-from-all-of-my-organizations-apps", 
            "text": "If you are an Owner of an Organization, you can remove members and outside contributors\non the Org's  People  tab, with one click. Owners can also remove someone from a group\non the  Groups  tab. In this case the user will be removed from all apps' team that the group is assigned to.", 
            "title": "Can I remove someone from all of my Organization's apps?"
        }, 
        {
            "location": "/faq/organization-faq/#where-can-i-change-the-avatar-for-my-organization", 
            "text": "Once you are on your Organization page, click on the avatar, and you'll see a popup\nto change the color scheme of it. We'll add custom avatar support a bit later.", 
            "title": "Where can I change the avatar for my Organization?"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/", 
            "text": "The Problem\n\u2693\n\n\nA common issue is that you have a project, that has one or more submodules\nor other private repository dependencies.\n\n\nThis means that you have to grant access to all repositories in order to make\nthe build successful.\n\n\nIf your git hosting service supports it, the best, most secure way is to\nregister \nthe same SSH key\n for every repository you have to access during the build,\nas \"Deployment keys\". Due to technical reasons (true for most git hosting services),\nyou should not use multiple SSH keys, instead use the same SSH key for every repository!\n\n\nIf your git hosting service does not support the use of a single SSH key\nfor multiple repositories\n (for example GitHub does not support this!),\nyou'll have to register the SSH key for a user account.\n\n\nIn this case (e.g. GitHub), there is an easy workaround for the issue.\nSimply by adding a \"bot\" / \"machine\" user with the SSH key to the repositories\nyou can solve the problem. \nAdd the SSH key you would like to use to the user and add the user to the projects\n.\nYou don't have to add the \"bot\" user with read and write permission,\nit is enough to assign read permissions.\nAfter that you can use the SSH key to clone to the repository or any submodule.\nIt's that simple.\n\n\nOn GitHub this is the recommended way to solve this problem,\nthey refer to these kind of users as \"machine\"\nusers - reference:\n\nhttps://developer.github.com/guides/managing-deploy-keys/#machine-users\n.\n\n\nOf course it's not required to use a special \"bot\" / \"machine\" user, you can add the\nSSH key to your own account on the git hosting service, but the best practice is\nto use a machine user for this use case, and grant read only access for this\nmachine user, for those repositories you want to access during the build.\n\n\nOn GitLab and Bitbucket it's possible to register a single SSH key\nas Deploy key to multiple repositories, without the need to create a \"bot\" / \"machine\" user.\n\n\n\n\nUse SSH URLs everywhere\n\n\nMost services support SSH key based authentication \nonly\n for SSH URLs\n(ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs\n(ex: \nhttps://github.com/bitrise-io/bitrise.git\n)!\nThis means, that \nevery private repository you want to use have to be addressed with the SSH url\n.\nIf you have direct private git repo references in your \nPodfile\n you'll have to\nuse the SSH url there as well! Same applies for submodules and every other private\ngit repository url you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\n\nHow to do this when you add a new app\n\u2693\n\n\nThere are three options to grant \nBitrise\n access to your repository:\n\n\n\n\nAuto-add SSH keypair\n: \nDon't use this option if you use submodules.\n\n  This option will add the SSH key only to the main repository, the one you selected\n  in the first section of the Add New App page.\n\n\nGenerate SSH keypair\n: will generate a key for you on the \nBitrise\n website\n  and you will have to copy it manually to the given user.\n  \nThis is the recommended option if you want to use submodules / have to access multiple repositories during your build.\n\n\nUse your own SSH keypair\n: can be used if you also have the private key of the given user.\n  You just have to paste the private key and \nBitrise\n will be able to access the repositories.\n  If you'd want to go with this option, it's important that \nthe SSH key have to be an RSA key, without a passphrase!\n\n  You can find an example of how you can generate a key like that \nhere\n.\n\n\n\n\nWhen you already registered your App on Bitrise.io\n\u2693\n\n\nWhen you've already registered an App, the steps to handle the SSH keys are the same\nas when adding a new app, the only difference is\nthat you'll have to do it on the app's \nSettings\n tab.\n\n\nYou can find the public SSH key of the app in the \nSettings\n of the given\napp on \nBitrise\n. Simply scroll down to the \"SSH settings\" section\nand click \"Show SSH Public Key\".\n\n\nCopy the key to the given user and you are ready to build!\nOr you can also update the given app's SSH key by clicking the \"Change SSH Keypair\" button\nand choosing one of the three options, just like on the \"Add new App\" page.\n\n\nService specific notes / guides\n\u2693\n\n\nGithub\n\u2693\n\n\nDon't add the key to the repository as a Deploy Key!\n\nAdd it to a GiHub User's account instead, who has access to the repositories.\nThe recommended way is to use a \n\"machine\" user\n,\nbut of course you're free to add it to any user account which has\nat least read only access to all of the repositories used during the build.", 
            "title": "Adding projects with submodules or with private CocoaPods repos"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#the-problem", 
            "text": "A common issue is that you have a project, that has one or more submodules\nor other private repository dependencies.  This means that you have to grant access to all repositories in order to make\nthe build successful.  If your git hosting service supports it, the best, most secure way is to\nregister  the same SSH key  for every repository you have to access during the build,\nas \"Deployment keys\". Due to technical reasons (true for most git hosting services),\nyou should not use multiple SSH keys, instead use the same SSH key for every repository!  If your git hosting service does not support the use of a single SSH key\nfor multiple repositories  (for example GitHub does not support this!),\nyou'll have to register the SSH key for a user account.  In this case (e.g. GitHub), there is an easy workaround for the issue.\nSimply by adding a \"bot\" / \"machine\" user with the SSH key to the repositories\nyou can solve the problem.  Add the SSH key you would like to use to the user and add the user to the projects .\nYou don't have to add the \"bot\" user with read and write permission,\nit is enough to assign read permissions.\nAfter that you can use the SSH key to clone to the repository or any submodule.\nIt's that simple.  On GitHub this is the recommended way to solve this problem,\nthey refer to these kind of users as \"machine\"\nusers - reference: https://developer.github.com/guides/managing-deploy-keys/#machine-users .  Of course it's not required to use a special \"bot\" / \"machine\" user, you can add the\nSSH key to your own account on the git hosting service, but the best practice is\nto use a machine user for this use case, and grant read only access for this\nmachine user, for those repositories you want to access during the build.  On GitLab and Bitbucket it's possible to register a single SSH key\nas Deploy key to multiple repositories, without the need to create a \"bot\" / \"machine\" user.   Use SSH URLs everywhere  Most services support SSH key based authentication  only  for SSH URLs\n(ex:  git@github.com:bitrise-io/bitrise.git ), and  not  for HTTPS URLs\n(ex:  https://github.com/bitrise-io/bitrise.git )!\nThis means, that  every private repository you want to use have to be addressed with the SSH url .\nIf you have direct private git repo references in your  Podfile  you'll have to\nuse the SSH url there as well! Same applies for submodules and every other private\ngit repository url you want to use with the SSH key you register on  Bitrise.io !", 
            "title": "The Problem"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#how-to-do-this-when-you-add-a-new-app", 
            "text": "There are three options to grant  Bitrise  access to your repository:   Auto-add SSH keypair :  Don't use this option if you use submodules. \n  This option will add the SSH key only to the main repository, the one you selected\n  in the first section of the Add New App page.  Generate SSH keypair : will generate a key for you on the  Bitrise  website\n  and you will have to copy it manually to the given user.\n   This is the recommended option if you want to use submodules / have to access multiple repositories during your build.  Use your own SSH keypair : can be used if you also have the private key of the given user.\n  You just have to paste the private key and  Bitrise  will be able to access the repositories.\n  If you'd want to go with this option, it's important that  the SSH key have to be an RSA key, without a passphrase! \n  You can find an example of how you can generate a key like that  here .", 
            "title": "How to do this when you add a new app"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#when-you-already-registered-your-app-on-bitriseio", 
            "text": "When you've already registered an App, the steps to handle the SSH keys are the same\nas when adding a new app, the only difference is\nthat you'll have to do it on the app's  Settings  tab.  You can find the public SSH key of the app in the  Settings  of the given\napp on  Bitrise . Simply scroll down to the \"SSH settings\" section\nand click \"Show SSH Public Key\".  Copy the key to the given user and you are ready to build!\nOr you can also update the given app's SSH key by clicking the \"Change SSH Keypair\" button\nand choosing one of the three options, just like on the \"Add new App\" page.", 
            "title": "When you already registered your App on Bitrise.io"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#service-specific-notes-guides", 
            "text": "", 
            "title": "Service specific notes / guides"
        }, 
        {
            "location": "/faq/adding-projects-with-submodules/#github", 
            "text": "Don't add the key to the repository as a Deploy Key! \nAdd it to a GiHub User's account instead, who has access to the repositories.\nThe recommended way is to use a  \"machine\" user ,\nbut of course you're free to add it to any user account which has\nat least read only access to all of the repositories used during the build.", 
            "title": "Github"
        }, 
        {
            "location": "/faq/android-x86-emulator/", 
            "text": "A frequent question is whether it's possible to run the Android x86 emulator, instead of the ARM emulators.\n\n\nAs an experiment we now allow all the required nested virtualization bits for the x86 Android emulators \non the Linux/Android stacks\n, which means that we can use the virtualization that the host machine has for running an emulator with x86 architecture, and we can thus skip the slow emulation. This is still 10-15% slower than when run on a physical machine, but it is still much faster than the armv7-a emulator.\n\n\nThis feature is only available on the Linux/Android stacks\n right now.\n\n\nAlternatives (for other stacks)\n\u2693\n\n\nFor now, the best workaround seems to be \nOracle's Ravello\n ( \na related blog post\n )\nif you need a full emulator (with UI),\nor \nrobolectric\n for unit tests.\n\n\nAnother alternative might be to use a service like \nAWS Device Farm\n or \nOpen STF\n,\nwhere you can run the tests on real devices instead of in an emulator. Bitrise integrations are available for both those services.\n\n\nIf you know about any other, \nfeel free to contact us\n!", 
            "title": "Android x86 Emulator"
        }, 
        {
            "location": "/faq/android-x86-emulator/#alternatives-for-other-stacks", 
            "text": "For now, the best workaround seems to be  Oracle's Ravello  (  a related blog post  )\nif you need a full emulator (with UI),\nor  robolectric  for unit tests.  Another alternative might be to use a service like  AWS Device Farm  or  Open STF ,\nwhere you can run the tests on real devices instead of in an emulator. Bitrise integrations are available for both those services.  If you know about any other,  feel free to contact us !", 
            "title": "Alternatives (for other stacks)"
        }, 
        {
            "location": "/faq/how-to-generate-ssh-keypair/", 
            "text": "If you want to do manual SSH key configuration on \nbitrise.io\n\nyou can generate an appropriate SSH keypair with a simple Command Line / Terminal command:\n\n\nssh-keygen -t rsa -b 4096 -P '' -f ./bitrise-ssh\n\n\n\nThis will generate two files in the current directory (the directory where\nyou run the command):\n\n\n\n\nbitrise-ssh\n (private key)\n\n\nbitrise-ssh.pub\n (public key)\n\n\n\n\nYou should copy paste the \npublic key\n to your Git hosting service (GitHub, Bitbucket, etc.),\nand when you register your app on \nbitrise.io\n\nyou'll have to provide the \nprivate key\n.", 
            "title": "How to generate an SSH key pair"
        }, 
        {
            "location": "/faq/grant-access-to-github-organization/", 
            "text": "Steps to grant access for Bitrise.io to a given GitHub Organization:\n\n\n\n\nOpen \nhttps://github.com\n\n\nIn the top right corner click your user / avatar\n\n\nIn the list select \nSettings\n\n\nOn the left side select \nAuthorized applications\n\n\nIn the left-side navigation, click \nAuthorized OAuth Apps\n, and choose \nBitrise\n\n\nLocate the Organization you want to grant access to, and click \nGrant\n.\n\n\n\n\n\n\nYou can now go back to \nbitrise.io\n and you\nshould see the organization / repository on the Add New App page.\n\n\nIf there's no \nGrant access\n button for the organization in the \nOrganization access\n section\n\nand instead you see a red cross icon, that means that the access was previously granted but then it was revoked.\nYou can fix this by selecting the organization on the left side, in the\n\nOrganization settings\n section, then on the \nOrganization settings\n\npage select \nThird-party access\n, locate \nBitrise\n, click the \npencil icon\n,\nand click the \nGrant access\n button there.\n\n\n\n\nIn case the repository is a fork of another private repository\n\n\nIn case the repository is a fork of another private repository which belongs to \n(another) organization\n you\nhave to repeat these steps and grant access for Bitrise for the orgianization \nwhich owns the original repository\n.\n\n\nThis is a GitHub limitation, in order to be able to access a private repository fork\n\nyou have to grant access for the service (Bitrise) in both repositories\n;\nin the fork and in the original repository/organization too.", 
            "title": "Grant access to a GitHub Organization"
        }, 
        {
            "location": "/faq/i-cant-see-my-github-organization-repository-on-the-add-new-app-page/", 
            "text": "Most likely you did not grant access to \nbitrise.io\n when you authenticated\nwith GitHub to access the organization (or a repository owned by the organization).\n\n\nTo fix this you should follow this guide: \nGrant access to a GitHub Organization\n.", 
            "title": "I can't see my GitHub organization / repository on the Add New App page"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/", 
            "text": "If you can't see the nice little green/red CI checks status (like the one you can see on our \nBlog,\nabout the Pull Request status feature announcement\n)\non the Pull Request's GitHub page, you should check this list for troubleshooting.\n\n\nMake sure to select a Service credential User who has a connected GitHub account\n\u2693\n\n\nThe first requirement is that the \nService credential User\n of the app on \nbitrise.io\n\nhave to connect his/her GitHub account, or else \nbitrise.io\n\nwon't be able to send the status messages to GitHub.\n\n\n\n\nSet the Service credential User for the app\n\n\nYou can set which Team Member's service connections should be used when Bitrise tries to communicate\nwith GitHub or any other connected service (like Bitbucket or Xamarin) API.\nYou can set this user on the \nTeam\n tab of the app, in the \nService credential User\n section.\nDefault is to use the Owner's credentials.\n\n\n\n\nIf you want to manage your connected services on \nbitrise.io\n,\njust open your \nAccount Settings\n page.\nOn the left side you can find the \nConnected Accounts\n section,\nwhere you can connect and disconnect other services (like GitHub, Bitbucket or Xamarin)\nto your \nbitrise.io\n account.\n\n\n\n\nMake sure you connected the correct GitHub account\n\n\nIf you have more than one GitHub account you should also check whether you connected the right one,\nwhich can access the repository.\nYou can check which GitHub user you connected by clicking the \nGitHub\n text\non your \nbitrise.io\n \nAccount Settings\n page,\nit will open the connected GitHub user's page.\n\n\n\n\nIf your builds are triggering, but you don't see the Pull Request / Build status indicator on GitHub\n\u2693\n\n\nIf you have Pull Request testing enabled you should see a green/yellow/red CI check status indicator at every Pull Request on GitHub,\n\nlike the one you can see on our Blog about the Pull Request status feature announcement\n.\n\n\nIf your builds are running fine but you still can't see the status indicator on GitHub:\n\n\n\n\nMake sure that you granted access to your GitHub organization for Bitrise\n.\n  It might be that you did not \ngrant access\n to the GitHub organization\n  (who owns the repository) for Bitrise, so even though everything else is in place,\n  GitHub will still reject the status message \nbitrise.io\n sends to it.\n  See the\n  \nGrant access to a GitHub Organization\n\n  guide for more information.\n\n\nAnother thing might be that the user you specified as the\n  \nService credential User\n\n  doesn't have \nadministrator rights\n on GitHub \nfor the repository\n.\n  \nAdministrator rights are required in order to send status messages to GitHub.\n\n  Usually you face this issue (no access to the organization) when you add your app on \nbitrise.io\n.\n  If you did not select the repository from the GitHub list on the \nAdd New App\n page,\n  but rather copy-pasted your repository's URL, you still need to grant access to the organization to see\n  the build status indicator on GitHub.\n  See the\n  \nGrant access to a GitHub Organization\n\n  guide for more information, and make sure that you selected the right\n  \nService credential User\n\n  for the app on \nbitrise.io\n.\n\n\nIf you renamed or transferred the repository on GitHub\n.\n  GitHub in general is quite good with handling repository rename and transfer,\n  and usually redirects to the right url automatically, but this is not the case with the Status API.\n  Fortunately the fix for this is quite simple: \nGo to the \nSettings\n tab of your app on \nbitrise.io\n\n  and make sure that the \nRepository URL\n is up to date\n, and does not point to the previous location of the repository,\n  but to the current location of the repository.", 
            "title": "GitHub Pull Request / build Status indicator troubleshooting"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/#make-sure-to-select-a-service-credential-user-who-has-a-connected-github-account", 
            "text": "The first requirement is that the  Service credential User  of the app on  bitrise.io \nhave to connect his/her GitHub account, or else  bitrise.io \nwon't be able to send the status messages to GitHub.   Set the Service credential User for the app  You can set which Team Member's service connections should be used when Bitrise tries to communicate\nwith GitHub or any other connected service (like Bitbucket or Xamarin) API.\nYou can set this user on the  Team  tab of the app, in the  Service credential User  section.\nDefault is to use the Owner's credentials.   If you want to manage your connected services on  bitrise.io ,\njust open your  Account Settings  page.\nOn the left side you can find the  Connected Accounts  section,\nwhere you can connect and disconnect other services (like GitHub, Bitbucket or Xamarin)\nto your  bitrise.io  account.   Make sure you connected the correct GitHub account  If you have more than one GitHub account you should also check whether you connected the right one,\nwhich can access the repository.\nYou can check which GitHub user you connected by clicking the  GitHub  text\non your  bitrise.io   Account Settings  page,\nit will open the connected GitHub user's page.", 
            "title": "Make sure to select a Service credential User who has a connected GitHub account"
        }, 
        {
            "location": "/faq/github-pull-request-status-troubleshooting/#if-your-builds-are-triggering-but-you-dont-see-the-pull-request-build-status-indicator-on-github", 
            "text": "If you have Pull Request testing enabled you should see a green/yellow/red CI check status indicator at every Pull Request on GitHub, like the one you can see on our Blog about the Pull Request status feature announcement .  If your builds are running fine but you still can't see the status indicator on GitHub:   Make sure that you granted access to your GitHub organization for Bitrise .\n  It might be that you did not  grant access  to the GitHub organization\n  (who owns the repository) for Bitrise, so even though everything else is in place,\n  GitHub will still reject the status message  bitrise.io  sends to it.\n  See the\n   Grant access to a GitHub Organization \n  guide for more information.  Another thing might be that the user you specified as the\n   Service credential User \n  doesn't have  administrator rights  on GitHub  for the repository .\n   Administrator rights are required in order to send status messages to GitHub. \n  Usually you face this issue (no access to the organization) when you add your app on  bitrise.io .\n  If you did not select the repository from the GitHub list on the  Add New App  page,\n  but rather copy-pasted your repository's URL, you still need to grant access to the organization to see\n  the build status indicator on GitHub.\n  See the\n   Grant access to a GitHub Organization \n  guide for more information, and make sure that you selected the right\n   Service credential User \n  for the app on  bitrise.io .  If you renamed or transferred the repository on GitHub .\n  GitHub in general is quite good with handling repository rename and transfer,\n  and usually redirects to the right url automatically, but this is not the case with the Status API.\n  Fortunately the fix for this is quite simple:  Go to the  Settings  tab of your app on  bitrise.io \n  and make sure that the  Repository URL  is up to date , and does not point to the previous location of the repository,\n  but to the current location of the repository.", 
            "title": "If your builds are triggering, but you don't see the Pull Request / Build status indicator on GitHub"
        }, 
        {
            "location": "/faq/no-builds-are-triggered-automatically/", 
            "text": "If no builds are triggered automatically when you push code into your repository,\nyou should \nmake sure your webhook is properly set on the git hosting\nservice you use (GitHub, Bitbucket, GitLab, ...)\n.\n\n\nYou can find the webhook related setup and troubleshooting guides\nin the \nWebhooks section of the DevCenter\n.\n\n\nIf the webhook is present on the git hosting service, you should\ncheck the \nTroubleshooting section of the Webhooks docs\n.", 
            "title": "No builds are triggered when I push code into the repository"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/", 
            "text": "First of all you have to determine which step(s) consume significant time,\nto identify what can possibly be improved.\n\n\nIf your dependency step (e.g. CocoaPods) is the one which takes a long time then you might be able to speed it up\nby using the Bitrise Build Cache feature.\nYou can find more information at \nUsing the Build Cache\n.\nThis is also true for any step which might include network communication, addressing 3\nrd\n party web services,\nwhich might temporarily not be available or might be slow due to high demand.\n\n\nIf the long build time is not related to a dependency step or to a step which accesses a 3\nrd\n party service,\nand it's related to an Archive or Test step, which only performs calculations on the Virtual Machine\nand does not access an outside service then you should check this list which explains\nwhy it might take more time on Bitrise.io than on your Mac/PC:\n\n\nLocal build caches\n\u2693\n\n\nLocal build caches on your Mac/PC: most of the tools you use (e.g. Xcode) does generate a lot of local build cache,\nto speed up subsequent builds.\nThese caches help a lot to decrease the build time on your Mac/PC, but these are not available on \nbitrise.io\n.\n\n\nNote: You can test how much these caches improve the build time by running the same step (e.g. Xcode Archive) two times during your build.\nThe second one will be significantly faster than the first one,\nbecause of the available local build caches Xcode generates.\n\n\nOn \nbitrise.io\n every build runs in a clean Virtual Machine.\nNo file is stored after your build finishes, the whole Virtual Machine is destroyed,\nand the next build will start in a clean Virtual Machine again.\n\n\nThe lack of local build caches is important to improve the reliability of your project\n,\nbut it slows down the build process. Why it's important?\nIn your local build caches there might be files which are not under version control.\nThis can result in a situation where although you can build your project on your Mac/PC someone\nwho just git clones it and builds it the first time will have an error.\nYou can find more information about this issue at:\n\nWorks in local but not on Bitrise.io\n.\n\n\nThis issue is eliminated by using clean virtual machines on \nbitrise.io\n,\nwhere only the code and dependencies you specify (which are under version control, and are reproducible) are available.\nIf it works there then it'll work on a brand new Mac/PC too,\nwhen a new colleague joins your team and starts to work on the project.\n\n\nNetwork Resources\n\u2693\n\n\nAdditionally to Local build caches, if your project requires dependencies\nwhich have to be retrieved from the Internet it'll add time to the build process.\n\n\nFor example, when you build your iOS project on your Mac and you use CocoaPods,\nyou usually don't have to run \npod install\n, only when your CocoaPods dependency list changes.\nIf you don't commit your Pods into your repository then this process (to download the required dependencies)\nhave to be performed for every build in a clean environment.\n\n\nPossible solutions:\n\n\n\n\nCommit your dependencies into your repository -\n  read more: \nShould I commit my dependencies into my repository?\n\n\nCache your dependencies in Bitrise Build Cache -\n  read more: \nUsing the Build Cache\n\n\n\n\nRaw performance\n\u2693\n\n\nWe always try to improve the overall performance of the build infrastructure,\nbut you'll most likely have more powerful hardware.\n\n\nRight now we use a private vSphere network for hosting the OS X virtual machines,\nand Google Compute Engine for hosting the Linux (Android) virtual machines.\n\n\nCloud environments are fantastic to provide reproducible build environments,\nbut virtualization requires additional resources on top of the resources exposed to the virtual machine / build environment.\nYou can try this on your own Mac/PC: running the same compilation directly on your Mac/PC\nwill be faster than doing it in a Virtual Machine.\n\n\nWe do our best to improve the performance whenever we can, and feel free to reach out to us if you have any suggestion!\n\n\nTips \n Tricks to optimize build times\n\u2693\n\n\nYou can also find a guide \nhere\n\nabout how you can optimize your build times.", 
            "title": "Why my build takes longer on Bitrise than on my Mac?"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#local-build-caches", 
            "text": "Local build caches on your Mac/PC: most of the tools you use (e.g. Xcode) does generate a lot of local build cache,\nto speed up subsequent builds.\nThese caches help a lot to decrease the build time on your Mac/PC, but these are not available on  bitrise.io .  Note: You can test how much these caches improve the build time by running the same step (e.g. Xcode Archive) two times during your build.\nThe second one will be significantly faster than the first one,\nbecause of the available local build caches Xcode generates.  On  bitrise.io  every build runs in a clean Virtual Machine.\nNo file is stored after your build finishes, the whole Virtual Machine is destroyed,\nand the next build will start in a clean Virtual Machine again.  The lack of local build caches is important to improve the reliability of your project ,\nbut it slows down the build process. Why it's important?\nIn your local build caches there might be files which are not under version control.\nThis can result in a situation where although you can build your project on your Mac/PC someone\nwho just git clones it and builds it the first time will have an error.\nYou can find more information about this issue at: Works in local but not on Bitrise.io .  This issue is eliminated by using clean virtual machines on  bitrise.io ,\nwhere only the code and dependencies you specify (which are under version control, and are reproducible) are available.\nIf it works there then it'll work on a brand new Mac/PC too,\nwhen a new colleague joins your team and starts to work on the project.", 
            "title": "Local build caches"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#network-resources", 
            "text": "Additionally to Local build caches, if your project requires dependencies\nwhich have to be retrieved from the Internet it'll add time to the build process.  For example, when you build your iOS project on your Mac and you use CocoaPods,\nyou usually don't have to run  pod install , only when your CocoaPods dependency list changes.\nIf you don't commit your Pods into your repository then this process (to download the required dependencies)\nhave to be performed for every build in a clean environment.  Possible solutions:   Commit your dependencies into your repository -\n  read more:  Should I commit my dependencies into my repository?  Cache your dependencies in Bitrise Build Cache -\n  read more:  Using the Build Cache", 
            "title": "Network Resources"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#raw-performance", 
            "text": "We always try to improve the overall performance of the build infrastructure,\nbut you'll most likely have more powerful hardware.  Right now we use a private vSphere network for hosting the OS X virtual machines,\nand Google Compute Engine for hosting the Linux (Android) virtual machines.  Cloud environments are fantastic to provide reproducible build environments,\nbut virtualization requires additional resources on top of the resources exposed to the virtual machine / build environment.\nYou can try this on your own Mac/PC: running the same compilation directly on your Mac/PC\nwill be faster than doing it in a Virtual Machine.  We do our best to improve the performance whenever we can, and feel free to reach out to us if you have any suggestion!", 
            "title": "Raw performance"
        }, 
        {
            "location": "/faq/why-my-build-takes-longer-on-bitrise-than-on-my-mac/#tips-tricks-to-optimize-build-times", 
            "text": "You can also find a guide  here \nabout how you can optimize your build times.", 
            "title": "Tips &amp; Tricks to optimize build times"
        }, 
        {
            "location": "/faq/should-i-commit-my-dependencies-into-my-repository/", 
            "text": "It's a highly debated topic, there are obvious pros and cons\nfor both keeping your dependencies in or outside of your code repository.\n\n\nYou're of course free to do it the way you want to,\n\nour recommendation is that you should include your dependencies inside your repository,\nwhenever you can\n. \n\n\nLet's see why.\n\n\n\n\nOnce \ngit clone\n is finished you'll have everything, ready for work.\n  In a \nCI / distributed environment\n this also means \nless chance for network issues\n,\n  your build won't fail just because a dependency manager's server is down.\n  Your builds will be \nmore reliable\n, less error prone.\n\n\nYou see every dependency update in your repository, \nyou can review the changes\n in \ngit\n\n  and decide whether you actually want to upgrade to a newer version or not.\n  You can create a Pull Request for just the dependency updates and have it reviewed by your team.\n\n\nIt protects against disappearing packages / dependencies\n.\n  Yes, it can happen that packages / dependencies\n  \ndisappear overnight from the package manager you use\n,\n  and you're no longer able to retrieve them.\n  Keeping your dependencies in your repository makes sure that this won't break your project at the worst time.\n\n\nMakes the build process faster\n as well, as everything is prepared for the build and\n  there's no need to call dependency manager tools, nor to download the dependencies separately.\n\n\nFor example, if you use \nCocoaPods\n and you commit your \nPods\n directory\n  and your CocoaPods generated \n.xcworkspace\n directory (\n.xcworkspace\n is actually a directory, which is presented as a file in Finder)\n  to your repository then you can remove the CocoaPods Install Step from your \nbitrise.io\n workflow completely.\n\n\n\n\n\n\nNo more issues with using \ndifferent versions of the dependency manager tool\n.\n  The most popular iOS dependency tools change quite frequently and sometimes introduce breaking changes.\n  By including your dependencies inside your repository you won't have to\n  rely on using the exact same version of the tool everywhere (across your team and on your CI service as well).\n\n\nNo more issues with private submodules / private pods.\n  As described here \nAdding projects with submodules\n granting permission\n  to a project which depends on private Pods, submodules or other git related dependencies can be quite hard.\n  Most will simply not go through with activating and de-activating separate Deployment SSH keys\n  for every dependency and will eventually just add the SSH key to their account or to a \"bot\" account as a personal SSH key.\n  Using a bot user as described in the linked guide can be sufficient from a security perspective,\n  but it's still way easier (and more secure) to just use Read Only Deployment keys.\n  A given SSH key is allowed to be registered only once on GitHub, which means that you can't register\n  the same SSH key for multiple repositories as Deployment Key.\n  If you have every dependency in your repository you don't have to use any workaround,\n  a single read only Deployment Key will be enough.\n  In fact \nbitrise.io\n registers Deployment Keys\n  by default during the automatic repository setup,\n  which grants access only to the specified repository.\n\n\n\n\nOf course you're free to go with either solution and we'll keep working on supporting the way you work,\nbut we think that having full control over dependency changes\nand having a more reliable setup (which is easier to work with in a remote, automation environment)\nprovides enough advantage in most cases.", 
            "title": "Should I commit my dependencies into my repository?"
        }, 
        {
            "location": "/troubleshooting/enabling-bitrise-support-user/", 
            "text": "If you need quick tech support from us, our onsite chat support can look into your project and fix your technical issues in the most efficient way! All you have to do is enable \nBitrise Support user\n so that we have access to your project, specifically to your workflow, your build log, your app settings or to your yml.\n\n\nWith the toggle function, you can easily turn the \nBitrise Support user\n on and off, no need to add us as a user to your app's Team any more.\n\n\nLet's see how to set it up!\n\n\n\n\n\n\nGo to the \nSettings\n tab of your project.\n\n\n\n\n\n\nScroll down to the \nEnable Bitrise Support user for this app\n and toggle the switch to the right to enable it.\n\n\n\n\nTip\n\n\nIt might take a couple of seconds to work and you might need to \nrefresh your page\n to see the enabled status.\n\n\n\n\n\n\n\n\n\n\nPing us through our onsite chat and notify us that you have enabled the Bitrise support user for your app so that we can help you with your issue.\n\n\n\n\n\n\nWhat the Bitrise Support user can see if it's enabled\n\u2693\n\n\nThe Bitrise Support user has access to your builds and can edit your workflows. We can also modify the inputs of the \nTeam\n, \nCode\n and the \nSettings\n tab. In the case of a failing workflow, our best practice is to create a new and correct version of the failing workflow called \nsupport-testing\n. You can compare our \nsupport-testing\n with your own and update yours or keep the \nsupport-testing\n workflow, rename it as you wish, and develop it further.\n\n\nWhat the Bitrise Support user can't see if it's enabled\n\u2693\n\n\nThe Bitrise Support user can't see your \nAccount information\n or any \nBilling\n information. Only the owner of the account has access to this information and has the right to modify any account-related records.", 
            "title": "Enabling Bitrise Support user for your app"
        }, 
        {
            "location": "/troubleshooting/enabling-bitrise-support-user/#what-the-bitrise-support-user-can-see-if-its-enabled", 
            "text": "The Bitrise Support user has access to your builds and can edit your workflows. We can also modify the inputs of the  Team ,  Code  and the  Settings  tab. In the case of a failing workflow, our best practice is to create a new and correct version of the failing workflow called  support-testing . You can compare our  support-testing  with your own and update yours or keep the  support-testing  workflow, rename it as you wish, and develop it further.", 
            "title": "What the Bitrise Support user can see if it's enabled"
        }, 
        {
            "location": "/troubleshooting/enabling-bitrise-support-user/#what-the-bitrise-support-user-cant-see-if-its-enabled", 
            "text": "The Bitrise Support user can't see your  Account information  or any  Billing  information. Only the owner of the account has access to this information and has the right to modify any account-related records.", 
            "title": "What the Bitrise Support user can't see if it's enabled"
        }, 
        {
            "location": "/troubleshooting/workflow-editor-doesnt-load/", 
            "text": "This can happen if you modified the \nbitrise.yml\n / workflow configuration in a way which crashes the Workflow Editor UI.\n\n\nIf this would happen please \ncontact us\n so we can fix the issue in the UI code,\nthen you can fix the \nbitrise.yml\n through our API.\n\n\nYou can find an example of how the API works \non GitHub\n.\nIn short, you can use a simple \ncurl\n call to download \n to upload an app's config / \nbitrise.yml\n to \nbitrise.io\n.\n\n\nWith the Bitrise API you can download the \nbitrise.yml\n from \nbitrise.io\n even if it breaks the Workflow Editor UI,\nfix it locally and then upload the fixed \nbitrise.yml\n with another API call. For this all you need is a Personal Access Token, which you can generate on your \naccount's security tab\n.\n\n\nTo download the \nbitrise.yml\n please check the \nrelated section of the Bitrise API documentation\n.\n\n\nSave the \nbitrise.yml\n into a file, fix it, then you can upload it with another \ncurl\n call.\n\n\nTo upload the \nbitrise.yml\n please also follow the \nrelated part of the Bitrise API documentation\n.\n\n\nNote: make sure that you set the right \npath/to/bitrise.yml\n - specify the path of\nthe \nbitrise.yml\n file where you saved the fixed \nbitrise.yml\n!", 
            "title": "Workflow Editor doesn't load"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/", 
            "text": "Could not find an android package or you have not accepted the license agreements\n\u2693\n\n\nError\n\u2693\n\n\n A problem occurred configuring project ':lib'.\n   \n You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\nor\n\n\nCould not find com.android.support:appcompat-v7:24.2.0.\n\n\n\nSolution\n\u2693\n\n\nPlease use the \nInstall missing Android tools\n step. The section below is kept only for referencing purposes!\n\n\nThe error means that your build requires an Android package which is either not (yet) preinstalled\n(\nyou can see which packages are preinstalled \nhere, on GitHub\n -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package!\n),\n\nor outdated\n.\n\n\nThe solution is quite simple, you just have to install/update the related package(s).\nTo do that add a \nScript\n step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# For newer Android SDK:\nsdkmanager \nextras;android;m2repository\n\nsdkmanager \nextras;google;m2repository\n\n\n# For older Android SDK:\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'\n\n\n\nIn most cases you don't need both packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.\n\n\n\n\nWe update the preinstalled Android packages on every weekend\n\n\nso if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.\n\n\n\n\nAlternative solution for the license error\n\u2693\n\n\nPlease use the \nInstall missing Android tools\n step. The section below is kept only for referencing purposes!\n\n\nAn alternative solution for the \nYou have not accepted the license agreements of the following SDK components\n\nerror, as printed in the log:\n\n\nBefore building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\nYou can find more info at the link printed in the log (\nhttp://d.android.com/r/studio-ui/export-licenses.html\n),\nbut in short this can be done by:\n\n\nLocate the licenses on your Mac/PC\n:\n\n\n\n\nIf you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at \nandroid sdk home path\n/licenses\n) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.\n\n\n\n\nCreate an \nandroid-licenses\n directory in the root directory of your git repository,\nand copy the license files into this directory\n,\nthen in your Workflow copy the licenses to the right location using a \nScript\n step.\n\n\nAdd the \nScript\n step right after the \nGit Clone\n step\n (that's when your code is available\non the build virtual machine), with the content:\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/ \n$ANDROID_HOME/licenses/\n\n\n\nThat's all, this script copies the licenses from the \nandroid-licenses\n (from your repository)\ninto the system's Android SDK Home path under \nlicenses\n directory.\n\n\nInstall an additional Android package\n\u2693\n\n\nPlease see \nthis section\n.", 
            "title": "Frequent Android issues"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/#could-not-find-an-android-package-or-you-have-not-accepted-the-license-agreements", 
            "text": "", 
            "title": "Could not find an android package or you have not accepted the license agreements"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/#error", 
            "text": "A problem occurred configuring project ':lib'.\n     You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  or  Could not find com.android.support:appcompat-v7:24.2.0.", 
            "title": "Error"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/#solution", 
            "text": "Please use the  Install missing Android tools  step. The section below is kept only for referencing purposes!  The error means that your build requires an Android package which is either not (yet) preinstalled\n( you can see which packages are preinstalled  here, on GitHub  -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package! ), or outdated .  The solution is quite simple, you just have to install/update the related package(s).\nTo do that add a  Script  step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# For newer Android SDK:\nsdkmanager  extras;android;m2repository \nsdkmanager  extras;google;m2repository \n\n# For older Android SDK:\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'  In most cases you don't need both packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.   We update the preinstalled Android packages on every weekend  so if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.", 
            "title": "Solution"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/#alternative-solution-for-the-license-error", 
            "text": "Please use the  Install missing Android tools  step. The section below is kept only for referencing purposes!  An alternative solution for the  You have not accepted the license agreements of the following SDK components \nerror, as printed in the log:  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html  You can find more info at the link printed in the log ( http://d.android.com/r/studio-ui/export-licenses.html ),\nbut in short this can be done by:  Locate the licenses on your Mac/PC :   If you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at  android sdk home path /licenses ) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.   Create an  android-licenses  directory in the root directory of your git repository,\nand copy the license files into this directory ,\nthen in your Workflow copy the licenses to the right location using a  Script  step.  Add the  Script  step right after the  Git Clone  step  (that's when your code is available\non the build virtual machine), with the content:  #!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/  $ANDROID_HOME/licenses/  That's all, this script copies the licenses from the  android-licenses  (from your repository)\ninto the system's Android SDK Home path under  licenses  directory.", 
            "title": "Alternative solution for the license error"
        }, 
        {
            "location": "/troubleshooting/frequent-android-issues/#install-an-additional-android-package", 
            "text": "Please see  this section .", 
            "title": "Install an additional Android package"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/", 
            "text": "Searching for errors and issues in Xcode generated output\n\u2693\n\n\nThis applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the \nOutput Tool\n option\nof the Xcode ... step to \nxcodebuild\n (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool (\nxcodebuild\n). All of the official Bitrise Xcode steps\nhave an \nOutput Tool\n input with a \nxcodebuild\n option.\n\n\nYou should search for \nerror:\n in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.\n\n\nIf that doesn't work you should also search for \nwarning:\n, in rare cases Xcode doesn't print an \nerror:\n even if it fails.\n\n\nIf you have the logs on your own machine then you can run something like this in your Terminal:\n\n\ngrep --color 'error:' my.log\ngrep --color 'warning:' my.log\n\n\n\nXcode Scheme not found\n\u2693\n\n\nThe first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a \nThe project named \nFoo\n does not contain a scheme named \nBar\n error during build,\nis your Xcode project settings.\n\n\n\n\nCheck if the desired Scheme is shared\n\n\nWhen you share your scheme the Xcode project changes. Don't forget to \ncommit\n and to \npush\n your changes!\n\n\nIf the related validation is still running on Bitrise abort it and try to run it again.\n\n\n\n\n\n\nDon't forget to commit \n push the changes\n if you just enabled the Shared option!\nThis change should be reflected in your \ngit\n repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder):\n\n*.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme\n.\n\n\nIf you still can't see the desired Scheme,\ntry to look into your \n.gitignore\n file and check if you are ignoring the config files of your Xcode project.\n\n\nCocoaPods (missing) dependency issue\n\u2693\n\n\nError:\n\u2693\n\n\nld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\nOR:\n\n\nno such module '...'\n\n\n\nSolution:\n\u2693\n\n\nMost likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace (\n.xcworkspace\n) file. Go to your App's \nWorkflow tab\n on Bitrise,\nclick \nManage Workflows\n, click \nApp Environments\n and change the \nBITRISE_PROJECT_PATH\n item.\nThis will change the default Project Path configuration for every workflow.\n\n\nIf it worked before\n and the \nBITRISE_PROJECT_PATH\n did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.\n\n\nFastlane Export Issue\n\u2693\n\n\nThis section was contributed by \n@kwoylie\n,\nand applies if you have a \nGemfile\n in your repository and you use\nthe \nfastlane\n step which uses the \nGemfile\n automatically if present.\n\n\nGemfile\n content was:\n\n\ngem \nfastlane\n, \n1.104.0\n\ngem \ngym\n, \n1.10.0\n\ngem \nbadge\n, \n0.5.0\n\ngem \nCFPropertyList\n,\n2.3.3\n\ngem \nsqlite3\n, \n1.3.11\n\n\n\nI have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.\n\n\nI had disabled xcpretty on Fastlane and got the following error from gym:\n\n\n$/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed: \nIDEDistributionThinningStep: 0x7f868c80f810\n: Error Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with \nIDEDistributionContext: 0x7f868c51ed70; archive(resolved)='\nIDEArchive: 0x7f868c4af8d0\n', distributionTask(resolved)='2', distributionMethod(resolved)='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID(resolved)='(null)'\n\n    Chain (2, self inclusive):\n    \nIDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID='(null)'\n\n    \nIDEDistributionContext: 0x7f868c4b0e70; archive = '\nIDEArchive: 0x7f868c4af8d0\n', distributionMethod='(null)', teamID='(null)'\n\n\n/IDEDistributionContext: 0x7f868c51ed70\n\n\n\nThis error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:\n\n\n2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in `\ntop (required)\n'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)\n\n\n\nSo after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.\n\n\nSolution:\n\u2693\n\n\nTo fix this issue, you just have to add a \nScript\n step to run the following:\n\n\nsudo /usr/bin/gem install bundler\n\n\n\nThis will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies\n\n\nWorks in local but not on Bitrise.io\n\u2693\n\n\nAn example error: \nld: file not found ...\n\n\nFirst of all restart your Xcode and try a new build.\n\n\nIf it doesn't help try a \nclean build\n in Xcode.\n\n\nIf no error was displayed, try resetting your simulator(s).\n\n\nAnother problem could be your CocoaPods version.\nTry updating your CocoaPods with the \n[sudo] gem install cocoapods\n command.\nAlso make sure that your \nPodfile.lock\n is \ncommitted into your repository\n,\nas that's the file which describes the exact Pod versions you use.\n\nWithout this Bitrise might download newer versions of Pods than the ones you use.\n\n\nIf there's still no error try deleting the \nPods\n folder in your project and run the \npod install\n command again.\n\n\nFinally, if none of the above helped, or you get an error with \nld: file not found\n on Bitrise,\nand the path contains \nDerivedData\n, with no other error message, like this:\n\n\nld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\nTry deleting the Xcode local cache. After that the error should be reproducible on your local machine.\n\n\nYou can delete the local Xcode cache using your Terminal:\n\n\nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n\n\nStep hangs (times out after a period without any logs)\n\u2693\n\n\nCheck whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.\n\n\nMost frequent sources of this issue:\n\n\n\n\nXcode\n (command line tools) might hang if you try to build a Scheme which is not marked as \nshared\n.\n  Usually it hangs right after you start any \nxcodebuild\n command (e.g. \nxcodebuild -list\n or \nxcodebuild .. archive\n).\n\n\nSolution\n: Please make sure that you marked the Scheme as \nshared\n,\n  and that you actually committed \n pushed it into your repository.\n  For more information please follow this guide: \nXcode scheme not found\n.\n\n\n\n\n\n\nYour script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)\n\n\nYou try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an \nosascript\n). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using \nhttps://github.com/jacobsalmela/tccutil\n.\n\n\nFor example to add \nosascript\n to the allowed OS X Accessibility list you can call \ntccutil\n from\n  your script (don't forget to include it in your repository or download on-the-fly): \nsudo python tccutil.py -i /usr/bin/osascript\n\n\nYou can download the script from GitHub directly, for example: \nwget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py\n.\n\n\n\n\n\n\nIt can also be \nsomething in your app's code\n.\n  An example: one of our user had a simple \npopup in the app, presented only at the first start of the app\n.\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit \n\"Reset Content and Settings\"\n in the iOS Simulator's menu.\n\n\nSolution\n: try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.\n\n\n\n\n\n\n\n\nIt might also be that the build does not hang, \nit just doesn't generate any log output\n.\nThis can happen for various reasons;\nyou can find an example in case of an \niOS library project\n.\n\n\nCocoaPods frameworks signing issue\n\u2693\n\n\nWhen you get an error something like this:\n\n\n=== CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'\n\n\n\nThis error is related to how CocoaPods expects code signing configurations for \nframeworks\n.\n\n\nSolution 1: make sure that you upload/include/install a wildcard development provisioning profile\n\u2693\n\n\nUsually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.\n\n\nOn your Mac you most likely have your own Development certificate and\n\nWildcard\n team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.\n\n\nSo, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team \nwildcard\n provisioning profile) to \nbitrise.io\n,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.\n\n\nSolution 2: modifying code signing settings through \nPodfile\n\u2693\n\n\nOne of our beloved user sent us the following fix for this problem.\nYou should add the following script as a \nPost script\n to your \nPodfile\n:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = \n\n      config.build_settings['CODE_SIGNING_REQUIRED'] = \nNO\n\n      config.build_settings['CODE_SIGNING_ALLOWED'] = \nNO\n\n    end\n  end\nend\n\n\n\nYou can find a related CocoaPods issue and discussion at:\n\nhttps://github.com/CocoaPods/CocoaPods/issues/4331\n\n\nYou can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one: \nhttps://github.com/CocoaPods/CocoaPods/issues/3063\n.\n\n\nInstalling an Enterprise app: \nUntrusted Enterprise Developer\n\u2693\n\n\nIf you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title \nUntrusted Enterprise Developer\n.\n\n\n\n\nStarting with iOS 9 there's no option to \"Trust\" the developer right from the popup.\n\n\nYou can Trust the developer and enable the app to run in iOS Settings:\n\n\n\n\nOpen the Settings app on your iPhone or iPad\n\n\nSelect the \nGeneral\n category\n\n\nSelect the \nProfile\n option\n\n\nstarting with iOS 9.2 the option was renamed to \nDevice Management\n instead of \nProfile\n\n\n\n\n\n\nTap on the Enterprise App option related to the app (the one mentioned in the popup)\n\n\nTap the \nTrust \nThe Developer's Name\n button\n\n\nA popup will appear, tap on \nTrust\n again\n\n\n\n\nYou should now be able to run the app, and any other Enterprise app from the same developer.\n\n\nNo dSYM found\n\u2693\n\n\nA couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.\n\n\nSolution:\n\u2693\n\n\nTo generate debug symbols (dSYM) go to your \nXcode Project's Settings -\n Build Settings -\n Debug Information Format\n and set it to \nDWARF with dSYM File\n.\n\n\nInvalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary\n\u2693\n\n\nSolution:\n Generate a new Certificate on the Apple Developer portal, \nnot\n in Xcode.\n\n\nAnother solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.\n\n\nNo identity found\n\u2693\n\n\nYou uploaded the correct \nProvisioning Profile\n and \nCertificate\n pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:\n\n\n22...D11: no identity found\n\n\n\nSolution:\n\n\nYou probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like \n--keychain /../../xxx.keychain\n code signing flag\nand a \nCODE_SIGN_KEYCHAIN\n variable set in the \n.pbxproj\n.\n\n\nThis might happen if you migrate your Xcode Bot based setup into Bitrise.\n\n\nTo fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.\n\n\nNo mobileprovision_path found / No embedded.mobileprovision found in ...\n\u2693\n\n\nError: \nNo embedded.mobileprovision found in ...\n\n\nOr: \nNo mobileprovision_path found\n\n\nPossible solution 1: \nSkip Install\n Xcode Settings\n\u2693\n\n\nIf you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the \nSkip Install\n option set to \nYES\n.\n\n\nThis should only be used for iOS frameworks, \nfor iOS apps this should be set to \nNO\n.\n\n\nYou can find the official documentation at:\n\nhttps://developer.apple.com/library/ios/technotes/tn2215/_index.html\n\n- under the \nXcode successfully archived my application, but the Archives Organizer does not list my archive\n section.\n\n\nPossible solution 2: \nInstallation Directory\n Xcode Settings\n\u2693\n\n\nAnother cause of the issue can be\n if you (or a tool you use) modifies\nthe \nBuild Setting -\n Deployment -\n Installation Directory\n settings in your Xcode Project.\nThis can result in an \n.xcarchive\n where your app is not generated\ninto the canonical \nProducts/Applications\n folder, but instead into a \nProducts/Users/USERNAME/...\n folder,\nincluding the full absolute path of an intermediate build.\n\n\nSolution:\n Please make sure that the \nInstallation Directory\n option is set to \n$(LOCAL_APPS_DIR)\n\n(the default value when you generate a new iOS Xcode Project) or \n/Applications\n\n(which is the default value of \n$(LOCAL_APPS_DIR)\n) in your Xcode Project settings,\nand that no build tool you use modifies this option.\n\n\nHuge thanks to \nAntje\n, who reported this solution!\n\n\nDuplicated Schemes\n\u2693\n\n\nThis is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the \nexact same name\n,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations,\n\nrandomly\n. This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this:\n\nxcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action\n when it fails.\n\n\nThis might also happen if you use CocoaPods and one of your Pods have the same name as your project.\n\n\nIn any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run: \nxcodebuild -workspace ./path/to/workspace/file -list\n - or if you use a project file\ninstead of a workspace file: \nxcodebuild -project ./path/to/project/file -list\n.\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.\n\n\nSystem dialog blocks the tests to run\n\u2693\n\n\n(huge thanks to \n@AronI\n who reported this issue and the solution)\n\n\nError:\n\n\n2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}\n\n\n\nSolution:\n\n\n\n\nSo to put it simply my problem was my UI Tests were failing.\n\n\n\n\nThe steps leading to the failure were the following:\n\n\n\n\nUnit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.\n\n\nWhen a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).\n\n\nWhen the UITests start the permissions dialog is still visible and overlaying the screen.\n\n\nThe application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails\n\n\n\n\nI resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:\n\n\nlet unitTestMode = NSProcessInfo.processInfo().environment[\nXCTestConfigurationFilePath\n] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}\n\n\n\n\n\nThis is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "Frequent iOS issues"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#searching-for-errors-and-issues-in-xcode-generated-output", 
            "text": "This applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the  Output Tool  option\nof the Xcode ... step to  xcodebuild  (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool ( xcodebuild ). All of the official Bitrise Xcode steps\nhave an  Output Tool  input with a  xcodebuild  option.  You should search for  error:  in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.  If that doesn't work you should also search for  warning: , in rare cases Xcode doesn't print an  error:  even if it fails.  If you have the logs on your own machine then you can run something like this in your Terminal:  grep --color 'error:' my.log\ngrep --color 'warning:' my.log", 
            "title": "Searching for errors and issues in Xcode generated output"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#xcode-scheme-not-found", 
            "text": "The first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a  The project named  Foo  does not contain a scheme named  Bar  error during build,\nis your Xcode project settings.   Check if the desired Scheme is shared  When you share your scheme the Xcode project changes. Don't forget to  commit  and to  push  your changes!  If the related validation is still running on Bitrise abort it and try to run it again.    Don't forget to commit   push the changes  if you just enabled the Shared option!\nThis change should be reflected in your  git  repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder): *.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme .  If you still can't see the desired Scheme,\ntry to look into your  .gitignore  file and check if you are ignoring the config files of your Xcode project.", 
            "title": "Xcode Scheme not found"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#cocoapods-missing-dependency-issue", 
            "text": "", 
            "title": "CocoaPods (missing) dependency issue"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#error", 
            "text": "ld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  OR:  no such module '...'", 
            "title": "Error:"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#solution", 
            "text": "Most likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace ( .xcworkspace ) file. Go to your App's  Workflow tab  on Bitrise,\nclick  Manage Workflows , click  App Environments  and change the  BITRISE_PROJECT_PATH  item.\nThis will change the default Project Path configuration for every workflow.  If it worked before  and the  BITRISE_PROJECT_PATH  did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.", 
            "title": "Solution:"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#fastlane-export-issue", 
            "text": "This section was contributed by  @kwoylie ,\nand applies if you have a  Gemfile  in your repository and you use\nthe  fastlane  step which uses the  Gemfile  automatically if present.  Gemfile  content was:  gem  fastlane ,  1.104.0 \ngem  gym ,  1.10.0 \ngem  badge ,  0.5.0 \ngem  CFPropertyList , 2.3.3 \ngem  sqlite3 ,  1.3.11  I have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.  I had disabled xcpretty on Fastlane and got the following error from gym:  $/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed:  IDEDistributionThinningStep: 0x7f868c80f810 : Error Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with  IDEDistributionContext: 0x7f868c51ed70; archive(resolved)=' IDEArchive: 0x7f868c4af8d0 ', distributionTask(resolved)='2', distributionMethod(resolved)=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID(resolved)='(null)' \n    Chain (2, self inclusive):\n     IDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod=' IDEDistributionMethodEnterprise: 0x7f868c202a00 ', teamID='(null)' \n     IDEDistributionContext: 0x7f868c4b0e70; archive = ' IDEArchive: 0x7f868c4af8d0 ', distributionMethod='(null)', teamID='(null)'  /IDEDistributionContext: 0x7f868c51ed70  This error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:  2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in ` top (required) '\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)  So after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.", 
            "title": "Fastlane Export Issue"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#solution_1", 
            "text": "To fix this issue, you just have to add a  Script  step to run the following:  sudo /usr/bin/gem install bundler  This will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies", 
            "title": "Solution:"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#works-in-local-but-not-on-bitriseio", 
            "text": "An example error:  ld: file not found ...  First of all restart your Xcode and try a new build.  If it doesn't help try a  clean build  in Xcode.  If no error was displayed, try resetting your simulator(s).  Another problem could be your CocoaPods version.\nTry updating your CocoaPods with the  [sudo] gem install cocoapods  command.\nAlso make sure that your  Podfile.lock  is  committed into your repository ,\nas that's the file which describes the exact Pod versions you use. Without this Bitrise might download newer versions of Pods than the ones you use.  If there's still no error try deleting the  Pods  folder in your project and run the  pod install  command again.  Finally, if none of the above helped, or you get an error with  ld: file not found  on Bitrise,\nand the path contains  DerivedData , with no other error message, like this:  ld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)  Try deleting the Xcode local cache. After that the error should be reproducible on your local machine.  You can delete the local Xcode cache using your Terminal:  rm -rf ~/Library/Developer/Xcode/DerivedData", 
            "title": "Works in local but not on Bitrise.io"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#step-hangs-times-out-after-a-period-without-any-logs", 
            "text": "Check whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.  Most frequent sources of this issue:   Xcode  (command line tools) might hang if you try to build a Scheme which is not marked as  shared .\n  Usually it hangs right after you start any  xcodebuild  command (e.g.  xcodebuild -list  or  xcodebuild .. archive ).  Solution : Please make sure that you marked the Scheme as  shared ,\n  and that you actually committed   pushed it into your repository.\n  For more information please follow this guide:  Xcode scheme not found .    Your script tries to access an item in the OS X Keychain and the item is configured to\n  ask for permission before access (this is the default type of Access Control configuration\n  if you add an item - for example a password - to Keychain)  You try to use a script or tool which requires permissions where OS X presents a popup\n  for acceptance (for example an  osascript ). You can use a workaround to allow the tool,\n  without manual interaction by the user, for example by using  https://github.com/jacobsalmela/tccutil .  For example to add  osascript  to the allowed OS X Accessibility list you can call  tccutil  from\n  your script (don't forget to include it in your repository or download on-the-fly):  sudo python tccutil.py -i /usr/bin/osascript  You can download the script from GitHub directly, for example:  wget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py .    It can also be  something in your app's code .\n  An example: one of our user had a simple  popup in the app, presented only at the first start of the app .\n  Once the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\n  They did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\n  clean environment, which means that the simulator is in the same state as if you'd hit  \"Reset Content and Settings\"  in the iOS Simulator's menu.  Solution : try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \"first run\" experience.     It might also be that the build does not hang,  it just doesn't generate any log output .\nThis can happen for various reasons;\nyou can find an example in case of an  iOS library project .", 
            "title": "Step hangs (times out after a period without any logs)"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#cocoapods-frameworks-signing-issue", 
            "text": "When you get an error something like this:  === CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'  This error is related to how CocoaPods expects code signing configurations for  frameworks .", 
            "title": "CocoaPods frameworks signing issue"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#solution-1-make-sure-that-you-uploadincludeinstall-a-wildcard-development-provisioning-profile", 
            "text": "Usually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.  On your Mac you most likely have your own Development certificate and Wildcard  team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.  So, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team  wildcard  provisioning profile) to  bitrise.io ,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.", 
            "title": "Solution 1: make sure that you upload/include/install a wildcard development provisioning profile"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#solution-2-modifying-code-signing-settings-through-podfile", 
            "text": "One of our beloved user sent us the following fix for this problem.\nYou should add the following script as a  Post script  to your  Podfile :  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] =  \n      config.build_settings['CODE_SIGNING_REQUIRED'] =  NO \n      config.build_settings['CODE_SIGNING_ALLOWED'] =  NO \n    end\n  end\nend  You can find a related CocoaPods issue and discussion at: https://github.com/CocoaPods/CocoaPods/issues/4331  You can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one:  https://github.com/CocoaPods/CocoaPods/issues/3063 .", 
            "title": "Solution 2: modifying code signing settings through Podfile"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#installing-an-enterprise-app-untrusted-enterprise-developer", 
            "text": "If you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title  Untrusted Enterprise Developer .   Starting with iOS 9 there's no option to \"Trust\" the developer right from the popup.  You can Trust the developer and enable the app to run in iOS Settings:   Open the Settings app on your iPhone or iPad  Select the  General  category  Select the  Profile  option  starting with iOS 9.2 the option was renamed to  Device Management  instead of  Profile    Tap on the Enterprise App option related to the app (the one mentioned in the popup)  Tap the  Trust  The Developer's Name  button  A popup will appear, tap on  Trust  again   You should now be able to run the app, and any other Enterprise app from the same developer.", 
            "title": "Installing an Enterprise app: Untrusted Enterprise Developer"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#no-dsym-found", 
            "text": "A couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.", 
            "title": "No dSYM found"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#solution_2", 
            "text": "To generate debug symbols (dSYM) go to your  Xcode Project's Settings -  Build Settings -  Debug Information Format  and set it to  DWARF with dSYM File .", 
            "title": "Solution:"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#invalid-ipa-get-task-allow-values-in-the-embedded-mobileprovision-dont-match-your-binary", 
            "text": "Solution:  Generate a new Certificate on the Apple Developer portal,  not  in Xcode.  Another solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.", 
            "title": "Invalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#no-identity-found", 
            "text": "You uploaded the correct  Provisioning Profile  and  Certificate  pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:  22...D11: no identity found  Solution:  You probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like  --keychain /../../xxx.keychain  code signing flag\nand a  CODE_SIGN_KEYCHAIN  variable set in the  .pbxproj .  This might happen if you migrate your Xcode Bot based setup into Bitrise.  To fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.", 
            "title": "No identity found"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#no-mobileprovision_path-found-no-embeddedmobileprovision-found-in", 
            "text": "Error:  No embedded.mobileprovision found in ...  Or:  No mobileprovision_path found", 
            "title": "No mobileprovision_path found / No embedded.mobileprovision found in ..."
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#possible-solution-1-skip-install-xcode-settings", 
            "text": "If you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the  Skip Install  option set to  YES .  This should only be used for iOS frameworks,  for iOS apps this should be set to  NO .  You can find the official documentation at: https://developer.apple.com/library/ios/technotes/tn2215/_index.html \n- under the  Xcode successfully archived my application, but the Archives Organizer does not list my archive  section.", 
            "title": "Possible solution 1: Skip Install Xcode Settings"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#possible-solution-2-installation-directory-xcode-settings", 
            "text": "Another cause of the issue can be  if you (or a tool you use) modifies\nthe  Build Setting -  Deployment -  Installation Directory  settings in your Xcode Project.\nThis can result in an  .xcarchive  where your app is not generated\ninto the canonical  Products/Applications  folder, but instead into a  Products/Users/USERNAME/...  folder,\nincluding the full absolute path of an intermediate build.  Solution:  Please make sure that the  Installation Directory  option is set to  $(LOCAL_APPS_DIR) \n(the default value when you generate a new iOS Xcode Project) or  /Applications \n(which is the default value of  $(LOCAL_APPS_DIR) ) in your Xcode Project settings,\nand that no build tool you use modifies this option.  Huge thanks to  Antje , who reported this solution!", 
            "title": "Possible solution 2: Installation Directory Xcode Settings"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#duplicated-schemes", 
            "text": "This is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the  exact same name ,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations, randomly . This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this: xcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action  when it fails.  This might also happen if you use CocoaPods and one of your Pods have the same name as your project.  In any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run:  xcodebuild -workspace ./path/to/workspace/file -list  - or if you use a project file\ninstead of a workspace file:  xcodebuild -project ./path/to/project/file -list .\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.", 
            "title": "Duplicated Schemes"
        }, 
        {
            "location": "/troubleshooting/frequent-ios-issues/#system-dialog-blocks-the-tests-to-run", 
            "text": "(huge thanks to  @AronI  who reported this issue and the solution)  Error:  2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}  Solution:   So to put it simply my problem was my UI Tests were failing.   The steps leading to the failure were the following:   Unit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\n   which are kind of UI Tests but are still kept in the unit test bundle.\n   They launch the app and compare screens with reference images of the screen.  When a FBSnapshot TestCase is run it launches the app and launches\n   a system alert dialog asking the user for permission for push notifications\n   (this is just something that's done in the AppDelegate in my app every fresh install).  When the UITests start the permissions dialog is still visible and overlaying the screen.  The application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails   I resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:  let unitTestMode = NSProcessInfo.processInfo().environment[ XCTestConfigurationFilePath ] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}   This is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "System dialog blocks the tests to run"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/", 
            "text": "Feel free to add your comments to this list.\n\n\nYou can do it directly on GitHub, by clicking this link\n,\njust don't forget to send it as a Pull Request ;)\n\n\nPerformance related\n\u2693\n\n\nNote: mainly affects UI tests.\n\n\nThe root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on \nbitrise.io\n),\nMacBook Airs, Mac Minis with HDD storage, ...\n\n\nIt can happen even if you use\n\nApple's Xcode Bots CI server\n on \nnon SSD\n\nMac Mini.\n\n\nExamples:\n\n\n\n\nUI Tests fail to start\n\n\nOne or more UI Test case hangs\n\n\n\n\nRelated links \n reports:\n\n\n\n\nXCode bot error: Early unexpected exit, operation never finished bootstrapping\n\n\nUI Testing Failure - Failed to launch within 2.5s, Interrupting test\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for ...\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s\n\n\nUI Testing Failure - Failed to perform AX action for monitoring the event loop\n\n\nUI Testing Failure due to failed AX Action\n\n\nEvery other test case being skipped - UI Testing Failure - App state for \n is XCApplicationStateRunningActive (3), still not XCApplicationStateNotRunning\n\n\n\n\nPossible solutions\n\u2693\n\n\n\n\nAs reported \nin this StackOverflow answer\n \n\n  \nin this Apple dev forum discussion\n\n  a possible workaround can be to \nnot to store \nXCUIApplication()\n in a variable\n, instead\n  reference / use it directly. E.g. instead of: \nlet app = XCUIApplication() ; ... ; app.launch()\n\n  do: \nXCUIApplication().launch()\n\n\nOthers reported that if you add a delay (\nsleep(10)\n) after every \napp.launch()\n related to your tests, it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels. (\nRelated Apple developer forum discussion\n)\n\n\nRelated: remove every explicit \napp.terminate()\n in your \ntearDown()\n method(s)\n\n\n\n\n\n\nTry another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")\n\n\nUse the Async testing APIs\n\n\nSome users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.\n\n\nA great article about splitting tests into multiple Schemes:\n  \nhttp://artsy.github.io/blog/2016/04/06/Testing-Schemes\n\n\n\n\n\n\nSometimes it's related to a code which makes Xcode to misbehave\n\n\nTry another Xcode version.\n\n\n\n\nFlaky UI tests, UI test cases failing randomly\n\u2693\n\n\nThis can happen with a really simple project too. Even something as\nsimple as:\n\n\nfunc testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[\nMaster\n]\n        masterNavigationBar.buttons[\nAdd\n].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier(\nDetail\n).buttons[\nMaster\n].tap()\n        masterNavigationBar.buttons[\nEdit\n].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[\nDelete\n].tap()\n\n        masterNavigationBar.buttons[\nDone\n].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }\n\n\n\ncan trigger this issue.\n\n\nPossible solutions\n\u2693\n\n\nWe could reproduce this issue with the code above, using \nXcode 7.3\n.\nThe exact same code worked perfectly with \nXcode 7.2.1\n while it randomly\nfailed with \n7.3\n. The solution was to use a different iOS Simulator device.\nThe test failed \n2 out of 3\n on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.\n\n\nChanging the simulator device to \"iPhone 6s Plus\" solved the issue with \nXcode 7.3\n.\n\n\nXcode Unit Test fails without any error, with exit code 65\n\u2693\n\n\nThis can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.\n\n\nYou can find a long discussion, with possible reasons \n solutions \nhere\n.\n\n\nA quick summary:\n\n\n\n\nFirst of all, if you use \nxcpretty\n to format the output try a build without it\n  (if you use the Xcode Test step you can set \nxcodebuild\n as the \"Output Tool\" option/input\n  to not to format the log produced by \nxcodebuild\n). The cause is: \nxcpretty\n sometimes\n  omits the error message in it's output. \nRelated GitHub issue\n.\n\n\nIf you don't use our \nXcode Test\n step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.\n\n\nIf you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.\n\n\nTry \nanother Xcode version\n,\n  there are issues which are present in one Xcode version but not in another one.\n\n\nMake sure your desired \nXcode scheme is shared\n. Don't forget to commit and push the changes if you just enabled it.\n\n\nIt might also be a \nproject configuration issue in your Xcode project\n,\n  or a \ncode issue in your tests\n,\n  or a \nmulti threading issue in your code\n.\n\n\nWe received reports that this might also be caused by Code Coverage report generation,\n  you can disable the \nGenerate code coverage files?\n option of the Xcode Test step\n  to not to generate Code Coverage files.\n\n\nIf the previous steps did not help, you should check the whole discussion and suggested solutions at: \nhttps://github.com/bitrise-io/bitrise.io/issues/5\n\n\n\n\nSegmentation fault\n\u2693\n\n\nThe error is:\n\n\nclang: error: unable to execute command: Segmentation fault: 11\n\n\n\nThis is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on \nbitrise.io\n. Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.\n\n\nThe solution is simple, just make sure that you use the same Xcode version everywhere.\n\n\nIssues which occur with the Xcode Command Line Tools (\nxcodebuild\n), but not with Xcode.app\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\u2693\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\n\nNote: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9\n\n\nXcode 8 - \nxcodebuild .. test\n hangs at the very end of the tests\n\u2693\n\n\nxcodebuild .. test\n hangs at the end of the tests (after it printed the summary of the tests)\nif the output of \nxcodebuild ..\n is piped / redirected in any way.\nThis means that \nxcodebuild .. test .. | xcpretty\n or even \ntee\n can be used to reproduce this issue.\n\n\n\n\nAffected Xcode versions\n: so far it seems to be an \nXcode 8 beta\n only issue, and it was fixed in \nXcode 8 beta 4\n.\n\n\nRelated \nradar\n and \nxcpretty\n issues.\n\n\nWorkaround: use a \nScript\n step instead of the Xcode Test step,\n  and copy paste the \nxcodebuild\n command from the hanging Xcode Test step's log, without \n| xcpretty\n etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base \nxcodebuild\n command should be able to run, if the output\n  is not redirected / piped.\n\n\n\n\nEvery/Any Xcode command hangs\n\u2693\n\n\nThis is a rare issue, caused by running a \nnon shared Scheme\n.\n\n\nxcodebuild\n can only work with \nshared Schemes\n and user schemes (auto created by Xcode.app).\n\nxcodebuild\n, unlike Xcode.app, \ndoes not\n auto create user schemes, it can only work with\n\nshared schemes\n and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app \non the specific Mac machine the first time\n, for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in \nxcodebuild\n hanging, instead\nof an error message.\n\n\nIf this is the case then any \nxcodebuild\n command will hang, even something\nas simple as \nxcodebuild -list\n.\n\n\nSolution\n\u2693\n\n\nMake sure that you marked the Scheme as shared, and that you actually committed \n pushed it into your repository\n.\n\n\nBuild hangs\n\u2693\n\n\nSimulator reset\n\u2693\n\n\nAs reported \nhere\n,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script \nxcrun simctl erase all\n, it can cause Xcode / the Simulator to hang.\n\n\nOther\n\u2693\n\n\nIt might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).\n\n\nYou can find pointers to identify and solve these kind\nof issues \non our old DevCenter\n.", 
            "title": "List of known Xcode issues"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#performance-related", 
            "text": "Note: mainly affects UI tests.  The root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on  bitrise.io ),\nMacBook Airs, Mac Minis with HDD storage, ...  It can happen even if you use Apple's Xcode Bots CI server  on  non SSD \nMac Mini.  Examples:   UI Tests fail to start  One or more UI Test case hangs   Related links   reports:   XCode bot error: Early unexpected exit, operation never finished bootstrapping  UI Testing Failure - Failed to launch within 2.5s, Interrupting test  Assertion Failure: UI Testing Failure - Failed to receive completion for ...  Assertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s  UI Testing Failure - Failed to perform AX action for monitoring the event loop  UI Testing Failure due to failed AX Action  Every other test case being skipped - UI Testing Failure - App state for   is XCApplicationStateRunningActive (3), still not XCApplicationStateNotRunning", 
            "title": "Performance related"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#possible-solutions", 
            "text": "As reported  in this StackOverflow answer   \n   in this Apple dev forum discussion \n  a possible workaround can be to  not to store  XCUIApplication()  in a variable , instead\n  reference / use it directly. E.g. instead of:  let app = XCUIApplication() ; ... ; app.launch() \n  do:  XCUIApplication().launch()  Others reported that if you add a delay ( sleep(10) ) after every  app.launch()  related to your tests, it can\n  leave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\n  so that UI Tests can properly find the elements by the Accessibility labels. ( Related Apple developer forum discussion )  Related: remove every explicit  app.terminate()  in your  tearDown()  method(s)    Try another Simulator device (e.g. instead of running the test in \"iPhone 6\"\n  try it with \"iPhone 6s Plus\")  Use the Async testing APIs  Some users had success with splitting the tests into multiple Schemes,\n  and running those separately, with separate Test steps.  A great article about splitting tests into multiple Schemes:\n   http://artsy.github.io/blog/2016/04/06/Testing-Schemes    Sometimes it's related to a code which makes Xcode to misbehave  Try another Xcode version.", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#flaky-ui-tests-ui-test-cases-failing-randomly", 
            "text": "This can happen with a really simple project too. Even something as\nsimple as:  func testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[ Master ]\n        masterNavigationBar.buttons[ Add ].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier( Detail ).buttons[ Master ].tap()\n        masterNavigationBar.buttons[ Edit ].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[ Delete ].tap()\n\n        masterNavigationBar.buttons[ Done ].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }  can trigger this issue.", 
            "title": "Flaky UI tests, UI test cases failing randomly"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#possible-solutions_1", 
            "text": "We could reproduce this issue with the code above, using  Xcode 7.3 .\nThe exact same code worked perfectly with  Xcode 7.2.1  while it randomly\nfailed with  7.3 . The solution was to use a different iOS Simulator device.\nThe test failed  2 out of 3  on average with the \"iPhone 6\" simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.  Changing the simulator device to \"iPhone 6s Plus\" solved the issue with  Xcode 7.3 .", 
            "title": "Possible solutions"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#xcode-unit-test-fails-without-any-error-with-exit-code-65", 
            "text": "This can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.  You can find a long discussion, with possible reasons   solutions  here .  A quick summary:   First of all, if you use  xcpretty  to format the output try a build without it\n  (if you use the Xcode Test step you can set  xcodebuild  as the \"Output Tool\" option/input\n  to not to format the log produced by  xcodebuild ). The cause is:  xcpretty  sometimes\n  omits the error message in it's output.  Related GitHub issue .  If you don't use our  Xcode Test  step to run your UI Test you should try to run\n  it with our Xcode Test step. We always try to improve the reliability of the step,\n  implementing known workarounds for common issues.  If you use our Xcode Test step: make sure you use the latest version, as it\n  might include additional workarounds / fixes.  Try  another Xcode version ,\n  there are issues which are present in one Xcode version but not in another one.  Make sure your desired  Xcode scheme is shared . Don't forget to commit and push the changes if you just enabled it.  It might also be a  project configuration issue in your Xcode project ,\n  or a  code issue in your tests ,\n  or a  multi threading issue in your code .  We received reports that this might also be caused by Code Coverage report generation,\n  you can disable the  Generate code coverage files?  option of the Xcode Test step\n  to not to generate Code Coverage files.  If the previous steps did not help, you should check the whole discussion and suggested solutions at:  https://github.com/bitrise-io/bitrise.io/issues/5", 
            "title": "Xcode Unit Test fails without any error, with exit code 65"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#segmentation-fault", 
            "text": "The error is:  clang: error: unable to execute command: Segmentation fault: 11  This is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on  bitrise.io . Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.  The solution is simple, just make sure that you use the same Xcode version everywhere.", 
            "title": "Segmentation fault"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#issues-which-occur-with-the-xcode-command-line-tools-xcodebuild-but-not-with-xcodeapp", 
            "text": "", 
            "title": "Issues which occur with the Xcode Command Line Tools (xcodebuild), but not with Xcode.app"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#xcodebuild-hangs-when-a-test-causes-exc_bad_access-kernel-exception", 
            "text": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception  Note: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9", 
            "title": "xcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#xcode-8-xcodebuild-test-hangs-at-the-very-end-of-the-tests", 
            "text": "xcodebuild .. test  hangs at the end of the tests (after it printed the summary of the tests)\nif the output of  xcodebuild ..  is piped / redirected in any way.\nThis means that  xcodebuild .. test .. | xcpretty  or even  tee  can be used to reproduce this issue.   Affected Xcode versions : so far it seems to be an  Xcode 8 beta  only issue, and it was fixed in  Xcode 8 beta 4 .  Related  radar  and  xcpretty  issues.  Workaround: use a  Script  step instead of the Xcode Test step,\n  and copy paste the  xcodebuild  command from the hanging Xcode Test step's log, without  | xcpretty  etc.\n  Of course, with this you won't be able to use the built in features the Xcode Test step\n  provides, but the base  xcodebuild  command should be able to run, if the output\n  is not redirected / piped.", 
            "title": "Xcode 8 - xcodebuild .. test hangs at the very end of the tests"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#everyany-xcode-command-hangs", 
            "text": "This is a rare issue, caused by running a  non shared Scheme .  xcodebuild  can only work with  shared Schemes  and user schemes (auto created by Xcode.app). xcodebuild , unlike Xcode.app,  does not  auto create user schemes, it can only work with shared schemes  and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app  on the specific Mac machine the first time , for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \"scheme not found\"\nerror, but we saw projects where it resulted in  xcodebuild  hanging, instead\nof an error message.  If this is the case then any  xcodebuild  command will hang, even something\nas simple as  xcodebuild -list .", 
            "title": "Every/Any Xcode command hangs"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#solution", 
            "text": "Make sure that you marked the Scheme as shared, and that you actually committed   pushed it into your repository .", 
            "title": "Solution"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#build-hangs", 
            "text": "", 
            "title": "Build hangs"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#simulator-reset", 
            "text": "As reported  here ,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script  xcrun simctl erase all , it can cause Xcode / the Simulator to hang.", 
            "title": "Simulator reset"
        }, 
        {
            "location": "/troubleshooting/known-xcode-issues/#other", 
            "text": "It might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).  You can find pointers to identify and solve these kind\nof issues  on our old DevCenter .", 
            "title": "Other"
        }, 
        {
            "location": "/troubleshooting/trigger-doesnt-work/", 
            "text": "Unfortunately, it can happen that your build triggers do not trigger a build automatically on Bitrise. There are many potential issues that can stop your builds - let's take a look!\n\n\n\n\n\n\nCheck your webhooks.\n\n\nCheck that you have the webhook set up correctly. You can find out the webhook URL for your repository's hosting provider on the \nCode\n tab of your app and you can check in your repository's settings if they match.\n\n\nAlso, you have to enable the specific event that you would like to trigger a build. For example, if your repository is hosted at GitLab and you wish to trigger builds with Git Tags, you must enable Tag Push events in your GitLab webhook.\n\n\nCheck in your repository's settings if there are any error messages regarding the delivery attempts related to your webhook.\n\n\nFor more information about potential issues with webhooks, check out \nWebhook troubleshooting\n\n\n\n\n\n\nCheck the branch names and tags you set up with the trigger on bitrise.io.\n\n\nFor example, if you accidentally typed \nmsater\n instead of \nmaster\n, no build will be triggered.\n\n\n\n\n\n\nCheck if you previously enabled Selective Builds for the app. You can find the option on your app's \nSettings\n page. With this feature, you can set that a build should be triggered only if certain files or folders have been changed. \n\n\n\n\n\n\nCheck the status page of your repository's hosting provider to see if there are any known issues.", 
            "title": "Build Trigger does not work"
        }, 
        {
            "location": "/tools/bitrise-tools/", 
            "text": "List of Open Source tools maintained by the Bitrise team.\n\n\n\n\nWhere can I find the repositories?\n\n\nFor historical reasons the core Bitrise CLI tools live in \ngithub.com/bitrise-io\n,\nbut most of our tools, and every new tool we create lives in\nthe \ngithub.com/bitrise-tools\n,\nand the CLI core components (plugins, etc.)\nin the \ngithub.com/bitrise-core\n GitHub organization.\n\n\n\n\nCore, Bitrise CLI tools\n\u2693\n\n\n\n\nbitrise\n -\n  the Bitrise CLI, which is used on \nbitrise.io\n\n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!\n\n\nstepman\n -\n  used for managing the Step Library, including\n  downloading and sharing steps.\n\n\nenvman\n -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.\n\n\n\n\nBitrise CLI plugins\n\u2693\n\n\n\n\nAnalytics plugin\n\n\n\n\nInfrastructure\n\u2693\n\n\n\n\nbitrise-machine\n -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.\n\n\nbitrise-bridge\n -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.\n\n\ncmd-bridge\n -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start \ncmd-bridge\n's server in the environment, and then\n  you can use \ncmd-bridge\n through SSH or another way to send commands to the running\n  \ncmd-bridge\n server, which will perform the commands in its context / the environment\n  it is running in.\n\n\ngarden\n -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).\n\n\n\n\niOS\n\u2693\n\n\n\n\ncodesigndoc\n -\n  Your friendly iOS Code Signing Doctor.\n\n\n\n\nGeneric\n\u2693\n\n\n\n\ndepman\n -\n  Super Simple Dependency Manager\n\n\nreleaseman\n -\n  Your friendly Release Manager\n\n\n\n\nGo\n\u2693\n\n\nGo / golang related tools.\n\n\n\n\ngows\n -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.\n\n\ngoinst\n -\n  Go Install command line tools in an isolated environment.\n\n\n\n\nServer / service\n\u2693\n\n\n\n\nbitrise webhooks\n -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to \nbitrise.io\n's Build Trigger API format, and calls it to start a build.\n\n\nDATapi\n -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.\n\n\nDATapi Ruby Client", 
            "title": "Bitrise tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#core-bitrise-cli-tools", 
            "text": "bitrise  -\n  the Bitrise CLI, which is used on  bitrise.io \n  to run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!  stepman  -\n  used for managing the Step Library, including\n  downloading and sharing steps.  envman  -\n  environment variable manager, can be used independently\n  and Bitrise CLI uses it to isolate and manage environment variables during the build.", 
            "title": "Core, Bitrise CLI tools"
        }, 
        {
            "location": "/tools/bitrise-tools/#bitrise-cli-plugins", 
            "text": "Analytics plugin", 
            "title": "Bitrise CLI plugins"
        }, 
        {
            "location": "/tools/bitrise-tools/#infrastructure", 
            "text": "bitrise-machine  -\n  Manage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.  bitrise-bridge  -\n  Responsible for \"bridging\" a Bitrise CLI command\n  from a remote host to the local Bitrise CLI;\n  either directly or by creating a Docker container and running the Bitrise CLI command in it.  cmd-bridge  -\n  Helps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\n  where the command have to be performed in a specific environment, e.g. the iOS Simulator\n  can't be started from an SSH session, it have to be started from a logged in \"GUI\" user.\n  In this case you start  cmd-bridge 's server in the environment, and then\n  you can use  cmd-bridge  through SSH or another way to send commands to the running\n   cmd-bridge  server, which will perform the commands in its context / the environment\n  it is running in.  garden  -\n  A tool to manage your template (plan) based directories.\n  You can perform a setup (plant) by running garden grow,\n  which'll create your garden (directories) based on your plans (temlates).", 
            "title": "Infrastructure"
        }, 
        {
            "location": "/tools/bitrise-tools/#ios", 
            "text": "codesigndoc  -\n  Your friendly iOS Code Signing Doctor.", 
            "title": "iOS"
        }, 
        {
            "location": "/tools/bitrise-tools/#generic", 
            "text": "depman  -\n  Super Simple Dependency Manager  releaseman  -\n  Your friendly Release Manager", 
            "title": "Generic"
        }, 
        {
            "location": "/tools/bitrise-tools/#go", 
            "text": "Go / golang related tools.   gows  -\n  Go Workspace / Environment Manager, to easily manage the Go Workspace during development.  goinst  -\n  Go Install command line tools in an isolated environment.", 
            "title": "Go"
        }, 
        {
            "location": "/tools/bitrise-tools/#server-service", 
            "text": "bitrise webhooks  -\n  Bitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\n  to  bitrise.io 's Build Trigger API format, and calls it to start a build.  DATapi  -\n  A very simple data series storage service.\n  Store and retrieve data series in a quick and simple way, based on timestamp and category of the data.  DATapi Ruby Client", 
            "title": "Server / service"
        }, 
        {
            "location": "/api/build-trigger/", 
            "text": "With the Build Trigger API you can start a new build of your app with a simple API call.\n\n\nYou can define parameters for the build like what \nbranch\n, \ntag\n or \ngit commit\n to use\nand what \nbuild message\n to present on the Build's details page.\n\n\n\n\nInteractive cURL call configurator\n\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call,\nbased on the parameters you specify in the popup.\n\n\n\n\nHow to start a build by calling the Trigger API?\n\u2693\n\n\nYou have to call your build trigger with a \nPOST\n request with a JSON body.\n\n\n\n\nBuild Trigger Token and App Slug\n\n\nWhen you use the Bitrise Trigger API you have to specify the App's \nBuild Trigger Token\n and \nApp Slug\n.\nYou can view both and regenerate your App's Build Trigger Token anytime you want to,\non the \nCode\n tab of the app.\n\n\n\n\nNote: the old \napi_token\n parameter is DEPRECATED, please use the \nbuild_trigger_token\n parameter instead\n\n\nJSON body\n\u2693\n\n\nThe JSON body has to contain at least:\n\n\n\n\na \nhook_info\n object with:\n\n\na \ntype\n key and \nbitrise\n as its value\n\n\na \nbuild_trigger_token\n key and your \nBuild Trigger Token\n as its value\n\n\n\n\n\n\na \nbuild_params\n object, with at least a \ntag\n, \nbranch\n or \nworkflow_id\n parameter specified\n\n\n\n\nA minimal sample JSON body, which specifies \nmaster\n as the \nbranch\n parameter:\n\n\n{\n  \nhook_info\n: {\n    \ntype\n: \nbitrise\n,\n    \nbuild_trigger_token\n: \n...\n\n  },\n  \nbuild_params\n: {\n    \nbranch\n: \nmaster\n\n  }\n}\n\n\n\nTo pass this JSON payload\n you can either pass it as the \nbody\n of the request \nas string\n (the JSON object serialized to string),\nor if you want to pass it as an object (e.g. if you want to call it from JavaScript) then you have to include a root \npayload\n\nelement, or set the JSON object as the value of the \npayload\n POST parameter.\n\n\njQuery example using the \npayload\n parameter:\n\n\n$.post(\nhttps://app.bitrise.io/app/APP-SLUG/build/start.json\n, {\n    \npayload\n:{\n        \nhook_info\n:{\n            \ntype\n:\nbitrise\n,\n            \nbuild_trigger_token\n:\nAPP-API-TOKEN\n\n        },\n        \nbuild_params\n:{\n            \nbranch\n:\nmaster\n\n        }\n    }\n})\n\n\n\nBuild Params\n\u2693\n\n\nThe following parameters are supported in the \nbuild_params\n object:\n\n\nGit related:\n\u2693\n\n\n\n\nbranch\n (string): The (Source) Branch to build. In case of a standard git commit this is the branch of the commit.\n  In case of a Pull Request build this is the source branch, the one the PR was started from.\n\n\ntag\n (string): The git Tag to build.\n\n\ncommit_hash\n (string): The git commit hash to build.\n\n\ncommit_message\n (string): The git commit message (or build's message).\n\n\n\n\nBitrise.io specific:\n\u2693\n\n\n\n\nworkflow_id\n: (string): Force the use of the specified workflow ID. If not defined then the workflow will be selected\n  based on the project's \nTrigger Map config\n.\n\n\nenvironments\n (array of objects): See the \nSpecify Environment Variables\n section for more info\n  about the \nenvironments\n objects.\n\n\nskip_git_status_report\n (bool): Skip sending build status for the connected git provider\n\n\n\n\nPull Request specific:\n\u2693\n\n\n\n\nbranch_dest\n (string): Used only in case of Pull Request builds: the destination/target branch of the Pull Request,\n  the one the PR will be merged \ninto\n. Example: \nmaster\n.\n\n\npull_request_id\n (int): Pull Request ID on the source code hosting system (e.g. the PR number on GitHub)\n\n\npull_request_repository_url\n (string): repository url from where the Pull Request is sent. E.g. if\n  it's created from a fork this should be the fork's URL. Example: \nhttps://github.com/xyz/bitrise.git\n.\n\n\npull_request_merge_branch\n (string): the pre-merge branch, \nif the source code hosting system supports \n provides\n\n  the pre-merged state of the PR on a special \"merge branch\" (ref). Probably only GitHub supports this.\n  Example: \npull/12/merge\n.\n\n\npull_request_head_branch\n (string): the Pull Request's \"head branch\" (\nrefs/\n) \nif the source code hosting system supports \n provides\n this.\n  This special git \nref\n should point to the \nsource\n of the Pull Request. Supported by GitHub and GitLab.\n  Example: \npull/12/head\n (github) / \nmerge-requests/12/head\n (gitlab).\n\n\n\n\n\n\nGit Clone - parameter priority\n\n\nIf you provide a \ntag\n, the \nbranch\n parameter will be ignored by the \nGit Clone\n step.\nIf you provide a \ncommit_hash\n parameter then both the \ntag\n and the \nbranch\n parameters will be ignored.\nThese will still be logged, will be available for steps and will be visible on the Build's details page,\nbut the \nGit Clone\n step will use the the most specific parameter for checkout.\n\n\n\n\nSpecify Environment Variables\n\u2693\n\n\nYou can define additional \nenvironment variables\n for your build.\n\n\nThese variables will be handled with priority between \nSecrets\n and \nApp Env Vars\n,\nwhich means that you can not overwrite environment variables defined in\nyour build configuration (e.g. App Env Vars), only Secrets.\nFor more information see:\n\nAvailability order of environment variables\n\n\nIt's important that this parameter have to be an \narray of objects\n,\nand that every item of the array have to include\nat least a \nmapped_to\n (the key of the Environment Variable, without a dollar sign (\n$\n))\nand a \nvalue\n property (the value of the variable). By default environment variable names inside values will be replaced in triggered build by actual value from target environment. This behavior can be disabled by setting \nis_expand\n flag to \nfalse\n.\n\n\nExample:\n\n\nenvironments\n:[\n  {\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true},\n  {\nmapped_to\n:\nHELP_ENV\n,\nvalue\n:\n$HOME variable contains user's home directory path\n,\nis_expand\n:false},\n]\n\n\n\nWorkflow to be used for the build\n\u2693\n\n\nBy default the Workflow for your Build will be selected based on the\n\nbuild_params\n and your app's \nTrigger Map\n.\nThis is the same as how \nWebhooks\n select the workflow for the build\nautomatically (based on the \nTrigger Map\n), and how you can\ndefine separate Workflows for separate branches, tags or pull requests\nwithout the need to specify the workflow manually for every build.\n\n\nWith the Trigger API you can however \noverwrite\n this selection\nand specify exactly which Workflow you want to use.\n\n\nAll you have to do is add a \nworkflow_id\n parameter to your \nbuild_params\n\nand specify the Workflow you want to use for that specific build.\n\n\nAn example \nbuild_params\n with \nbranch\n and \nworkflow_id\n:\n\n\nbuild_params\n:{\nbranch\n:\nmaster\n,\nworkflow_id\n:\ndeploy\n}'\n\n\n\ncurl\n example generator\n\u2693\n\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call, based on the parameters you specify in the popup.\n\n\nA base curl call would look like this (with \nmaster\n specified as the \nbranch\n build parameter):\n\n\ncurl -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\nbuild_trigger_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n}}'\n\n\n\nNote: please don't forget to add \nContent-Type\n header with \napplication/json\n value\n\n\nA more advanced example: let's say you want to build the \nmaster\n \nbranch\n\nusing the \ndeployment\n workflow,\nspecify a build message (\ncommit_message\n)\nand set a test environment variable (\nAPI_TEST_ENV\n),\nthe call will look like this:\n\n\ncurl  -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\nbuild_trigger_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n,\ncommit_message\n:\nEnvironment in API params test\n,\nworkflow_id\n:\ndeployment\n,\nenvironments\n:[{\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true}]}}'", 
            "title": "Build Trigger API"
        }, 
        {
            "location": "/api/build-trigger/#how-to-start-a-build-by-calling-the-trigger-api", 
            "text": "You have to call your build trigger with a  POST  request with a JSON body.   Build Trigger Token and App Slug  When you use the Bitrise Trigger API you have to specify the App's  Build Trigger Token  and  App Slug .\nYou can view both and regenerate your App's Build Trigger Token anytime you want to,\non the  Code  tab of the app.   Note: the old  api_token  parameter is DEPRECATED, please use the  build_trigger_token  parameter instead", 
            "title": "How to start a build by calling the Trigger API?"
        }, 
        {
            "location": "/api/build-trigger/#json-body", 
            "text": "The JSON body has to contain at least:   a  hook_info  object with:  a  type  key and  bitrise  as its value  a  build_trigger_token  key and your  Build Trigger Token  as its value    a  build_params  object, with at least a  tag ,  branch  or  workflow_id  parameter specified   A minimal sample JSON body, which specifies  master  as the  branch  parameter:  {\n   hook_info : {\n     type :  bitrise ,\n     build_trigger_token :  ... \n  },\n   build_params : {\n     branch :  master \n  }\n}  To pass this JSON payload  you can either pass it as the  body  of the request  as string  (the JSON object serialized to string),\nor if you want to pass it as an object (e.g. if you want to call it from JavaScript) then you have to include a root  payload \nelement, or set the JSON object as the value of the  payload  POST parameter.  jQuery example using the  payload  parameter:  $.post( https://app.bitrise.io/app/APP-SLUG/build/start.json , {\n     payload :{\n         hook_info :{\n             type : bitrise ,\n             build_trigger_token : APP-API-TOKEN \n        },\n         build_params :{\n             branch : master \n        }\n    }\n})", 
            "title": "JSON body"
        }, 
        {
            "location": "/api/build-trigger/#build-params", 
            "text": "The following parameters are supported in the  build_params  object:", 
            "title": "Build Params"
        }, 
        {
            "location": "/api/build-trigger/#git-related", 
            "text": "branch  (string): The (Source) Branch to build. In case of a standard git commit this is the branch of the commit.\n  In case of a Pull Request build this is the source branch, the one the PR was started from.  tag  (string): The git Tag to build.  commit_hash  (string): The git commit hash to build.  commit_message  (string): The git commit message (or build's message).", 
            "title": "Git related:"
        }, 
        {
            "location": "/api/build-trigger/#bitriseio-specific", 
            "text": "workflow_id : (string): Force the use of the specified workflow ID. If not defined then the workflow will be selected\n  based on the project's  Trigger Map config .  environments  (array of objects): See the  Specify Environment Variables  section for more info\n  about the  environments  objects.  skip_git_status_report  (bool): Skip sending build status for the connected git provider", 
            "title": "Bitrise.io specific:"
        }, 
        {
            "location": "/api/build-trigger/#pull-request-specific", 
            "text": "branch_dest  (string): Used only in case of Pull Request builds: the destination/target branch of the Pull Request,\n  the one the PR will be merged  into . Example:  master .  pull_request_id  (int): Pull Request ID on the source code hosting system (e.g. the PR number on GitHub)  pull_request_repository_url  (string): repository url from where the Pull Request is sent. E.g. if\n  it's created from a fork this should be the fork's URL. Example:  https://github.com/xyz/bitrise.git .  pull_request_merge_branch  (string): the pre-merge branch,  if the source code hosting system supports   provides \n  the pre-merged state of the PR on a special \"merge branch\" (ref). Probably only GitHub supports this.\n  Example:  pull/12/merge .  pull_request_head_branch  (string): the Pull Request's \"head branch\" ( refs/ )  if the source code hosting system supports   provides  this.\n  This special git  ref  should point to the  source  of the Pull Request. Supported by GitHub and GitLab.\n  Example:  pull/12/head  (github) /  merge-requests/12/head  (gitlab).    Git Clone - parameter priority  If you provide a  tag , the  branch  parameter will be ignored by the  Git Clone  step.\nIf you provide a  commit_hash  parameter then both the  tag  and the  branch  parameters will be ignored.\nThese will still be logged, will be available for steps and will be visible on the Build's details page,\nbut the  Git Clone  step will use the the most specific parameter for checkout.", 
            "title": "Pull Request specific:"
        }, 
        {
            "location": "/api/build-trigger/#specify-environment-variables", 
            "text": "You can define additional  environment variables  for your build.  These variables will be handled with priority between  Secrets  and  App Env Vars ,\nwhich means that you can not overwrite environment variables defined in\nyour build configuration (e.g. App Env Vars), only Secrets.\nFor more information see: Availability order of environment variables  It's important that this parameter have to be an  array of objects ,\nand that every item of the array have to include\nat least a  mapped_to  (the key of the Environment Variable, without a dollar sign ( $ ))\nand a  value  property (the value of the variable). By default environment variable names inside values will be replaced in triggered build by actual value from target environment. This behavior can be disabled by setting  is_expand  flag to  false .  Example:  environments :[\n  { mapped_to : API_TEST_ENV , value : This is the test value , is_expand :true},\n  { mapped_to : HELP_ENV , value : $HOME variable contains user's home directory path , is_expand :false},\n]", 
            "title": "Specify Environment Variables"
        }, 
        {
            "location": "/api/build-trigger/#workflow-to-be-used-for-the-build", 
            "text": "By default the Workflow for your Build will be selected based on the build_params  and your app's  Trigger Map .\nThis is the same as how  Webhooks  select the workflow for the build\nautomatically (based on the  Trigger Map ), and how you can\ndefine separate Workflows for separate branches, tags or pull requests\nwithout the need to specify the workflow manually for every build.  With the Trigger API you can however  overwrite  this selection\nand specify exactly which Workflow you want to use.  All you have to do is add a  workflow_id  parameter to your  build_params \nand specify the Workflow you want to use for that specific build.  An example  build_params  with  branch  and  workflow_id :  build_params :{ branch : master , workflow_id : deploy }'", 
            "title": "Workflow to be used for the build"
        }, 
        {
            "location": "/api/build-trigger/#curl-example-generator", 
            "text": "You can find an interactive cURL call configurator by clicking on the  Start/Schedule a build \nbutton on your app's  bitrise.io  page\nand switching to  Advanced  mode in the popup.\nAt the bottom of the popup you can find a  curl  call, based on the parameters you specify in the popup.  A base curl call would look like this (with  master  specified as the  branch  build parameter):  curl -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{ hook_info :{ type : bitrise , build_trigger_token : APP-API-TOKEN }, build_params :{ branch : master }}'  Note: please don't forget to add  Content-Type  header with  application/json  value  A more advanced example: let's say you want to build the  master   branch \nusing the  deployment  workflow,\nspecify a build message ( commit_message )\nand set a test environment variable ( API_TEST_ENV ),\nthe call will look like this:  curl  -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{ hook_info :{ type : bitrise , build_trigger_token : APP-API-TOKEN }, build_params :{ branch : master , commit_message : Environment in API params test , workflow_id : deployment , environments :[{ mapped_to : API_TEST_ENV , value : This is the test value , is_expand :true}]}}'", 
            "title": "curl example generator"
        }, 
        {
            "location": "/api/app-status-badge/", 
            "text": "With the \nStatus Image API token\n, you can get an embeddable SVG badge image, a JSON message reflecting the status of the app, or a specific branch of the app.\n\n\n\n\n\n\nOpen your App on \nbitrise.io\n and click the badge image right next to the app's name.\n\n\n\n\n\n\n\n\nIn the \nStatus image\n popup, you can optionally set a branch, and get copy-paste-ready \nEmbed\n codes for the SVG image.  \n\n\n\n\nExample SVG URL\n\n\nhttps://app.bitrise.io/app/APP-ID/status.svg?token=STATUS-IMAGE-API-TOKEN\nbranch=master\n\n\n\n\n\nTo get the JSON equivalent of the status image, simply replace the \n.svg\n in the \nEmbed\n URL with \n.json\n.\n\n\n\n\nJSON URL\n\n\nhttps://app.bitrise.io/app/APP-ID/status.json?token=STATUS-IMAGE-API-TOKEN\nbranch=master\n\n\n\n\n\n\n\n\n\n\n\nSTATUS-IMAGE-API-TOKEN\n\n\nThe \nSTATUS-IMAGE-API-TOKEN\n is a special token which can only be used for calling this endpoint (you can find this token in the \nStatus image\n popup). No other information can be retrieved with this token, and it's not the same as the \nAPI Token\n which you can find on the \nCode\n tab!\n\n\n\n\nJSON response\n\u2693\n\n\nThe JSON response returns a very simple JSON object:\n\n\n{\n    \nstatus\n: \nSIMPLIFIED-STATUS-AS-TEXT\n\n}\n\n\n\nwhere \nSIMPLIFIED-STATUS-AS-TEXT\n can be:\n\n\n\n\nsuccess\n : if the last finished build on the specified branch was successful\n\n\nerror\n : if the last finished build failed or was aborted on the specified branch\n\n\nunknown\n : in any other case, including if there was no (finished) build on the specified branch\n\n\n\n\nHTTP Codes and Errors\n\u2693\n\n\nIf the \nAPP-ID\n and the \nSTATUS-IMAGE-API-TOKEN\n parameters are correct,\nand they identify an existing app, a \n200\n HTTP code is returned along with the JSON response, even if the branch parameter points to a non-existing branch (the JSON response in this case will be \n{\nstatus\n: \nunknown\n}\n with a 200 HTTP code).\n\n\nIf the \nAPP-ID\n or the \nSTATUS-IMAGE-API-TOKEN\n (or both) is not correct,\nyou'll get a HTTP \n403\n code \nwith an empty response\n body.", 
            "title": "App Status Image/Badge API"
        }, 
        {
            "location": "/api/app-status-badge/#json-response", 
            "text": "The JSON response returns a very simple JSON object:  {\n     status :  SIMPLIFIED-STATUS-AS-TEXT \n}  where  SIMPLIFIED-STATUS-AS-TEXT  can be:   success  : if the last finished build on the specified branch was successful  error  : if the last finished build failed or was aborted on the specified branch  unknown  : in any other case, including if there was no (finished) build on the specified branch", 
            "title": "JSON response"
        }, 
        {
            "location": "/api/app-status-badge/#http-codes-and-errors", 
            "text": "If the  APP-ID  and the  STATUS-IMAGE-API-TOKEN  parameters are correct,\nand they identify an existing app, a  200  HTTP code is returned along with the JSON response, even if the branch parameter points to a non-existing branch (the JSON response in this case will be  { status :  unknown }  with a 200 HTTP code).  If the  APP-ID  or the  STATUS-IMAGE-API-TOKEN  (or both) is not correct,\nyou'll get a HTTP  403  code  with an empty response  body.", 
            "title": "HTTP Codes and Errors"
        }, 
        {
            "location": "/api/outgoing-webhooks/", 
            "text": "By setting up outgoing webhooks you can make Bitrise send notifications about specific events to your web service, so you can create custom integrations.\n\n\nYou can set the URL of your web service and select which events should trigger a notification in the Code tab of your app. Currently only build events are supported: a notification is sent when a build starts or finishes.\n\n\nThe event type that triggered the webhook is sent in a custom header:\n\n\nBitrise-Event-Type\n: \nbuild/triggered\n # or \nbuild/finished\n\n\n\nThe recent delivery attempts of a webhook can be found on the Code tab, so you can inspect the sent payload and the given response, and even request a redelivery of a given item. (Please note that Bitrise tries to deliver an item only once, no automatic retry attempts are made: it can be requested manually.)\n\n\nBuild events\n\u2693\n\n\nNote: the available values of the build status parameter can be found at the \nbuild list part of the Bitrise API documentation\n\n\nBuild triggered\n\u2693\n\n\nCustom header:\n\n\nBitrise-Event-Type\n: \nbuild/triggered\n\n\n\nPayload example:\n\n\n{\n  \nbuild_slug\n:\n1234abcd\n,\n  \nbuild_number\n:3,\n  \napp_slug\n:\nabcd1234\n,\n  \nbuild_status\n:0,\n  \ngit\n: {\n    \nprovider\n:\ngithub\n,\n    \nsrc_branch\n:\nfeature/branch\n,\n    \ndst_branch\n:\nmaster\n, # If the build was triggered by a pull request\n    \npull_request_id\n:32, # If the build was triggered by a pull request\n    \ntag\n:\nv1.0\n # If the build was triggered by tag\n  }\n}\n\n\n\nBuild finished\n\u2693\n\n\nCustom header:\n\n\nBitrise-Event-Type\n: \nbuild/finished\n\n\n\nPayload example:\n\n\n{\n  \nbuild_slug\n:\n1234abcd\n,\n  \nbuild_number\n:3,\n  \napp_slug\n:\nabcd1234\n,\n  \nbuild_status\n:1,\n  \ngit\n: {\n    \nprovider\n:\ngithub\n,\n    \nsrc_branch\n:\nfeature/branch\n,\n    \ndst_branch\n:master, # If the build was triggered by a pull request\n    \npull_request_id\n:32 # If the build was triggered by a pull request\n    \ntag\n:\nv1.0\n # If the build was triggered by tag\n  }\n}", 
            "title": "Outgoing Webhooks"
        }, 
        {
            "location": "/api/outgoing-webhooks/#build-events", 
            "text": "Note: the available values of the build status parameter can be found at the  build list part of the Bitrise API documentation", 
            "title": "Build events"
        }, 
        {
            "location": "/api/outgoing-webhooks/#build-triggered", 
            "text": "Custom header:  Bitrise-Event-Type :  build/triggered  Payload example:  {\n   build_slug : 1234abcd ,\n   build_number :3,\n   app_slug : abcd1234 ,\n   build_status :0,\n   git : {\n     provider : github ,\n     src_branch : feature/branch ,\n     dst_branch : master , # If the build was triggered by a pull request\n     pull_request_id :32, # If the build was triggered by a pull request\n     tag : v1.0  # If the build was triggered by tag\n  }\n}", 
            "title": "Build triggered"
        }, 
        {
            "location": "/api/outgoing-webhooks/#build-finished", 
            "text": "Custom header:  Bitrise-Event-Type :  build/finished  Payload example:  {\n   build_slug : 1234abcd ,\n   build_number :3,\n   app_slug : abcd1234 ,\n   build_status :1,\n   git : {\n     provider : github ,\n     src_branch : feature/branch ,\n     dst_branch :master, # If the build was triggered by a pull request\n     pull_request_id :32 # If the build was triggered by a pull request\n     tag : v1.0  # If the build was triggered by tag\n  }\n}", 
            "title": "Build finished"
        }, 
        {
            "location": "/api/v0.1/", 
            "text": "The API is work-in-progress\n\n\nThe API is work-in-progress, we'll add docs for new endpoints here as we progress,\nas well as we might change things a bit if required.\n\n\n\n\n\n\nJoin the discussion at: \nhttps://discuss.bitrise.io/t/bitrise-api-v0-1-work-in-progress/1554\n.\n  Follow it if you want to get notified about new endpoints and changes,\n  we announce those there.\n\n\nIf you want to request a new API feature / endpoint,\n  please do it here: \nhttp://discuss.bitrise.io/t/bitrise-public-api/37\n\n\n\n\nAPI domain/host and versioning\n\u2693\n\n\nThe Bitrise API's host is: \nhttps://api.bitrise.io/\n\n\nEvery endpoint except the root one is versioned, and the version have to be included in the URL right after the host.\n\n\nExample: \nhttps://api.bitrise.io/v0.1/me\n (requires authentication)\n\n\nRight now we have only one version, \nv0.1\n.\n\n\nThere's no long term compatibility promise for \nv0.1\n, although we try to do our best to not to break anything unless we have to. Once we're happy with \nv0.1\n we'll \"freeze\" it as \nv1.0\n, for which we'll provide long term support.\n\n\nAuthentication\n\u2693\n\n\nThe current API supports only one type of authentication, user generated \nPersonal Access Tokens\n.\n\n\nRight now \nevery API endpoint requires authentication\n, there's no endpoint which you can call without including the authentication information, except the \"root\" URL (\nhttps://api.bitrise.io\n).\n\n\nTo acquire a Personal Access Token for your user, sign in with that user on \nbitrise.io\n, go to your \nAccount Settings\n page, and select the \nSecurity\n tab on the left side.\n\n\nHere you can manage your account's Two Factor Authentication settings, as well as your Personal Access Tokens.\n\n\nTo get started with the API simply click the \nGenerate new token\n button, and save the generated Personal Access Token somewhere safe.\n\n\nImportant note: the generated token is shown only once, when it's generated!\n There's no way to see the token value again! You can of course generate as many Access Tokens as you like, and delete the ones you don't need anymore.\n\n\nOnce you have the token you can start interacting with the API.\n\n\nTo provide the required access token you have to add a \nHEADER\n to your requests, with the key \nAuthorization\n and value \ntoken THE-ACCESS-TOKEN\n.\n\n\nAn example API call with auth, using \ncurl\n:\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' https://api.bitrise.io/v0.1/me\n\n\n\nResponse\n\u2693\n\n\nEvery endpoint responds with a JSON formatted response.\n\n\nPagination\n\u2693\n\n\nWhen you call an endpoint which returns a list of items you always have to be prepared that you might not get the whole list in a single response, you'll have to iterate through the \"pages\" to retrieve all the items.\n\n\nThe response of the endpoint will include a \npaging\n object, with \ntotal_item_count\n and \npage_item_limit\n properties, and if there's a \"next\" page available it'll also include a \nnext\n \"anchor\" item.\n\n\nExample:\n\n\n{\n  \ndata\n: [ ... ],\n  \npaging\n: {\n    \ntotal_item_count\n: 3,\n    \npage_item_limit\n: 2,\n    \nnext\n: \n518e869d56f2adfd\n\n  }\n}\n\n\n\nNote: the \nnext\n property of the \npaging\n object is only included if there's at least one more page available. If there's no \nnext\n property inside \npaging\n that means that there's no more page to retrieve.\n\n\nThe \npage_item_limit\n property can be set with the query parameter named \nlimit\n at the GET requests, so you can specify the size of the response pages. The default and also maximum value for this parameter is 50.\n\n\nExample:\n\n\n\n\nCalling \nhttps://api.bitrise.io/v0.1/me/apps\n will retrieve you the first page of your apps with size of 50.\n\n\nIf you call \nhttps://api.bitrise.io/v0.1/me/apps?limit=10\n, the response is also the first page of your apps, but it will contain only 10 elements.\n\n\n\n\nIf you want to iterate through all the items this is what you have to do:\n\n\n\n\nFirst call the endpoint without any pagination parameters\n\n\nFrom the response process the \npaging\n object.\n\n\nIf the \npaging\n object includes a \nnext\n item, simply call the exact same endpoint with an additional \nnext=\n query parameter, and pass the value you got in the response as the value of the \nnext\n parameter.\n\n\n\n\nThat's all.\n\n\nA quick example, iterating through all of your registered apps:\n\n\n\n\nFirst call \nhttps://api.bitrise.io/v0.1/me/apps\n\n\nProcess the items (\ndata\n property)\n\n\nThen check the \npaging\n (root) property.\n\n\nIf there's a \nnext\n property inside \npaging\n simply call the endpoint again, with the \nnext\n query parameter\n\n\nExample: \nhttps://api.bitrise.io/v0.1/me/apps?next=NEXTVALUE\n, where \nNEXTVALUE\n is the value of the \nnext\n property you got in your previous response.\n\n\n\n\n\n\nRepeate this until the \npaging\n object does not include a \nnext\n property, which means that the page you received was the last one.\n\n\n\n\nEndpoints\n\u2693\n\n\nRoot URLs\n\u2693\n\n\nBoth \n/\n and \n/v0.1\n are considered as root URLs, and return the same response at the moment (of course this will change in the future, once we have more than one version of the API).\n\n\nThese are the only endpoints which do not require authentication.\n\n\nExample \ncurl\n request:\n\n\ncurl https://api.bitrise.io/v0.1\n\n\n\nGET /me\n\u2693\n\n\nYou can use this endpoint to get information about your account (identified by the Access Token).\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/me'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \navatar_url\n: \nhttps://secure.gravatar.com/avatar/f50ae2f0652b92e9dbdcc7b8d9d348a0\n,\n    \nslug\n: \n8e82ac7601178f17\n,\n    \nusername\n: \napi-demo\n\n  }\n}\n\n\n\nGET /users/USER-SLUG\n\u2693\n\n\nGet information about a specific user account.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/users/USER-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \navatar_url\n: \nhttps://secure.gravatar.com/avatar/f50ae2f0652b92e9dbdcc7b8d9d348a0\n,\n    \nslug\n: \n8e82ac7601178f17\n,\n    \nusername\n: \napi-demo\n\n  }\n}\n\n\n\nGET /organizations\n\u2693\n\n\nList the organizations you are part of.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \navatar_icon_url\n: \nhttps://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-01.png\n,\n      \nname\n: \nAPIDemoOrg\n,\n      \nslug\n: \ne1ec3dea540bcf21\n\n    },\n    {\n      \navatar_icon_url\n: \nhttps://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-03.png\n,\n      \nname\n: \nSecondApiDemoOrg\n,\n      \nslug\n: \n04da60feea593f6c\n\n    }\n  ]\n}\n\n\n\nGET /organizations/ORG-SLUG\n\u2693\n\n\nGet information about a specific oraganization account.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations/USER-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \navatar_icon_url\n: \nhttps://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-01.png\n,\n    \nname\n: \nAPIDemoOrg\n,\n    \nslug\n: \ne1ec3dea540bcf21\n\n  }\n}\n\n\n\nGET /apps\n\u2693\n\n\nRetrieve the apps you have access to. This includes the apps created / owned by you, as well as apps where you're a Team member (either added directly, or through an Organization's Group). All the apps you have access to (similar to the Dashboard on \nbitrise.io\n.\n\n\nNote: the \n/me/apps\n endpoint is also working and the same as above, but it's deprecated\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps?limit=2'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \norganization\n,\n        \nname\n: \nAPIDemoOrg\n,\n        \nslug\n: \ne1ec3dea540bcf21\n\n      },\n      \nproject_type\n: \nios\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-ios-swift-xcode6\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git\n,\n      \nslug\n: \n93f256e365d929d3\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-ios-swift-xcode6\n\n    },\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \nuser\n,\n        \nname\n: \napi-demo\n,\n        \nslug\n: \n8e82ac7601178f17\n\n      },\n      \nproject_type\n: \nxamarin\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-xamarin-cross-platform\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git\n,\n      \nslug\n: \nf46e89061e967f27\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-xamarin-cross-platform\n\n    }\n  ],\n  \npaging\n: {\n    \nnext\n: \n13533d589b89fb4b\n,\n    \npage_item_limit\n: 2,\n    \ntotal_item_count\n: 5\n  }\n}\n\n\n\nSorting parameters for app list\n\u2693\n\n\nThere are two available sorting parameter for this endpoint:\n\n\n\n\ncreated_at\n:\n descending order by the \ncreated_at\n attribute (default)\n\n\nlast_build_at\n:\n it's ordered by \nlast_build_at\n attribute in descending order,\n\n\n\n\nExample \ncurl\n request\n\u2693\n\n\nRequest:\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps?limit=2\nsort_by=last_build_at'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \norganization\n,\n        \nname\n: \nAPIDemoOrg\n,\n        \nslug\n: \ne1ec3dea540bcf21\n\n      },\n      \nproject_type\n: \nios\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-ios-swift-xcode6\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git\n,\n      \nslug\n: \n93f256e365d929d3\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-ios-swift-xcode6\n\n    },\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \nuser\n,\n        \nname\n: \napi-demo\n,\n        \nslug\n: \n8e82ac7601178f17\n\n      },\n      \nproject_type\n: \nandroid\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-android-sdk22\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\n,\n      \nslug\n: \n669403bffbe35909\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-android-sdk22\n\n    }\n  ],\n  \npaging\n: {\n    \nnext\n: \n13533d589b89fb4b\n,\n    \npage_item_limit\n: 2,\n    \ntotal_item_count\n: 5\n  }\n}\n\n\n\nGET /users/USER-SLUG/apps\n\u2693\n\n\nAlso you can list apps for a specific user, obviously only those applicaitons with be listed in this response, which you have required rights. This endpoint works and responses the same as the \n/apps\n one, so you can use the same parameters too.\n\n\nNote: this endpoint doesn't work with the \n/me\n subroute\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/users/USER-SLUG/apps?limit=2'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \nuser\n,\n        \nname\n: \napi-demo\n,\n        \nslug\n: \n8e82ac7601178f17\n\n      },\n      \nproject_type\n: \nxamarin\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-xamarin-cross-platform\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git\n,\n      \nslug\n: \nf46e89061e967f27\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-xamarin-cross-platform\n\n    },\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \nuser\n,\n        \nname\n: \napi-demo\n,\n        \nslug\n: \n8e82ac7601178f17\n\n      },\n      \nproject_type\n: \nmacos\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-osx-10-12\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-osx-10-12.git\n,\n      \nslug\n: \n13533d589b89fb4b\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-osx-10-12\n\n    }\n  ],\n  \npaging\n: {\n    \nnext\n: \n669403bffbe35909\n,\n    \npage_item_limit\n: 2,\n    \ntotal_item_count\n: 4\n  }\n}\n\n\n\nGET /organizations/ORG-SLUG/apps\n\u2693\n\n\nAlso you can list apps for a specific oraganization, it works the very same way as the \n/users/USER-SLUG/apps\n one.\n\n\nNote: this endpoint doesn't work with the \n/me\n subroute\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations/USER-SLUG/apps?limit=2'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nis_disabled\n: false,\n      \nis_public\n: false,\n      \nowner\n: {\n        \naccount_type\n: \norganization\n,\n        \nname\n: \nAPIDemoOrg\n,\n        \nslug\n: \ne1ec3dea540bcf21\n\n      },\n      \nproject_type\n: \nios\n,\n      \nprovider\n: \ngithub\n,\n      \nrepo_owner\n: \nbitrise-samples\n,\n      \nrepo_slug\n: \nsample-apps-ios-swift-xcode6\n,\n      \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git\n,\n      \nslug\n: \n93f256e365d929d3\n,\n      \nstatus\n: 1,\n      \ntitle\n: \nsample-apps-ios-swift-xcode6\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 2,\n    \ntotal_item_count\n: 1\n  }\n}\n\n\n\nPOST /apps/register\n\u2693\n\n\nAdd a new application\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG' -d '{\nprovider\n:\ngithub\n,\nis_public\n:false,\nrepo_url\n:\ngit@github.com:api_demo/example-repository.git\n,\ntype\n:\ngit\n,\ngit_repo_slug\n:\nexample-repository\n,\ngit_owner\n:\napi_demo\n}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \nstatus\n: \nok\n,\n  \nslug\n: \n022d8a3124f1225d\n\n}\n\n\n\nPOST /apps/APP-SLUG/register-ssh-key\n\u2693\n\n\nRegister an SSH key to a specific application\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/register-ssh-key' -d '{\nauth_ssh_private_key\n:\nyour-private-ssh-key\n,\nauth_ssh_public_key\n:\nyour-public-ssh-key\n,\nis_register_key_into_provider_service\n:false}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \nstatus\n: \nok\n,\n}\n\n\n\nPOST /apps/APP-SLUG/register-webhook\n\u2693\n\n\nRegister a webhook for a specific application\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/register-webhook'\n\n\n\nExample response\n\u2693\n\n\n{\n  \nstatus\n: \nok\n,\n}\n\n\n\nGET /apps/{APP-SLUG}\n\u2693\n\n\nGet a specific app's data.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nis_disabled\n: false,\n    \nis_public\n: false,\n    \nowner\n: {\n      \naccount_type\n: \nuser\n,\n      \nname\n: \napi-demo\n,\n      \nslug\n: \n8e82ac7601178f17\n\n    },\n    \nproject_type\n: \nandroid\n,\n    \nprovider\n: \ngithub\n,\n    \nrepo_owner\n: \nbitrise-samples\n,\n    \nrepo_slug\n: \nsample-apps-android-sdk22\n,\n    \nrepo_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\n,\n    \nslug\n: \n669403bffbe35909\n,\n    \nstatus\n: 1,\n    \ntitle\n: \nsample-apps-android-sdk22\n\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/bitrise.yml\n\u2693\n\n\nDownload the bitrise.yml of your application.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/bitrise.yml'\n\n\n\nExample response\n\u2693\n\n\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: sample-apps-osx-10-12.xcodeproj\n    opts:\n      is_expand: false\n  - BITRISE_SCHEME: sample-apps-osx-10-12\n    opts:\n      is_expand: false\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\nformat_version: 1.3.1\ntrigger_map:\n- push_branch: '*'\n  workflow: primary\n- pull_request_source_branch: '*'\n  workflow: primary\nworkflows:\n  deploy:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.2: {}\n    - script@1.1.3:\n        title: Do anything with Script step\n    - certificate-and-profile-installer@1.8.4: {}\n    - xcode-test-mac:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - xcode-archive-mac@1.4.0:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - deploy-to-bitrise-io@1.2.9: {}\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.2: {}\n    - script@1.1.3:\n        title: Do anything with Script step\n    - certificate-and-profile-installer@1.8.4: {}\n    - xcode-test-mac@1.1.0:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - deploy-to-bitrise-io@1.2.9: {}\n\n\n\n\nPOST /apps/{APP-SLUG}/bitrise.yml\n\u2693\n\n\nUpload a new bitrise.yml for your application.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/bitrise.yml' -d '{\napp_config_datastore_yaml\n:\napp:\\n  envs:\\n  - BITRISE_PROJECT_PATH: sample-apps-osx-10-12.xcodeproj\\n    opts:\\n      is_expand: false\\n  - BITRISE_SCHEME: sample-apps-osx-10-12\\n    opts:\\n      is_expand: false\\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\\nformat_version: 1.3.1\\ntrigger_map:\\n- push_branch: '*'\\n  workflow: primary\\n- pull_request_source_branch: '*'\\n  workflow: primary\\nworkflows:\\n  deploy:\\n    steps:\\n    - activate-ssh-key@3.1.1:\\n        run_if: '{{getenv \\\nSSH_RSA_PRIVATE_KEY\\\n | ne \\\n\\\n}}'\\n    - git-clone@3.4.2: {}\\n    - script@1.1.3:\\n        title: Do anything with Script step\\n    - certificate-and-profile-installer@1.8.4: {}\\n    - xcode-test-mac:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - xcode-archive-mac@1.4.0:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - deploy-to-bitrise-io@1.2.9: {}\\n  primary:\\n    steps:\\n    - activate-ssh-key@3.1.1:\\n        run_if: '{{getenv \\\nSSH_RSA_PRIVATE_KEY\\\n | ne \\\n\\\n}}'\\n    - git-clone@3.4.2: {}\\n    - script@1.1.3:\\n        title: Do anything with Script step\\n    - certificate-and-profile-installer@1.8.4: {}\\n    - xcode-test-mac@1.1.0:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - deploy-to-bitrise-io@1.2.9: {}\\n\n}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \napp\n: {\n    \nenvs\n: [\n      {\n        \nBITRISE_PROJECT_PATH\n: \nsample-apps-osx-10-12.xcodeproj\n,\n        \nopts\n: {\n          \nis_expand\n: false\n        }\n      },\n      {\n        \nBITRISE_SCHEME\n: \nsample-apps-osx-10-12\n,\n        \nopts\n: {\n          \nis_expand\n: false\n        }\n      }\n    ]\n  },\n  \ndefault_step_lib_source\n: \nhttps://github.com/bitrise-io/bitrise-steplib.git\n,\n  \nformat_version\n: \n1.3.1\n,\n  \ntrigger_map\n: [\n    {\n      \npush_branch\n: \n*\n,\n      \nworkflow\n: \nprimary\n\n    },\n    {\n      \npull_request_source_branch\n: \n*\n,\n      \nworkflow\n: \nprimary\n\n    }\n  ],\n  \nworkflows\n: {\n    \ndeploy\n: {\n      \nsteps\n: [\n        {\n          \nactivate-ssh-key@3.1.1\n: {\n            \nrun_if\n: \n{{getenv \\\nSSH_RSA_PRIVATE_KEY\\\n | ne \\\n\\\n}}\n\n          }\n        },\n        {\n          \ngit-clone@3.4.2\n: {}\n        },\n        {\n          \nscript@1.1.3\n: {\n            \ntitle\n: \nDo anything with Script step\n\n          }\n        },\n        {\n          \ncertificate-and-profile-installer@1.8.4\n: {}\n        },\n        {\n          \nxcode-test-mac\n: {\n            \ninputs\n: [\n              {\n                \nproject_path\n: \n$BITRISE_PROJECT_PATH\n\n              },\n              {\n                \nscheme\n: \n$BITRISE_SCHEME\n\n              }\n            ]\n          }\n        },\n        {\n          \nxcode-archive-mac@1.4.0\n: {\n            \ninputs\n: [\n              {\n                \nproject_path\n: \n$BITRISE_PROJECT_PATH\n\n              },\n              {\n                \nscheme\n: \n$BITRISE_SCHEME\n\n              }\n            ]\n          }\n        },\n        {\n          \ndeploy-to-bitrise-io@1.2.9\n: {}\n        }\n      ]\n    },\n    \nprimary\n: {\n      \nsteps\n: [\n        {\n          \nactivate-ssh-key@3.1.1\n: {\n            \nrun_if\n: \n{{getenv \\\nSSH_RSA_PRIVATE_KEY\\\n | ne \\\n\\\n}}\n\n          }\n        },\n        {\n          \ngit-clone@3.4.2\n: {}\n        },\n        {\n          \nscript@1.1.3\n: {\n            \ntitle\n: \nDo anything with Script step\n\n          }\n        },\n        {\n          \ncertificate-and-profile-installer@1.8.4\n: {}\n        },\n        {\n          \nxcode-test-mac@1.1.0\n: {\n            \ninputs\n: [\n              {\n                \nproject_path\n: \n$BITRISE_PROJECT_PATH\n\n              },\n              {\n                \nscheme\n: \n$BITRISE_SCHEME\n\n              }\n            ]\n          }\n        },\n        {\n          \ndeploy-to-bitrise-io@1.2.9\n: {}\n        }\n      ]\n    }\n  }\n}\n\n\n\nPOST /apps/{APP-SLUG}/provisioning-profiles\n\u2693\n\n\nAdd provisioning profile for a specific application. This is the first phase of the provisioning profile upload process, calling this endpoint a new provisioning profile object is created and its slug and a presigned upload URL will be retrieved.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles' -d '{\nupload_file_name\n:\nsample.provisionprofile\n,\nupload_file_size\n:2047}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample.provisionprofile\n,\n    \nupload_file_size\n:2047,\n    \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE6W\n,\n    \nprocessed\n:false,\n    \nis_expose\n:true,\n    \nis_protected\n:false,\n    \nupload_url\n:\nhttps://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180216T124240Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=content-length%3Bhost\nX-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\n\n  }\n}\n\n\n\nAfter this call you have to upload to AWS your provisioning profile file with the presigned URL.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -T sample.provisionprofile 'https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180216T124240Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=content-length%3Bhost\nX-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e'\n\n\n\nPOST /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}/uploaded\n\u2693\n\n\nAfter the provisioning profile is uploaded to AWS, you have to confirm the upload with this endpoint.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG/uploaded'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample.provisionprofile\n,\n    \nupload_file_size\n:2047,\n    \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE6W\n,\n    \nprocessed\n:false,\n    \nis_expose\n:true,\n    \nis_protected\n:false\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/provisioning-profiles\n\u2693\n\n\nList provisioning profiles for a specific application.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nupload_file_name\n:\nsample.provisionprofile\n,\n      \nupload_file_size\n:2047,\n      \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE6W\n,\n      \nprocessed\n:false,\n      \nis_expose\n:true,\n      \nis_protected\n:false\n    },\n    {\n      \nupload_file_name\n:\nsample2.provisionprofile\n,\n      \nupload_file_size\n:2047,\n      \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE5T\n,\n      \nprocessed\n:true,\n      \nis_expose\n:true,\n      \nis_protected\n:true\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 2\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}\n\u2693\n\n\nGet a specific provisioning profile's data.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nupload_file_name\n:\nsample.provisionprofile\n,\n    \nupload_file_size\n:2047,\n    \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE6W\n,\n    \nprocessed\n:false,\n    \nis_expose\n:true,\n    \nis_protected\n:false,\n    \ndownload_url\n:\nhttps://concrete-userfiles-production.s3-us-west-2.amazonaws.com/prov_profile_documents/uploads/80144/original/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180322T091652Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=host\nX-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\n\n  }\n}\n\n\n\nNote: \ndownload_url\n is generated only when the provisioning profile's \nis_protected\n attribute is \nfalse\n\n\nPATCH /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}\n\u2693\n\n\nSet a specific subset of provisioning profile attributes. You can update the \nis_protected\n, \nis_expose\n and \nprocessed\n attributes of a provisioning profile object. There are some constraints:\n\n\n\n\nonce the \nis_protected\n flag is set with value \ntrue\n it cannot be changed anymore\n\n\nwhen the value of \nis_protected\n is \ntrue\n, then the \nis_expose\n flag cannot be set to other value\n\n\nonce \nprocessed\n flag set to true, then its value cannot be changed anymore\n\n\n\n\nViolating these constraints the response will be \nBad Request\n.\n\nNote: the previous \n/apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}/uploaded\n endpoint will have the same effect as this one with the request body '{\"processed\":true}'\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X PATCH -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG -d '{\nis_protected\n:true}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample.provisionprofile\n,\n    \nupload_file_size\n:2047,\n    \nslug\n:\n01C6FA6P6HRQT5PQ8RMMVVXE6W\n,\n    \nprocessed\n:false,\n    \nis_expose\n:true,\n    \nis_protected\n:true\n  }\n}\n\n\n\nPOST /apps/{APP-SLUG}/build-certificates\n\u2693\n\n\nAdd certificate file for a specific application. This is the first phase of the certificate file upload process, calling this endpoint a new certificate object is created and its slug and a presigned upload URL will be retrieved.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates' -d '{\nupload_file_name\n:\nsample_cert.p12\n,\nupload_file_size\n:1023}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample_cert.p12\n,\n    \nupload_file_size\n:1023,\n    \nslug\n:\n01C6FA2R4CB772QTDETBE0MENP\n,\n    \nprocessed\n:false,\n    \ncertificate_password\n:\n,\n    \nis_expose\n:true,\n    \nis_protected\n:false,\n    \nupload_url\n:\nhttps://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180216T124240Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=content-length%3Bhost\nX-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\n\n  }\n}\n\n\n\nAfter this call you have to upload to AWS your certificate file with the presigned URL.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -T sample_cert.p12 'https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180216T124240Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=content-length%3Bhost\nX-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\n\n\n\nPOST /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}/uploaded\n\u2693\n\n\nAfter the certificate file is uploaded to AWS, you have to confirm the upload with this endpoint.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG/uploaded'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample_cert.p12\n,\n    \nupload_file_size\n:1023,\n    \nslug\n:\n01C6FA2R4CB772QTDETBE0MENP\n,\n    \nprocessed\n:true,\n    \ncertificate_password\n:\n,\n    \nis_expose\n:true,\n    \nis_protected\n:false\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/build-certificates\n\u2693\n\n\nList build certificates for a specific application.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nupload_file_name\n:\nsample_cert.p12\n,\n      \nupload_file_size\n:1023,\n      \nslug\n:\n01C6FA2R4CB772QTDETBE0MENP\n,\n      \nprocessed\n:true,\n      \ncertificate_password\n:\n,\n      \nis_expose\n:true,\n      \nis_protected\n:false\n    },\n    {\n      \nupload_file_name\n:\nsample_cert_2.p12\n,\n      \nupload_file_size\n:1023,\n      \nslug\n:\n01C6FA2R4CB772QTDETBE0MEMO\n,\n      \nprocessed\n:true,\n      \ncertificate_password\n:\ns0m3-s3cr3t-ch4r4ct3r5\n,\n      \nis_expose\n:true,\n      \nis_protected\n:true\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 2\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}\n\u2693\n\n\nGet a specific build certificate's data.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nupload_file_name\n:\nsample_cert.p12\n,\n    \nupload_file_size\n:1023,\n    \nslug\n:\n01C6FA2R4CB772QTDETBE0MENP\n,\n    \nprocessed\n:true,\n    \ncertificate_password\n:\n,\n    \nis_expose\n:true,\n    \nis_protected\n:false,\n    \ndownload_url\n:\nhttps://concrete-userfiles-production.s3-us-west-2.amazonaws.com/prov_profile_documents/uploads/80144/original/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256\nX-Amz-Content-Sha256=UNSIGNED-PAYLOAD\nX-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request\nX-Amz-Date=20180322T091652Z\nX-Amz-Expires=600\nX-Amz-SignedHeaders=host\nX-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\n\n  }\n}\n\n\n\nNote: \ndownload_url\n is generated only when the build certificate's \nis_protected\n attribute is \nfalse\n\n\nPATCH /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}\n\u2693\n\n\nSet a specific subset of build certificate attributes. You can update the \nis_protected\n, \nis_expose\n, \ncertificate_password\n and \nprocessed\n attributes of a build certificate object. There are some constraints:\n\n\n\n\nonce the \nis_protected\n flag is set with value \ntrue\n it cannot be changed anymore\n\n\nwhen the value of \nis_protected\n is \ntrue\n, then the \nis_expose\n flag cannot be set to other value\n\n\nonce \nprocessed\n flag set to true, then its value cannot be changed anymore\n\n\n\n\nViolating these constraints the response will be \nBad Request\n.\n\nNote: the previous \n/apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}/uploaded\n endpoint will have the same effect as this one with the request body '{\"processed\":true}'\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X PATCH -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG -d '{\nis_protected\n:true}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n:{\n    \nupload_file_name\n:\nsample_cert.p12\n,\n    \nupload_file_size\n:1023,\n    \nslug\n:\n01C6FA2R4CB772QTDETBE0MENP\n,\n    \nprocessed\n:true,\n    \ncertificate_password\n:\n,\n    \nis_expose\n:true,\n    \nis_protected\n:true\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/builds\n\u2693\n\n\nGet the builds of a specific app.\n\n\nStatus codes (\nstatus\n) and related status texts (\nstatus_text\n):\n\n\n\n\nstatus\n=0: Not finished yet.\n\n\nIf \nis_on_hold\n = \ntrue\n: the build did not start yet (\nstatus_text\n=\non-hold\n)\n\n\nIf \nis_on_hold\n = \nfalse\n: the build is running (\nstatus_text\n=\nin-progress\n).\n\n\n\n\n\n\nstatus\n=1: Build finished, with success (\nstatus_text\n=\nsuccess\n).\n\n\nstatus\n=2: Build finished, with error (\nstatus_text\n=\nerror\n).\n\n\nstatus\n=3: Build was aborted (\nstatus_text\n=\naborted\n).\n\n\n\n\nBuild times:\n\n\n\n\nthe actual build time is the difference of \nfinished_at\n and \nenvironment_prepare_finished_at\n\n\ntriggered_at\n is the time when the build was registered, it's always set, for every build. \nOther build times might be \nnil\n, if the build did not get to that point yet.\n\n\nstarted_on_worker_at\n is the time of when a worker started to process the build. The difference between \nstarted_on_worker_at\n and \ntriggered_at\n is usually for how long the build was \n\"on hold\"\n (rarely it can also include \"waiting for worker\" but that shouldn't happen under usual circumstances).\n\n\nenvironment_prepare_finished_at\n is the time when the environment of the build was fully prepared; the build starts right after this, usually under a second.\n\n\nfinished_at\n is when the build finished (with success or error, or the time of the \"abort\" if it was aborted). \nfinished_at\n is \nnil\n in case of a running build.\n\n\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?limit=3'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 44,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: null,\n      \nfinished_at\n: null,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n9d622a33d82807e4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:44:41Z\n,\n      \nstatus\n: 0,\n      \nstatus_text\n: \nin-progress\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:44:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 43,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-07-16T06:33:58Z\n,\n      \nfinished_at\n: \n2018-07-16T06:35:19Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n0e78f1184bfd58e1\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:33:12Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:33:11Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 42,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-07T10:47:36Z\n,\n      \nfinished_at\n: \n2018-06-07T10:48:59Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n62e607b18c435abf\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-07T10:46:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-07T10:46:50Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \nnext\n: \ndd30bebef83bd8e7\n,\n    \npage_item_limit\n: 3,\n    \ntotal_item_count\n: 44\n  }\n}\n\n\n\nFiltering parameters for build list\n\u2693\n\n\nIt's possible to filter the builds with URL query parameters. These parameters evaluated with a logical AND operator.\n\n\nAvailable parameters:\n\u2693\n\n\n\n\nstatus\n (integer): In the response there will be only the builds with a certain status.\n\n\nbranch\n (string): Retrieves the builds from the given branch.\n\n\ntrigger_event_type\n (string): With this parameter the builds can be filtered based on the trigger event. Data type: \nstring\n The available values are the following:\n\n\npush\n: when the response contains only the builds which were triggered by a commit push\n\n\npull-request\n: when the response contains only the builds which were triggered by a pull request\n\n\npull_request_id\n (integer): This parameter specifies the pull request id of the actual build, works only if \ntrigger_event_type\n parameter is specified with the value \npull-request\n\n\nafter\n (integer): Giving this parameter, in the response there will be only those builds which were triggered after or at the given time. The value has to be passed as UNIX timestamp.\n\n\nbefore\n (integer): Similar to the previous one this filters by the time when the build was triggered, but this retrieves the ones before or at the given time. The value has to be passed as UNIX timestamp.\n\n\nworkflow\n (string): The response will contain only the builds triggered with the specified workflow.\n\n\ncommit_message\n (string): In the result set there will be the builds with the given commit message, this parameter is case insensitive and also retrieves the partial matches.\n\n\nbuild_number\n (string): Retrieves build with the specified actual build number parameter.\n\n\n\n\nExample \ncurl\n requests\n\u2693\n\n\nRequest with \nstatus\n filtering (aborted builds):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?status=3'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: canceled through the API\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 12,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nthis build will be aborted through the API\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-06-20T22:35:03Z\n,\n      \nfinished_at\n: \n2017-06-20T22:35:15Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nthis build will be aborted through the API\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nce86c8475d31d288\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-06-20T22:35:03Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-06-20T22:35:02Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: This is an example abort build\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 10,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nAbort example\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-05-30T15:47:17Z\n,\n      \nfinished_at\n: \n2017-05-30T15:47:32Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nAbort example\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n3247e2920496e846\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-05-30T15:47:17Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-05-30T15:47:17Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 2\n  }\n}\n\n\n\nRequest with \nbranch\n filtering (builds on \ndevelop\n branch):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?branch=develop'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ndevelop\n,\n      \nbuild_number\n: 15,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T07:46:00Z\n,\n      \nfinished_at\n: \n2017-08-17T07:47:25Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ndevelop\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n1e79f459d59ec74b\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T07:46:00Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T07:45:59Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 1\n  }\n}\n\n\n\nRequest with \ntrigger_event_type\n filtering (builds triggered by \npull request\n):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?trigger_event_type=pull-request'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 22,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-02-23T14:28:15Z\n,\n      \nfinished_at\n: \n2018-02-23T14:29:41Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n        \npull_request_head_branch\n: \npull/4/head\n,\n        \npull_request_id\n: 4,\n        \npull_request_merge_branch\n: \npull/4/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 4,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4\n,\n      \nslug\n: \n2a009816d8b62496\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-02-23T14:27:07Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-02-23T14:25:57Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ncreate_dev_file\n,\n      \nbuild_number\n: 17,\n      \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:48:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:50:13Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ncreate_dev_file\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n        \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n        \npull_request_head_branch\n: \npull/3/head\n,\n        \npull_request_id\n: 3,\n        \npull_request_merge_branch\n: \npull/3/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/slapec93/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \n62f841f1497f5f30\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:47:26Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:47:25Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 16,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:31:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:33:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \npull_request_id\n: 3\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \nb5e4e86ff62ef8ec\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:30:29Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:30:28Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 3\n  }\n}\n\n\n\nRequest with \nbefore\n filtering (builds triggered before 04.25.2017 1:34pm):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?before=1493127294'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 6,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nunwatch test\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T12:05:48Z\n,\n      \nfinished_at\n: \n2017-04-25T12:09:26Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nunwatch test\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ncabbf96b36031c45\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T12:04:38Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T12:04:37Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 5,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:48:15Z\n,\n      \nfinished_at\n: \n2017-04-25T11:51:47Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8b2a7f96da727174\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:46:44Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:59Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 4,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:43:18Z\n,\n      \nfinished_at\n: \n2017-04-25T11:46:42Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nde020764ecdc8e57\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:43:18Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:57Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 3,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:39:24Z\n,\n      \nfinished_at\n: \n2017-04-25T11:43:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n23c891eab2caad9c\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:38:11Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:54Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 2,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:34:52Z\n,\n      \nfinished_at\n: \n2017-04-25T11:38:10Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n851f3cfcded7e20f\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:34:52Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:52Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 1,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:06:55Z\n,\n      \nfinished_at\n: \n2017-04-25T11:10:47Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n51d5915205deede2\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:06:55Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:06:54Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 6\n  }\n}\n\n\n\nRequest with \nafter\n filtering (builds triggered after 06.20.2017 10:35pm):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?after=1497998102'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 44,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-07-16T06:44:42Z\n,\n      \nfinished_at\n: null,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n9d622a33d82807e4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:44:41Z\n,\n      \nstatus\n: 0,\n      \nstatus_text\n: \nin-progress\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:44:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 43,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-07-16T06:33:58Z\n,\n      \nfinished_at\n: \n2018-07-16T06:35:19Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n0e78f1184bfd58e1\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:33:12Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:33:11Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 42,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-07T10:47:36Z\n,\n      \nfinished_at\n: \n2018-06-07T10:48:59Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n62e607b18c435abf\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-07T10:46:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-07T10:46:50Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 41,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-07T07:55:34Z\n,\n      \nfinished_at\n: \n2018-06-07T07:57:17Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ndd30bebef83bd8e7\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-07T07:54:33Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-07T07:54:32Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 40,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T15:00:12Z\n,\n      \nfinished_at\n: \n2018-06-06T15:01:56Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n0e6eae3178fc404d\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T14:58:57Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T14:58:57Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 39,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T13:33:50Z\n,\n      \nfinished_at\n: \n2018-06-06T13:35:21Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n39b5ffcd4533efbf\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T13:32:57Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T13:32:00Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 38,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T13:31:30Z\n,\n      \nfinished_at\n: \n2018-06-06T13:32:55Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \na42187e56ecb05bc\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T13:30:36Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T13:30:36Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 37,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-28T09:25:44Z\n,\n      \nfinished_at\n: \n2018-05-28T09:27:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nb5d8ecabd4231264\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-28T09:24:49Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-28T09:24:49Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 36,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-28T08:48:48Z\n,\n      \nfinished_at\n: \n2018-05-28T08:50:37Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nfc3faedc50a610ea\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-28T08:47:50Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-28T08:47:49Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 35,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-14T12:12:26Z\n,\n      \nfinished_at\n: \n2018-05-14T12:13:57Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2a0b62127f2a91ec\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-14T12:11:25Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-14T12:11:24Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 34,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T14:42:28Z\n,\n      \nfinished_at\n: \n2018-04-19T14:44:00Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n226f809ae60c822d\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T14:41:22Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T14:41:22Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 33,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T11:43:51Z\n,\n      \nfinished_at\n: \n2018-04-19T11:45:14Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n366312bf17cff615\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T11:43:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T11:42:54Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 32,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T11:42:27Z\n,\n      \nfinished_at\n: \n2018-04-19T11:43:50Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n5a4c6dfb253fd4df\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T11:41:26Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T11:41:25Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 31,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T10:03:39Z\n,\n      \nfinished_at\n: \n2018-04-19T10:05:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8d01153a2176eb92\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T10:02:27Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T10:02:26Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 30,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T09:55:59Z\n,\n      \nfinished_at\n: \n2018-04-19T09:57:21Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n7b0d2eceefb419ff\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T09:55:01Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T09:55:00Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 29,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T08:14:06Z\n,\n      \nfinished_at\n: \n2018-04-19T08:15:53Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ne2c7befadbb34320\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T08:12:42Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T08:12:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 28,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T12:14:39Z\n,\n      \nfinished_at\n: \n2018-04-11T12:16:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2669ae9ae4185120\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T12:13:40Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T12:13:39Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 27,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:18:51Z\n,\n      \nfinished_at\n: \n2018-04-11T11:20:32Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nef73302cb5127653\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:17:19Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:13:56Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 26,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:15:55Z\n,\n      \nfinished_at\n: \n2018-04-11T11:17:18Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nd7084f3be385d180\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:14:34Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:12:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 25,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:13:10Z\n,\n      \nfinished_at\n: \n2018-04-11T11:14:33Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \neddd8244fecb7eeb\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:12:08Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:12:08Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 24,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T10:54:10Z\n,\n      \nfinished_at\n: \n2018-04-11T10:55:27Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2f05c9e0f85dfc60\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T10:52:56Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T10:52:56Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 23,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-03-08T11:18:53Z\n,\n      \nfinished_at\n: \n2018-03-08T11:20:17Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nfe2a0055cc8aa878\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-03-08T11:18:53Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-03-08T11:18:10Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 22,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-02-23T14:28:15Z\n,\n      \nfinished_at\n: \n2018-02-23T14:29:41Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n        \npull_request_head_branch\n: \npull/4/head\n,\n        \npull_request_id\n: 4,\n        \npull_request_merge_branch\n: \npull/4/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 4,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4\n,\n      \nslug\n: \n2a009816d8b62496\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-02-23T14:27:07Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-02-23T14:25:57Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 21,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-02-23T14:25:52Z\n,\n      \nfinished_at\n: \n2018-02-23T14:27:06Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ndc60d8be63011e29\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-02-23T14:25:52Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-02-23T14:25:51Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 20,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \ngenerate an APK\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-11-08T13:24:33Z\n,\n      \nfinished_at\n: \n2017-11-08T13:26:54Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \ngenerate an APK\n,\n        \nworkflow_id\n: \ngen-apk\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nddf4134555e833d8\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-11-08T13:24:33Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-11-08T13:24:33Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \ngen-apk\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 19,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T09:13:11Z\n,\n      \nfinished_at\n: \n2017-08-17T09:14:37Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nsecondary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8ee5e483b79fdfd4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T09:12:05Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T09:10:41Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nsecondary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 18,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T09:10:31Z\n,\n      \nfinished_at\n: \n2017-08-17T09:12:04Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n601e080954bbd57b\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T09:09:24Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T09:09:23Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ncreate_dev_file\n,\n      \nbuild_number\n: 17,\n      \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:48:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:50:13Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ncreate_dev_file\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n        \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n        \npull_request_head_branch\n: \npull/3/head\n,\n        \npull_request_id\n: 3,\n        \npull_request_merge_branch\n: \npull/3/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/slapec93/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \n62f841f1497f5f30\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:47:26Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:47:25Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 16,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:31:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:33:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \npull_request_id\n: 3\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \nb5e4e86ff62ef8ec\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:30:29Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:30:28Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ndevelop\n,\n      \nbuild_number\n: 15,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T07:46:00Z\n,\n      \nfinished_at\n: \n2017-08-17T07:47:25Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ndevelop\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n1e79f459d59ec74b\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T07:46:00Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T07:45:59Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 14,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-07-19T16:29:59Z\n,\n      \nfinished_at\n: \n2017-07-19T16:31:38Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n9fb8eaaa4bdd3763\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-07-19T16:28:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-07-19T16:28:50Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 13,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-07-19T16:26:33Z\n,\n      \nfinished_at\n: \n2017-07-19T16:27:50Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n78c605ea44677118\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-07-19T16:23:01Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-07-19T16:23:00Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: canceled through the API\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 12,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nthis build will be aborted through the API\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-06-20T22:35:03Z\n,\n      \nfinished_at\n: \n2017-06-20T22:35:15Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nthis build will be aborted through the API\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nce86c8475d31d288\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-06-20T22:35:03Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-06-20T22:35:02Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 33\n  }\n}\n\n\n\nRequest with \nworkflow\n filtering (builds triggered with \nsecondary\n workflow):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?workflow=secondary'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 19,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T09:13:11Z\n,\n      \nfinished_at\n: \n2017-08-17T09:14:37Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nsecondary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8ee5e483b79fdfd4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T09:12:05Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T09:10:41Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nsecondary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 1\n  }\n}\n\n\n\nRequest with \ncommit_message\n filtering (builds with commit message __):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?commit_message=build%20will%20be%20aborted'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: canceled through the API\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 12,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nthis build will be aborted through the API\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-06-20T22:35:03Z\n,\n      \nfinished_at\n: \n2017-06-20T22:35:15Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nthis build will be aborted through the API\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nce86c8475d31d288\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-06-20T22:35:03Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-06-20T22:35:02Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 1\n  }\n}\n\n\n\nRequest with \nbuild_number\n filtering (builds with commit message __):\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?build_number=3'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 3,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:39:24Z\n,\n      \nfinished_at\n: \n2017-04-25T11:43:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n23c891eab2caad9c\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:38:11Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:54Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 1\n  }\n}\n\n\n\nSorting parameters for build list\n\u2693\n\n\nThere are two available sorting parameter for this endpoint:\n\n\n\n\ncreated_at\n:\n descending order by the \ncreated_at\n attribute (default setting)\n\n\nrunning_first\n:\n it's also ordered by \ncreated_at\n in descending order, but all running builds are listed first and then the builds with other status\n\n\n\n\nNote: sorting the list by \nrunning_first\n doesn't support paging parameters\n\n\nExample \ncurl\n request\n\u2693\n\n\nRequest:\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?sort_by=running_first'\n\n\n\nResponse:\n\n\n{\n  \ndata\n: [\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 44,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-07-16T06:44:42Z\n,\n      \nfinished_at\n: null,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n9d622a33d82807e4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:44:41Z\n,\n      \nstatus\n: 0,\n      \nstatus_text\n: \nin-progress\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:44:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 43,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-07-16T06:33:58Z\n,\n      \nfinished_at\n: \n2018-07-16T06:35:19Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n0e78f1184bfd58e1\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-07-16T06:33:12Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-07-16T06:33:11Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 42,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-07T10:47:36Z\n,\n      \nfinished_at\n: \n2018-06-07T10:48:59Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n62e607b18c435abf\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-07T10:46:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-07T10:46:50Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 41,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-07T07:55:34Z\n,\n      \nfinished_at\n: \n2018-06-07T07:57:17Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ndd30bebef83bd8e7\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-07T07:54:33Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-07T07:54:32Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 40,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T15:00:12Z\n,\n      \nfinished_at\n: \n2018-06-06T15:01:56Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n0e6eae3178fc404d\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T14:58:57Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T14:58:57Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 39,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T13:33:50Z\n,\n      \nfinished_at\n: \n2018-06-06T13:35:21Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n39b5ffcd4533efbf\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T13:32:57Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T13:32:00Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 38,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-06-06T13:31:30Z\n,\n      \nfinished_at\n: \n2018-06-06T13:32:55Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \na42187e56ecb05bc\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-06-06T13:30:36Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-06-06T13:30:36Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 37,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-28T09:25:44Z\n,\n      \nfinished_at\n: \n2018-05-28T09:27:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nb5d8ecabd4231264\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-28T09:24:49Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-28T09:24:49Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 36,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-28T08:48:48Z\n,\n      \nfinished_at\n: \n2018-05-28T08:50:37Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nfc3faedc50a610ea\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-28T08:47:50Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-28T08:47:49Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 35,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-05-14T12:12:26Z\n,\n      \nfinished_at\n: \n2018-05-14T12:13:57Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2a0b62127f2a91ec\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-05-14T12:11:25Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-05-14T12:11:24Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 34,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T14:42:28Z\n,\n      \nfinished_at\n: \n2018-04-19T14:44:00Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n226f809ae60c822d\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T14:41:22Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T14:41:22Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 33,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T11:43:51Z\n,\n      \nfinished_at\n: \n2018-04-19T11:45:14Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n366312bf17cff615\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T11:43:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T11:42:54Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 32,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T11:42:27Z\n,\n      \nfinished_at\n: \n2018-04-19T11:43:50Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n5a4c6dfb253fd4df\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T11:41:26Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T11:41:25Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 31,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T10:03:39Z\n,\n      \nfinished_at\n: \n2018-04-19T10:05:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8d01153a2176eb92\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T10:02:27Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T10:02:26Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 30,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T09:55:59Z\n,\n      \nfinished_at\n: \n2018-04-19T09:57:21Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n7b0d2eceefb419ff\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T09:55:01Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T09:55:00Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 29,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-19T08:14:06Z\n,\n      \nfinished_at\n: \n2018-04-19T08:15:53Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ne2c7befadbb34320\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-19T08:12:42Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-19T08:12:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 28,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T12:14:39Z\n,\n      \nfinished_at\n: \n2018-04-11T12:16:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2669ae9ae4185120\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T12:13:40Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T12:13:39Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 27,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:18:51Z\n,\n      \nfinished_at\n: \n2018-04-11T11:20:32Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nef73302cb5127653\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:17:19Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:13:56Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 26,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:15:55Z\n,\n      \nfinished_at\n: \n2018-04-11T11:17:18Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nd7084f3be385d180\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:14:34Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:12:41Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 25,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T11:13:10Z\n,\n      \nfinished_at\n: \n2018-04-11T11:14:33Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \neddd8244fecb7eeb\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T11:12:08Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T11:12:08Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 24,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2018-04-11T10:54:10Z\n,\n      \nfinished_at\n: \n2018-04-11T10:55:27Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nprimary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2f05c9e0f85dfc60\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-04-11T10:52:56Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-04-11T10:52:56Z\n,\n      \ntriggered_by\n: \nbitrise_api_doc\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 23,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-03-08T11:18:53Z\n,\n      \nfinished_at\n: \n2018-03-08T11:20:17Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nfe2a0055cc8aa878\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-03-08T11:18:53Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-03-08T11:18:10Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 22,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-02-23T14:28:15Z\n,\n      \nfinished_at\n: \n2018-02-23T14:29:41Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n        \npull_request_head_branch\n: \npull/4/head\n,\n        \npull_request_id\n: 4,\n        \npull_request_merge_branch\n: \npull/4/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 4,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4\n,\n      \nslug\n: \n2a009816d8b62496\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-02-23T14:27:07Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-02-23T14:25:57Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ngradle-plugin-v3\n,\n      \nbuild_number\n: 21,\n      \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \ncommit_message\n: \ngradle android plugin v3, gradle v4\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n      \nenvironment_prepare_finished_at\n: \n2018-02-23T14:25:52Z\n,\n      \nfinished_at\n: \n2018-02-23T14:27:06Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ngradle-plugin-v3\n,\n        \ncommit_hash\n: \ncad2bc7b90085a9cfab58bbc7ead52ea913b9c13\n,\n        \ncommit_message\n: \ngradle android plugin v3, gradle v4\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ndc60d8be63011e29\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2018-02-23T14:25:52Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2018-02-23T14:25:51Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 20,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \ngenerate an APK\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-11-08T13:24:33Z\n,\n      \nfinished_at\n: \n2017-11-08T13:26:54Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \ngenerate an APK\n,\n        \nworkflow_id\n: \ngen-apk\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nddf4134555e833d8\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-11-08T13:24:33Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-11-08T13:24:33Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \ngen-apk\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 19,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T09:13:11Z\n,\n      \nfinished_at\n: \n2017-08-17T09:14:37Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \nworkflow_id\n: \nsecondary\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8ee5e483b79fdfd4\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T09:12:05Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T09:10:41Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nsecondary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 18,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T09:10:31Z\n,\n      \nfinished_at\n: \n2017-08-17T09:12:04Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n601e080954bbd57b\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T09:09:24Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T09:09:23Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ncreate_dev_file\n,\n      \nbuild_number\n: 17,\n      \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a\n,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:48:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:50:13Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ncreate_dev_file\n,\n        \nbranch_dest\n: \nmaster\n,\n        \ncommit_hash\n: \nb170936b1281a1cfd01fd7d19559793aae1b891a\n,\n        \ncommit_message\n: \nCreate dev.txt\\n\\nAdd a file\n,\n        \npull_request_head_branch\n: \npull/3/head\n,\n        \npull_request_id\n: 3,\n        \npull_request_merge_branch\n: \npull/3/merge\n,\n        \npull_request_repository_url\n: \nhttps://github.com/slapec93/sample-apps-android-sdk22.git\n\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \n62f841f1497f5f30\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:47:26Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:47:25Z\n,\n      \ntriggered_by\n: \nwebhook\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 16,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T08:31:31Z\n,\n      \nfinished_at\n: \n2017-08-17T08:33:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \npull_request_id\n: 3\n      },\n      \npull_request_id\n: 3,\n      \npull_request_target_branch\n: \nmaster\n,\n      \npull_request_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3\n,\n      \nslug\n: \nb5e4e86ff62ef8ec\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T08:30:29Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T08:30:28Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \ndevelop\n,\n      \nbuild_number\n: 15,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-08-17T07:46:00Z\n,\n      \nfinished_at\n: \n2017-08-17T07:47:25Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \ndevelop\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n1e79f459d59ec74b\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-08-17T07:46:00Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-08-17T07:45:59Z\n,\n      \ntriggered_by\n: \ncurl\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 14,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-07-19T16:29:59Z\n,\n      \nfinished_at\n: \n2017-07-19T16:31:38Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n9fb8eaaa4bdd3763\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-07-19T16:28:51Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-07-19T16:28:50Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 13,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-07-19T16:26:33Z\n,\n      \nfinished_at\n: \n2017-07-19T16:27:50Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n78c605ea44677118\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-07-19T16:23:01Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-07-19T16:23:00Z\n,\n      \ntriggered_by\n: \nmanual-api-demo\n,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: canceled through the API\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 12,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nthis build will be aborted through the API\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-06-20T22:35:03Z\n,\n      \nfinished_at\n: \n2017-06-20T22:35:15Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nthis build will be aborted through the API\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nce86c8475d31d288\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-06-20T22:35:03Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-06-20T22:35:02Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 11,\n      \ncommit_hash\n: \nb4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n      \ncommit_message\n: \nAPI Demo - commit hash example\\n\\nThis build has a specified commit hash\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n      \nenvironment_prepare_finished_at\n: \n2017-06-20T22:31:28Z\n,\n      \nfinished_at\n: \n2017-06-20T22:33:00Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_hash\n: \nb4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n        \ncommit_message\n: \nAPI Demo - commit hash example\\n\\nThis build has a specified commit hash\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nc518445a250a5848\n,\n      \nstack_config_type\n: \nstandard1\n,\n      \nstack_identifier\n: \nlinux-docker-android\n,\n      \nstarted_on_worker_at\n: \n2017-06-20T22:31:28Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-06-20T22:31:27Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: \nUser api-demo requested to abort this build with reason: This is an example abort build\n,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 10,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nAbort example\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-05-30T15:47:17Z\n,\n      \nfinished_at\n: \n2017-05-30T15:47:32Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nAbort example\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n3247e2920496e846\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-05-30T15:47:17Z\n,\n      \nstatus\n: 3,\n      \nstatus_text\n: \naborted\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-05-30T15:47:17Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 9,\n      \ncommit_hash\n: \nb4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n      \ncommit_message\n: \nAPI Demo - commit hash example\\n\\nThis build has a specified commit hash\n,\n      \ncommit_view_url\n: \nhttps://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n      \nenvironment_prepare_finished_at\n: \n2017-05-16T20:04:28Z\n,\n      \nfinished_at\n: \n2017-05-16T20:05:05Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_hash\n: \nb4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\n,\n        \ncommit_message\n: \nAPI Demo - commit hash example\\n\\nThis build has a specified commit hash\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n5267720a89cb298d\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-05-16T20:04:28Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-05-16T20:02:25Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 8,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nAPI demo\\n\\nmultiline commit message example\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-05-16T20:03:33Z\n,\n      \nfinished_at\n: \n2017-05-16T20:04:27Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nAPI demo\\n\\nmultiline commit message example\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n627cfd1a3f715134\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-05-16T20:02:25Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-05-16T20:00:18Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 7,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nAPI demo, commit hash example 1\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-05-16T19:59:05Z\n,\n      \nfinished_at\n: \n2017-05-16T20:02:19Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nAPI demo, commit hash example 1\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n2976b894d40cf339\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-05-16T19:59:05Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-05-16T19:59:04Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 6,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: \nunwatch test\n,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T12:05:48Z\n,\n      \nfinished_at\n: \n2017-04-25T12:09:26Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n,\n        \ncommit_message\n: \nunwatch test\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \ncabbf96b36031c45\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T12:04:38Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T12:04:37Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 5,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:48:15Z\n,\n      \nfinished_at\n: \n2017-04-25T11:51:47Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n8b2a7f96da727174\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:46:44Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:59Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 4,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:43:18Z\n,\n      \nfinished_at\n: \n2017-04-25T11:46:42Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \nde020764ecdc8e57\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:43:18Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:57Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 3,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:39:24Z\n,\n      \nfinished_at\n: \n2017-04-25T11:43:16Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n23c891eab2caad9c\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:38:11Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:54Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 2,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:34:52Z\n,\n      \nfinished_at\n: \n2017-04-25T11:38:10Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n851f3cfcded7e20f\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:34:52Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:34:52Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    },\n    {\n      \nabort_reason\n: null,\n      \nbranch\n: \nmaster\n,\n      \nbuild_number\n: 1,\n      \ncommit_hash\n: null,\n      \ncommit_message\n: null,\n      \ncommit_view_url\n: null,\n      \nenvironment_prepare_finished_at\n: \n2017-04-25T11:06:55Z\n,\n      \nfinished_at\n: \n2017-04-25T11:10:47Z\n,\n      \nis_on_hold\n: false,\n      \noriginal_build_params\n: {\n        \nbranch\n: \nmaster\n\n      },\n      \npull_request_id\n: 0,\n      \npull_request_target_branch\n: null,\n      \npull_request_view_url\n: null,\n      \nslug\n: \n51d5915205deede2\n,\n      \nstack_config_type\n: null,\n      \nstack_identifier\n: null,\n      \nstarted_on_worker_at\n: \n2017-04-25T11:06:55Z\n,\n      \nstatus\n: 1,\n      \nstatus_text\n: \nsuccess\n,\n      \ntag\n: null,\n      \ntriggered_at\n: \n2017-04-25T11:06:54Z\n,\n      \ntriggered_by\n: null,\n      \ntriggered_workflow\n: \nprimary\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 44\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/builds/{BUILD-SLUG}\n\u2693\n\n\nGet a specific build's data.\n\n\nStatus codes (\nstatus\n) and related status texts (\nstatus_text\n): \nSee the \nGET /apps/{APP-SLUG}/builds\n endpoint description\n\n\nBuild times: \nSee the \nGET /apps/{APP-SLUG}/builds\n endpoint description\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nabort_reason\n: \nUser api-demo requested to abort this build with reason: This is an example abort build\n,\n    \nbranch\n: \nmaster\n,\n    \nbuild_number\n: 10,\n    \ncommit_hash\n: null,\n    \ncommit_message\n: \nAbort example\n,\n    \ncommit_view_url\n: null,\n    \nenvironment_prepare_finished_at\n: \n2017-05-30T15:47:17Z\n,\n    \nfinished_at\n: \n2017-05-30T15:47:32Z\n,\n    \nis_on_hold\n: false,\n    \noriginal_build_params\n: {\n      \nbranch\n: \nmaster\n,\n      \ncommit_message\n: \nAbort example\n\n    },\n    \npull_request_id\n: 0,\n    \npull_request_target_branch\n: null,\n    \npull_request_view_url\n: null,\n    \nslug\n: \n3247e2920496e846\n,\n    \nstack_config_type\n: null,\n    \nstack_identifier\n: null,\n    \nstarted_on_worker_at\n: \n2017-05-30T15:47:17Z\n,\n    \nstatus\n: 3,\n    \nstatus_text\n: \naborted\n,\n    \ntag\n: null,\n    \ntriggered_at\n: \n2017-05-30T15:47:17Z\n,\n    \ntriggered_by\n: null,\n    \ntriggered_workflow\n: \nprimary\n\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/log\n\u2693\n\n\nGet the \nlog info\n of a specific Build.\n\n\nThe log info includes the last couple of \nchunks\n (\nlog_chunks\n) of the build log,\nas well as other meta infos like how many chunks were generated during the build (\ngenerated_log_chunks_num\n).\n\n\nOnce the build is finished and the full log is available in the log archives (\nis_archived\n: true\n)\nthe response will also include an \nexpiring\n, read only download URL (\nexpiring_raw_log_url\n).\n\n\nThere's no guarantee for how long this expiring raw log URL will exist (other than \"for a couple of minutes\"),\nso please \ndo not store\n this URL! If you want to retrieve the full (raw) log please:\n\n\n\n\nCall this log info endpoint\n\n\nAnd right after that, when you get the response, parse the \nexpiring_raw_log_url\n from it and send a \nGET\n request to that URL as soon as possible.\n\n\n\n\nImportant:\n when you send your \nGET\n request to the \nexpiring_raw_log_url\n URL please \ndo not\n include the Authorization headers.\nIn fact, you should not include any special header at all; just create a simple GET request and send it to the \nexpiring_raw_log_url\n url.\nThe \nexpiring_raw_log_url\n is configured so that it does not require any other parameter other than what's included in the URL.\n\n\nWhen a build is running, the log chunks can be retrieved with filtering, because in this case every response contain a \ntimestamp\n which has Unix timestamp format. You can send this value in the next call as query parameter with the key \ntimestamp\n, so the next response will contain only the chunks created after the timestamp.\nThere is also a \nlimit\n parameter which has 50 as the default value, with this you can limit the number of the retrieved log chunks.\n\n\nNote: If build is finished the logs will be archived, in this case there are no filtering options, the filter parameters won't have any effect on the content of the response, the whole archived log will be retrieved.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/log'\n\n\n\nExample response\n\u2693\n\n\n{\n  \nexpiring_raw_log_url\n: \nhttps://bitrise-build-log-archives-production.s3.amazonaws.com/build-logs-v2/669403bffbe35909/3247e2920496e846/2194500/3247e2920496e846.log?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064446Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=eed26dff7517a84b76fe184244044f7b7043afc50434fc43f9b7646798c43081\n,\n  \ngenerated_log_chunks_num\n: 6,\n  \nis_archived\n: true,\n  \nlog_chunks\n: [\n    {\n      \nchunk\n: \n\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n\\u001b[32;1mVersion: 1.6.1\\u001b[0m\\n\\n\\u001b[34mINFO\\u001b[0m[15:47:21] \\u001b[33;1mbitrise runs in CI mode\\u001b[0m           \\n\\u001b[34mINFO\\u001b[0m[15:47:21] \\u001b[32;1mRunning workflow:\\u001b[0m primary         \\n\\n\\u001b[34;1mSwitching to workflow:\\u001b[0m primary\\n\\n\n,\n      \nposition\n: 0\n    },\n    {\n      \nchunk\n: \n+------------------------------------------------------------------------------+\\n| (0) activate-ssh-key@3.1.1                                                   |\\n+------------------------------------------------------------------------------+\\n| id: activate-ssh-key                                                         |\\n| version: 3.1.1                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: bash                                                                |\\n| time: 2017-05-30T15:47:26Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n|                                                                              |\\n+---+---------------------------------------------------------------+----------+\\n| \\u001b[34;1m-\\u001b[0m | \\u001b[34;1mactivate-ssh-key@3.1.1\\u001b[0m                                        | 2.32 sec |\\n+---+---------------------------------------------------------------+----------+\\n\\n                                          \u25bc\\n\\n\\u001b[33mWARN\\u001b[0m[15:47:26] The step's (activate-ssh-key@3.1.1) Run-If expression evaluated to false - skipping \\n\\u001b[34mINFO\\u001b[0m[15:47:26] The Run-If expression was: \\u001b[34;1m{{getenv \\\nSSH_RSA_PRIVATE_KEY\\\n | ne \\\n\\\n}}\\u001b[0m \\n\n,\n      \nposition\n: 1\n    },\n    {\n      \nchunk\n: \n+------------------------------------------------------------------------------+\\n| (1) git-clone@3.4.3                                                          |\\n+------------------------------------------------------------------------------+\\n| id: git-clone                                                                |\\n| version: 3.4.3                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: go                                                                  |\\n| time: 2017-05-30T15:47:27Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n\\u001b[34mINFO\\u001b[0m[15:47:27] Start installing (golang) with apt-get       \\n\\u001b[34mINFO\\u001b[0m[15:47:27]  * \\u001b[32;1m[OK]\\u001b[0m Step dependency (go) installed, available. \\n\n,\n      \nposition\n: 2\n    },\n    {\n      \nchunk\n: \n\\n\\u001b[34;1mGit Clone Configs:\\u001b[0m\\n- CloneIntoDir: /bitrise/src\\n- RepositoryURL: https://github.com/bitrise-samples/sample-apps-android-sdk22.git\\n\\u001b[34;1mGit Checkout Configs:\\u001b[0m\\n- Commit: \\n- Tag: \\n- Branch: master\\n- CloneDepth: \\n\\u001b[34;1mGit Pull Request Configs:\\u001b[0m\\n- PullRequestURI: \\n- PullRequestID: \\n- BranchDest: \\n- PullRequestMergeBranch: \\n- ResetRepository: No\\n\\u001b[34;1mBitrise Build Configs:\\u001b[0m\\n- BuildURL: https://www.bitrise.io/build/3247e2920496e846\\n- BuildAPIToken: XtFWIhNx22MMMA6DcPXBGw\\n\\n\\u001b[34;1mGit clone repository\\u001b[0m\\n=\\u003e git \\\ninit\\\n\\n=\\u003e git \\\nremote\\\n \\\nadd\\\n \\\norigin\\\n \\\nhttps://github.com/bitrise-samples/sample-apps-android-sdk22.git\\\n\\n=\\u003e git \\\nfetch\\\n\\n\n,\n      \nposition\n: 3\n    },\n    {\n      \nchunk\n: \n=\\u003e git \\\ncheckout\\\n \\\nmaster\\\n\\n=\\u003e git \\\nsubmodule\\\n \\\nupdate\\\n \\\n--init\\\n \\\n--recursive\\\n\\n\\u001b[34;1mExporting git logs\\u001b[0m\\n=\\u003e GIT_CLONE_COMMIT_HASH\\n   value: b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\\n\\n=\\u003e GIT_CLONE_COMMIT_MESSAGE_SUBJECT\\n   value: downgrade to com.android.tools.build:gradle:2.1.0\\n\\n=\\u003e GIT_CLONE_COMMIT_MESSAGE_BODY\\n   value: \\n\\n=\\u003e GIT_CLONE_COMMIT_AUTHOR_NAME\\n   value: Viktor Benei\\n\\n=\\u003e GIT_CLONE_COMMIT_AUTHOR_EMAIL\\n   value: viktor.benei@gmail.com\\n\\n=\\u003e GIT_CLONE_COMMIT_COMMITER_NAME\\n   value: GitHub\\n\\n=\\u003e GIT_CLONE_COMMIT_COMMITER_EMAIL\\n   value: noreply@github.com\\n\\n\\u001b[32;1mSuccess\\u001b[0m\\n|                                                                              |\\n+---+---------------------------------------------------------------+----------+\\n| \\u001b[32;1m\u2713\\u001b[0m | \\u001b[32;1mgit-clone@3.4.3\\u001b[0m                                               | 8.77 sec |\\n+---+---------------------------------------------------------------+----------+\\n\\n                                          \u25bc\\n\\n+------------------------------------------------------------------------------+\\n| (2) Sleep                                                                    |\\n+------------------------------------------------------------------------------+\\n| id: script                                                                   |\\n| version: 1.1.3                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: bash                                                                |\\n| time: 2017-05-30T15:47:35Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n\n,\n      \nposition\n: 4\n    },\n    {\n      \nchunk\n: \n+ sleep 30\\n\n,\n      \nposition\n: 5\n    }\n  ],\n  \ntimestamp\n: null\n}\n\n\n\nGET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts\n\u2693\n\n\nGet the artifacts for a specific build.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: [\n    {\n      \nartifact_type\n: \nfile\n,\n      \nfile_size_bytes\n: 10,\n      \nis_public_page_enabled\n: true,\n      \nslug\n: \n0d2277e50b8d32ce\n,\n      \ntitle\n: \nartifact-1.txt\n\n    },\n    {\n      \nartifact_type\n: \nfile\n,\n      \nfile_size_bytes\n: 11,\n      \nis_public_page_enabled\n: false,\n      \nslug\n: \nb69c23de1f13b998\n,\n      \ntitle\n: \nartifact-2.txt\n\n    }\n  ],\n  \npaging\n: {\n    \npage_item_limit\n: 50,\n    \ntotal_item_count\n: 2\n  }\n}\n\n\n\nGET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}\n\u2693\n\n\nGet a certain build artifact's data. The provided download URL is a presigned Amazon S3 URL which is valid for 10 minutes and then it expires.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nartifact_type\n: \nfile\n,\n    \nexpiring_download_url\n: \nhttps://bitrise-prod-build-storage.s3.amazonaws.com/builds/9fb8eaaa4bdd3763/artifacts/2138393/artifact-1.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064447Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=2fd50335e5949f2c62ad431ef82fe1e94ad6c686cf15c1e3e94db7bd0cf2ed82\n,\n    \nfile_size_bytes\n: 10,\n    \nis_public_page_enabled\n: true,\n    \npublic_install_page_url\n: \nhttps://www.bitrise.io/artifact/2138393/p/6e7dc9c2b99492e6aa997a2e5d3f7413\n,\n    \nslug\n: \n0d2277e50b8d32ce\n,\n    \ntitle\n: \nartifact-1.txt\n\n  }\n}\n\n\n\nPATCH /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}\n\u2693\n\n\nSet the attributes of a build artifact. In the request body have to be sent a JSON with the specified new attribute values.\n\n\nNote: at this time only the \nis_public_page_enabled\n attribute can be set through this endpoint call. This attribute can only set for the artifacts with type \nandroid-apk\n or \nios-ipa\n.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X PATCH -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG' -d '{\nis_public_page_enabled\n:true}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n    \nartifact_type\n: \nandroid-apk\n,\n    \nexpiring_download_url\n: \nhttps://bitrise-prod-build-storage.s3.amazonaws.com/builds/ddf4134555e833d8/artifacts/3205846/app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064447Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=471a4490149ecbdff3f5dbd64bf612713eed326ec9dc33e76378731129d5daa4\n,\n    \nfile_size_bytes\n: 607185,\n    \nis_public_page_enabled\n: true,\n    \npublic_install_page_url\n: \nhttps://www.bitrise.io/artifact/3205846/p/300e0121b50985fd631fe304d549006f\n,\n    \nslug\n: \n5a9f5da8d5f1057c\n,\n    \ntitle\n: \napp-debug.apk\n\n  }\n}\n\n\n\nDELETE /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}\n\u2693\n\n\nDelete a specific artifact.\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X DELETE -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG'\n\n\n\nExample response\n\u2693\n\n\n{\n  \ndata\n: {\n      \nartifact_type\n: \nandroid-apk\n,\n      \nfile_size_bytes\n: 607185,\n      \nis_public_page_enabled\n: true,\n      \nslug\n: \n5a9f5da8d5f1057c\n,\n      \ntitle\n: \napp-debug.apk\n\n    }\n}\n\n\n\nPOST /apps/{APP-SLUG}/builds\n\u2693\n\n\nTrigger a new build.\n\n\nYou can trigger a new build with the specific trigger parameters defined. You can check the available parameters in the \ndocumentation of the Build Trigger API\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds' -d '{\nhook_info\n:{\ntype\n:\nbitrise\n},\nbuild_params\n:{\nbranch\n:\nmaster\n,\nworkflow_id\n:\nprimary\n},\ntriggered_by\n:\nbitrise_api_doc\n}'\n\n\n\nExample response\n\u2693\n\n\n{\n  \nbuild_number\n: 44,\n  \nbuild_slug\n: \n9d622a33d82807e4\n,\n  \nbuild_url\n: \nhttps://app.bitrise.io/build/9d622a33d82807e4\n,\n  \nmessage\n: \nwebhook processed\n,\n  \nservice\n: \nbitrise\n,\n  \nslug\n: \n669403bffbe35909\n,\n  \nstatus\n: \nok\n,\n  \ntriggered_workflow\n: \nprimary\n\n}\n\n\n\nPOST /apps/{APP-SLUG}/builds/{BUILD-SLUG}/abort\n\u2693\n\n\nAbort a running build.\n\n\nOptionally you can specify a JSON body for the request, with an \nabort_reason\n. With parameter \nabort_with_success\n you can set the type of abort, if it's set as \ntrue\n, then the build will get a status with value 4, which means that it's aborted, but it counts as a successful build, this way Github will show as successful too. Also you can specify whether notifications (emails) should be sent. Example:\n\n\n{\n    \nabort_reason\n: \nabort with abort_with_success=true test \n skip_notifications=true\n,\n    \nabort_with_success\n: true,\n    \nskip_notifications\n: true\n}\n\n\n\nExample \ncurl\n request\n\u2693\n\n\ncurl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/{APP-SLUG}/builds/{BUILD-SLUG}/abort' -d '{\nabort_reason\n: \nabort with abort_with_success=true test \n skip_notifications=true\n, \nabort_with_success\n: true,\nskip_notifications\n: true}'\n\n\n\nExample response\n\u2693\n\n\n{\n    \nstatus\n: \nok\n\n}\n\n\n\nIf the build is already finished or aborted you'll get an error:\n\n\n{\n    \nerror_msg\n: \nBuild already finished, can't abort it.\n\n}\n\n\n\nWIP / working on it\n\u2693\n\n\nSee \nhttps://discuss.bitrise.io/t/bitrise-api-v0-1-work-in-progress/1554\n.\n\n\nFeature / endpoint requests\n\u2693\n\n\nIf you want to request a new API feature / endpoint, please do it here: \nhttp://discuss.bitrise.io/t/bitrise-public-api/37", 
            "title": "Bitrise.io API v0.1 (Work In Progress)"
        }, 
        {
            "location": "/api/v0.1/#api-domainhost-and-versioning", 
            "text": "The Bitrise API's host is:  https://api.bitrise.io/  Every endpoint except the root one is versioned, and the version have to be included in the URL right after the host.  Example:  https://api.bitrise.io/v0.1/me  (requires authentication)  Right now we have only one version,  v0.1 .  There's no long term compatibility promise for  v0.1 , although we try to do our best to not to break anything unless we have to. Once we're happy with  v0.1  we'll \"freeze\" it as  v1.0 , for which we'll provide long term support.", 
            "title": "API domain/host and versioning"
        }, 
        {
            "location": "/api/v0.1/#authentication", 
            "text": "The current API supports only one type of authentication, user generated  Personal Access Tokens .  Right now  every API endpoint requires authentication , there's no endpoint which you can call without including the authentication information, except the \"root\" URL ( https://api.bitrise.io ).  To acquire a Personal Access Token for your user, sign in with that user on  bitrise.io , go to your  Account Settings  page, and select the  Security  tab on the left side.  Here you can manage your account's Two Factor Authentication settings, as well as your Personal Access Tokens.  To get started with the API simply click the  Generate new token  button, and save the generated Personal Access Token somewhere safe.  Important note: the generated token is shown only once, when it's generated!  There's no way to see the token value again! You can of course generate as many Access Tokens as you like, and delete the ones you don't need anymore.  Once you have the token you can start interacting with the API.  To provide the required access token you have to add a  HEADER  to your requests, with the key  Authorization  and value  token THE-ACCESS-TOKEN .  An example API call with auth, using  curl :  curl -H 'Authorization: token THE-ACCESS-TOKEN' https://api.bitrise.io/v0.1/me", 
            "title": "Authentication"
        }, 
        {
            "location": "/api/v0.1/#response", 
            "text": "Every endpoint responds with a JSON formatted response.", 
            "title": "Response"
        }, 
        {
            "location": "/api/v0.1/#pagination", 
            "text": "When you call an endpoint which returns a list of items you always have to be prepared that you might not get the whole list in a single response, you'll have to iterate through the \"pages\" to retrieve all the items.  The response of the endpoint will include a  paging  object, with  total_item_count  and  page_item_limit  properties, and if there's a \"next\" page available it'll also include a  next  \"anchor\" item.  Example:  {\n   data : [ ... ],\n   paging : {\n     total_item_count : 3,\n     page_item_limit : 2,\n     next :  518e869d56f2adfd \n  }\n}  Note: the  next  property of the  paging  object is only included if there's at least one more page available. If there's no  next  property inside  paging  that means that there's no more page to retrieve.  The  page_item_limit  property can be set with the query parameter named  limit  at the GET requests, so you can specify the size of the response pages. The default and also maximum value for this parameter is 50.  Example:   Calling  https://api.bitrise.io/v0.1/me/apps  will retrieve you the first page of your apps with size of 50.  If you call  https://api.bitrise.io/v0.1/me/apps?limit=10 , the response is also the first page of your apps, but it will contain only 10 elements.   If you want to iterate through all the items this is what you have to do:   First call the endpoint without any pagination parameters  From the response process the  paging  object.  If the  paging  object includes a  next  item, simply call the exact same endpoint with an additional  next=  query parameter, and pass the value you got in the response as the value of the  next  parameter.   That's all.  A quick example, iterating through all of your registered apps:   First call  https://api.bitrise.io/v0.1/me/apps  Process the items ( data  property)  Then check the  paging  (root) property.  If there's a  next  property inside  paging  simply call the endpoint again, with the  next  query parameter  Example:  https://api.bitrise.io/v0.1/me/apps?next=NEXTVALUE , where  NEXTVALUE  is the value of the  next  property you got in your previous response.    Repeate this until the  paging  object does not include a  next  property, which means that the page you received was the last one.", 
            "title": "Pagination"
        }, 
        {
            "location": "/api/v0.1/#endpoints", 
            "text": "", 
            "title": "Endpoints"
        }, 
        {
            "location": "/api/v0.1/#root-urls", 
            "text": "Both  /  and  /v0.1  are considered as root URLs, and return the same response at the moment (of course this will change in the future, once we have more than one version of the API).  These are the only endpoints which do not require authentication.  Example  curl  request:  curl https://api.bitrise.io/v0.1", 
            "title": "Root URLs"
        }, 
        {
            "location": "/api/v0.1/#get-me", 
            "text": "You can use this endpoint to get information about your account (identified by the Access Token).", 
            "title": "GET /me"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/me'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response", 
            "text": "{\n   data : {\n     avatar_url :  https://secure.gravatar.com/avatar/f50ae2f0652b92e9dbdcc7b8d9d348a0 ,\n     slug :  8e82ac7601178f17 ,\n     username :  api-demo \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-usersuser-slug", 
            "text": "Get information about a specific user account.", 
            "title": "GET /users/USER-SLUG"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_1", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/users/USER-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_1", 
            "text": "{\n   data : {\n     avatar_url :  https://secure.gravatar.com/avatar/f50ae2f0652b92e9dbdcc7b8d9d348a0 ,\n     slug :  8e82ac7601178f17 ,\n     username :  api-demo \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-organizations", 
            "text": "List the organizations you are part of.", 
            "title": "GET /organizations"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_2", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_2", 
            "text": "{\n   data : [\n    {\n       avatar_icon_url :  https://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-01.png ,\n       name :  APIDemoOrg ,\n       slug :  e1ec3dea540bcf21 \n    },\n    {\n       avatar_icon_url :  https://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-03.png ,\n       name :  SecondApiDemoOrg ,\n       slug :  04da60feea593f6c \n    }\n  ]\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-organizationsorg-slug", 
            "text": "Get information about a specific oraganization account.", 
            "title": "GET /organizations/ORG-SLUG"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_3", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations/USER-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_3", 
            "text": "{\n   data : {\n     avatar_icon_url :  https://bitrise-public-content-production.s3.amazonaws.com/org-icons/default_avatar-01.png ,\n     name :  APIDemoOrg ,\n     slug :  e1ec3dea540bcf21 \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-apps", 
            "text": "Retrieve the apps you have access to. This includes the apps created / owned by you, as well as apps where you're a Team member (either added directly, or through an Organization's Group). All the apps you have access to (similar to the Dashboard on  bitrise.io .  Note: the  /me/apps  endpoint is also working and the same as above, but it's deprecated", 
            "title": "GET /apps"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_4", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps?limit=2'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_4", 
            "text": "{\n   data : [\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  organization ,\n         name :  APIDemoOrg ,\n         slug :  e1ec3dea540bcf21 \n      },\n       project_type :  ios ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-ios-swift-xcode6 ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git ,\n       slug :  93f256e365d929d3 ,\n       status : 1,\n       title :  sample-apps-ios-swift-xcode6 \n    },\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  user ,\n         name :  api-demo ,\n         slug :  8e82ac7601178f17 \n      },\n       project_type :  xamarin ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-xamarin-cross-platform ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git ,\n       slug :  f46e89061e967f27 ,\n       status : 1,\n       title :  sample-apps-xamarin-cross-platform \n    }\n  ],\n   paging : {\n     next :  13533d589b89fb4b ,\n     page_item_limit : 2,\n     total_item_count : 5\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#sorting-parameters-for-app-list", 
            "text": "There are two available sorting parameter for this endpoint:   created_at :  descending order by the  created_at  attribute (default)  last_build_at :  it's ordered by  last_build_at  attribute in descending order,", 
            "title": "Sorting parameters for app list"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_5", 
            "text": "Request:  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps?limit=2 sort_by=last_build_at'  Response:  {\n   data : [\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  organization ,\n         name :  APIDemoOrg ,\n         slug :  e1ec3dea540bcf21 \n      },\n       project_type :  ios ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-ios-swift-xcode6 ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git ,\n       slug :  93f256e365d929d3 ,\n       status : 1,\n       title :  sample-apps-ios-swift-xcode6 \n    },\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  user ,\n         name :  api-demo ,\n         slug :  8e82ac7601178f17 \n      },\n       project_type :  android ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-android-sdk22 ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22.git ,\n       slug :  669403bffbe35909 ,\n       status : 1,\n       title :  sample-apps-android-sdk22 \n    }\n  ],\n   paging : {\n     next :  13533d589b89fb4b ,\n     page_item_limit : 2,\n     total_item_count : 5\n  }\n}", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#get-usersuser-slugapps", 
            "text": "Also you can list apps for a specific user, obviously only those applicaitons with be listed in this response, which you have required rights. This endpoint works and responses the same as the  /apps  one, so you can use the same parameters too.  Note: this endpoint doesn't work with the  /me  subroute", 
            "title": "GET /users/USER-SLUG/apps"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_6", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/users/USER-SLUG/apps?limit=2'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_5", 
            "text": "{\n   data : [\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  user ,\n         name :  api-demo ,\n         slug :  8e82ac7601178f17 \n      },\n       project_type :  xamarin ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-xamarin-cross-platform ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git ,\n       slug :  f46e89061e967f27 ,\n       status : 1,\n       title :  sample-apps-xamarin-cross-platform \n    },\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  user ,\n         name :  api-demo ,\n         slug :  8e82ac7601178f17 \n      },\n       project_type :  macos ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-osx-10-12 ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-osx-10-12.git ,\n       slug :  13533d589b89fb4b ,\n       status : 1,\n       title :  sample-apps-osx-10-12 \n    }\n  ],\n   paging : {\n     next :  669403bffbe35909 ,\n     page_item_limit : 2,\n     total_item_count : 4\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-organizationsorg-slugapps", 
            "text": "Also you can list apps for a specific oraganization, it works the very same way as the  /users/USER-SLUG/apps  one.  Note: this endpoint doesn't work with the  /me  subroute", 
            "title": "GET /organizations/ORG-SLUG/apps"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_7", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/organizations/USER-SLUG/apps?limit=2'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_6", 
            "text": "{\n   data : [\n    {\n       is_disabled : false,\n       is_public : false,\n       owner : {\n         account_type :  organization ,\n         name :  APIDemoOrg ,\n         slug :  e1ec3dea540bcf21 \n      },\n       project_type :  ios ,\n       provider :  github ,\n       repo_owner :  bitrise-samples ,\n       repo_slug :  sample-apps-ios-swift-xcode6 ,\n       repo_url :  https://github.com/bitrise-samples/sample-apps-ios-swift-xcode6.git ,\n       slug :  93f256e365d929d3 ,\n       status : 1,\n       title :  sample-apps-ios-swift-xcode6 \n    }\n  ],\n   paging : {\n     page_item_limit : 2,\n     total_item_count : 1\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsregister", 
            "text": "Add a new application", 
            "title": "POST /apps/register"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_8", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG' -d '{ provider : github , is_public :false, repo_url : git@github.com:api_demo/example-repository.git , type : git , git_repo_slug : example-repository , git_owner : api_demo }'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_7", 
            "text": "{\n   status :  ok ,\n   slug :  022d8a3124f1225d \n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugregister-ssh-key", 
            "text": "Register an SSH key to a specific application", 
            "title": "POST /apps/APP-SLUG/register-ssh-key"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_9", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/register-ssh-key' -d '{ auth_ssh_private_key : your-private-ssh-key , auth_ssh_public_key : your-public-ssh-key , is_register_key_into_provider_service :false}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_8", 
            "text": "{\n   status :  ok ,\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugregister-webhook", 
            "text": "Register a webhook for a specific application", 
            "title": "POST /apps/APP-SLUG/register-webhook"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_10", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/register-webhook'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_9", 
            "text": "{\n   status :  ok ,\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slug", 
            "text": "Get a specific app's data.", 
            "title": "GET /apps/{APP-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_11", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_10", 
            "text": "{\n   data : {\n     is_disabled : false,\n     is_public : false,\n     owner : {\n       account_type :  user ,\n       name :  api-demo ,\n       slug :  8e82ac7601178f17 \n    },\n     project_type :  android ,\n     provider :  github ,\n     repo_owner :  bitrise-samples ,\n     repo_slug :  sample-apps-android-sdk22 ,\n     repo_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22.git ,\n     slug :  669403bffbe35909 ,\n     status : 1,\n     title :  sample-apps-android-sdk22 \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbitriseyml", 
            "text": "Download the bitrise.yml of your application.", 
            "title": "GET /apps/{APP-SLUG}/bitrise.yml"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_12", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/bitrise.yml'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_11", 
            "text": "app:\n  envs:\n  - BITRISE_PROJECT_PATH: sample-apps-osx-10-12.xcodeproj\n    opts:\n      is_expand: false\n  - BITRISE_SCHEME: sample-apps-osx-10-12\n    opts:\n      is_expand: false\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\nformat_version: 1.3.1\ntrigger_map:\n- push_branch: '*'\n  workflow: primary\n- pull_request_source_branch: '*'\n  workflow: primary\nworkflows:\n  deploy:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.2: {}\n    - script@1.1.3:\n        title: Do anything with Script step\n    - certificate-and-profile-installer@1.8.4: {}\n    - xcode-test-mac:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - xcode-archive-mac@1.4.0:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - deploy-to-bitrise-io@1.2.9: {}\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv  SSH_RSA_PRIVATE_KEY  | ne  }}'\n    - git-clone@3.4.2: {}\n    - script@1.1.3:\n        title: Do anything with Script step\n    - certificate-and-profile-installer@1.8.4: {}\n    - xcode-test-mac@1.1.0:\n        inputs:\n        - project_path: $BITRISE_PROJECT_PATH\n        - scheme: $BITRISE_SCHEME\n    - deploy-to-bitrise-io@1.2.9: {}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugbitriseyml", 
            "text": "Upload a new bitrise.yml for your application.", 
            "title": "POST /apps/{APP-SLUG}/bitrise.yml"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_13", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/bitrise.yml' -d '{ app_config_datastore_yaml : app:\\n  envs:\\n  - BITRISE_PROJECT_PATH: sample-apps-osx-10-12.xcodeproj\\n    opts:\\n      is_expand: false\\n  - BITRISE_SCHEME: sample-apps-osx-10-12\\n    opts:\\n      is_expand: false\\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\\nformat_version: 1.3.1\\ntrigger_map:\\n- push_branch: '*'\\n  workflow: primary\\n- pull_request_source_branch: '*'\\n  workflow: primary\\nworkflows:\\n  deploy:\\n    steps:\\n    - activate-ssh-key@3.1.1:\\n        run_if: '{{getenv \\ SSH_RSA_PRIVATE_KEY\\  | ne \\ \\ }}'\\n    - git-clone@3.4.2: {}\\n    - script@1.1.3:\\n        title: Do anything with Script step\\n    - certificate-and-profile-installer@1.8.4: {}\\n    - xcode-test-mac:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - xcode-archive-mac@1.4.0:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - deploy-to-bitrise-io@1.2.9: {}\\n  primary:\\n    steps:\\n    - activate-ssh-key@3.1.1:\\n        run_if: '{{getenv \\ SSH_RSA_PRIVATE_KEY\\  | ne \\ \\ }}'\\n    - git-clone@3.4.2: {}\\n    - script@1.1.3:\\n        title: Do anything with Script step\\n    - certificate-and-profile-installer@1.8.4: {}\\n    - xcode-test-mac@1.1.0:\\n        inputs:\\n        - project_path: $BITRISE_PROJECT_PATH\\n        - scheme: $BITRISE_SCHEME\\n    - deploy-to-bitrise-io@1.2.9: {}\\n }'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_12", 
            "text": "{\n   app : {\n     envs : [\n      {\n         BITRISE_PROJECT_PATH :  sample-apps-osx-10-12.xcodeproj ,\n         opts : {\n           is_expand : false\n        }\n      },\n      {\n         BITRISE_SCHEME :  sample-apps-osx-10-12 ,\n         opts : {\n           is_expand : false\n        }\n      }\n    ]\n  },\n   default_step_lib_source :  https://github.com/bitrise-io/bitrise-steplib.git ,\n   format_version :  1.3.1 ,\n   trigger_map : [\n    {\n       push_branch :  * ,\n       workflow :  primary \n    },\n    {\n       pull_request_source_branch :  * ,\n       workflow :  primary \n    }\n  ],\n   workflows : {\n     deploy : {\n       steps : [\n        {\n           activate-ssh-key@3.1.1 : {\n             run_if :  {{getenv \\ SSH_RSA_PRIVATE_KEY\\  | ne \\ \\ }} \n          }\n        },\n        {\n           git-clone@3.4.2 : {}\n        },\n        {\n           script@1.1.3 : {\n             title :  Do anything with Script step \n          }\n        },\n        {\n           certificate-and-profile-installer@1.8.4 : {}\n        },\n        {\n           xcode-test-mac : {\n             inputs : [\n              {\n                 project_path :  $BITRISE_PROJECT_PATH \n              },\n              {\n                 scheme :  $BITRISE_SCHEME \n              }\n            ]\n          }\n        },\n        {\n           xcode-archive-mac@1.4.0 : {\n             inputs : [\n              {\n                 project_path :  $BITRISE_PROJECT_PATH \n              },\n              {\n                 scheme :  $BITRISE_SCHEME \n              }\n            ]\n          }\n        },\n        {\n           deploy-to-bitrise-io@1.2.9 : {}\n        }\n      ]\n    },\n     primary : {\n       steps : [\n        {\n           activate-ssh-key@3.1.1 : {\n             run_if :  {{getenv \\ SSH_RSA_PRIVATE_KEY\\  | ne \\ \\ }} \n          }\n        },\n        {\n           git-clone@3.4.2 : {}\n        },\n        {\n           script@1.1.3 : {\n             title :  Do anything with Script step \n          }\n        },\n        {\n           certificate-and-profile-installer@1.8.4 : {}\n        },\n        {\n           xcode-test-mac@1.1.0 : {\n             inputs : [\n              {\n                 project_path :  $BITRISE_PROJECT_PATH \n              },\n              {\n                 scheme :  $BITRISE_SCHEME \n              }\n            ]\n          }\n        },\n        {\n           deploy-to-bitrise-io@1.2.9 : {}\n        }\n      ]\n    }\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugprovisioning-profiles", 
            "text": "Add provisioning profile for a specific application. This is the first phase of the provisioning profile upload process, calling this endpoint a new provisioning profile object is created and its slug and a presigned upload URL will be retrieved.", 
            "title": "POST /apps/{APP-SLUG}/provisioning-profiles"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_14", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles' -d '{ upload_file_name : sample.provisionprofile , upload_file_size :2047}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_13", 
            "text": "{\n   data :{\n     upload_file_name : sample.provisionprofile ,\n     upload_file_size :2047,\n     slug : 01C6FA6P6HRQT5PQ8RMMVVXE6W ,\n     processed :false,\n     is_expose :true,\n     is_protected :false,\n     upload_url : https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180216T124240Z X-Amz-Expires=600 X-Amz-SignedHeaders=content-length%3Bhost X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e \n  }\n}  After this call you have to upload to AWS your provisioning profile file with the presigned URL.", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_15", 
            "text": "curl -T sample.provisionprofile 'https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180216T124240Z X-Amz-Expires=600 X-Amz-SignedHeaders=content-length%3Bhost X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugprovisioning-profilesprovisioning-profile-sluguploaded", 
            "text": "After the provisioning profile is uploaded to AWS, you have to confirm the upload with this endpoint.", 
            "title": "POST /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}/uploaded"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_16", 
            "text": "curl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG/uploaded'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_14", 
            "text": "{\n   data :{\n     upload_file_name : sample.provisionprofile ,\n     upload_file_size :2047,\n     slug : 01C6FA6P6HRQT5PQ8RMMVVXE6W ,\n     processed :false,\n     is_expose :true,\n     is_protected :false\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugprovisioning-profiles", 
            "text": "List provisioning profiles for a specific application.", 
            "title": "GET /apps/{APP-SLUG}/provisioning-profiles"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_17", 
            "text": "curl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_15", 
            "text": "{\n   data : [\n    {\n       upload_file_name : sample.provisionprofile ,\n       upload_file_size :2047,\n       slug : 01C6FA6P6HRQT5PQ8RMMVVXE6W ,\n       processed :false,\n       is_expose :true,\n       is_protected :false\n    },\n    {\n       upload_file_name : sample2.provisionprofile ,\n       upload_file_size :2047,\n       slug : 01C6FA6P6HRQT5PQ8RMMVVXE5T ,\n       processed :true,\n       is_expose :true,\n       is_protected :true\n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 2\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugprovisioning-profilesprovisioning-profile-slug", 
            "text": "Get a specific provisioning profile's data.", 
            "title": "GET /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_18", 
            "text": "curl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_16", 
            "text": "{\n   data : {\n     upload_file_name : sample.provisionprofile ,\n     upload_file_size :2047,\n     slug : 01C6FA6P6HRQT5PQ8RMMVVXE6W ,\n     processed :false,\n     is_expose :true,\n     is_protected :false,\n     download_url : https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/prov_profile_documents/uploads/80144/original/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180322T091652Z X-Amz-Expires=600 X-Amz-SignedHeaders=host X-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2 \n  }\n}  Note:  download_url  is generated only when the provisioning profile's  is_protected  attribute is  false", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#patch-appsapp-slugprovisioning-profilesprovisioning-profile-slug", 
            "text": "Set a specific subset of provisioning profile attributes. You can update the  is_protected ,  is_expose  and  processed  attributes of a provisioning profile object. There are some constraints:   once the  is_protected  flag is set with value  true  it cannot be changed anymore  when the value of  is_protected  is  true , then the  is_expose  flag cannot be set to other value  once  processed  flag set to true, then its value cannot be changed anymore   Violating these constraints the response will be  Bad Request . Note: the previous  /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}/uploaded  endpoint will have the same effect as this one with the request body '{\"processed\":true}'", 
            "title": "PATCH /apps/{APP-SLUG}/provisioning-profiles/{PROVISIONING-PROFILE-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_19", 
            "text": "curl -X PATCH -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/provisioning-profiles/PROVISIONING-PROFILE-SLUG -d '{ is_protected :true}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_17", 
            "text": "{\n   data :{\n     upload_file_name : sample.provisionprofile ,\n     upload_file_size :2047,\n     slug : 01C6FA6P6HRQT5PQ8RMMVVXE6W ,\n     processed :false,\n     is_expose :true,\n     is_protected :true\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugbuild-certificates", 
            "text": "Add certificate file for a specific application. This is the first phase of the certificate file upload process, calling this endpoint a new certificate object is created and its slug and a presigned upload URL will be retrieved.", 
            "title": "POST /apps/{APP-SLUG}/build-certificates"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_20", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates' -d '{ upload_file_name : sample_cert.p12 , upload_file_size :1023}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_18", 
            "text": "{\n   data :{\n     upload_file_name : sample_cert.p12 ,\n     upload_file_size :1023,\n     slug : 01C6FA2R4CB772QTDETBE0MENP ,\n     processed :false,\n     certificate_password : ,\n     is_expose :true,\n     is_protected :false,\n     upload_url : https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180216T124240Z X-Amz-Expires=600 X-Amz-SignedHeaders=content-length%3Bhost X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e \n  }\n}  After this call you have to upload to AWS your certificate file with the presigned URL.", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_21", 
            "text": "curl -T sample_cert.p12 'https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/build_certificates/uploads/30067/original/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180216T124240Z X-Amz-Expires=600 X-Amz-SignedHeaders=content-length%3Bhost X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugbuild-certificatesbuild-certificate-sluguploaded", 
            "text": "After the certificate file is uploaded to AWS, you have to confirm the upload with this endpoint.", 
            "title": "POST /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}/uploaded"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_22", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG/uploaded'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_19", 
            "text": "{\n   data :{\n     upload_file_name : sample_cert.p12 ,\n     upload_file_size :1023,\n     slug : 01C6FA2R4CB772QTDETBE0MENP ,\n     processed :true,\n     certificate_password : ,\n     is_expose :true,\n     is_protected :false\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuild-certificates", 
            "text": "List build certificates for a specific application.", 
            "title": "GET /apps/{APP-SLUG}/build-certificates"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_23", 
            "text": "curl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_20", 
            "text": "{\n   data : [\n    {\n       upload_file_name : sample_cert.p12 ,\n       upload_file_size :1023,\n       slug : 01C6FA2R4CB772QTDETBE0MENP ,\n       processed :true,\n       certificate_password : ,\n       is_expose :true,\n       is_protected :false\n    },\n    {\n       upload_file_name : sample_cert_2.p12 ,\n       upload_file_size :1023,\n       slug : 01C6FA2R4CB772QTDETBE0MEMO ,\n       processed :true,\n       certificate_password : s0m3-s3cr3t-ch4r4ct3r5 ,\n       is_expose :true,\n       is_protected :true\n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 2\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuild-certificatesbuild-certificate-slug", 
            "text": "Get a specific build certificate's data.", 
            "title": "GET /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_24", 
            "text": "curl -X POST -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_21", 
            "text": "{\n   data : {\n     upload_file_name : sample_cert.p12 ,\n     upload_file_size :1023,\n     slug : 01C6FA2R4CB772QTDETBE0MENP ,\n     processed :true,\n     certificate_password : ,\n     is_expose :true,\n     is_protected :false,\n     download_url : https://concrete-userfiles-production.s3-us-west-2.amazonaws.com/prov_profile_documents/uploads/80144/original/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256 X-Amz-Content-Sha256=UNSIGNED-PAYLOAD X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request X-Amz-Date=20180322T091652Z X-Amz-Expires=600 X-Amz-SignedHeaders=host X-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2 \n  }\n}  Note:  download_url  is generated only when the build certificate's  is_protected  attribute is  false", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#patch-appsapp-slugbuild-certificatesbuild-certificate-slug", 
            "text": "Set a specific subset of build certificate attributes. You can update the  is_protected ,  is_expose ,  certificate_password  and  processed  attributes of a build certificate object. There are some constraints:   once the  is_protected  flag is set with value  true  it cannot be changed anymore  when the value of  is_protected  is  true , then the  is_expose  flag cannot be set to other value  once  processed  flag set to true, then its value cannot be changed anymore   Violating these constraints the response will be  Bad Request . Note: the previous  /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}/uploaded  endpoint will have the same effect as this one with the request body '{\"processed\":true}'", 
            "title": "PATCH /apps/{APP-SLUG}/build-certificates/{BUILD-CERTIFICATE-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_25", 
            "text": "curl -X PATCH -H  'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/build-certificates/BUILD-CERTIFICATE-SLUG -d '{ is_protected :true}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_22", 
            "text": "{\n   data :{\n     upload_file_name : sample_cert.p12 ,\n     upload_file_size :1023,\n     slug : 01C6FA2R4CB772QTDETBE0MENP ,\n     processed :true,\n     certificate_password : ,\n     is_expose :true,\n     is_protected :true\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuilds", 
            "text": "Get the builds of a specific app.  Status codes ( status ) and related status texts ( status_text ):   status =0: Not finished yet.  If  is_on_hold  =  true : the build did not start yet ( status_text = on-hold )  If  is_on_hold  =  false : the build is running ( status_text = in-progress ).    status =1: Build finished, with success ( status_text = success ).  status =2: Build finished, with error ( status_text = error ).  status =3: Build was aborted ( status_text = aborted ).   Build times:   the actual build time is the difference of  finished_at  and  environment_prepare_finished_at  triggered_at  is the time when the build was registered, it's always set, for every build.  Other build times might be  nil , if the build did not get to that point yet.  started_on_worker_at  is the time of when a worker started to process the build. The difference between  started_on_worker_at  and  triggered_at  is usually for how long the build was  \"on hold\"  (rarely it can also include \"waiting for worker\" but that shouldn't happen under usual circumstances).  environment_prepare_finished_at  is the time when the environment of the build was fully prepared; the build starts right after this, usually under a second.  finished_at  is when the build finished (with success or error, or the time of the \"abort\" if it was aborted).  finished_at  is  nil  in case of a running build.", 
            "title": "GET /apps/{APP-SLUG}/builds"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_26", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?limit=3'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_23", 
            "text": "{\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 44,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at : null,\n       finished_at : null,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  9d622a33d82807e4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:44:41Z ,\n       status : 0,\n       status_text :  in-progress ,\n       tag : null,\n       triggered_at :  2018-07-16T06:44:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 43,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-07-16T06:33:58Z ,\n       finished_at :  2018-07-16T06:35:19Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  0e78f1184bfd58e1 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:33:12Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-07-16T06:33:11Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 42,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-07T10:47:36Z ,\n       finished_at :  2018-06-07T10:48:59Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  62e607b18c435abf ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-07T10:46:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-07T10:46:50Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     next :  dd30bebef83bd8e7 ,\n     page_item_limit : 3,\n     total_item_count : 44\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#filtering-parameters-for-build-list", 
            "text": "It's possible to filter the builds with URL query parameters. These parameters evaluated with a logical AND operator.", 
            "title": "Filtering parameters for build list"
        }, 
        {
            "location": "/api/v0.1/#available-parameters", 
            "text": "status  (integer): In the response there will be only the builds with a certain status.  branch  (string): Retrieves the builds from the given branch.  trigger_event_type  (string): With this parameter the builds can be filtered based on the trigger event. Data type:  string  The available values are the following:  push : when the response contains only the builds which were triggered by a commit push  pull-request : when the response contains only the builds which were triggered by a pull request  pull_request_id  (integer): This parameter specifies the pull request id of the actual build, works only if  trigger_event_type  parameter is specified with the value  pull-request  after  (integer): Giving this parameter, in the response there will be only those builds which were triggered after or at the given time. The value has to be passed as UNIX timestamp.  before  (integer): Similar to the previous one this filters by the time when the build was triggered, but this retrieves the ones before or at the given time. The value has to be passed as UNIX timestamp.  workflow  (string): The response will contain only the builds triggered with the specified workflow.  commit_message  (string): In the result set there will be the builds with the given commit message, this parameter is case insensitive and also retrieves the partial matches.  build_number  (string): Retrieves build with the specified actual build number parameter.", 
            "title": "Available parameters:"
        }, 
        {
            "location": "/api/v0.1/#example-curl-requests", 
            "text": "Request with  status  filtering (aborted builds):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?status=3'  Response:  {\n   data : [\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: canceled through the API ,\n       branch :  master ,\n       build_number : 12,\n       commit_hash : null,\n       commit_message :  this build will be aborted through the API ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-06-20T22:35:03Z ,\n       finished_at :  2017-06-20T22:35:15Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  this build will be aborted through the API \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ce86c8475d31d288 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-06-20T22:35:03Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-06-20T22:35:02Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: This is an example abort build ,\n       branch :  master ,\n       build_number : 10,\n       commit_hash : null,\n       commit_message :  Abort example ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-05-30T15:47:17Z ,\n       finished_at :  2017-05-30T15:47:32Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  Abort example \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  3247e2920496e846 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-05-30T15:47:17Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-05-30T15:47:17Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 2\n  }\n}  Request with  branch  filtering (builds on  develop  branch):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?branch=develop'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  develop ,\n       build_number : 15,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T07:46:00Z ,\n       finished_at :  2017-08-17T07:47:25Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  develop \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  1e79f459d59ec74b ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T07:46:00Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T07:45:59Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 1\n  }\n}  Request with  trigger_event_type  filtering (builds triggered by  pull request ):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?trigger_event_type=pull-request'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 22,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-02-23T14:28:15Z ,\n       finished_at :  2018-02-23T14:29:41Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         branch_dest :  master ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 ,\n         pull_request_head_branch :  pull/4/head ,\n         pull_request_id : 4,\n         pull_request_merge_branch :  pull/4/merge ,\n         pull_request_repository_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 4,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4 ,\n       slug :  2a009816d8b62496 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-02-23T14:27:07Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-02-23T14:25:57Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  create_dev_file ,\n       build_number : 17,\n       commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       commit_message :  Create dev.txt\\n\\nAdd a file ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       environment_prepare_finished_at :  2017-08-17T08:48:31Z ,\n       finished_at :  2017-08-17T08:50:13Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  create_dev_file ,\n         branch_dest :  master ,\n         commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n         commit_message :  Create dev.txt\\n\\nAdd a file ,\n         pull_request_head_branch :  pull/3/head ,\n         pull_request_id : 3,\n         pull_request_merge_branch :  pull/3/merge ,\n         pull_request_repository_url :  https://github.com/slapec93/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  62f841f1497f5f30 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:47:26Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:47:25Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 16,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T08:31:31Z ,\n       finished_at :  2017-08-17T08:33:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         pull_request_id : 3\n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  b5e4e86ff62ef8ec ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:30:29Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:30:28Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 3\n  }\n}  Request with  before  filtering (builds triggered before 04.25.2017 1:34pm):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?before=1493127294'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 6,\n       commit_hash : null,\n       commit_message :  unwatch test ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T12:05:48Z ,\n       finished_at :  2017-04-25T12:09:26Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  unwatch test \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  cabbf96b36031c45 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T12:04:38Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T12:04:37Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 5,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:48:15Z ,\n       finished_at :  2017-04-25T11:51:47Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8b2a7f96da727174 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:46:44Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:59Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 4,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:43:18Z ,\n       finished_at :  2017-04-25T11:46:42Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  de020764ecdc8e57 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:43:18Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:57Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 3,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:39:24Z ,\n       finished_at :  2017-04-25T11:43:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  23c891eab2caad9c ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:38:11Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:54Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 2,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:34:52Z ,\n       finished_at :  2017-04-25T11:38:10Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  851f3cfcded7e20f ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:34:52Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:52Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 1,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:06:55Z ,\n       finished_at :  2017-04-25T11:10:47Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  51d5915205deede2 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:06:55Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:06:54Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 6\n  }\n}  Request with  after  filtering (builds triggered after 06.20.2017 10:35pm):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?after=1497998102'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 44,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-07-16T06:44:42Z ,\n       finished_at : null,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  9d622a33d82807e4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:44:41Z ,\n       status : 0,\n       status_text :  in-progress ,\n       tag : null,\n       triggered_at :  2018-07-16T06:44:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 43,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-07-16T06:33:58Z ,\n       finished_at :  2018-07-16T06:35:19Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  0e78f1184bfd58e1 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:33:12Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-07-16T06:33:11Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 42,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-07T10:47:36Z ,\n       finished_at :  2018-06-07T10:48:59Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  62e607b18c435abf ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-07T10:46:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-07T10:46:50Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 41,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-07T07:55:34Z ,\n       finished_at :  2018-06-07T07:57:17Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  dd30bebef83bd8e7 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-07T07:54:33Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-07T07:54:32Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 40,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T15:00:12Z ,\n       finished_at :  2018-06-06T15:01:56Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  0e6eae3178fc404d ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T14:58:57Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T14:58:57Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 39,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T13:33:50Z ,\n       finished_at :  2018-06-06T13:35:21Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  39b5ffcd4533efbf ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T13:32:57Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T13:32:00Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 38,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T13:31:30Z ,\n       finished_at :  2018-06-06T13:32:55Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  a42187e56ecb05bc ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T13:30:36Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T13:30:36Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 37,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-28T09:25:44Z ,\n       finished_at :  2018-05-28T09:27:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  b5d8ecabd4231264 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-28T09:24:49Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-28T09:24:49Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 36,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-28T08:48:48Z ,\n       finished_at :  2018-05-28T08:50:37Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  fc3faedc50a610ea ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-28T08:47:50Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-28T08:47:49Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 35,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-14T12:12:26Z ,\n       finished_at :  2018-05-14T12:13:57Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2a0b62127f2a91ec ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-14T12:11:25Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-14T12:11:24Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 34,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T14:42:28Z ,\n       finished_at :  2018-04-19T14:44:00Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  226f809ae60c822d ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T14:41:22Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T14:41:22Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 33,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T11:43:51Z ,\n       finished_at :  2018-04-19T11:45:14Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  366312bf17cff615 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T11:43:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T11:42:54Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 32,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T11:42:27Z ,\n       finished_at :  2018-04-19T11:43:50Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  5a4c6dfb253fd4df ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T11:41:26Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T11:41:25Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 31,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T10:03:39Z ,\n       finished_at :  2018-04-19T10:05:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8d01153a2176eb92 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T10:02:27Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T10:02:26Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 30,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T09:55:59Z ,\n       finished_at :  2018-04-19T09:57:21Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  7b0d2eceefb419ff ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T09:55:01Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T09:55:00Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 29,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T08:14:06Z ,\n       finished_at :  2018-04-19T08:15:53Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  e2c7befadbb34320 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T08:12:42Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T08:12:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 28,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T12:14:39Z ,\n       finished_at :  2018-04-11T12:16:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2669ae9ae4185120 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T12:13:40Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T12:13:39Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 27,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:18:51Z ,\n       finished_at :  2018-04-11T11:20:32Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ef73302cb5127653 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:17:19Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:13:56Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 26,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:15:55Z ,\n       finished_at :  2018-04-11T11:17:18Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  d7084f3be385d180 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:14:34Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:12:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 25,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:13:10Z ,\n       finished_at :  2018-04-11T11:14:33Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  eddd8244fecb7eeb ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:12:08Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:12:08Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 24,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T10:54:10Z ,\n       finished_at :  2018-04-11T10:55:27Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2f05c9e0f85dfc60 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T10:52:56Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T10:52:56Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 23,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-03-08T11:18:53Z ,\n       finished_at :  2018-03-08T11:20:17Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  fe2a0055cc8aa878 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-03-08T11:18:53Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-03-08T11:18:10Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 22,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-02-23T14:28:15Z ,\n       finished_at :  2018-02-23T14:29:41Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         branch_dest :  master ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 ,\n         pull_request_head_branch :  pull/4/head ,\n         pull_request_id : 4,\n         pull_request_merge_branch :  pull/4/merge ,\n         pull_request_repository_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 4,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4 ,\n       slug :  2a009816d8b62496 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-02-23T14:27:07Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-02-23T14:25:57Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 21,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-02-23T14:25:52Z ,\n       finished_at :  2018-02-23T14:27:06Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  dc60d8be63011e29 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-02-23T14:25:52Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-02-23T14:25:51Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 20,\n       commit_hash : null,\n       commit_message :  generate an APK ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-11-08T13:24:33Z ,\n       finished_at :  2017-11-08T13:26:54Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  generate an APK ,\n         workflow_id :  gen-apk \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ddf4134555e833d8 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-11-08T13:24:33Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-11-08T13:24:33Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  gen-apk \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 19,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T09:13:11Z ,\n       finished_at :  2017-08-17T09:14:37Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  secondary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8ee5e483b79fdfd4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T09:12:05Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T09:10:41Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  secondary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 18,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T09:10:31Z ,\n       finished_at :  2017-08-17T09:12:04Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  601e080954bbd57b ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T09:09:24Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T09:09:23Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  create_dev_file ,\n       build_number : 17,\n       commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       commit_message :  Create dev.txt\\n\\nAdd a file ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       environment_prepare_finished_at :  2017-08-17T08:48:31Z ,\n       finished_at :  2017-08-17T08:50:13Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  create_dev_file ,\n         branch_dest :  master ,\n         commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n         commit_message :  Create dev.txt\\n\\nAdd a file ,\n         pull_request_head_branch :  pull/3/head ,\n         pull_request_id : 3,\n         pull_request_merge_branch :  pull/3/merge ,\n         pull_request_repository_url :  https://github.com/slapec93/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  62f841f1497f5f30 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:47:26Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:47:25Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 16,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T08:31:31Z ,\n       finished_at :  2017-08-17T08:33:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         pull_request_id : 3\n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  b5e4e86ff62ef8ec ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:30:29Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:30:28Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  develop ,\n       build_number : 15,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T07:46:00Z ,\n       finished_at :  2017-08-17T07:47:25Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  develop \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  1e79f459d59ec74b ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T07:46:00Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T07:45:59Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 14,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-07-19T16:29:59Z ,\n       finished_at :  2017-07-19T16:31:38Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  9fb8eaaa4bdd3763 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-07-19T16:28:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-07-19T16:28:50Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 13,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-07-19T16:26:33Z ,\n       finished_at :  2017-07-19T16:27:50Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  78c605ea44677118 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-07-19T16:23:01Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-07-19T16:23:00Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: canceled through the API ,\n       branch :  master ,\n       build_number : 12,\n       commit_hash : null,\n       commit_message :  this build will be aborted through the API ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-06-20T22:35:03Z ,\n       finished_at :  2017-06-20T22:35:15Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  this build will be aborted through the API \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ce86c8475d31d288 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-06-20T22:35:03Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-06-20T22:35:02Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 33\n  }\n}  Request with  workflow  filtering (builds triggered with  secondary  workflow):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?workflow=secondary'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 19,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T09:13:11Z ,\n       finished_at :  2017-08-17T09:14:37Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  secondary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8ee5e483b79fdfd4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T09:12:05Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T09:10:41Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  secondary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 1\n  }\n}  Request with  commit_message  filtering (builds with commit message __):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?commit_message=build%20will%20be%20aborted'  Response:  {\n   data : [\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: canceled through the API ,\n       branch :  master ,\n       build_number : 12,\n       commit_hash : null,\n       commit_message :  this build will be aborted through the API ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-06-20T22:35:03Z ,\n       finished_at :  2017-06-20T22:35:15Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  this build will be aborted through the API \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ce86c8475d31d288 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-06-20T22:35:03Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-06-20T22:35:02Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 1\n  }\n}  Request with  build_number  filtering (builds with commit message __):  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?build_number=3'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 3,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:39:24Z ,\n       finished_at :  2017-04-25T11:43:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  23c891eab2caad9c ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:38:11Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:54Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 1\n  }\n}", 
            "title": "Example curl requests"
        }, 
        {
            "location": "/api/v0.1/#sorting-parameters-for-build-list", 
            "text": "There are two available sorting parameter for this endpoint:   created_at :  descending order by the  created_at  attribute (default setting)  running_first :  it's also ordered by  created_at  in descending order, but all running builds are listed first and then the builds with other status   Note: sorting the list by  running_first  doesn't support paging parameters", 
            "title": "Sorting parameters for build list"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_27", 
            "text": "Request:  curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds?sort_by=running_first'  Response:  {\n   data : [\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 44,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-07-16T06:44:42Z ,\n       finished_at : null,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  9d622a33d82807e4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:44:41Z ,\n       status : 0,\n       status_text :  in-progress ,\n       tag : null,\n       triggered_at :  2018-07-16T06:44:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 43,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-07-16T06:33:58Z ,\n       finished_at :  2018-07-16T06:35:19Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  0e78f1184bfd58e1 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-07-16T06:33:12Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-07-16T06:33:11Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 42,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-07T10:47:36Z ,\n       finished_at :  2018-06-07T10:48:59Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  62e607b18c435abf ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-07T10:46:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-07T10:46:50Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 41,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-07T07:55:34Z ,\n       finished_at :  2018-06-07T07:57:17Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  dd30bebef83bd8e7 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-07T07:54:33Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-07T07:54:32Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 40,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T15:00:12Z ,\n       finished_at :  2018-06-06T15:01:56Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  0e6eae3178fc404d ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T14:58:57Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T14:58:57Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 39,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T13:33:50Z ,\n       finished_at :  2018-06-06T13:35:21Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  39b5ffcd4533efbf ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T13:32:57Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T13:32:00Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 38,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-06-06T13:31:30Z ,\n       finished_at :  2018-06-06T13:32:55Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  a42187e56ecb05bc ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-06-06T13:30:36Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-06-06T13:30:36Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 37,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-28T09:25:44Z ,\n       finished_at :  2018-05-28T09:27:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  b5d8ecabd4231264 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-28T09:24:49Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-28T09:24:49Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 36,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-28T08:48:48Z ,\n       finished_at :  2018-05-28T08:50:37Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  fc3faedc50a610ea ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-28T08:47:50Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-28T08:47:49Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 35,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-05-14T12:12:26Z ,\n       finished_at :  2018-05-14T12:13:57Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2a0b62127f2a91ec ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-05-14T12:11:25Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-05-14T12:11:24Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 34,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T14:42:28Z ,\n       finished_at :  2018-04-19T14:44:00Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  226f809ae60c822d ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T14:41:22Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T14:41:22Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 33,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T11:43:51Z ,\n       finished_at :  2018-04-19T11:45:14Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  366312bf17cff615 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T11:43:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T11:42:54Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 32,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T11:42:27Z ,\n       finished_at :  2018-04-19T11:43:50Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  5a4c6dfb253fd4df ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T11:41:26Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T11:41:25Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 31,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T10:03:39Z ,\n       finished_at :  2018-04-19T10:05:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8d01153a2176eb92 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T10:02:27Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T10:02:26Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 30,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T09:55:59Z ,\n       finished_at :  2018-04-19T09:57:21Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  7b0d2eceefb419ff ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T09:55:01Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T09:55:00Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 29,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-19T08:14:06Z ,\n       finished_at :  2018-04-19T08:15:53Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  e2c7befadbb34320 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-19T08:12:42Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-19T08:12:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 28,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T12:14:39Z ,\n       finished_at :  2018-04-11T12:16:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2669ae9ae4185120 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T12:13:40Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T12:13:39Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 27,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:18:51Z ,\n       finished_at :  2018-04-11T11:20:32Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ef73302cb5127653 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:17:19Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:13:56Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 26,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:15:55Z ,\n       finished_at :  2018-04-11T11:17:18Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  d7084f3be385d180 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:14:34Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:12:41Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 25,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T11:13:10Z ,\n       finished_at :  2018-04-11T11:14:33Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  eddd8244fecb7eeb ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T11:12:08Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T11:12:08Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 24,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2018-04-11T10:54:10Z ,\n       finished_at :  2018-04-11T10:55:27Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  primary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2f05c9e0f85dfc60 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-04-11T10:52:56Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-04-11T10:52:56Z ,\n       triggered_by :  bitrise_api_doc ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 23,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-03-08T11:18:53Z ,\n       finished_at :  2018-03-08T11:20:17Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  fe2a0055cc8aa878 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-03-08T11:18:53Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-03-08T11:18:10Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 22,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-02-23T14:28:15Z ,\n       finished_at :  2018-02-23T14:29:41Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         branch_dest :  master ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 ,\n         pull_request_head_branch :  pull/4/head ,\n         pull_request_id : 4,\n         pull_request_merge_branch :  pull/4/merge ,\n         pull_request_repository_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 4,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/4 ,\n       slug :  2a009816d8b62496 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-02-23T14:27:07Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-02-23T14:25:57Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  gradle-plugin-v3 ,\n       build_number : 21,\n       commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       commit_message :  gradle android plugin v3, gradle v4 ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n       environment_prepare_finished_at :  2018-02-23T14:25:52Z ,\n       finished_at :  2018-02-23T14:27:06Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  gradle-plugin-v3 ,\n         commit_hash :  cad2bc7b90085a9cfab58bbc7ead52ea913b9c13 ,\n         commit_message :  gradle android plugin v3, gradle v4 \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  dc60d8be63011e29 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2018-02-23T14:25:52Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2018-02-23T14:25:51Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 20,\n       commit_hash : null,\n       commit_message :  generate an APK ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-11-08T13:24:33Z ,\n       finished_at :  2017-11-08T13:26:54Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  generate an APK ,\n         workflow_id :  gen-apk \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ddf4134555e833d8 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-11-08T13:24:33Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-11-08T13:24:33Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  gen-apk \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 19,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T09:13:11Z ,\n       finished_at :  2017-08-17T09:14:37Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         workflow_id :  secondary \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8ee5e483b79fdfd4 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T09:12:05Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T09:10:41Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  secondary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 18,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T09:10:31Z ,\n       finished_at :  2017-08-17T09:12:04Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  601e080954bbd57b ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T09:09:24Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T09:09:23Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  create_dev_file ,\n       build_number : 17,\n       commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       commit_message :  Create dev.txt\\n\\nAdd a file ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b170936b1281a1cfd01fd7d19559793aae1b891a ,\n       environment_prepare_finished_at :  2017-08-17T08:48:31Z ,\n       finished_at :  2017-08-17T08:50:13Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  create_dev_file ,\n         branch_dest :  master ,\n         commit_hash :  b170936b1281a1cfd01fd7d19559793aae1b891a ,\n         commit_message :  Create dev.txt\\n\\nAdd a file ,\n         pull_request_head_branch :  pull/3/head ,\n         pull_request_id : 3,\n         pull_request_merge_branch :  pull/3/merge ,\n         pull_request_repository_url :  https://github.com/slapec93/sample-apps-android-sdk22.git \n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  62f841f1497f5f30 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:47:26Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:47:25Z ,\n       triggered_by :  webhook ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 16,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T08:31:31Z ,\n       finished_at :  2017-08-17T08:33:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         pull_request_id : 3\n      },\n       pull_request_id : 3,\n       pull_request_target_branch :  master ,\n       pull_request_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/pull/3 ,\n       slug :  b5e4e86ff62ef8ec ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T08:30:29Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T08:30:28Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  develop ,\n       build_number : 15,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-08-17T07:46:00Z ,\n       finished_at :  2017-08-17T07:47:25Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  develop \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  1e79f459d59ec74b ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-08-17T07:46:00Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-08-17T07:45:59Z ,\n       triggered_by :  curl ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 14,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-07-19T16:29:59Z ,\n       finished_at :  2017-07-19T16:31:38Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  9fb8eaaa4bdd3763 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-07-19T16:28:51Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-07-19T16:28:50Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 13,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-07-19T16:26:33Z ,\n       finished_at :  2017-07-19T16:27:50Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  78c605ea44677118 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-07-19T16:23:01Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-07-19T16:23:00Z ,\n       triggered_by :  manual-api-demo ,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: canceled through the API ,\n       branch :  master ,\n       build_number : 12,\n       commit_hash : null,\n       commit_message :  this build will be aborted through the API ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-06-20T22:35:03Z ,\n       finished_at :  2017-06-20T22:35:15Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  this build will be aborted through the API \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  ce86c8475d31d288 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-06-20T22:35:03Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-06-20T22:35:02Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 11,\n       commit_hash :  b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n       commit_message :  API Demo - commit hash example\\n\\nThis build has a specified commit hash ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n       environment_prepare_finished_at :  2017-06-20T22:31:28Z ,\n       finished_at :  2017-06-20T22:33:00Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_hash :  b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n         commit_message :  API Demo - commit hash example\\n\\nThis build has a specified commit hash \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  c518445a250a5848 ,\n       stack_config_type :  standard1 ,\n       stack_identifier :  linux-docker-android ,\n       started_on_worker_at :  2017-06-20T22:31:28Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-06-20T22:31:27Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason :  User api-demo requested to abort this build with reason: This is an example abort build ,\n       branch :  master ,\n       build_number : 10,\n       commit_hash : null,\n       commit_message :  Abort example ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-05-30T15:47:17Z ,\n       finished_at :  2017-05-30T15:47:32Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  Abort example \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  3247e2920496e846 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-05-30T15:47:17Z ,\n       status : 3,\n       status_text :  aborted ,\n       tag : null,\n       triggered_at :  2017-05-30T15:47:17Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 9,\n       commit_hash :  b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n       commit_message :  API Demo - commit hash example\\n\\nThis build has a specified commit hash ,\n       commit_view_url :  https://github.com/bitrise-samples/sample-apps-android-sdk22/commit/b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n       environment_prepare_finished_at :  2017-05-16T20:04:28Z ,\n       finished_at :  2017-05-16T20:05:05Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_hash :  b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b ,\n         commit_message :  API Demo - commit hash example\\n\\nThis build has a specified commit hash \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  5267720a89cb298d ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-05-16T20:04:28Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-05-16T20:02:25Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 8,\n       commit_hash : null,\n       commit_message :  API demo\\n\\nmultiline commit message example ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-05-16T20:03:33Z ,\n       finished_at :  2017-05-16T20:04:27Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  API demo\\n\\nmultiline commit message example \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  627cfd1a3f715134 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-05-16T20:02:25Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-05-16T20:00:18Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 7,\n       commit_hash : null,\n       commit_message :  API demo, commit hash example 1 ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-05-16T19:59:05Z ,\n       finished_at :  2017-05-16T20:02:19Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  API demo, commit hash example 1 \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  2976b894d40cf339 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-05-16T19:59:05Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-05-16T19:59:04Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 6,\n       commit_hash : null,\n       commit_message :  unwatch test ,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T12:05:48Z ,\n       finished_at :  2017-04-25T12:09:26Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master ,\n         commit_message :  unwatch test \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  cabbf96b36031c45 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T12:04:38Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T12:04:37Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 5,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:48:15Z ,\n       finished_at :  2017-04-25T11:51:47Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  8b2a7f96da727174 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:46:44Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:59Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 4,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:43:18Z ,\n       finished_at :  2017-04-25T11:46:42Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  de020764ecdc8e57 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:43:18Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:57Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 3,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:39:24Z ,\n       finished_at :  2017-04-25T11:43:16Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  23c891eab2caad9c ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:38:11Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:54Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 2,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:34:52Z ,\n       finished_at :  2017-04-25T11:38:10Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  851f3cfcded7e20f ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:34:52Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:34:52Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    },\n    {\n       abort_reason : null,\n       branch :  master ,\n       build_number : 1,\n       commit_hash : null,\n       commit_message : null,\n       commit_view_url : null,\n       environment_prepare_finished_at :  2017-04-25T11:06:55Z ,\n       finished_at :  2017-04-25T11:10:47Z ,\n       is_on_hold : false,\n       original_build_params : {\n         branch :  master \n      },\n       pull_request_id : 0,\n       pull_request_target_branch : null,\n       pull_request_view_url : null,\n       slug :  51d5915205deede2 ,\n       stack_config_type : null,\n       stack_identifier : null,\n       started_on_worker_at :  2017-04-25T11:06:55Z ,\n       status : 1,\n       status_text :  success ,\n       tag : null,\n       triggered_at :  2017-04-25T11:06:54Z ,\n       triggered_by : null,\n       triggered_workflow :  primary \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 44\n  }\n}", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuildsbuild-slug", 
            "text": "Get a specific build's data.  Status codes ( status ) and related status texts ( status_text ):  See the  GET /apps/{APP-SLUG}/builds  endpoint description  Build times:  See the  GET /apps/{APP-SLUG}/builds  endpoint description", 
            "title": "GET /apps/{APP-SLUG}/builds/{BUILD-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_28", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_24", 
            "text": "{\n   data : {\n     abort_reason :  User api-demo requested to abort this build with reason: This is an example abort build ,\n     branch :  master ,\n     build_number : 10,\n     commit_hash : null,\n     commit_message :  Abort example ,\n     commit_view_url : null,\n     environment_prepare_finished_at :  2017-05-30T15:47:17Z ,\n     finished_at :  2017-05-30T15:47:32Z ,\n     is_on_hold : false,\n     original_build_params : {\n       branch :  master ,\n       commit_message :  Abort example \n    },\n     pull_request_id : 0,\n     pull_request_target_branch : null,\n     pull_request_view_url : null,\n     slug :  3247e2920496e846 ,\n     stack_config_type : null,\n     stack_identifier : null,\n     started_on_worker_at :  2017-05-30T15:47:17Z ,\n     status : 3,\n     status_text :  aborted ,\n     tag : null,\n     triggered_at :  2017-05-30T15:47:17Z ,\n     triggered_by : null,\n     triggered_workflow :  primary \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuildsbuild-sluglog", 
            "text": "Get the  log info  of a specific Build.  The log info includes the last couple of  chunks  ( log_chunks ) of the build log,\nas well as other meta infos like how many chunks were generated during the build ( generated_log_chunks_num ).  Once the build is finished and the full log is available in the log archives ( is_archived : true )\nthe response will also include an  expiring , read only download URL ( expiring_raw_log_url ).  There's no guarantee for how long this expiring raw log URL will exist (other than \"for a couple of minutes\"),\nso please  do not store  this URL! If you want to retrieve the full (raw) log please:   Call this log info endpoint  And right after that, when you get the response, parse the  expiring_raw_log_url  from it and send a  GET  request to that URL as soon as possible.   Important:  when you send your  GET  request to the  expiring_raw_log_url  URL please  do not  include the Authorization headers.\nIn fact, you should not include any special header at all; just create a simple GET request and send it to the  expiring_raw_log_url  url.\nThe  expiring_raw_log_url  is configured so that it does not require any other parameter other than what's included in the URL.  When a build is running, the log chunks can be retrieved with filtering, because in this case every response contain a  timestamp  which has Unix timestamp format. You can send this value in the next call as query parameter with the key  timestamp , so the next response will contain only the chunks created after the timestamp.\nThere is also a  limit  parameter which has 50 as the default value, with this you can limit the number of the retrieved log chunks.  Note: If build is finished the logs will be archived, in this case there are no filtering options, the filter parameters won't have any effect on the content of the response, the whole archived log will be retrieved.", 
            "title": "GET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/log"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_29", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/log'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_25", 
            "text": "{\n   expiring_raw_log_url :  https://bitrise-build-log-archives-production.s3.amazonaws.com/build-logs-v2/669403bffbe35909/3247e2920496e846/2194500/3247e2920496e846.log?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064446Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=eed26dff7517a84b76fe184244044f7b7043afc50434fc43f9b7646798c43081 ,\n   generated_log_chunks_num : 6,\n   is_archived : true,\n   log_chunks : [\n    {\n       chunk :  \\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n\\u001b[32;1mVersion: 1.6.1\\u001b[0m\\n\\n\\u001b[34mINFO\\u001b[0m[15:47:21] \\u001b[33;1mbitrise runs in CI mode\\u001b[0m           \\n\\u001b[34mINFO\\u001b[0m[15:47:21] \\u001b[32;1mRunning workflow:\\u001b[0m primary         \\n\\n\\u001b[34;1mSwitching to workflow:\\u001b[0m primary\\n\\n ,\n       position : 0\n    },\n    {\n       chunk :  +------------------------------------------------------------------------------+\\n| (0) activate-ssh-key@3.1.1                                                   |\\n+------------------------------------------------------------------------------+\\n| id: activate-ssh-key                                                         |\\n| version: 3.1.1                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: bash                                                                |\\n| time: 2017-05-30T15:47:26Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n|                                                                              |\\n+---+---------------------------------------------------------------+----------+\\n| \\u001b[34;1m-\\u001b[0m | \\u001b[34;1mactivate-ssh-key@3.1.1\\u001b[0m                                        | 2.32 sec |\\n+---+---------------------------------------------------------------+----------+\\n\\n                                          \u25bc\\n\\n\\u001b[33mWARN\\u001b[0m[15:47:26] The step's (activate-ssh-key@3.1.1) Run-If expression evaluated to false - skipping \\n\\u001b[34mINFO\\u001b[0m[15:47:26] The Run-If expression was: \\u001b[34;1m{{getenv \\ SSH_RSA_PRIVATE_KEY\\  | ne \\ \\ }}\\u001b[0m \\n ,\n       position : 1\n    },\n    {\n       chunk :  +------------------------------------------------------------------------------+\\n| (1) git-clone@3.4.3                                                          |\\n+------------------------------------------------------------------------------+\\n| id: git-clone                                                                |\\n| version: 3.4.3                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: go                                                                  |\\n| time: 2017-05-30T15:47:27Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n\\u001b[34mINFO\\u001b[0m[15:47:27] Start installing (golang) with apt-get       \\n\\u001b[34mINFO\\u001b[0m[15:47:27]  * \\u001b[32;1m[OK]\\u001b[0m Step dependency (go) installed, available. \\n ,\n       position : 2\n    },\n    {\n       chunk :  \\n\\u001b[34;1mGit Clone Configs:\\u001b[0m\\n- CloneIntoDir: /bitrise/src\\n- RepositoryURL: https://github.com/bitrise-samples/sample-apps-android-sdk22.git\\n\\u001b[34;1mGit Checkout Configs:\\u001b[0m\\n- Commit: \\n- Tag: \\n- Branch: master\\n- CloneDepth: \\n\\u001b[34;1mGit Pull Request Configs:\\u001b[0m\\n- PullRequestURI: \\n- PullRequestID: \\n- BranchDest: \\n- PullRequestMergeBranch: \\n- ResetRepository: No\\n\\u001b[34;1mBitrise Build Configs:\\u001b[0m\\n- BuildURL: https://www.bitrise.io/build/3247e2920496e846\\n- BuildAPIToken: XtFWIhNx22MMMA6DcPXBGw\\n\\n\\u001b[34;1mGit clone repository\\u001b[0m\\n=\\u003e git \\ init\\ \\n=\\u003e git \\ remote\\  \\ add\\  \\ origin\\  \\ https://github.com/bitrise-samples/sample-apps-android-sdk22.git\\ \\n=\\u003e git \\ fetch\\ \\n ,\n       position : 3\n    },\n    {\n       chunk :  =\\u003e git \\ checkout\\  \\ master\\ \\n=\\u003e git \\ submodule\\  \\ update\\  \\ --init\\  \\ --recursive\\ \\n\\u001b[34;1mExporting git logs\\u001b[0m\\n=\\u003e GIT_CLONE_COMMIT_HASH\\n   value: b4e7cad230e3fc2f2f84dbb455c7ac7f89a3a18b\\n\\n=\\u003e GIT_CLONE_COMMIT_MESSAGE_SUBJECT\\n   value: downgrade to com.android.tools.build:gradle:2.1.0\\n\\n=\\u003e GIT_CLONE_COMMIT_MESSAGE_BODY\\n   value: \\n\\n=\\u003e GIT_CLONE_COMMIT_AUTHOR_NAME\\n   value: Viktor Benei\\n\\n=\\u003e GIT_CLONE_COMMIT_AUTHOR_EMAIL\\n   value: viktor.benei@gmail.com\\n\\n=\\u003e GIT_CLONE_COMMIT_COMMITER_NAME\\n   value: GitHub\\n\\n=\\u003e GIT_CLONE_COMMIT_COMMITER_EMAIL\\n   value: noreply@github.com\\n\\n\\u001b[32;1mSuccess\\u001b[0m\\n|                                                                              |\\n+---+---------------------------------------------------------------+----------+\\n| \\u001b[32;1m\u2713\\u001b[0m | \\u001b[32;1mgit-clone@3.4.3\\u001b[0m                                               | 8.77 sec |\\n+---+---------------------------------------------------------------+----------+\\n\\n                                          \u25bc\\n\\n+------------------------------------------------------------------------------+\\n| (2) Sleep                                                                    |\\n+------------------------------------------------------------------------------+\\n| id: script                                                                   |\\n| version: 1.1.3                                                               |\\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\\n| toolkit: bash                                                                |\\n| time: 2017-05-30T15:47:35Z                                                   |\\n+------------------------------------------------------------------------------+\\n|                                                                              |\\n ,\n       position : 4\n    },\n    {\n       chunk :  + sleep 30\\n ,\n       position : 5\n    }\n  ],\n   timestamp : null\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuildsbuild-slugartifacts", 
            "text": "Get the artifacts for a specific build.", 
            "title": "GET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_30", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_26", 
            "text": "{\n   data : [\n    {\n       artifact_type :  file ,\n       file_size_bytes : 10,\n       is_public_page_enabled : true,\n       slug :  0d2277e50b8d32ce ,\n       title :  artifact-1.txt \n    },\n    {\n       artifact_type :  file ,\n       file_size_bytes : 11,\n       is_public_page_enabled : false,\n       slug :  b69c23de1f13b998 ,\n       title :  artifact-2.txt \n    }\n  ],\n   paging : {\n     page_item_limit : 50,\n     total_item_count : 2\n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#get-appsapp-slugbuildsbuild-slugartifactsartifact-slug", 
            "text": "Get a certain build artifact's data. The provided download URL is a presigned Amazon S3 URL which is valid for 10 minutes and then it expires.", 
            "title": "GET /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_31", 
            "text": "curl -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_27", 
            "text": "{\n   data : {\n     artifact_type :  file ,\n     expiring_download_url :  https://bitrise-prod-build-storage.s3.amazonaws.com/builds/9fb8eaaa4bdd3763/artifacts/2138393/artifact-1.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064447Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=2fd50335e5949f2c62ad431ef82fe1e94ad6c686cf15c1e3e94db7bd0cf2ed82 ,\n     file_size_bytes : 10,\n     is_public_page_enabled : true,\n     public_install_page_url :  https://www.bitrise.io/artifact/2138393/p/6e7dc9c2b99492e6aa997a2e5d3f7413 ,\n     slug :  0d2277e50b8d32ce ,\n     title :  artifact-1.txt \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#patch-appsapp-slugbuildsbuild-slugartifactsartifact-slug", 
            "text": "Set the attributes of a build artifact. In the request body have to be sent a JSON with the specified new attribute values.  Note: at this time only the  is_public_page_enabled  attribute can be set through this endpoint call. This attribute can only set for the artifacts with type  android-apk  or  ios-ipa .", 
            "title": "PATCH /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_32", 
            "text": "curl -X PATCH -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG' -d '{ is_public_page_enabled :true}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_28", 
            "text": "{\n   data : {\n     artifact_type :  android-apk ,\n     expiring_download_url :  https://bitrise-prod-build-storage.s3.amazonaws.com/builds/ddf4134555e833d8/artifacts/3205846/app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Content-Sha256=UNSIGNED-PAYLOAD\\u0026X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180716%2Fus-east-1%2Fs3%2Faws4_request\\u0026X-Amz-Date=20180716T064447Z\\u0026X-Amz-Expires=600\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=471a4490149ecbdff3f5dbd64bf612713eed326ec9dc33e76378731129d5daa4 ,\n     file_size_bytes : 607185,\n     is_public_page_enabled : true,\n     public_install_page_url :  https://www.bitrise.io/artifact/3205846/p/300e0121b50985fd631fe304d549006f ,\n     slug :  5a9f5da8d5f1057c ,\n     title :  app-debug.apk \n  }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#delete-appsapp-slugbuildsbuild-slugartifactsartifact-slug", 
            "text": "Delete a specific artifact.", 
            "title": "DELETE /apps/{APP-SLUG}/builds/{BUILD-SLUG}/artifacts/{ARTIFACT-SLUG}"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_33", 
            "text": "curl -X DELETE -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds/BUILD-SLUG/artifacts/ARTIFACT-SLUG'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_29", 
            "text": "{\n   data : {\n       artifact_type :  android-apk ,\n       file_size_bytes : 607185,\n       is_public_page_enabled : true,\n       slug :  5a9f5da8d5f1057c ,\n       title :  app-debug.apk \n    }\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugbuilds", 
            "text": "Trigger a new build.  You can trigger a new build with the specific trigger parameters defined. You can check the available parameters in the  documentation of the Build Trigger API", 
            "title": "POST /apps/{APP-SLUG}/builds"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_34", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/APP-SLUG/builds' -d '{ hook_info :{ type : bitrise }, build_params :{ branch : master , workflow_id : primary }, triggered_by : bitrise_api_doc }'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_30", 
            "text": "{\n   build_number : 44,\n   build_slug :  9d622a33d82807e4 ,\n   build_url :  https://app.bitrise.io/build/9d622a33d82807e4 ,\n   message :  webhook processed ,\n   service :  bitrise ,\n   slug :  669403bffbe35909 ,\n   status :  ok ,\n   triggered_workflow :  primary \n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#post-appsapp-slugbuildsbuild-slugabort", 
            "text": "Abort a running build.  Optionally you can specify a JSON body for the request, with an  abort_reason . With parameter  abort_with_success  you can set the type of abort, if it's set as  true , then the build will get a status with value 4, which means that it's aborted, but it counts as a successful build, this way Github will show as successful too. Also you can specify whether notifications (emails) should be sent. Example:  {\n     abort_reason :  abort with abort_with_success=true test   skip_notifications=true ,\n     abort_with_success : true,\n     skip_notifications : true\n}", 
            "title": "POST /apps/{APP-SLUG}/builds/{BUILD-SLUG}/abort"
        }, 
        {
            "location": "/api/v0.1/#example-curl-request_35", 
            "text": "curl -X POST -H 'Authorization: token THE-ACCESS-TOKEN' 'https://api.bitrise.io/v0.1/apps/{APP-SLUG}/builds/{BUILD-SLUG}/abort' -d '{ abort_reason :  abort with abort_with_success=true test   skip_notifications=true ,  abort_with_success : true, skip_notifications : true}'", 
            "title": "Example curl request"
        }, 
        {
            "location": "/api/v0.1/#example-response_31", 
            "text": "{\n     status :  ok \n}  If the build is already finished or aborted you'll get an error:  {\n     error_msg :  Build already finished, can't abort it. \n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/v0.1/#wip-working-on-it", 
            "text": "See  https://discuss.bitrise.io/t/bitrise-api-v0-1-work-in-progress/1554 .", 
            "title": "WIP / working on it"
        }, 
        {
            "location": "/api/v0.1/#feature-endpoint-requests", 
            "text": "If you want to request a new API feature / endpoint, please do it here:  http://discuss.bitrise.io/t/bitrise-public-api/37", 
            "title": "Feature / endpoint requests"
        }
    ]
}